{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5de7bd23-1ad2-40bc-a900-c78434b13823",
        "name": "Clear Cache",
        "item": [
          {
            "id": "71376053-2125-430d-a4c9-f4571a115ea2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a4793b6-a404-4b8b-a24f-fc5b78a84dfa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c2f81fff-3b2f-42e4-9e04-867fbf51eb84"
                }
              }
            ]
          },
          {
            "id": "a51796bb-4f24-4689-8d35-8ad93075179c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c94354fa-2d13-4528-9b48-e146fb8d48a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3fa2bb91-8712-4140-af5e-a6369367df0f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9796c6d9-4d1d-487d-b783-d606b8b7f575",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b04f2d3a-a793-4692-8507-b75f1610e76b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d2366b8-fbeb-4768-99da-4cd310f38906",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88c3a44e-1480-4ae8-87ef-3db15c37259b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e2c0cf0-17be-4863-85b7-29f23b2d64c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bbdd28a3-b96d-4086-bc56-b869b80311b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea341fd6-13ca-474b-8dd2-bb5845035b56"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44f9c829-2926-4af4-b270-8164ef482d10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5703d122-916d-459b-83d6-a72b0ee3c14d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc354920-be7f-4fca-8ef3-396aedb71587",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3b1fec3b-b9a2-42d6-815a-082a3c0d7ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d45e36f9-cbc4-467a-8853-6e2b2b80a365",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "561fe589-f0f8-4a37-affd-ffe7a23aaf8b"
            }
          }
        ]
      },
      {
        "id": "530c1bdd-082e-4e4a-8a27-6d31ec8e33ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2befac02-7f0c-44f8-93f5-52c0b606510b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0f7e8b8-a5f9-49b9-903b-12723ecf3392",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e8fbb4b-ad50-4fa7-bead-c9ee812d144e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae83f39-c292-4479-9d5d-7f6fc55fca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "688b1bb7-0300-483a-a31d-ba94ab173122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0688d10-21b0-4fb6-b2e0-01050f3d2d6c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f015ed8-1096-440e-9870-a8bfe583c6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "089e35ae-a234-4a11-8473-82c88b42685b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58870ccb-fc87-4ed4-aef8-945a305fec6c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f84a84b-f19b-45c4-aaaf-8188b9ab5521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bef7503-00b3-44f4-9933-7a6374655da8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34c64d8e-280f-44d2-b0ae-3666e6442b24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1956d384-354b-4c9d-ac5c-516916bab4e9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b7b561-dd69-4194-9c1e-726244eb5836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3b88fc1-f617-4dd8-af00-736f4294a50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228182d7-8cc6-4f4b-ba0d-444684047c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c6ff5d-70f3-423a-90f1-6ae585352d9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "784cedd1-5d44-4266-a2f5-2bf196017964",
            "name": "Positive Testing",
            "item": [
              {
                "id": "294c28cf-d0d9-42d6-b961-24b579d1a8c5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b08c7bf9-468c-4b9f-b2d0-0da83b8618f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "37468f38-aafb-42ec-bdba-8d45c423e93a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43b87887-e0f3-4d22-b13c-77bd6c1a40f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "55c3410f-5b22-449b-9cb5-b7cb30402d6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aea39afe-bdb0-4a11-95e0-1d567800bee8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fff23e4c-7272-4ed9-a085-c615680f7001"
            }
          }
        ]
      },
      {
        "id": "0a1b41e1-c12c-4c0d-8c69-2ccb6ead07f8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "116573b3-9c63-4614-a50c-8606e43ea158",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0970f9b1-b22e-4e6c-84fa-01baa11e7157",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "301eccc1-69cb-405d-be3b-65c2945da38e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fdfdfc-ff0c-4b95-81d0-dad7cd6a9600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87655e58-0d4c-4a1d-bd15-e371668b7be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c1757c-6bf4-4dca-b54d-8c024392cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6f5daea-7fd9-4914-b210-8f868050c4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e298978-3c0b-4037-83fa-7dd271d6e70d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b347dd-815c-4f29-af4a-d6c6b54f8ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef0be43-a1f2-4f73-bbce-c4681aa3c7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579505cd-4b5c-4d9d-b628-6c0ac67331ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2999677f-9d15-4bd5-aad8-65c8b97cf99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6421dca-6072-4fc5-878e-6f48ff6db4c7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee8b80a-4b1d-45fe-a998-7b2312fef188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7c093d-7560-4bcb-b515-9ef92ef47323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7daa5e-f527-4c20-820c-a8cfd5993bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1014ccbe-2958-41c9-ba2d-6b486584acb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3dad07-5738-4711-9d63-f4929aa00493",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d9b159-f273-4b21-9b61-9512aa940c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96d29ee-53b4-4cbd-9d38-933ab40f4ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7566c45-5770-4c42-9a3b-2bb546ebb3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37279699-ad39-4215-b1ed-394a5e3e9d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1bcab1-2886-40ea-85a6-676d3fa875db",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294e76d3-0a32-42ef-a5f8-f9bc1d833ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17385213-ec36-435f-9a0d-a6583b446596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4347b95f-79f1-4183-a543-7e5ae07b8221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a394f276-4c0f-48c7-851c-d09a2089c873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a957c241-5075-456a-a68f-26132f41ddbe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887cffa6-404a-4f6d-8b76-ed0b53547215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb8f8fe-35c1-4c60-abf9-600195cc4470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6611ab7-5125-437f-ae49-28dcd8482629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe19e887-ca8b-4594-b75a-5e298cd9fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5a271f-5e0e-4a9d-80f5-ba40f4a07f48",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960db909-aa6e-4c76-adf6-e324f59f5333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347e5ba0-dc35-43fe-848b-744e43674527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d813533f-aee3-44d4-98ca-110eede51afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43f99da0-cfdf-4be2-bba7-72c426cdf0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3791a56e-0761-433e-bae1-de07f8d7b681",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5b48e3-899a-4773-9fdd-e8e5578769da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908fd773-a78d-40c5-92d3-81fe511ade9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4284c6e-c987-4039-be29-196773525815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "464a1056-6af0-497b-a7d0-771c4d2f75a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcdb288-24a0-400e-888a-762dd382c52b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0da604-5d59-4c5e-8041-3cbd2a7686f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a85d72-581f-4ca6-8ce3-4cb2aa30d1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199e2c4d-8268-4d36-9719-2a2e78c234a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "916e12a1-25e9-4c1d-9d75-c73669a9a16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259833c4-8f28-402a-b84f-40786b3e3f90",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e13679-6639-4cb5-bf50-3b6394c317d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de8ecfe-d789-4f04-9538-caeadefb7b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec90a633-4f13-47cf-944c-5a81d4649d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b599b43-2925-4400-b995-22031e4a0c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c8c23d-1787-42e4-b99f-3883ad79d764",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b9da7a-70f3-456f-b448-c8d62b2e4a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc981f4-40f8-4a59-967c-623f5291fe68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308737f1-eac1-4431-a099-b1fcd6c1ccff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1e7407c-f7ce-40b7-a24b-3b535831e22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd2c8f4-9d68-4fd8-8659-4b284b2f6498",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f55f30-c1bb-477e-b916-171dd171f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fc1b91-e47a-4379-8109-7586b03b1a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150787d7-5e25-42b4-90e9-61ce08b7e8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32e6f85c-1df2-41a2-9e89-de1e7ce1e32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a96343-9597-4719-bf4f-1143137c0a51",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25632c6d-0cdc-49e9-9d08-fd91113a02eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc2d830-d905-4149-a058-d7d99adcd1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f531bbe-7c18-449e-bb83-5afa2c94fed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "730007fb-0171-4fc7-92f5-8858039044d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cd62df-3d8a-4cea-91d7-69609e7f3f0c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d6ebf0-c191-48df-ad14-f4b21ae2b39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186bcaae-8ac3-48ef-a943-5e8bb83035c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e67655c-f67e-4743-9b0c-3d9e11e96a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2891f58c-30c8-4850-876e-3a2b49090800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1983771-fcf5-46b1-9858-da9f204d88b6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9634c9b5-d610-481a-bc8c-e6958b0d6b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b328b36f-a65a-44d1-a95b-b98119597d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb3cdd2-e3ce-41b0-a1d8-5d449d9081e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89cb0508-543e-48fb-b2a6-19f7e1b47820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d85e22-0e94-405a-abec-a1911b610395",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814ee1e2-96de-46f2-8e32-91dd80534b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3df4a88-76de-4a99-94eb-7be8cdfe06af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5adcaa9-4bd6-4b4d-b267-2e659549e764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cdc1c68-c098-4c19-aee9-69222821adbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29706ae-445c-4c4d-9367-5818ec9bc83a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0677333b-0276-4a2b-b6dc-2571a71271ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a2c893-b43b-4b8f-a88d-b975e23c4079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109f6604-3387-417e-bcf9-bb9f6ca1c724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "894edee6-c5c2-4821-ab07-583e73704e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083228d0-b559-4f5e-a1d8-488ce0b35b15",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a7fde9-7c3b-42c9-8aac-2f4c5ff2868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d8dec3-bc75-4dcd-b592-51e99c36acb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ac6e60-6768-4434-91b1-8399cc8e1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e10c4e3-04fe-4807-a5d8-a2e5da003e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b6aa6f-0600-48bd-acde-883dec77d5e5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614cd94-e68c-41f7-a31d-35d8d682eb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22974bb-65a6-4a59-84fc-3201faf2334d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dca39d9-6971-4209-95ce-d52d204d7e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d49411-f568-4c6e-ac6a-866504ee99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3726dd-d6f2-4f8c-9b1f-bca1edcd76eb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f538fb35-048f-411f-bfe6-d0ff1878b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ceb3317-3e5d-4189-927f-c388579ea9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c726b-14d0-4c42-844b-8ea38f20bb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "464c1334-efd8-4af9-974f-4cba62ae20f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94f830d-ea1f-4db8-ba5f-27c1d25679b0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e0344b-bc18-4e2f-a251-7602dce16b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3e0d99-3238-4db3-ac2a-4ef80ad6f5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50aadf46-ffb0-472d-869c-0b248cd3fd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc21c977-e4f1-4932-b966-4be42c8716ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3820852-39fd-41d3-b140-55ea2dbc1cd4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc940d9-4ba6-41ff-b7d5-505ec3275551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343d4aeb-8043-445c-a131-8ae8b7686c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd464278-cc33-45ae-8064-3a0f525b5045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13bd5f59-4c8e-46c2-8e10-cffb0fc4118a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc83b1b-0f92-48bf-a622-b4fe22543932",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d479e8e4-a2c1-4425-811d-fb7f73557cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75af2a88-2863-43ee-bc83-652857060ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131dfa4-0bd5-4276-9256-0fba0fd25089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b048f0d-3aa9-4839-8823-4e17404215f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701acb73-2a3f-4a63-8f10-a3233b99a8aa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3716d3a7-bbf9-45b1-b2c0-3139804ce86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5391128c-5609-4ce2-a00c-96ddc74f1542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9649e87a-c07f-45fc-af74-078fe576aa32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "137df69f-9dbf-45ea-bd4a-60831c53cd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2601b42f-6d2e-4acd-ae63-334ff5ca8fb6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5006fb87-72aa-4cf9-a6a8-7b4ebe8d98f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc40756-01d6-4332-bd6a-2669a1d477d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f91f51-c825-4a9b-8ea2-4997338dd4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2ea715-e199-402b-bb48-d91ec2a2bf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4bc648-d51d-4fb2-acb2-4885d3d89f0d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bc8ead-7866-4e0c-aad9-edcd1c248dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b2bb98-e6a1-4486-bc7b-b305da901814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1f30c0-b70a-42ac-92d7-f66324924fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a43e4490-6fec-4856-a2a3-7b18fc6d7501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d62108a-4778-4490-b51a-ef7af87c0e3a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1261f085-bc0b-43f0-8eda-576e54414273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2939248d-9bae-4c85-8717-b22a1ab72019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809185c5-328e-4f2f-97a8-c1d71cea6ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8793b874-0f5c-4b0a-84cd-4c9513b6b927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f99b585-afec-4aa2-8d01-126e1a7cd5a9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6a13b0-4509-4aa0-b09f-cfd06019894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa8cbcf-62a9-436c-a938-abc6d154b644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6ade8d-3987-425f-a21b-ab2e02f5c846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c248e57a-4767-4d89-9870-abd64c9eae04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b6c658-4fda-4874-905a-8796e4a4cf6f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19981814-b91e-41e6-8076-ce1b93d53d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f90164-f8ae-4277-882a-c9b220c09755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1a4fd7-91e2-4026-b877-e3d9fb4d0a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e40757f7-b575-4a4d-9377-93c1cb467d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9246586e-ec21-4be2-a040-b382c03497e6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2013521-71d8-4ff1-9bdd-1ec1b4897013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3f100c-d937-423c-883e-5160391a93ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca12b5e-6d2f-4025-87df-e2b5a2e28247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e67e28-2e3f-4b2f-8805-ce32ca8a3798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bb7a35-68db-430b-8848-5d999c4a9035",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa93eba-6602-497e-a49b-b8bd931c8149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d84901f-853c-409a-bab8-05adfc6b3995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9a5aff-cbc1-4a32-b620-86de1787ad7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a180d8fd-9d0b-4c47-9236-a0b30f484469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea9a8ed-5bd6-4641-887e-0de0fe241f7e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b50a7e-819c-42b7-8292-f9e0d3d8920f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba8365b-361e-453f-801b-be01671fff88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75317286-b3a7-4fc8-a43b-976273c075ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35eef926-f54a-4bf1-bdb4-9c0e51c6d021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d052ae-4814-4dc4-ac94-03ab34785f8f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36cedd5-8503-4485-b63b-e059e1da45ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0614139c-49f3-4f81-815f-48f74cc856d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39f569e-0117-4c30-9849-713e624f2c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ad38c2-ab5d-4e81-a90a-35e9d5abba1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d47f6cf-e728-4295-9cfd-f23361b8f657",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cea24e-0dd6-44b9-861a-458c87c01f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166980c7-80c3-4119-8bb6-6a4a3d124c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da19c824-9fb9-42ac-b593-26e7c666ba16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f66b07e-5090-4da0-80ea-89ca7b51f972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbee7e25-2aa9-4d84-ba40-12c3ea554b75",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5722ebfe-004c-4c3e-983a-771442212589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c036e6fb-a3a5-4f5b-a626-88be8e395454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c3a005-64df-4036-b54d-8fc7dda72981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc23f24-fabf-42ca-9209-a69ac0d8ea42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f86b3-d89d-48b5-a36d-9d67163333d8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d003f7be-5f33-43ec-8564-43c41eeb193a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3da7604a-829b-487d-811e-b75d3cd434a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b70227d-8670-4745-b601-088d84784d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f417112-37fd-48ea-8f05-35f663e9bb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e6839-51be-4c7b-b45e-660c79f4dff8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a0d99a-803c-4d1e-833b-54dfc12eae48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdd3d4b-d70f-4af1-befa-6b742a4ab28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5012d014-f668-4d7e-80fa-af59b18fe8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9df3dec-4264-414c-b8ed-abccf79299ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3c9962-a364-482e-9c1c-9d64f7714545",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d43da6-b124-4a26-9202-a62566bdb146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185504a5-9a88-4986-96ee-a0808e126e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b893651-cdd5-4a06-a670-4743b2004477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b623b270-997a-4610-89cd-ccd24aa49932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ccf0fe-61e4-43b3-8649-22e0a8936b28",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6883db3-3176-4488-b26b-11e114180a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d167d75-c7b6-4adc-8ed7-6409eef26ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6213e5ec-2adf-4481-8834-6b22c108f8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02312260-358d-4628-9b56-e2c05f4591b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6ecb06-a36d-4b44-9caf-7068aecde874",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f58789-8377-45a3-b5b5-62985a4b9547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4790a98a-b488-414f-87b8-d7756f441d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f0dd26-9215-4631-91b2-b8b5f8a70a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "283a143f-f0d1-46fa-a89a-c408a1137340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d88f509-c116-4e73-b72a-353cf00d9704",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79344104-4e98-423f-80f6-97f870ed52c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f468cad3-e747-4f43-8120-7458621b7517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21992474-a3e1-46da-97cf-7239993b71f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5caa4897-f666-45b2-846d-54e8634416dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3340bfb4-6590-4d41-912d-f4b0078149d3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a835f014-0eb2-4e35-a2ff-9e0bd4f89449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5224cf4-e097-4bed-9229-08620fb364f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685e32db-da6d-4898-bd0f-963bf9c55727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "01053b55-5870-47de-a0b0-5270ab7af62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5900b316-c150-4725-9081-f3a3c1b7e5d0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708db141-c647-445b-b8a7-38a60463b5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84dcd21-74e0-4ec7-b630-f5ca13191142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd3ab6d-8c69-4cab-8ba9-81fb5b8a37b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "272c8679-e1c2-4b64-b79a-8dd2bb83f684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb275d20-ca84-4828-998f-305276009252",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd97cb91-fd23-49d0-bfea-6651af2fe1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10ab08a-c3a2-48f4-94c6-53b747ba96bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a72cf8-3fd1-4a7b-a0de-2742747c552e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e843c505-af32-46fa-9406-7d096176c074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1f3e5f-6965-4adf-a701-d9f00664de70",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad946682-840d-4770-8b1f-580c3dc15fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b92810-cdef-4fb9-b60a-ad39bfd539b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c0bcf5-3002-46eb-b72f-61923b11679f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6067930-5742-4abd-962a-6107a5b0631a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2201a3d5-18c4-439a-8aaa-42b38badf987",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56399de2-239a-4337-8989-2f5098a5304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee16abda-b016-4889-b886-385fe13ead25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8568ad4b-1bea-4119-badc-5d805a9b22be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b53e71-024f-4996-9d4b-ad9709d66808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddc5288-fdc5-4586-8538-876bc67d6117",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7574eb-64c5-4ed7-a153-5d27c0319f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74adb07-b024-4e6e-b100-1812d339531a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16b1717-ee4b-4acf-b35f-c5f1366c8dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9955c3-1363-48ea-9a2e-9a43204b30d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d144c09-f765-466f-92d2-c5fda3b35c4a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1690eaa3-7890-4582-b4e7-12f7386ecec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0342fad-7ad3-4d7b-9814-487ef3e24e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c90711-f821-43f3-9ecc-d019995ac27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fda8061-5b89-40f7-92b2-99ada82a5a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d4cd9f-c348-4250-8882-ba48f8307133",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b7c676-1770-4be1-adc8-555ac83f39d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e396bcd-9090-4bc8-ba28-23e63b1b223b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4374a69a-970c-4130-ae52-1c43f054936b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee75e96-3609-4a50-9f68-9bd57ff3d086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ffe692-9861-45ba-ab0c-09c8ed65d063",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1707dda2-fb33-4c04-9e90-b47d32608220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb805e6a-ca9a-4842-8ef0-fbc37d710a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173b20a4-0ccc-4d85-93db-47cbe27e4df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc0bfdb-6d59-4ec5-b22b-0042e21efb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d462f4a-e0a1-4a51-8d15-81b64bd39e1e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60aecda7-8e1f-4c7d-bd5b-8e65532dad6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1983717-b542-4ea8-b7f8-71d70536a47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298c732f-8e56-444f-b815-41bc39ece6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7938069-ed34-41ea-af7e-370c4df4823f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d15ee2d-00a7-4b39-be12-5be31f108f82",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b03974-fe46-47ed-bdbf-f957c01dd9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0415cb70-504c-4592-846c-8447a81a1ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fc346a-d674-426d-b98c-384c79025930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba63d98-ea0d-484e-9438-7a531014032b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0bfa0e-1448-45de-b1e8-23cc74eb16ae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f2a277-58da-4280-9ea9-a94bbad431ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aa8683-d194-420f-82d5-42248b56a369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3349b782-3808-49e0-9793-d670b96444e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd41b24d-8118-48d0-ae54-f0979100f813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a042ef27-adc8-411c-9a6b-f2e0d85b7943",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8e9115-fb14-4365-935f-a89ef5b990a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e831b3-e99d-4b85-9efb-70eef202d8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7f929c-3658-4974-8f2a-d6bc9334f7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7747ea-1224-4d0b-8f8e-600b0f9267c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d673857-f90d-479c-9c12-3de03d159373",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c67913f-8ef5-451b-b398-c24925a9fec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51243971-b7c7-4fb5-9f0d-2fa3d5b339f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52feb298-6d68-451d-8753-0592b3709c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94850c4e-a6bf-40e4-97a7-38302124bcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2f3be5-dfc7-4f44-8f6b-0ac6c0aca207",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e46cae-f31d-4723-99a1-091c5cafc480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4615e1cf-bd58-48fb-81ea-377cf9e67f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1affae1a-d732-4f3c-a6aa-2877c65421a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1913969c-8f5b-4469-b4d1-be47e328b5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5934eeb-71db-4ea5-9a00-21a483e48d3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8a5a98-c2b2-44e6-bf82-7fd95ad40708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bbe64f-b763-4f4e-8dd4-cb868067dac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac9dc0b-2295-42e0-bd29-761da3922df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "993107de-0751-4871-b3f1-ef23a7e65f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ae2ad5-217c-49b0-a1bf-2d8d40bbee05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2797dc9e-4e87-4f77-9ea6-05ea813dd7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7167ff83-9f2d-4945-affd-8d2aa3ea6a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf0dfb8-fef2-44c5-a367-298f3fb172dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9eab93-f087-4d51-9899-3c7492d92361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a256c9a2-495b-4afd-a576-bcba40073bac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3230d7fd-fef8-4a97-91e5-b01f8a2b2404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ec3285-c4e1-44bd-b4d5-fc0d51fad607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77927575-fe69-4df4-a9a5-89936a02125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5b60a5-0786-4643-b86a-4285a6dfe691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161d9c2d-2ebb-4dcd-a793-b6273f641938",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca57afd-9c2f-4d55-9192-eb77a6ea6231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1873c13-80fd-4c50-b88b-e8edc1113c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa894f1-10cf-402d-bd31-19bc796e5ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72883dfa-ef1a-43d6-aee9-b6a02b2ac4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711c6008-0268-410c-bea7-448517a0112f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b8c07b-5cad-4e5d-ab77-0575f2fac592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f3b5f2-5219-454f-bc8b-61e7a16a634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867b9819-0426-4bee-88bf-4ec93ecafd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6f30c8-8fe5-49b6-9706-1236f15c4732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e8e31e-6a68-498c-8dba-0609e79022f7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58766703-0bea-4296-a686-e909b155ab22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b119b8f5-d749-49d2-a0cd-07a6cc1c7284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f8523a-ba25-4d9b-9dbc-690642687c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7388138-0b3f-4bb4-b905-b8224ff8b6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a4b3da-4d9c-4854-8f88-fbba81ca2357",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8eeb27-3032-46ce-a770-51067ce9dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051557d1-1c94-42d3-ade5-d586a15a7572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5392c32-7dce-4f45-b7e2-da3f8d5ba8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5851003-89fe-4eaa-b81d-5e49ca0b2401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3820e2fe-ea3d-4634-b449-3f1b46392ce5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df84329c-0aa7-43eb-8355-29df1a90a5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14418648-c784-4ac9-90eb-dbf9fb50db1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b36f37f-7be0-4ca5-8fbb-de7104ccf182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b65249-445c-4768-aa80-7abec0ecf0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70447eaa-4bc2-4a51-ad2f-2173caec98ab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d63fde8-9fc9-4d32-884b-35c09c0c74a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e749f45f-b743-41c7-983f-cb0d989268bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31232ea-9246-46b6-ad72-b6a81410e18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2409e6-9f63-4062-bbac-2cbbc0fd08b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e584be-5a9c-4eea-b115-d7a104b81254",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdee97c-fb9c-4012-a66d-53f935ba277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a327a32-38b1-43ce-9db8-e3a1885adcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e48af61-3cf5-43a2-ae05-ffc0a81f3922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1484babb-27e1-42cc-87e3-ba64fa5d7c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988259de-ba2c-4526-aabb-9920471c15a2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31d0790-a542-4089-b9ed-39183889d64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b59e36-5beb-44af-b4de-f1b8ee712246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4dac9d-3d25-4875-8c54-00c6afe772ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88797d5a-4ef8-4fda-a94e-2c0c63629049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0493f2-a74c-44d1-ab75-25e30010ad33",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274ea095-6ea4-4a4b-b569-bd4fec04d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52c0ca0-49d8-4ef9-a756-3e5fdaee1dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290960f3-6da1-4b84-ba85-6fd5fd4299f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb53892-e39f-4129-b6da-776cd831c358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de640b9-4b96-4d9d-8d75-b86882bb7ea5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adc5154-bb07-439e-a118-b8f8cc7adf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7da72e-d139-44cc-abf7-d4a021673f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70e228d-4c36-41bb-a003-078ef5a2cd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d7311f-5bef-4b56-a1a5-c73bbda0767a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20742ae7-5342-464c-90cf-63932a4f1521",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708d96cf-09da-437e-9db5-d896f0b79058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2d350c-c4ff-4f4c-a8b5-2cae4b52d0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f47c46-5905-4313-a704-5a3906e81cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcf285a-6d6e-4d0a-8326-f97473e77bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d1511d-cffc-493e-85ff-8ed753b0bf68",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b4da06-57dd-4558-a915-b0ae3c5f56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2faf48-98a1-4c97-904a-17b5345ec04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724e8ce4-c9b9-49b8-a9b2-476fd1329af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be8ddffc-c6c1-4b23-8062-a70114fe9a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf84c88-eabb-455e-bfea-2504bf1c4c2a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a3e178-4f99-472c-81a0-9db8f61d8d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf0e58e-328e-475f-8dc2-475762746c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ffa9e0-d33c-424b-aa70-1952bd000239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66e2c9fb-1057-4d21-8dc3-7dc89162c003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92943124-9042-42d6-b96b-61695173e410",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2dea50-a83e-4cb5-bc02-b502b28fe2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb20ed22-a702-4d09-adb0-709ba520fa40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493a5fda-7a41-42e5-a71b-842f6abe912b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d79a481a-e49c-4dec-9943-925a2bd0b3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd91aa0-b004-495f-b086-9f1875449001",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836d9b7f-e5dc-4e6a-bb11-4b85f9d20acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec45384d-c1e1-4dbc-9da9-46c146a1934c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5e9ea3-f3d3-489c-a8a5-93e667cb2621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70f40e0a-5917-4ca5-8b81-d35a87041dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88daca8f-0b2b-491e-9751-ca8676475a8d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a1e4bc-d008-4f55-a3fb-cd5db6562647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f6464c-520b-4bd7-9a84-7d3b765ca698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11136197-34dc-41fb-8eea-d4936df05cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8bbfac-4d41-482c-9115-874dc4f4a40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af72f676-dc3f-459d-897e-078d6bdfb72e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b8356a-df97-4db0-ba49-7f189668a506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f60656b-e915-4287-816f-4d6266a96fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6060cd-9a5e-424f-b2a7-860e642bbc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f262323-71ac-4e93-bad3-84a44fbadf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2311a37f-2309-47cf-9687-44f3563163a3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5257a3c9-42c0-4102-96fb-96a1502738e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f035db47-e0bf-426b-b4be-6126b2370a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b14511-0f36-4dd6-80fd-b789171d1954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5b5477-154a-4182-b06c-67e16965fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38691e34-dbee-4e96-af79-806af0e1b9a1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a867c0-47b9-4fbe-a5cf-9d8bb39a2b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8331d1-8d0b-4ad7-812e-0815730a59a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66835e7-1467-497c-a83b-bfa450c8b01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c907b3-4058-47b5-9077-eb5142603678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fb6d2e-aea1-4734-846f-c8b272967f5c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e676a02-8af4-4ace-8592-e0905fadab55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d05b016-0348-4cb1-b91d-30093ab5eb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0378cc08-4e86-4739-bcb3-25cdb88a7463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7450a4b7-2d91-4430-98c8-cccc69a84b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b976d0-6b82-4b0e-a92c-416c82bef085",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d185f0a5-20ca-4eea-a9b3-d66f7b5b509d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c91db-1621-4d5f-9a8b-347fd2eb6e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45cc94b-9079-4a34-88f6-4d7c81fb663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d18e67db-d0a7-4bc3-a2d5-bbdf30f6b195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8558322-b408-4b94-8076-a8e754a0543d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc663288-fb6a-40e9-8f39-1a3557814aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03de385f-0b88-4392-83c0-37648446f5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71adf97d-ca3d-4eb6-8c16-785658a1455e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee32003-f18b-46ea-9165-dfc831f5236a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6334568f-7aba-4561-b661-f4072fa27077",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc641d4b-ea14-40e4-ac1d-3682e8183afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e054f6-2a06-42b6-8cc3-813a45e60f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da51069-326c-44ed-a3c8-3f641cb1df14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8683130c-bc23-4dea-8fb2-dd99deb53abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4651d8b-73a1-4714-a5a5-6b070ecfd9ae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72855fe-7b2a-46df-9307-f5443177562a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96042557-e5e7-40d1-af13-baa071da641c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfd4349-67ee-4998-a571-8f62899e5d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b73ac8e0-37d6-4c28-82d9-a3d686fdc647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee5f70a-1cce-4cef-b995-7c05b9c71b0d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d00f791-06a1-4642-a3d5-6396017ffd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b1f7a0-b0b4-49fd-812d-fbe4ef3a842b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684e38d4-dad8-454a-ad1c-aa2d42c98311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9477c118-81f6-4695-a1a5-01169cb91d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd212099-030a-40a4-871d-292ace612e6b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5013e202-7da0-40bb-b639-4866f43024d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdea0d2-90e6-4f9d-81b6-8fdb1e3078be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3e5030-7053-43d7-9781-818be6f6046d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "664a0714-d8d5-4964-876d-4a15d596eb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8013f8-1c2b-4022-8812-abb2843567f8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea248eb-c377-4297-8acf-78ad309fcdb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d941364-c4f2-43c1-b356-d6faff176d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7c6a01-7ade-485e-8899-ceb1a71d7edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c758e3-2f22-4154-ac40-0622cc62fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b86c4b-3079-4728-8961-7edd18ce9576",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9bbcbc-453f-4e39-86e0-bd08848f85f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119167b6-68e0-4223-a3a6-cdc1d4364ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522e28fc-38e8-4ac6-ae4b-7de8e1532eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bad081a-588e-4f3d-946d-7e7232cbbc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc0034f-aea2-418d-ae2c-6113afa3232a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67a85f2-b72c-42a1-befc-8a94aee4ab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57518b12-117e-41e0-8572-b5ebe953a0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532506f6-c826-42a8-af1f-0fc9cf356707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a136c81-d9e2-4cf1-934e-bd3ee08c0b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25e23c2-91f1-4d11-a19b-6bae8300809a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e0498a-6670-4723-9f82-ea002363b06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedcd5d9-8654-43d4-a331-4f507c0c39d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dadb54-58a6-44cb-8a7c-b430d506c94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecdb821-c3ff-4964-8462-9314e1b7137b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bfe2e1-cb89-4d9b-81c4-9680398baa06",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218b4e11-a5e0-43d1-97cc-8f0147954e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672c2dc3-c845-4073-b440-14d33e2aa7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0989a9c3-8f26-4464-aa0f-2f30549d4271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3ce6e4-7792-49fd-906b-2cefe3ba9f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21d4b67-b710-4cd1-8bb3-94bf800b6cf8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b60b131-e300-457f-aaa3-3ea860b2e5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b0726c-1977-40a1-9002-1586ab94368d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521c717f-bc49-4c1e-9cdc-35d09e80f4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "18833bf4-df85-4ac7-bf7f-1aea91d70eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b80071-f3ea-42c4-af66-b2914572ac66",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2437abc8-4ab2-48f1-a4d7-c37603feb068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "73494705-cef3-4a35-8121-30eb5ae2418a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b36539-51f4-46f1-bd4d-d080521cb674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbe545b-6068-40f7-ae6c-10f87ccf369c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f7f3187-d293-4838-96fa-e540031839c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14ab7023-1e06-43be-bf6f-e82e0d826eed",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7e4c0f-5381-4fd5-a336-ff9f3cd66fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "433359df-578b-4d2d-a724-8d18dffa25b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43ce963-7397-4b1a-a025-f439d7abed7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5be2c4db-e3a6-4e68-8048-3bd31ed528fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dcb1d90-bd81-4374-aac3-090f8010b8e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8b60058-8c86-4b3c-9a81-1ca18bd154d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c407983a-83bb-47ec-afaa-e9a777b06648",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a0bc2a7-ba75-41eb-bbbd-a47377f68262"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8599fd4-0a08-4597-a2ef-08af3bfca01e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62725cf8-ec2c-4d80-9228-a87f03faee6f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd8e55cb-de0e-4d35-b0b2-bde58d999f01",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a25d375-c553-46ea-9e25-59cdb6e1626b"
                }
              }
            ]
          },
          {
            "id": "462dc547-5101-4b1f-8fe4-65495bd6f8b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "20980227-74ec-4cb7-8067-56906857fc37",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6c07fac8-9d25-48a6-8ee9-3883e51267c3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2a5f95-acb1-4b0d-b9ca-91f99f4a6b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9b5559b8-5cf5-4bde-98a8-163e56cb0dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49b5ab0-7c17-4f9e-a03d-6da8b7951f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfb332c-24aa-4131-96a4-e1a73d22d2bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebc7e34b-4036-413d-9c58-477714502991",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9563f791-6890-47b5-aefc-64a1172d329a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52938b52-5850-4c61-a198-e708a9f5debc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b540ef4-8c26-40a5-8656-86c8ba5f2935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a709e23-4ff1-44e4-8759-4ca89620e4b7"
                    }
                  }
                ]
              },
              {
                "id": "04f0eea3-c0b4-42df-bc4b-cdc40e532b09",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9dd2be6-7e76-48d3-8266-c6642ca35190",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e47e690-9383-4291-97ce-987bf0d1531b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52dbecb1-4125-415b-aa06-f430846ae07b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "00466ce0-3798-4a83-8679-6dc9594e9557"
                    }
                  }
                ]
              },
              {
                "id": "c1aad697-d449-4df1-84d9-cab37c997e65",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "461febb9-f137-483e-93b8-d9b68b2fc218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b272204-1aaa-41cd-9bb6-b3f2747bf6f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e223a5e9-213b-47d1-927b-ff86967e075a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9a389c6-6921-4666-a4fa-c5394e150907"
                    }
                  }
                ]
              },
              {
                "id": "9a5a2629-abef-4834-9d68-68a62bfa7266",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "817db6fc-db1c-4c4a-9dba-538a514bc7f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80e0210b-ebf7-4e8a-8c7a-b6ad85c2a53f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e9eb4c7-0635-4381-8897-5e2b253b93b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8cd2dbdc-e6ba-4300-96c2-b79f566cfb5c"
                    }
                  }
                ]
              },
              {
                "id": "42d6b16a-838d-4ae7-b1e6-b012b5581983",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bb96975-1085-4e73-880e-e57114127c3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "356e9d29-be44-4a87-a875-8ef3de348f76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "457770a6-a4f3-45c8-be02-a6ffbe06bdd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "11e09c71-2e20-4519-bca3-3db28a4f108a"
                    }
                  }
                ]
              },
              {
                "id": "a6e7b990-b6c6-4920-96e7-aab03d69aec0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b129c6b9-5a46-446e-9f2e-951f06b01f1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b36be7e8-f6bf-415f-9355-e59b05ef7126"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50da446a-a4a7-4171-ba83-821a581ce41f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57f16fa4-ec55-41cf-b31e-c85306281eb8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec6f4bd9-6624-4ad3-bcff-3ecac0bfc9c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86abf162-2278-4eff-95a3-1e860b7bbb7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4c2b1157-c4cd-436b-8fec-31f2eb5418d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0dec25d-8227-468f-9774-7d34c3850554"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f2d4355-1b0b-4ced-9cff-9d1082c80575",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8bba4624-35b5-484c-b9c0-18d85e60a4d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00fbd377-649f-4f67-801b-872413966c85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eaa584ae-d72a-4106-a4c8-7dec05942c03"
            }
          }
        ]
      },
      {
        "id": "f5b2fd70-2cda-42e0-98bf-4167ff560d25",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1d413ba9-9807-4b99-b6de-171dd67873c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b4fcd5c-ee52-4e3c-85a6-9399251128c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06951b28-6dc6-4ea1-a49a-e33cbe256441",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61326b4-8725-43b7-aefe-3f1c75fa4f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1351a589-fc0a-4b75-be4a-b1380d8bde05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a680003a-ec2d-44cf-b3d1-ac22ce8a4542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e09a3935-6086-40fa-b5a0-746e9e064b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77446abe-ecd3-4fcc-9e63-b752e1fb0ecf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a5474b-35dc-4f09-a5d9-fc5c5cd05862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1287f1-23c4-435d-bfec-fa66130ea2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e57f6-05e0-4f10-a5d5-bfb9759330dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1825bf-54f3-434f-9c2b-0e270a93bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a378207-c41b-4542-8ec5-06fd8b054e00",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6434a1b-4d4b-4ccd-8ba1-e81640825773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816ff71b-4a42-4e9f-9a64-c8cfde867f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d43c1e-901e-408e-b789-5cec380c3f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b59ee42-69c7-41a8-a3ad-faf84fe4599e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b112bf-be8e-45fe-8deb-2b8b31024067",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71be37c9-e738-4e59-8c2a-bfc5647935ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3335c0-b2ea-4864-8b18-7dbb78d15d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5669762-e3b3-46b3-9944-1dda2bbccd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56fcf662-a15c-4757-b3a1-7777a75510cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630eba5e-c669-428c-b227-cc3fa48dbe9b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec57008-64bf-435b-b0b8-3d82a60426f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3f729f-9b8e-4373-8ae1-a4426f802c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474ccb16-4ca1-421a-b190-38e852f2456b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd7bcf1-68b0-4400-8a36-b2007692e34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb33585-9991-4a3b-a463-fe27c1d01454",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1721a8c-22ce-4690-9443-4d8b16221691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1f988d-1bab-4ceb-8b39-9378de5966f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b36bfd9-9c89-45b0-b918-39d0085fbff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd8a1f6-595d-49df-8404-45253dc9b919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdf2ff5-1460-4da2-b679-ebe1a922d6df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8a6a93-2cec-46a0-a6ff-7750836fb602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b50b4c1-e604-450a-9efd-4c90cd653288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2de1eb4-ab96-4555-a7fd-19d1128da536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd552cb-0b9c-45d3-b7b6-8d91a8b1c2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e97cd98-374f-4382-9fb0-2aae3d253dcf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1915966-6bdb-4825-8ccc-44ca3b9a3bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cad1e9-5377-4d75-8217-561d29b9bd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fab1d08-93c8-493e-9391-ca8a6e127cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db45544f-c7af-4cce-810a-a121de2782f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161f2e6d-dfd0-4364-961d-808bdd10b0df",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35d1db-32ea-4f35-8f0c-a0a35ee0c067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0e59fe-74ff-43ca-b32c-77f49d573f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e558b20-6ef1-4924-ab33-165e8e30d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02839bb4-74f6-4aa9-807d-2a0001b82fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad12dffe-d8f1-4991-9e17-a18aeade6a0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1ac306-4781-47c6-95bb-3add3bbb1b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688801b2-a928-469e-a4bf-d199fbd8dc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e28b72c-db8f-463a-8c74-02fb7ac36695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "223c9d7b-bc2d-422a-b037-31d41038f57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7b2aa6-8477-4647-aade-5f23e45de340",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c123fda2-ca64-476a-a1cd-a86acc4320fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1105eb-a68e-42ba-a881-f3b48d1db0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0c1c48-9c34-479a-8efc-89b9fcc73278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b7817a-49db-4233-ab8c-cb27c50440b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef50207f-70c6-4537-b668-c43f3c569764",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81127e7-3586-4c51-9dd4-35a99faf2b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ba8343-d54f-4397-be25-0c379ade0144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1bd1da-6dbd-418d-9f00-99dc8d2d81c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9db9d3-febd-47c5-8c22-53c8aa1a47c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d02091-156c-46d1-9de5-9787a2911cd8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8dfad-1694-4b11-a9ea-ae53246a32be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec24cebe-2e98-4309-a3f3-bca9b2ffb694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097a0eb3-f780-4d5f-b258-2e4772fc0e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e70b3d4-b7b3-44ca-81e8-1bd88c6b94a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b6bd15-0a86-43bc-a261-994f166f727a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53226c8d-5def-4afc-b251-b253cb5f5c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d416cd14-83e2-4cc1-a375-fbf7a4b7cf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f43168e-b2e9-41b7-b96d-4fb87266259a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1fe176-62e7-4fd9-81c0-5e9e36f88d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16d7a26-dd87-4535-9f8f-c04c5ce48203",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15cc5d4-19e6-4c69-ac96-6d492dc58909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21456118-9638-4f85-b53b-0c656a5439b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbeaca9e-3a26-49e1-8e04-f99a8ea5f271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f6a8b8-b808-4bb7-93c3-c2db687f566c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9158ca-2ab3-4fde-8abe-14bbd88d60c7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3d5424-912e-4f15-be3f-92f2fe7d2651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d5c3a5-8628-4013-82e3-a76fe34885c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99e593a-b209-41a6-9334-5a9593d899de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c144c3-57a0-4a7e-8e50-fd78228f43b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29f23bd-ec0a-467c-8384-ad880cecf96f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9631b6be-fd29-42a9-b6b5-c9188c1cd352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca43862-caed-4478-b866-e893e00dd4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b77e224-e1db-485a-a38c-a33593e95ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b082f73a-faa2-4664-ab83-e82d4d27ee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679a28c9-c736-4cac-874a-2333f42db3cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5d8c28-c7db-428d-b697-a062470d00df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5089eed1-36e3-4038-8499-b5888346bd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccd8ef6-ff41-4e32-9907-d4cb8b591f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6610ec-175f-410c-b05e-4a7b73c52691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a0169c-d469-4494-975c-7ff14131ccd3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e058623b-f1af-41e4-a2c0-26b764c02215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64080fe-8446-41c7-bc88-23193790cc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c759c5-720b-4bbb-9b18-d8cd791629d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e483861-9c40-4c63-a5b0-597312b73b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106e8833-9ae9-4159-bdad-65def35c8f3a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eea722b-4c64-4055-8711-30a4e235707b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dc188f-7714-4950-af1c-b08b2d476e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639bfe4e-57d6-4b63-aadc-2a078d04c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9a7b02-03e4-4356-8485-461ef53c4359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb4ba78-ebe2-448e-8fa0-287544d459c4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c52ed6-c21b-423b-b3e2-108a5ae94bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23afa80-9c9b-4188-9648-32cbf28984c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b881a3-3559-485c-9db5-d4c4be2ae50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c50e1fe-42d6-42b0-aa74-74e2f007bf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f9c490-660a-4a6a-bf7c-7f8d08a57142",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16266f30-e8de-430c-baf0-acf7eae980ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cc3a59-c5ea-44dc-a809-2a1f47da316b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c870713-a63a-4872-b1ff-fc273771b8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d668a7-6b46-4c17-a5aa-4852026ce6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f35695-9766-4ed1-9568-06b7edb8804e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce145183-06a6-4a80-9f90-98921897205f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aea7475-4e02-4541-9365-ddb4a2bad01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf41c071-f897-47d0-8ad8-95515dfc46d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f823dac8-d073-4a78-913b-e27f0b734c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf1c7a5-96bd-498b-a5fb-16b1affba4ee",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a87d172-966c-4c65-9b6e-41a42d24d559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec77975e-c6db-4f2a-b071-261feceb9298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a239a63d-240d-443a-8e17-c896f456e079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36335aa-11d9-4d4e-9f20-34917704b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46e243c-a51d-438a-93be-5a4ba06549e4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97012b45-c82f-4578-ade7-10a903161a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165849e0-00e7-4b72-b2e7-80cf0c822cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc17767-99ea-4e30-ad03-6ba473e35e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1f7209-aa3b-46c5-9c94-8f021e954a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71e6e94-5c27-4f54-a905-232cdea8c1d4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bb8f5a-c00b-4407-b740-f105b7dd7469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ce8454-12db-4517-8690-128491b61ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d5442f-fc7f-4648-bf08-b954cda51004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8914fc68-749e-4de0-85b9-19025afd2fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc3ad30-c652-4a2e-b9e5-abc9116a6211",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a55426-f6f7-4fc9-9e3d-210ddf39354f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fa9625-1fc2-449d-95ff-eabc6ce82d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78146429-5f3b-4620-85b4-d071a251252e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e72ca4-1aac-40c9-b0ff-ce17461c87bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c32ce7-67d1-4533-8394-f4febc4ee218",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efd7455-9119-4110-8e1f-9e8163cc992a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88caa5bf-a398-425d-b3ec-2883e63a9140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30a276c-080b-4769-8a32-3da32bcf48be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dad252db-f448-4c7e-87ea-67468f9c78de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bc946e-f244-4c49-a891-b4ec4e842861",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6b2f3f-444a-4f8a-a07d-6fbf997fd92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7156c2-095e-4c0c-9db8-b4a93fddb043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ef4558-b4fb-4ae1-b32e-58b207a47d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a33c2307-96e4-4f53-8fe3-d032b8aeb4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e2b4da-dd21-4087-a7a8-6438a3d0d194",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f291f-deef-4b8f-907d-0e884d20409e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19055bb6-6232-4499-926f-185e26f6d59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55a69e7-dd3e-45ef-9b59-07866eef0135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42009b28-fc0b-41ae-8ae1-a82e792aa8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1cacb2-21be-40f6-8fed-13981cb49aff",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd078ab9-5a91-4bc4-833c-60c987b02a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb93890-30dd-41ab-9167-69df1cc87b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd2c0d9-c52a-4191-9c1d-97c4a3d58d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a32320-5f16-4c7b-ac80-07855170baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b32e83-cb2f-4690-b69c-41555a0cc7ac",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c47b4d8-41aa-4e3b-9781-7238145c2af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80ccc35-ff24-4a49-9806-37d4e368a64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d0f7c0-79b3-442a-bde5-b96c6cfe2e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da4a3153-718e-4d46-be6b-ca6b83e52b08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "089ac1c4-1bd9-4879-a3d7-c4fee4767e0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45b89981-c599-4c4d-9f5e-89363a2b68b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2702cb-128c-4ea2-af20-e07843856642",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "adcdc364-48da-4528-855b-ac606634fa87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5414e89-3cc6-4d03-a7f5-e0ca91fd5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7014597-f83f-440f-a94a-b4f5579e31c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "567ee939-16aa-4a1f-8d99-0c0c8738c4ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dae99a6-1cd6-47b9-9ffb-8916f0f47d45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7bad963-d163-4e15-a10a-ec2aedacfd90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac52c161-fa32-40e0-94ae-bb84bdd82bd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcd10d4a-680e-4b03-a060-55a1a7d609be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de92abc1-1aec-4fa5-a0a5-56157a74a300"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "402f0b5a-830d-425c-914a-c870164191ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af23c163-1665-46e7-9e46-fb68877a089e"
            }
          }
        ]
      },
      {
        "id": "5315f177-bf02-4575-b051-6a3429918be5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f421b383-ff68-4ee1-b9f7-11d62fe9b1cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e8b2d69-e6f7-4120-908c-f9aa5f9b6c93",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad03e5e9-44ad-4fec-854a-5dc904489666",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f7c8fd-a376-46e3-a864-357fc003513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7083b9-9261-4bb5-abb9-4ce53d55140e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25fe2b0-d1d0-424a-a72e-a6fd31fcd497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdfcb5f-d797-4b5f-b227-3570530f06dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372acbdf-52d0-472c-8c02-664a3a60309f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d9074e-cc2e-4904-b9f7-7997b698e069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2cb190-d721-45a8-a98b-0b8473b67bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d6d7d7-665d-4cee-a3a7-3ed336dca2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8902692-c135-4b4c-a7c3-e222938bf353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787f738c-c6c4-4e45-8c1e-7e873aa6b25f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55a3ad2-a631-4fae-97a1-e9b8893db53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300908ca-fa8b-40cd-9981-eff1be40ad94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5594ec53-17c5-479d-b213-52f5ea5eaa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0524ba77-f509-4731-8800-166d90302992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155b2bd1-6f78-4934-98ab-62680ee60df3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6179b3-3b43-4459-bf82-de84c3a65b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba402236-3f10-43cb-9a01-62bb3f2fbb4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c974e0-958d-44bf-a046-57324f50aa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a3b5cb-e40e-4450-9db3-4d8d5b9d8e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec1ec68-b706-48e0-b0c0-c640a1886d67",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430908f8-5d95-41c7-a3a1-6afa5606fcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ad0245-0fcc-49d7-b8de-d44b4ec173d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac352865-1043-4725-8afe-7b236bd5dc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64caf16a-ecf6-45b0-9116-21c7a64cb99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773dabf6-b7ce-483b-8536-6bc7ead8c231",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a80ca5a-afa3-4105-a806-2c231d65b8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca3cecb-c361-49d7-a4d9-bfaf153ec16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74427def-1c6c-4fba-af95-0946b84b82e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c084bbd-9820-4971-9460-4623a7df3dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d182db84-0489-4a72-98f5-af2c03410159",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619f4551-0eb0-40bd-accd-8ee55affd904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43b8bd7-8afd-4810-a016-017da61944f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330596c1-1a26-4bed-8bae-ac5ac15d111d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "81720db4-dfd5-453d-a534-b0d135ddc160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e762c5c-2d18-4076-b40c-2fb83eada9a6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e585804d-4022-49a4-877d-815975cfdd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10bbf8c-52ab-443c-bc39-e9775cfd1af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d97856f-9879-4766-aa60-af46ba52bc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6eba27e-2411-4900-b93d-478ff42e9f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47329770-bc0a-4978-985d-bc5731938ddf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9b33c8-6ad1-4f9e-a077-f8bead9d0866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6c17c2-c588-46de-a498-eff15728298c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbc01ae-7401-4f68-8d9b-ab0c21efe85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e19b8ed-c310-41a5-94b0-b01f78c6c741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d4b0ee-18cd-4571-b10c-3c692bc1d48a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc67dbbb-f8b1-42a3-b435-e8867ad8095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7d41b9-71cb-46d1-a5b2-ed24930df113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6a0f5a-8ade-4d05-98cc-103caccf8849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6eec4c0-2f2e-4b66-96ec-5cb393061762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc258dae-aa7e-4936-a5c5-ae30981478d8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a48d9b-f215-4aa0-aaaa-5742ddb16b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90799359-6b4f-40d1-96f3-805406a9d532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fa8ac3-b6b6-42bc-8c68-26d654849af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b3a1e3-6c21-4c2c-9772-39fd77baffe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ca05d0-f3af-4b73-bf48-79f59af0bbe5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54ef194-c5e8-4d4e-94ed-4dcc0afd9e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12063ab4-612c-4a28-8948-24edd3d55d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46429d40-d4f7-496a-97cc-551374a55a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c0e98c-e5d7-4647-89bc-fd7aa9844476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e893f3-ad13-4b5d-ae22-a0da8a2039f5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4a32a0-e9f8-4215-aa37-098fba2bdf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d58539-3c4d-45e8-9ec9-b5bba0a259a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0212dbb-c8ba-4277-99cc-a1000db887d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b30046-d04c-4cbf-a96a-56374b89bd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55483c6-dddb-4d0a-83b2-f2d41e90955b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e572279-4e99-48dd-b409-f67a11794484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec36400-4154-49d3-8f53-decdc33553f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd16dbb-4eaf-4513-b058-b31d6c4111e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47cc152-4090-4d8b-b177-5d7c99524f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862036a5-7c3c-4cbc-9714-ad604d409d2e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764f8793-c289-4902-a90f-718ff97907bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfdd5db-0a7d-41c7-bcc0-277e2985a411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824bd7e4-5220-4d10-bdb1-cabae8655dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2908c02-b7db-4cb0-8f02-21cc9e08d87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82868fb-ad17-4931-b4e9-78660cf82e30",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adcedf3-bbc8-4c3d-b1af-25df387ebe58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a440e7f-5072-4f3b-850a-4058fbf9ecab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38408b31-2e64-48d9-9124-51ff3fa7bb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4f3f17-9211-4704-b9a8-d71ff7c5f50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd98f6e-3b57-45be-bf3d-8e99e973a49b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f433088e-232a-4004-a8de-abb0cd5bb3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dddb68-0747-4724-a111-e3a5ddc34d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765e7776-c3b4-482b-afe3-ca40eef6007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe012ed5-af3e-4fc2-8b71-1e933af11b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1a6102-044b-4ed4-862f-87c3d29beadf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2029ea-f14b-4c89-a55c-7e147b9ff8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68f9bfb-0699-41b3-ab03-b5e0eb28d224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de393ef-cfdb-460e-8129-5cec38688d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "773400b3-7317-47b7-9b28-5d4d7439b47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec776539-370a-48ce-b48d-3673332e1c38",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56490d07-b1b4-4971-a511-9e77bda23577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f63507-1a7c-4d93-95f4-b295fba867c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b566ca09-02a3-47cd-a3d4-1187fcf9e447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bba52b2-12ad-4430-ba16-d4528d5d8e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c21f04-8a20-4a1f-a59e-e7da51e864b9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d742c2-122d-4ee5-9a84-8848acfd37d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4526d08-cc83-4894-9354-844384bdd4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beacb8ac-780d-4d69-8f01-f680ae251af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1fc907-6a49-4bca-8d8e-f54cff62d92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e5e901-7611-47df-a47f-872e95beceaa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b92590f-05b8-4a62-8465-0cd9e5798a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e6422a-31b2-497e-bd1a-094c9972f092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300dd700-9549-427a-b605-a00bea63532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1e6916-c506-4aa4-afde-e3c2c16c4ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2508d5-c7fd-42ec-a9e0-922482c69d16",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501b93bd-418a-476e-ad40-cdb965111c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9906056-f977-4540-8781-f64dd755cc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9486d73-0d80-476c-922b-6e1c2468f3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "929b024c-27aa-4374-9dc0-5fa083f252ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab2a1fc-4a40-48d7-a220-868ea3ef2063",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f30973-154b-4186-9f32-c864add1e16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c7857f-447e-4835-a1ec-1ee924e73358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f293bc-1c16-4907-bf42-16844c75fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3234f5df-f593-4108-879e-ac270d940bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2395ad-ff90-456e-a07c-06a4b0368df4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4fc6df-8f33-41b8-9761-ee744cfcbe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b31db7-c5d5-41ab-8e30-286573ed85c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051bf4bd-aabd-4f2f-8276-50adf23af818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0703db8a-b34a-4fd5-8253-542637ab6d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba91be44-dc1c-4226-b509-71481212de4e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c3b738-bca1-46c3-ba6b-da2efcb3e08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebc4277-5094-4faf-8ab7-a628acac5b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63731a3-3724-4169-9672-03b41eb9b6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "410afecf-fdfe-4025-8e54-9820d8d02fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a056c361-02c7-4edf-b0d6-c6298eebba00",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7f8c18-cdd0-405f-993c-69b96d88b0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f457f887-c25c-4511-a570-f41e8d040ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeb6399-8282-4c91-8aab-2a6eeb267860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96898945-1ffc-4882-aa64-9292f0c15e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce495ce-5fde-4bcc-a4c0-da5df19f89b5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde74dbc-5c05-42fa-947a-0d908aa1e6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc21596d-39ca-4051-90aa-5000d8fc82c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e848528a-a1e7-4546-842f-ef4d034f7248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7815cdea-10c8-4827-8036-d40cb8bcdb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057312ca-7c3f-4d7c-9732-86aa0c37368e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e264f2-1a26-445e-a670-4728135a4179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd840c1d-8517-4618-905b-b301c186cfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21adb848-2ba5-4d46-84d6-cceec7ca3e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23014d10-6e59-42cf-bc06-a135a34345c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2535e-e7cf-4b45-8a44-701b386e24cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a476e667-a8ee-48cf-a365-9b357e83ab7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03dad33-d544-42e3-9426-21b8f73f6dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df730110-d868-4ab0-bfa9-1efee6e98351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab0754a-10e6-4646-ab99-2f56071dd8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f772148d-6222-4380-a3e9-4843332b6e4a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92808b9d-90e5-4755-9482-06fb37eb14da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179b331a-177e-44e9-8607-e00f68d0781b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0ead34-0db6-4887-8b80-30b0996fc54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc2c87b-2b4a-4994-9a50-b83cf0350705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d243a2-48f2-4777-92e1-7fcb89db742a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d305c72c-abb3-4dea-9463-89b237da431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5a1cef-3b97-4145-a997-6dab2ff4ca7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4030c6-4d02-45f1-9f57-2fb0a54bd942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2b1714-2388-431d-9403-9e4e8f774194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa8fbc0-af19-4ad2-835b-2c9754184bdd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9608e3d-d2e4-41b8-b394-5f1e52277666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ef56c6-c097-400e-bb69-69cfe03ebda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9267e2-9142-433b-8a42-9c91149e17f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e349e0-782f-4858-a381-143bb28cf720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2cb77b-c192-4e01-b392-faa91bced957",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58867646-547f-48ca-9e6d-0a66b62e9912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35701664-7fb4-4b7c-b6b0-56ce032c3887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0876971-79f1-4c49-8b32-35d8fd66b876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfd0663-d9be-4da5-afe4-289ee03327d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246b80c8-5806-4b3a-bea3-6906d607a759",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11010a36-d097-4079-9634-f048c1c42d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58489996-1c8b-41d7-a579-e29f3d8019ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f999e4e-a075-4d5a-ab13-c462deb838c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa14c15-3cf4-4327-8bd1-f455ed911eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea7bd26-ac52-471a-8deb-0c0b3e172cd1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b72ec3-f3bc-45ab-aaa0-369664557952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4035120-fa05-41de-9535-3fbb8050f166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f08f78-852c-4e98-9d22-814a5808a1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6ceb92-725d-42fd-b173-960a74e85f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd679582-a391-4243-ae61-430ce58ce1bf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ba791e-9acd-4d05-a37a-1094e4b11491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da24c8f-0859-4cbb-8c27-b813e6b1528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af462d8-0806-42b2-a9eb-7d9324b85df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51636328-c987-4aef-8561-6fabe167be72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5b129b-7635-40de-8b33-258bb139f0c2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfefbcc-976e-4d03-b29a-ecc2a35a63d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b293d23-d94d-49a0-beb3-e4716a6902b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7d11ee-62b2-421d-b49e-a5cb06234c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99fc605-fd5b-4b0b-a1e8-a508880f4ff8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2ee65a13-ff59-40a3-abdb-95d823d2a523",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8b20a75-7706-4640-aa8d-6efc976cb0b8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09b1265-bab4-4465-8723-0116f33acd5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4fca68-a947-4456-a288-31e996fd96f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed2b5eb-fff6-416a-8522-5cbb07d0beeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43a8a3c6-6834-41c0-817d-cd73b062ce66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d5ac9b5-cbe4-49af-8b3a-fc9e5d89e102",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74710749-b7bb-4b02-82cc-8e83e9ab2ca1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a4269f9-207f-4feb-8ae2-d80ba02b7f7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e469f38-824a-42e9-b9a4-79ce6af31979"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfbff191-500c-46fa-a98a-44027e7bba74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a4548c6a-3bbb-46c4-a344-4a45e89c40e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c985f60-717d-4b63-a665-d76e2b6ff032",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4329a318-8f3d-4a0a-9122-f9a0f0932ad2"
            }
          }
        ]
      },
      {
        "id": "13c4dad4-2b43-4407-b89e-dfcbd97e4ebf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "db186a4c-884d-4f04-8e6c-34282fb2b12e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16efa16a-ae32-4411-92b3-bb987e48aec8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d7dae111-877b-4f0c-b937-ed79028466cb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f0e19f-b01f-4bec-a4df-c936ed36c077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef45888-63c7-4382-93bd-681c193bfc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd60821-06e3-4a0e-9edd-7a5b6cbff8a2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02180ad-d687-41e0-835f-8fc37647e658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242e2c1e-f110-4e73-a1be-b856e9cf4c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e198c-00d5-4dbb-b7eb-2d7c0f7d63ae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91158923-9197-4fdd-8290-d6b1cedf7e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3910956-ef1d-40e6-b6d4-6df4747cb76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dde71b-0730-4dd7-8718-4aad76f55254",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f28b49-a8c0-43ed-95f8-46a016fe3ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbd2939-7241-42d5-bf61-59d3d190f245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ac0a06-d6b4-45b7-bd21-2185e6af5dbd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad5604f-c733-42ec-88ed-1eb79e2c2017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de1d960-d203-4bf8-ac89-483408aaf838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb2761f-97f2-4f9d-8b36-f94a25fa61b6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0759c2b2-c683-4aab-b0e8-a8cdcf741d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0987021e-697e-4604-a64d-8d80873103cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6930655-f575-452f-8703-1eff88dbcc3b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ab7450-7578-4b76-8450-1aeffe1cd14c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fee0df-bcd1-4aeb-8b3e-3e4377b904ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e7f235-1ccd-4e0c-8844-684c8c6f2634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7bb169-378e-4ddc-854b-1ffd46d2aeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c3380c-3cac-4c23-a5ef-1fa96190dd54",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391d8cb6-73c7-4f72-912b-41d65162b634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d882199f-da64-4845-b998-241375c2572b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5affca3-6aa0-4bc8-8bfb-591a93a8b6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa71c12-5e09-4489-ba2c-2f5b5622e9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9202b47a-9b06-4503-adb0-e950dab0ca5e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e82f3a-a0db-46fb-9029-f5265c8aa64d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4116795a-ef2f-4e87-b619-eadfd39c0213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165e3e01-076a-46cf-bb10-683c6e6750d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf8bcde-3941-4999-a2d2-8e94d7ede4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d86383-4396-4847-954f-9c2afa844051",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9392549-021f-4092-a3d5-366c6dba1d29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "902092bd-d556-4c2e-9cdb-6b3cecb843f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd71237-7208-4fa8-94e2-d200b56f9277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ceeae6-58b5-440e-8468-baff19b8fc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d8b4f1-bb4e-4e5a-aea6-f43cd695208c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40becd8-8d62-4ee9-9f4d-f5f6b14e3259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736575a3-fded-4955-8a86-4e3c28b6f549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de7c24a-7183-4a8f-822a-9173fc22503d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56305e13-f0fd-439d-a259-59bfc3097a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6efb95-e04c-46b1-ae3a-25df6db722ab",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4866154-6b09-4224-b4f3-7de63af09255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed08bf45-68d1-4421-8c0c-41bb50aafbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e78c31-08a8-41d2-ad86-08cec4d61db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b6c2fb-df75-4107-86f1-8cb3e8edfb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3041d8fa-0381-4afd-9980-122070e6d55d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc421674-09eb-4bd7-ab52-be3395c1848e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c63293c7-c053-4672-ae45-61d066336689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598d1913-1c8c-4089-adc5-149fb1769587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da68ffe2-3c53-4866-abf8-d7a45ce90d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91513c2-296f-40fd-b929-ff25ea37dae7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de51befd-68d6-4e87-bdd3-28989a679633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "441dba9a-1adf-4e59-a977-7e93de19b7c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d42b8d1-e4d0-4efb-997e-a93e33c8850e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980812c2-9352-4ac9-9743-58068b83eb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b74d29c-01cd-4924-bf65-984b56bd2bb4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af71f2d-cfc6-4528-bde4-d37925f1eb67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c81dc0b4-16b7-40df-83d6-bcf22ce691f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0684202-f6fc-433e-9d6c-9dfd994b450c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1ba85e-a663-49c0-9a16-352b9a87544c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4457971-8e06-49ff-9bba-5e18f1735213",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc62f27b-2fcd-4141-995d-28eeed6405f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8c03eb-9798-4811-bd96-8f9691ccb90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a8c6e-e8a5-4208-b8ca-7c860c77cfe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb40d5e0-e8f1-4e9a-b92c-0e3b2e635bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f31961-a4c6-4044-b25e-572298f6edb8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a9b0b7-4703-430e-b668-f68dd6eed592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377b53bc-3635-4062-bb9f-426f9da35050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6ca132-7963-4a9e-9480-98f6291eb1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1cb914-1e60-4405-8baa-3083205aa36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9758e9-e11e-479b-92b9-23acae936e33",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c16e80-2e98-4be7-8a65-34ca8d3ef787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77f9dd6-84ff-4990-afdb-aa0305cfb8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd218b3-8b53-4d9a-8d69-f18469b5b60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e30d6e-d80f-49e2-9087-62378f5749b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa23185e-f027-402f-9a35-782e4b316187",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2106c2-10bb-4b16-b0c5-712805048b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1f96d2-d7aa-45d8-9130-1061178d7d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e6ee04-b2fd-459d-b3a9-00714eae2318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6da6c2-5457-4072-b656-b7ab5641ba07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78fe377-5930-4bde-a539-83d7667f59bd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92c9a9a-4194-4086-8663-b7014153e254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796d4c3b-b490-487a-b6ee-e1ded2695c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbac3c9d-949c-433e-9746-3b49d1b22dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57485b04-ceee-4430-83a8-48f526ae7a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f65f51-9684-419e-9722-1b613a6c3167",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9de601-f978-4bc7-8709-271559496f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51331f6-57af-4315-bc32-70e149c2c12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ce869d-2d40-4e88-b274-6fd2ba252a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9492b4-0ac5-4ef4-b437-7164a189a936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71024c60-b86c-4c8e-b7f3-b00112fd2b04",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca85cf9-a828-4c6c-bcda-d32b18ddf642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e5f17b-ab18-4d71-bdee-0a5f0c96f402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e829ac6-568f-400e-b118-8434790131cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec284cd9-7cd7-46d0-bf9d-f3ffa63c62ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a617a40-2af5-4db6-a2f1-b53c13291e71",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275dd07d-4507-40b1-81ab-7ea99d9f138d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e82228-db11-4a2c-a781-928cd297303b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d140519-eb2d-4b80-b4b1-207e852d3c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f385dea-7017-4ed3-b891-f7c2e9409718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eef7828-28b1-4e44-8ef6-460c76e4e34c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb74713d-b026-48c1-a35b-bc1f82b72a63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5017f586-3fad-4001-a246-1819d50fa3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c857d4a4-16e2-4276-874d-bbdc26d158ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bf596b-33e2-429a-8865-00c23d6715a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f1e5a2-a4e6-4fa6-85bb-6f3f80db595a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253bc3f7-f9d8-46e3-9dfe-735adb6f4641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65577fca-e2d8-4c5a-ad8f-b824a23b3632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdbec73-32cd-482f-8ce8-607ea8e2730b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b72936-445f-446c-b708-0fa1383a2ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd37163-fd06-48b9-a93d-fe3e2b18111f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6419cf4a-4592-4357-99e6-2824813387b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e87b03d-5cb3-4fb6-bdd0-1eefa55226fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46cdc87-7915-458a-8202-48b5f89c5770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814992a1-b8a9-40dc-a785-ccfa84c4044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b59530f-cb6b-4e1e-891a-988e581c58b8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4eb932-2db0-4521-9f82-18229dc18345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc41719c-8507-4e7a-aa80-eabfa028fa5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e89823e-4400-4907-806c-ef2b0b72f18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179ac5d8-8474-406f-a3ec-86104465d38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559ea646-604e-430b-9ab4-bc899176ce39",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834371ce-b735-49a9-b7d8-bccb8869b1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2238494e-e9d4-4a4e-a3da-9bb931440a3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878430dc-2df9-4ca2-b5b8-fe57f09bcba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3544c5ec-9c2d-4692-8962-559eb925e8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbf512d-71e1-4cda-b0ab-2750751da695",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec124c3d-4e7f-4f87-b5d0-647efc060b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "475c59c4-b357-46d1-a9da-4ec66bcf2d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca0f3ec-0bc4-477b-b515-44f81fd396b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789d5d2d-8db2-431a-bfba-9993a9cb94c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cf591d-260a-405f-8ca6-7b71f142b6f5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514d22ff-fea8-4d23-947a-e94b6bcadafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac39a0f8-f479-4605-8ed0-95215d65d4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534ab4b6-4a06-4e58-aaf1-808fe23792bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2dec9a-e02f-4418-86ea-d98ac7a37d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178b89ac-77dd-477e-a614-d8059e996192",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785d5052-b3f6-487b-b91f-468094099e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1daa0d11-c913-4e78-befb-6c214b72b7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6078f9-fa2e-4ec7-ba68-cbb1f64796f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a3fff2-59e1-44db-b700-490b2c0d6204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5886fecd-8ad2-47aa-97c5-95c7cfc49f1c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120d5304-308f-4c8b-86a5-89203b5368f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b725497-a3bf-4e8b-85c6-6ad394114ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce88be9-8b84-4365-a25f-40c281aff7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da327542-1cd7-4f33-82f2-61a313490d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fb0110-14bd-49b0-91d7-c95fe198b375",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268635a-7d71-43a9-868e-778fa2b68a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41392498-df5d-47a5-9bf6-8be3e3a5c8ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49db91b-eba5-4625-aa68-44a6361e2ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a64f222-191b-4813-b4c0-6185a407e83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a04810-d057-46d6-90a6-765290bfe467",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72e611a-8329-4d95-8774-d21c05132956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de7df45-9d61-4192-bd55-06a867391284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ebe32c-bc10-40d0-a36f-53d7fca9569a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2e3909-af49-40bd-b1b0-981cb8c1be22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43bc324-80c7-4271-ae7d-79ae77f4ac5d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781552e2-0b6c-4ff3-aeef-f030f7be39ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcfbbb4-d29f-41ac-bb07-77473f3575a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5af933d-7ac0-4882-ac0e-15e68bd66894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcff8d6-8c06-4711-90fa-4f487052f893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506946d5-2e30-401e-90a9-ae464adab30f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d45be-c1d4-44cd-a17b-75110f03bcde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89c557c-aadf-45a3-a2ab-12b7de46d9ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25e5ff2-b46c-4cd7-8d37-411c99a31e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5ba36f-764e-4622-8312-5f37e3f66290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17c84b4-f6fa-4d56-b8cb-d5ba39a0ccf4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476fc220-7449-43b2-89ac-f7f71951f0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa21bcb1-603c-4244-8331-2770c3265951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282420a4-5848-4b97-ac7b-5d5b764bf01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edff5c9-9973-4824-8b61-85babe4e7c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b41b5a-7fca-48e8-99ae-6422f6eaee85",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1f2b38-b997-406c-bdd6-c8be530a8411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31616d7-5010-4999-bbe2-2df8cd40b3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1870ee-db1e-4ab6-8d0a-7a4170db8a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8e7c85-8d20-4a6c-99cb-b088d0a7faba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6825f146-7d11-4d2a-aed1-75d921ff724a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5752896b-2140-4d5a-b171-00dfefa2e52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba096f5-618d-4be1-84a8-1d4597dd5773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e076d7d5-842e-4794-80c1-0923bfa9d764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db37cc57-d0da-4d9f-8e46-b072fa747203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f1378c-ffa6-4a6b-9a45-b3671e7c8800",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4863e2-46ba-44db-b1e3-3b59c05d992b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c015bd-2275-48b2-88bd-470291d48a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40663b88-160f-407d-b64f-c35fcc8db522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ab2818-7b92-4246-9c2f-4cb2b38bd46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05149a9-26a3-4dcc-bdab-b238643d4758",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a14c197-d712-4a46-a6c8-effd1c8af033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1600b0ba-2bff-439c-b159-f8db219eca21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9764d38-8980-4f38-85ab-8e594d0a6cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33de5e5e-a88b-49a6-b8fc-b65823fba58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1556a631-f734-44d1-8125-e0dbb07123e7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabe2f24-d712-4046-aa47-3defb5f100c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6361685-f90f-457a-9c51-d122f0b370c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9675da13-0206-431e-910d-cceb141c115e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8230086-251f-4e81-bd88-af35a11d49e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4248d3-70d2-4cea-b98c-c451be222c59",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa11633a-3c16-423e-aeb8-29c6761ecab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53c9da6-27e1-4424-b447-8d69a1201d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75867a60-0b1c-4c63-9350-3d61134bc157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e813abb1-1734-46ed-a048-26a1a6558a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a7ec42-8811-4ad8-83a7-59aea917aac5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e5785b-385f-4cec-b882-70b80c12a789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aefceec-fc43-45a9-ba38-02a22be83acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce073c0-2227-45fd-b610-f86dd0f571be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020720f9-8ea2-46c0-a613-566d760908bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14886070-f103-4218-91ff-50c52300a14c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793b476a-fe97-4860-9b3a-f735e2d42be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdef4744-493a-49e1-962c-c8a2eb4d9602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe1a20e-0d4a-44fa-927a-0afb7ad68ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d791adce-1ad6-42ed-93cd-29cc246a82ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bac22b-1a4e-46f6-a0d8-743b500b011e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f246d86f-1671-43df-8592-ebdef9ba83b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef005854-6d5a-4393-87da-6ca8eb557450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d832ef31-0fbf-4cdd-a4b3-2add9b2e48fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c5c29e-c108-4fac-a1f8-d0a53e89411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbae782f-fc76-4453-84c6-8c15ab400c56",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e3ca3e-619a-4c61-bcc8-9ac3f797660e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0427b267-713b-492f-8229-7f9b142bd22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0232377d-f108-4488-b77e-bb82d252b770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3954f321-0fd6-4d85-ab7f-778fcab331a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec78657-4a2c-4f7b-a95f-3bc8120f1aa0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f25ab9f-f786-409c-a389-db28bd43a592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7af84ca-371e-4bb2-aa48-281fa8a8b251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66000429-ea72-46f1-a31b-62bd294fdfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3963e4-55b7-4b0c-a493-05f23e2584ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e379bb-2fa9-4ca3-9417-3c903feaea4c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1162a0-ca64-49d0-9232-b991d0fa4720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd89983-961d-45aa-a466-95dead3b304c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77861394-6902-429d-9ccd-00e132e822f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f312db-296c-4758-a77f-2841a23d741f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d086fb85-6737-4d2f-b9af-c581c405d883",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc93717-eaeb-40ff-b46b-da5eadb89119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67d5c70-4805-4941-9541-c5a2e623a1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e0bcd7-f813-499d-a0bc-57d6d896f763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e210b874-d112-4506-9e41-50757f020209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be792eaa-28b5-48a7-94ce-c824d6d1dc90",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e64102-6328-4b2c-a55a-457fc9ca55b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05478049-0374-477a-9a2e-25ea4c85fd23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9865b38-0ca7-469d-9aa0-3c63fced2767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b5daf2-b161-4023-9897-68a1c43e594f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99032811-5e9a-452e-b42f-178972043ab4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4efc8f3-a16b-48ce-aa37-ff4c2bea1906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9522b8-3a43-4d39-9973-8f32813ebbef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df9605f-9705-4fcf-bc58-fff36d83c140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f4297b-c5d2-4e39-ad01-1bc9fac97f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a191d0ff-a684-4706-8b41-7b7159d93fa6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3376fd46-7c14-4429-b39a-c07311dc0fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcb8c5a-b0e9-4783-8e66-11550e9e9a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e564cee-1e78-4865-ba2d-13c8a67a445f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9b04e2-ba5a-42b8-b92a-8f0f7fbeb06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef56aa1-5145-476d-b4ca-85fab9047cc1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61868db-c442-4db6-beda-f7e84e2da6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7aa39b-63d5-468a-8a0a-13c9d246ecf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bf7c30-f35e-417b-9516-0addaf99ea6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a0d553-43ec-412d-8fdf-c1a72ee97082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cac19d-e877-4a4a-9490-4efe336233da",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c388777-9c70-44d3-b906-f6c4ad2f56c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1198d76a-c36f-45a3-90aa-56dc9e42b4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50157082-4d00-4645-8680-9a459a140b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26555001-e192-49bc-bbba-b0ec2eb0d5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07da404d-de6b-49c4-8191-0f21108bea77",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47d0b2f-aa86-40a5-b4a0-81e7853ba021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bce7ad8-723f-443b-a996-17a8812508a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c410646e-0b99-4633-8122-441647a0d51e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d929f7-9ca3-481a-a4cd-ce7dd89eb6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9503eae-7c9c-4263-933f-a70059d8643d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7debdb31-d00d-41e8-8655-7974cbd62116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc42753-075d-48c1-a8d1-3df66dd2b013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3bbf8c-3081-404a-849d-12bfdca0916b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bf6ae4-1381-4686-ae67-97ee8d529d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11967572-5266-4d25-a4c9-3681a0f4032f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b09dc7-db96-46a8-b1a6-7a51c749df3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2245b326-f04d-4585-9ed9-6da4edf573bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45304e31-aa9f-476e-a328-e720935cfbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4753d2db-4847-4eb2-b381-d5da4e5146fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b920a57-e95b-4431-bd39-e2e9bba96183",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320ca62-48c1-401d-9385-795e69347018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a0fda0-6459-4d0e-9d87-6f3774c085fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bfa665-a15b-4148-b2ea-3ffa439f273e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbe8f80-195c-44af-ad01-22fbec92ac7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c117e27-82a3-48b9-930e-56ab14b92dc6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5394ea6-1298-43e8-85c4-478b18055229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0f1122-c937-4a58-a6ae-505dfe8ef728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff367c7-ee5a-4b00-b3b1-1c0593df374b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfc0a1e-9e14-4f85-895a-901f542e1e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac4003e-1fb6-4fb3-9900-b00d966886fd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe107fb9-0eb9-4733-8687-d6144d808fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7562283-5f99-4904-bf06-62e1b2c9f699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582b2955-d0b7-47f3-b493-8878ceba80ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717ddc67-d29d-449e-b814-d67fcd17d608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5fc796-561c-4db5-a655-6a30409a3300",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229d9759-e62d-43ab-9112-a745398a6b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8e592b-3299-42f3-9456-8ca2389ab628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c99835-a45e-4ca2-85e5-001feda5e482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12c623c-e175-4ef1-9264-23a6a1fc2339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5ed557-ff9b-4ef3-a624-eb9216a2746a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2b3b75-c471-4be9-80cb-22a6bf30f6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365d6c32-a218-43e2-820d-b51b8d9ca63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3d582f-832d-4321-895f-e823f9bd7e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335d5f2c-7fd8-4608-8b26-50979b14fd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81458d4-1825-4666-8389-b8a22c1eae55",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcce1f37-b5e7-4aaa-987e-03604efc359b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b96cb8-190b-48db-ba50-8f5944c41e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abbba09-5318-43d5-b6c3-7910d630d35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7185aa9e-00ab-4341-84d7-a05856b577ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db293189-697c-41f5-9a52-80dd6f9917af",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7019b698-caf4-42a1-baf4-fc3681e68bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1330e86b-c63c-48f6-ac31-2dd31a2577ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bccb7dd-9c6f-4493-a513-9c862bbd91ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f438a2-c890-4623-82ba-a2b6a53c4e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753d36ee-a0e5-47b3-9fd0-1a7a3492861d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa6bc19-50da-4cc2-b3e0-aef8c5c6ded5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d662336-fdcf-41f4-b550-2cb7ee8b1366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34f24e4-c077-4f45-a62f-7d7a73912858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5063fa0c-fb29-4fae-b448-21c3ad6b7f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599c02ca-b756-426f-a384-a58552822a03",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b431941-4a34-47b1-9b5b-8820464949a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a3cf0cf-ca2e-49b5-9f27-6b5cf5f9e7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487cdc5c-12ad-4986-ad9e-59b8e0c4b720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba3e87e-51f2-48f7-9e39-e2475754f265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad50c34-18a1-4a0d-8240-0a7911a0e509",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b307c93-3b37-4b53-a6a3-c0025e2657f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fabbadb-800d-4656-ad25-a060d2b56dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae65d63-f1b7-4e48-bff8-fb82d4d5e83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e375dc-be1e-49dd-b70a-65ca7cd34e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3817a8b-a606-4b89-bc44-664c2c1448ad",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0602eb-8ba3-45c5-a630-3a27e944aedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3255061-666a-4a02-81a7-e7b97e651368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fad58e3-5190-4572-8b44-bd3a75311e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21bc8919-0b24-47de-b37a-96e9611fe938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200bddb0-844b-4213-9b7d-b1875f46fc6a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7309cd34-35c7-43cc-92ac-a4ff12526ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "963c700d-a593-4738-9fba-5a145dd58f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfefc8a-4c33-4b0e-b439-b7a71efc67a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95652fa5-cf81-4efe-aac2-131d8fbcc4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607f8f52-4e8a-493f-9c59-74bec00d94cb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc3e44f-ed4c-4a72-9c28-818f1f81af36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac80e314-a602-442b-84b8-4ce79eff2276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daf39b9-2526-4910-9cd4-afd734b75f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccee4c3-1533-4a68-9e91-3ccc748e4bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4b54e5-a2c9-4005-8557-b035353fdc10",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11ec1c3-a238-4db8-9b78-5498e3f3c909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9a7e8a-adba-47c9-9c07-c5a0bfa3f2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e9cdf1-442a-4dd6-94a5-565836fb51ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4ccbfc-eb83-46b0-b0f4-fe14bf9589c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7d0b95-1b45-43e0-8479-e443e8b0e2b1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd85c6f-ad18-401c-9f83-c24083145116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479f6223-72c3-4e39-9d31-f38662a6defc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409ac8c2-7282-43b7-931b-f2deb50e6b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed21352-b6c5-46e3-82c0-104875ae3b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410b5ab-50a1-4072-bbd3-d69c6960e791",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b8cee4-2b2a-4f97-b267-14960f3f3372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "128ab597-5ac5-461a-af20-184bb19825f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e434dd7a-af04-4cd9-9114-13f5f7e56940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64ea3c9-721d-4035-9f80-68e8eb0da6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88b5719-f5c6-47e9-a30c-7975d6502069",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f1b5c6-48d7-404a-a3d9-1cfb70affadb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a9e905-f9a9-4783-9707-36e5dfaf8531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf7b4f1-50ce-416b-9894-175a935cb06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d76e34c-0ddb-4a3d-b754-2a06ccb31ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19bcf16-9c57-4181-ad86-4c34048e3488",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c464ec0b-9c64-4862-a2d7-79423d5b43ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a94cd18d-bfa7-4fc0-890d-a2af531d64ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4b7554-5036-45b9-9ff9-e2cc6b7c1396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c462914-d1e6-4c30-9ab4-d46acc367bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de46b0ad-1da1-43ed-82c3-73a35342a0ac",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadd29c4-a2ad-4e34-8e0c-53994c475692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0579377a-2736-4539-8c31-aa468b380d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c6334e-5094-4064-90d5-458dde5abb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fdecac-2ffe-4a96-9bcd-f6a9968743e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12b142e-2e33-4451-995f-c4a729cdc7bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68388aa2-ed98-40ac-b0a3-7c26ad7b2fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ec2cc6-01a8-4aa8-aa96-51607f241bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb9365b-c0e8-442f-b799-d41ca4ef038f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5098e1e-b30b-482c-bfdb-ee2ff3455b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5765dde-e26a-44e7-a287-d3224efe8e5e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf47995f-60c4-43eb-a647-18f886e08590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b5ba54-a243-4d00-b31d-5bdf091addc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0badf02-5874-4fd4-a756-e5ccd701f2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de53485a-77e8-4acc-97c5-591377309481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed12db3-8608-480a-94f7-1bf18b80c721",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843e35c2-299b-41e8-a971-edf87943d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26495421-22e3-4f1d-9d7a-40e53d0b24ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1ceab7-572c-44d6-92b2-f3678ef31db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5d4f6f-b722-43cd-9b36-965a8e55e2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ed4f34-e12c-484a-9b5e-9ed091d63527",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fd6dcd-bfee-46fe-b3c7-2e97525e7d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f604f3-223b-4af6-a1e5-29d6a82c18c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165d7817-511b-43c6-b851-ff0cc0cfa4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1691478-3ce9-4d76-94ad-daf6b0c953a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd45bf68-2d14-4b5a-abda-014cbc9a2ade",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6a97b6-b649-4a94-b347-2b724147a96c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f183020-8ee0-4868-b8fe-3fafefed9a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c23471c-8976-4860-b454-ae67f09e1281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb551042-9316-4e27-b631-4faf3d95188d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400e37de-dd8d-4af6-9f4e-48f6854114cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375510da-26a6-4c35-b6f1-aff077b66461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d451828-f45e-4650-bf32-7e330d4e6a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08409932-82da-4fa6-8772-91eb9ad8a75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b6c6bd-9869-473b-81e8-9746014b18f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b6182c-6acb-44dc-bf85-758a57961900",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb5d80b-3fe7-4166-9ec5-1cdb6079362f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5622b6cb-2982-4baf-a8a2-39a2b6b5b7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0207af9-affd-4704-be0a-e1eb346909ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11aa116-3549-4eff-9793-90c81ea75e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a90ec54-3a08-4c2b-9bd6-d764782ed11d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4e1cf5-7767-42fa-bb65-467d64c13d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d7b3207-203e-4056-8d27-533531b8eee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c47041c-23fa-47cd-ac8b-165bdf9ab11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96cf571-de61-488b-bc15-628b0890e14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756d23c-3bee-4af1-b5e8-574349e1560d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a6c08c-0eb9-4281-bc03-327bbe0812f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef9455d-37b1-480e-be3d-d1fa09f03be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a3387c-8313-404f-86ad-0c1e3e153dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39146ecc-7b36-468c-9782-416869cc83f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977da51b-967b-4d6b-8216-8126cd4a715c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a39676-3a9d-4818-8e77-d135f66e5708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efeab078-6f46-4d1b-a1dd-229f87fd7b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a67b88a-2eb6-400a-adb2-ea14e2ae40ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5046cec6-448b-473a-aa52-50c81d80d25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2180b5-9f94-4160-9e1f-a81fffb8918b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66011b28-3d7c-4fe3-83bf-b9b4b5bfa559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ab8548-2483-4dbb-8c63-93ca19a7c0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ac3ee8-ef76-459c-8e12-8bea277e7a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbc95c2-c3e7-411f-9a7f-a64f44e78d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c79ce89-d162-4cef-bded-d22b979c07c2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f334b-6014-434c-ad43-28225beaab71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae50ec4e-4d51-40b4-b620-cc67d4454077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203a9e24-fee1-4e27-9529-899845936552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63cd431-0101-415b-9b24-ff9bc0c97df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec138f2-c9bb-4566-a81e-440cbf34b723",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ebe608-5934-4e82-a57f-68020563f9cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2289dc7b-5976-4453-b59b-6f3ed6aed1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22b85bc-ee11-4bcc-8223-1007cebb71aa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d5b995-6258-43b8-b4f9-556c023d98af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3770be-8851-464e-bfff-cc61f23e132f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575d770c-630f-4833-9e3e-916b3df50438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed65e1e2-0b5d-4232-9015-5a76d517f3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9003b9-0b2f-447d-b198-d96cd78d9ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f592d5a9-224f-46b1-9a98-59af6e8af45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2102f6-e99a-4699-aa53-b545c85eaa5e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58043b58-84dc-49fc-a7fe-84eca150246a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c192ea9-f105-44de-bff7-c91118502835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4fb100-9b19-4613-961f-d1582a3fd2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5aad54-f3aa-4da0-a4ae-3ca7cda1e0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0681e90d-7cdc-426c-8da1-7bf1c95daae9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3a7fa3-7fa2-4d81-9c30-28cc80b23948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd228d31-38c0-47b7-b41c-22c1d75539e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e933a442-4409-46bd-87de-0075c034c45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8051f3ec-0e5a-4e21-9764-0c40cdb6bee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9689121-dde3-4024-bca1-034ec4db890d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8411892d-b33a-48e1-a232-ba21a26e0e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5458d77-0f43-4a39-bd2b-fb50539b96de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff88baa0-eeab-4d30-a8b7-1cb134cf0253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f2ac9e-737a-4de0-9a8f-99896e46b35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179c5ac-3f03-4f43-b244-b6e01df51add",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a27ad52-3018-42a4-a24a-bfa6e5df2ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72131490-823e-489b-97ef-ee408ad165e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d67e38-6f8d-48ee-80bf-c1da889e4ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60feae1e-d250-4ca4-819c-b951457cf87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afeb2ff-b915-4be7-b657-f473981b804e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f46c41-eb31-442f-a561-cfa0d46a97b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e104b7-6746-4271-866c-5df6c93f81db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7be1f7-2d02-40a4-bd67-f70ac78e3096",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6acc159-3033-423a-a854-fe69b498c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64b399d-204b-4e1d-97cc-0c3e0bce9a81",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8845b19-5e48-4c14-be92-17b93288d690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b2f321-6429-4380-93dc-84b259b54574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1ae741-9f1e-40e8-b568-fe80bf529d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5367ab02-5e64-46ac-8e47-9cca69bd8b1a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0c64bce-9679-4949-ad0c-bb371f3e1a08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf889c45-0289-4864-b7d2-0f16f0cb4b47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4429fef-e864-4cf0-a0a6-9d39358f1842",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c845038b-8d08-4214-9397-371029844e9f"
                    }
                  }
                ]
              },
              {
                "id": "f13e8b0b-b1f7-475c-be73-f66a22f7528f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8240eaee-3cf4-4c2d-8df2-d89b01776230",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f9618b-f0b1-4f7f-a794-1699fac978ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "40b2c452-eec6-4178-8c84-af96765e9cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b58e4a-781f-4034-a57b-449b48c43fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2e12e2f-2099-47f6-b04e-cee0cd987289"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "410380a7-2d78-412a-bdff-541fd99042df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3167dbd7-5f53-48d9-9626-68b1f33562aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "029f85db-7471-4efb-b8b3-5f47e8f2cf7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c712d3a-4492-4c78-8482-95f0d7762b82"
                    }
                  }
                ]
              },
              {
                "id": "6d6c4ed1-8fd4-4e8b-94d0-a1eb8e7ad495",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "64b45bb6-220b-4170-9569-77518b3599dc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835d760f-c402-4c02-87f5-2bd27bdc2562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f68828a5-9448-4cae-89b4-49ab3ec23908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626afa67-f85d-416b-a71d-043dde8fa8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68245c33-a4c8-48f5-9f2b-5fa9fb38ee17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fb4462d0-b051-47c7-b6d7-447f0e6fffb3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e267c955-effe-44a3-bdbd-0583614c7fb4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8465c2f1-408c-4cac-a0d6-9e03dbd05f85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "984e4261-9f15-4791-b8c7-3302e926572b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1394a353-08bc-4e16-8572-d5d3917be80c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88697c21-20a1-4fe4-81fd-4041d23d4b36"
                    }
                  }
                ]
              },
              {
                "id": "39873124-eaeb-49cb-9095-6317ded9ed03",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71dce4c7-ac27-4a77-ae2c-789f1ad9e3c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "409970cd-dbbd-49f5-b437-e17b3e7f21f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cef88717-35ff-495a-b459-71815bd0236e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff9cc282-d693-4f21-a368-f6db06db31b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c18a4b53-6423-4ece-8afc-bb8c86f76f3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "896e5780-4e12-48fb-888b-953626c087d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00bbe0b3-586d-426a-af86-8ac540934cdb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ad3ca39-0ed5-4cfd-8be4-bc3406215689"
            }
          }
        ]
      },
      {
        "id": "f75d45b0-61d8-493c-b922-28f9222c72ec",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cd035e5e-3d96-4358-a328-ab8f02d74ed4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "baae3893-aa62-4708-b29f-2874e509300d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c47cf1-6395-4d29-aea6-fc663c84bf8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22ad60bb-ce23-4fcb-bab4-01f7b88a3874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a5e4e7-d642-4308-9021-b4f0b837e785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc1107f3-27f6-413c-ad1a-74b68df71c24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60528ad1-4887-47ea-a448-0aab66971219",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da4a852a-2b58-4019-8f32-e1d316774cf4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f26412ad-9b20-4ebe-a61d-9af41f779765",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a866f482-e8b6-49e7-b5f3-e561600dd052"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38c1bf20-a74a-4908-84b8-fed66b680680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "96b18301-b3ef-4d28-af9c-94eae1651fbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe16f93c-8f6b-45a6-8153-73373d1b69d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ed86ce9-81f2-4972-bf6a-e96fe2588271"
            }
          }
        ]
      },
      {
        "id": "2c2b9590-9d78-4eef-b90d-fd0997755ee2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e2102314-3ca8-495b-a7fa-b60793c4f242",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcb2711f-6556-41a0-93b8-859d7e10284d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61a899e7-8b68-48b2-b3c7-5faf2fe797c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b42f4a1-cef7-4df5-b6ff-5651907e11a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "472efe48-b7a8-4603-84b5-b1f38ba22291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1986da3b-7cfe-4cd8-937b-2d5a2f540089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "162744c0-5d49-4733-b2de-28cadf966ed3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "146733cf-7e10-4756-82ff-574f349de1c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0c7b0a1-e556-4a40-8756-2507f177ea20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a79394ab-66be-4c78-978b-955f515c65e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "484bacbf-a922-4d0e-9a98-ba940bbe9a16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "254af32e-6789-461f-bba3-142a7d1fb42a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5625cf84-b9bd-4719-aba9-1164a12b4cb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4917089d-2225-4b77-a613-33ccd6d1a6ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b17b6c4-87da-440d-bf7b-e5aff66fb713"
            }
          }
        ]
      },
      {
        "id": "abac7c0e-c349-48ca-a1cd-e6a69b466405",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a79c8155-3f6b-40de-a722-1a482df9dc69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "676643d6-529d-409f-b9af-edf5154ed4b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8aa416c-783e-4934-a7f7-260d78afb3d8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9694515b-2af6-4485-a46a-d9e1a7e42cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c9f1003-a9f1-4359-be53-399956e960e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa06dc05-4690-4e15-bddf-c6584ed70236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "092fa1f6-71a2-4fe9-b8f2-a41357a7d753"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e34ee577-7dee-4d7b-8393-7bb4854989a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baf7195d-90f9-45c4-8f43-1198c548f025"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f976e8e3-b0b6-4018-9c1f-1a554f3fc176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39dc9365-a6e5-4b43-9919-210a1afe66a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9663140c-da5c-4b19-a1d9-356bfe9bd5ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cbd3743e-c743-4594-bb93-10a4537ba0fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4407dc68-dec7-4225-ab47-ee0af5f5dc5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1061a359-be7f-4a3a-9fe6-30e9f4448682"
            }
          }
        ]
      },
      {
        "id": "07edb18b-958c-4315-a550-4927af4f93c6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54c5448e-c679-4f8d-ac65-253b0e7b385d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7eccacd-57f5-47cc-96f3-eac9a769bf82",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c70f2f0c-0e23-4faa-9f54-bd04c9f041e7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f74d8036-5050-4f7e-8c1a-adf9c7724917",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bd23504-5dd5-4d30-b20a-1b6afffc5643",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.8209219858156,
      "responseMin": 9,
      "responseMax": 579,
      "responseSd": 26.481122445214687,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706488461418,
      "completed": 1706488504388
    },
    "executions": [
      {
        "id": "71376053-2125-430d-a4c9-f4571a115ea2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "47c46d6e-bf34-4106-ba58-c1e378e1d72d",
          "httpRequestId": "70aec99a-ab52-493e-94fa-18d74ab4bfdc"
        },
        "item": {
          "id": "71376053-2125-430d-a4c9-f4571a115ea2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2dfb017b-0764-4192-aad6-e0802b3d6896",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "a51796bb-4f24-4689-8d35-8ad93075179c",
        "cursor": {
          "ref": "bd8732fa-179a-45cc-8ee6-12f5c26f7b76",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5642b7da-7090-4b91-92f4-386986f1981d"
        },
        "item": {
          "id": "a51796bb-4f24-4689-8d35-8ad93075179c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9226c134-039e-4e0a-b117-d2783c80d110",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "4d2366b8-fbeb-4768-99da-4cd310f38906",
        "cursor": {
          "ref": "1c70bba2-9858-4090-a41e-326aab56d71a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "34ff05d0-a6ab-4f31-9a5f-ad13936ab333"
        },
        "item": {
          "id": "4d2366b8-fbeb-4768-99da-4cd310f38906",
          "name": "did_json"
        },
        "response": {
          "id": "8c0c88c3-e622-4420-ba8c-4f569631539c",
          "status": "OK",
          "code": 200,
          "responseTime": 579,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8fbb4b-ad50-4fa7-bead-c9ee812d144e",
        "cursor": {
          "ref": "1d28055a-f0b5-4ddb-b74b-1846d8e8251b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bc999ba2-6ca0-403c-ae79-efb1b9040f49"
        },
        "item": {
          "id": "4e8fbb4b-ad50-4fa7-bead-c9ee812d144e",
          "name": "did:invalid"
        },
        "response": {
          "id": "19a6cb1b-7854-4c20-a969-de09ee4bbd7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8fbb4b-ad50-4fa7-bead-c9ee812d144e",
        "cursor": {
          "ref": "1d28055a-f0b5-4ddb-b74b-1846d8e8251b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bc999ba2-6ca0-403c-ae79-efb1b9040f49"
        },
        "item": {
          "id": "4e8fbb4b-ad50-4fa7-bead-c9ee812d144e",
          "name": "did:invalid"
        },
        "response": {
          "id": "19a6cb1b-7854-4c20-a969-de09ee4bbd7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0688d10-21b0-4fb6-b2e0-01050f3d2d6c",
        "cursor": {
          "ref": "f42bab63-b117-4af3-bc84-03eb6e1b5839",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "be99217d-fa03-483f-9026-56e7f1bcc215"
        },
        "item": {
          "id": "a0688d10-21b0-4fb6-b2e0-01050f3d2d6c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "683252ab-81e0-4f8f-84b6-fc9cfb1f2e62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0688d10-21b0-4fb6-b2e0-01050f3d2d6c",
        "cursor": {
          "ref": "f42bab63-b117-4af3-bc84-03eb6e1b5839",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "be99217d-fa03-483f-9026-56e7f1bcc215"
        },
        "item": {
          "id": "a0688d10-21b0-4fb6-b2e0-01050f3d2d6c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "683252ab-81e0-4f8f-84b6-fc9cfb1f2e62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58870ccb-fc87-4ed4-aef8-945a305fec6c",
        "cursor": {
          "ref": "a62ee4d4-e76f-4fbe-9c02-51ef4a1811ff",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f5fbd183-ee5b-4576-95df-ee806eb64141"
        },
        "item": {
          "id": "58870ccb-fc87-4ed4-aef8-945a305fec6c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "30a76d73-f7bf-4494-baba-0ebd181c0764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58870ccb-fc87-4ed4-aef8-945a305fec6c",
        "cursor": {
          "ref": "a62ee4d4-e76f-4fbe-9c02-51ef4a1811ff",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f5fbd183-ee5b-4576-95df-ee806eb64141"
        },
        "item": {
          "id": "58870ccb-fc87-4ed4-aef8-945a305fec6c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "30a76d73-f7bf-4494-baba-0ebd181c0764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1956d384-354b-4c9d-ac5c-516916bab4e9",
        "cursor": {
          "ref": "ffc6d583-39f2-43cd-bbf3-615c90929216",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "42bc0c4c-e559-4ee6-8c6d-14f2bdd5f424"
        },
        "item": {
          "id": "1956d384-354b-4c9d-ac5c-516916bab4e9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5e9b2e11-85d1-46f2-9bcf-89e053b0da59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1956d384-354b-4c9d-ac5c-516916bab4e9",
        "cursor": {
          "ref": "ffc6d583-39f2-43cd-bbf3-615c90929216",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "42bc0c4c-e559-4ee6-8c6d-14f2bdd5f424"
        },
        "item": {
          "id": "1956d384-354b-4c9d-ac5c-516916bab4e9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5e9b2e11-85d1-46f2-9bcf-89e053b0da59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294c28cf-d0d9-42d6-b961-24b579d1a8c5",
        "cursor": {
          "ref": "9424e8f1-0ade-4c2e-ac52-ffb602af9f22",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6e492495-e0c8-480f-b5df-9a6370456a15"
        },
        "item": {
          "id": "294c28cf-d0d9-42d6-b961-24b579d1a8c5",
          "name": "identifiers"
        },
        "response": {
          "id": "7069d3de-5ac0-44c6-a156-b88b018184cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "294c28cf-d0d9-42d6-b961-24b579d1a8c5",
        "cursor": {
          "ref": "9424e8f1-0ade-4c2e-ac52-ffb602af9f22",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6e492495-e0c8-480f-b5df-9a6370456a15"
        },
        "item": {
          "id": "294c28cf-d0d9-42d6-b961-24b579d1a8c5",
          "name": "identifiers"
        },
        "response": {
          "id": "7069d3de-5ac0-44c6-a156-b88b018184cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "301eccc1-69cb-405d-be3b-65c2945da38e",
        "cursor": {
          "ref": "3b19fbb8-6410-4601-99c8-3ab961a14cde",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6f3d152c-578f-44e7-b49a-f5c3e3aecadb"
        },
        "item": {
          "id": "301eccc1-69cb-405d-be3b-65c2945da38e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "31c01ae2-6038-4fb1-bbed-4fb235d89c3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301eccc1-69cb-405d-be3b-65c2945da38e",
        "cursor": {
          "ref": "3b19fbb8-6410-4601-99c8-3ab961a14cde",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6f3d152c-578f-44e7-b49a-f5c3e3aecadb"
        },
        "item": {
          "id": "301eccc1-69cb-405d-be3b-65c2945da38e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "31c01ae2-6038-4fb1-bbed-4fb235d89c3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e298978-3c0b-4037-83fa-7dd271d6e70d",
        "cursor": {
          "ref": "adaac7e2-48a6-4346-8b72-ebd16f59dcfc",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4eb32a63-3c34-4571-b7a8-823f24b27816"
        },
        "item": {
          "id": "6e298978-3c0b-4037-83fa-7dd271d6e70d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "99c85aec-384e-4aed-a1c5-b4a92f15af33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e298978-3c0b-4037-83fa-7dd271d6e70d",
        "cursor": {
          "ref": "adaac7e2-48a6-4346-8b72-ebd16f59dcfc",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4eb32a63-3c34-4571-b7a8-823f24b27816"
        },
        "item": {
          "id": "6e298978-3c0b-4037-83fa-7dd271d6e70d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "99c85aec-384e-4aed-a1c5-b4a92f15af33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6421dca-6072-4fc5-878e-6f48ff6db4c7",
        "cursor": {
          "ref": "d9c20cb4-bd36-43e1-9687-50452b154296",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d78d7818-bf0d-435e-aa0f-bb354f2fff97"
        },
        "item": {
          "id": "d6421dca-6072-4fc5-878e-6f48ff6db4c7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "df954117-69ea-429f-b741-e3929ef2ad71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6421dca-6072-4fc5-878e-6f48ff6db4c7",
        "cursor": {
          "ref": "d9c20cb4-bd36-43e1-9687-50452b154296",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d78d7818-bf0d-435e-aa0f-bb354f2fff97"
        },
        "item": {
          "id": "d6421dca-6072-4fc5-878e-6f48ff6db4c7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "df954117-69ea-429f-b741-e3929ef2ad71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3dad07-5738-4711-9d63-f4929aa00493",
        "cursor": {
          "ref": "9f7f7a27-15cc-4099-b37f-464c5b284745",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "28dbe3b5-b397-4d3d-a257-bc67791373b3"
        },
        "item": {
          "id": "6c3dad07-5738-4711-9d63-f4929aa00493",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5dca7023-6b7c-43a4-8f0c-420874e911b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3dad07-5738-4711-9d63-f4929aa00493",
        "cursor": {
          "ref": "9f7f7a27-15cc-4099-b37f-464c5b284745",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "28dbe3b5-b397-4d3d-a257-bc67791373b3"
        },
        "item": {
          "id": "6c3dad07-5738-4711-9d63-f4929aa00493",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5dca7023-6b7c-43a4-8f0c-420874e911b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1bcab1-2886-40ea-85a6-676d3fa875db",
        "cursor": {
          "ref": "7b16b151-9c69-41f8-968c-59572934f078",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aacc40b2-f6b7-4640-abf9-a69de9e156f7"
        },
        "item": {
          "id": "3a1bcab1-2886-40ea-85a6-676d3fa875db",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "16c2fd8e-0afb-45f5-9d90-e07ca0a978f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1bcab1-2886-40ea-85a6-676d3fa875db",
        "cursor": {
          "ref": "7b16b151-9c69-41f8-968c-59572934f078",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aacc40b2-f6b7-4640-abf9-a69de9e156f7"
        },
        "item": {
          "id": "3a1bcab1-2886-40ea-85a6-676d3fa875db",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "16c2fd8e-0afb-45f5-9d90-e07ca0a978f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a957c241-5075-456a-a68f-26132f41ddbe",
        "cursor": {
          "ref": "2a62f01f-526d-4892-82dd-d75633e051bf",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bd75c2b9-2c4b-43ea-87eb-4f0d733ffb2c"
        },
        "item": {
          "id": "a957c241-5075-456a-a68f-26132f41ddbe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2a572805-b83c-4faa-8563-9ded5d0b0050",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a957c241-5075-456a-a68f-26132f41ddbe",
        "cursor": {
          "ref": "2a62f01f-526d-4892-82dd-d75633e051bf",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bd75c2b9-2c4b-43ea-87eb-4f0d733ffb2c"
        },
        "item": {
          "id": "a957c241-5075-456a-a68f-26132f41ddbe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2a572805-b83c-4faa-8563-9ded5d0b0050",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5a271f-5e0e-4a9d-80f5-ba40f4a07f48",
        "cursor": {
          "ref": "904d3b5e-8fa0-4f3c-8d75-0cf6fc19efba",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "136c58ff-e7aa-4846-93d2-e0e78d73bd03"
        },
        "item": {
          "id": "9b5a271f-5e0e-4a9d-80f5-ba40f4a07f48",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d08665f0-d0bb-421c-a26b-dcba42605552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5a271f-5e0e-4a9d-80f5-ba40f4a07f48",
        "cursor": {
          "ref": "904d3b5e-8fa0-4f3c-8d75-0cf6fc19efba",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "136c58ff-e7aa-4846-93d2-e0e78d73bd03"
        },
        "item": {
          "id": "9b5a271f-5e0e-4a9d-80f5-ba40f4a07f48",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d08665f0-d0bb-421c-a26b-dcba42605552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3791a56e-0761-433e-bae1-de07f8d7b681",
        "cursor": {
          "ref": "b772847b-13cd-4531-ad3c-aeecd3efeb46",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "370dc52d-574c-47ae-9c77-655152b7a187"
        },
        "item": {
          "id": "3791a56e-0761-433e-bae1-de07f8d7b681",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e447e6ac-34d1-43e7-a8c8-b080197a8348",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3791a56e-0761-433e-bae1-de07f8d7b681",
        "cursor": {
          "ref": "b772847b-13cd-4531-ad3c-aeecd3efeb46",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "370dc52d-574c-47ae-9c77-655152b7a187"
        },
        "item": {
          "id": "3791a56e-0761-433e-bae1-de07f8d7b681",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e447e6ac-34d1-43e7-a8c8-b080197a8348",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcdb288-24a0-400e-888a-762dd382c52b",
        "cursor": {
          "ref": "686e0054-3d2a-402d-9580-67dad0103229",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "04972ca3-1fa5-42f8-81ab-a353bbf0a492"
        },
        "item": {
          "id": "6fcdb288-24a0-400e-888a-762dd382c52b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5450b01b-78ab-4afd-a476-4b992bbce60c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcdb288-24a0-400e-888a-762dd382c52b",
        "cursor": {
          "ref": "686e0054-3d2a-402d-9580-67dad0103229",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "04972ca3-1fa5-42f8-81ab-a353bbf0a492"
        },
        "item": {
          "id": "6fcdb288-24a0-400e-888a-762dd382c52b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5450b01b-78ab-4afd-a476-4b992bbce60c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259833c4-8f28-402a-b84f-40786b3e3f90",
        "cursor": {
          "ref": "2477d1a4-4ca1-4045-867a-1c556718c5cd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ddb0e81-3afc-490e-99ba-81a50febed96"
        },
        "item": {
          "id": "259833c4-8f28-402a-b84f-40786b3e3f90",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a8abec4b-2f8c-4d99-a698-47b138bbffa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259833c4-8f28-402a-b84f-40786b3e3f90",
        "cursor": {
          "ref": "2477d1a4-4ca1-4045-867a-1c556718c5cd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8ddb0e81-3afc-490e-99ba-81a50febed96"
        },
        "item": {
          "id": "259833c4-8f28-402a-b84f-40786b3e3f90",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a8abec4b-2f8c-4d99-a698-47b138bbffa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c8c23d-1787-42e4-b99f-3883ad79d764",
        "cursor": {
          "ref": "601cb2a1-4407-4c13-90f4-2161cd4c704b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ea14f52-54fd-4297-a68f-3fa413293146"
        },
        "item": {
          "id": "02c8c23d-1787-42e4-b99f-3883ad79d764",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e62d94bd-13e0-4d86-bfcf-5443ff389d01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c8c23d-1787-42e4-b99f-3883ad79d764",
        "cursor": {
          "ref": "601cb2a1-4407-4c13-90f4-2161cd4c704b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ea14f52-54fd-4297-a68f-3fa413293146"
        },
        "item": {
          "id": "02c8c23d-1787-42e4-b99f-3883ad79d764",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e62d94bd-13e0-4d86-bfcf-5443ff389d01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd2c8f4-9d68-4fd8-8659-4b284b2f6498",
        "cursor": {
          "ref": "dc08cd33-e6a0-4318-b476-901251ef8f76",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9b819067-bbd0-4427-9f86-0d0688965339"
        },
        "item": {
          "id": "1cd2c8f4-9d68-4fd8-8659-4b284b2f6498",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7a194006-dd7f-477e-9760-f72ae67389cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd2c8f4-9d68-4fd8-8659-4b284b2f6498",
        "cursor": {
          "ref": "dc08cd33-e6a0-4318-b476-901251ef8f76",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9b819067-bbd0-4427-9f86-0d0688965339"
        },
        "item": {
          "id": "1cd2c8f4-9d68-4fd8-8659-4b284b2f6498",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7a194006-dd7f-477e-9760-f72ae67389cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a96343-9597-4719-bf4f-1143137c0a51",
        "cursor": {
          "ref": "d5b1a6db-88d2-455a-a4ef-d73a93b1a46a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c1e76073-07e0-44e6-af4c-25a7ba19cc88"
        },
        "item": {
          "id": "a9a96343-9597-4719-bf4f-1143137c0a51",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "21e47210-5b0c-4955-b734-f500e31cf756",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a96343-9597-4719-bf4f-1143137c0a51",
        "cursor": {
          "ref": "d5b1a6db-88d2-455a-a4ef-d73a93b1a46a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c1e76073-07e0-44e6-af4c-25a7ba19cc88"
        },
        "item": {
          "id": "a9a96343-9597-4719-bf4f-1143137c0a51",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "21e47210-5b0c-4955-b734-f500e31cf756",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cd62df-3d8a-4cea-91d7-69609e7f3f0c",
        "cursor": {
          "ref": "0c6eb976-796d-439c-bbb0-2b9eddcfab52",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e871668-52ef-4436-b8a7-4381160ccdb7"
        },
        "item": {
          "id": "c5cd62df-3d8a-4cea-91d7-69609e7f3f0c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9fbf78a5-857f-4ff0-a708-059568be5a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cd62df-3d8a-4cea-91d7-69609e7f3f0c",
        "cursor": {
          "ref": "0c6eb976-796d-439c-bbb0-2b9eddcfab52",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e871668-52ef-4436-b8a7-4381160ccdb7"
        },
        "item": {
          "id": "c5cd62df-3d8a-4cea-91d7-69609e7f3f0c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9fbf78a5-857f-4ff0-a708-059568be5a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1983771-fcf5-46b1-9858-da9f204d88b6",
        "cursor": {
          "ref": "d973edc9-0809-4ce7-b494-87b8a0e66c59",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f2a04d8c-1848-4354-9a05-e0aee3bef598"
        },
        "item": {
          "id": "e1983771-fcf5-46b1-9858-da9f204d88b6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4863de01-f76b-4c1d-a129-fb9391b08f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1983771-fcf5-46b1-9858-da9f204d88b6",
        "cursor": {
          "ref": "d973edc9-0809-4ce7-b494-87b8a0e66c59",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f2a04d8c-1848-4354-9a05-e0aee3bef598"
        },
        "item": {
          "id": "e1983771-fcf5-46b1-9858-da9f204d88b6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4863de01-f76b-4c1d-a129-fb9391b08f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d85e22-0e94-405a-abec-a1911b610395",
        "cursor": {
          "ref": "b53136f4-f719-41b5-ad82-c484e866e5d3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1dbfbec4-f4e1-453d-a112-f01136458fdf"
        },
        "item": {
          "id": "d5d85e22-0e94-405a-abec-a1911b610395",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f989c455-ac67-4cb0-883f-5114c682c110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d85e22-0e94-405a-abec-a1911b610395",
        "cursor": {
          "ref": "b53136f4-f719-41b5-ad82-c484e866e5d3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1dbfbec4-f4e1-453d-a112-f01136458fdf"
        },
        "item": {
          "id": "d5d85e22-0e94-405a-abec-a1911b610395",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f989c455-ac67-4cb0-883f-5114c682c110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29706ae-445c-4c4d-9367-5818ec9bc83a",
        "cursor": {
          "ref": "77d2e665-12aa-47a5-9f7d-19221797a63b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4e31bf1e-a323-45cf-8b59-ef6f243820b6"
        },
        "item": {
          "id": "a29706ae-445c-4c4d-9367-5818ec9bc83a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bcd5b89a-9b5d-4c57-9560-ff79268359c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29706ae-445c-4c4d-9367-5818ec9bc83a",
        "cursor": {
          "ref": "77d2e665-12aa-47a5-9f7d-19221797a63b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4e31bf1e-a323-45cf-8b59-ef6f243820b6"
        },
        "item": {
          "id": "a29706ae-445c-4c4d-9367-5818ec9bc83a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bcd5b89a-9b5d-4c57-9560-ff79268359c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083228d0-b559-4f5e-a1d8-488ce0b35b15",
        "cursor": {
          "ref": "b7eb58db-f571-4f1c-9cdd-932d4bc180af",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "96bd7e6e-faef-45ba-b493-f8f925a3f0bb"
        },
        "item": {
          "id": "083228d0-b559-4f5e-a1d8-488ce0b35b15",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "afb2aefa-febf-40b7-8268-bc5d00a5914c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083228d0-b559-4f5e-a1d8-488ce0b35b15",
        "cursor": {
          "ref": "b7eb58db-f571-4f1c-9cdd-932d4bc180af",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "96bd7e6e-faef-45ba-b493-f8f925a3f0bb"
        },
        "item": {
          "id": "083228d0-b559-4f5e-a1d8-488ce0b35b15",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "afb2aefa-febf-40b7-8268-bc5d00a5914c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b6aa6f-0600-48bd-acde-883dec77d5e5",
        "cursor": {
          "ref": "b970a599-7276-4659-88cf-bf85d1cbfe70",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "82077c60-6892-448d-ac66-44de06fe78cd"
        },
        "item": {
          "id": "e8b6aa6f-0600-48bd-acde-883dec77d5e5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "495e1ef2-8ce1-4b44-bd2b-d738914e0e10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b6aa6f-0600-48bd-acde-883dec77d5e5",
        "cursor": {
          "ref": "b970a599-7276-4659-88cf-bf85d1cbfe70",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "82077c60-6892-448d-ac66-44de06fe78cd"
        },
        "item": {
          "id": "e8b6aa6f-0600-48bd-acde-883dec77d5e5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "495e1ef2-8ce1-4b44-bd2b-d738914e0e10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3726dd-d6f2-4f8c-9b1f-bca1edcd76eb",
        "cursor": {
          "ref": "ff8dda2d-92b7-4ad1-b696-9a35cce07eea",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7a097e66-da23-4ea1-a4d5-bd58941f6154"
        },
        "item": {
          "id": "9d3726dd-d6f2-4f8c-9b1f-bca1edcd76eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d20d41fd-0cf3-46a5-b591-d1e31662962e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3726dd-d6f2-4f8c-9b1f-bca1edcd76eb",
        "cursor": {
          "ref": "ff8dda2d-92b7-4ad1-b696-9a35cce07eea",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7a097e66-da23-4ea1-a4d5-bd58941f6154"
        },
        "item": {
          "id": "9d3726dd-d6f2-4f8c-9b1f-bca1edcd76eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d20d41fd-0cf3-46a5-b591-d1e31662962e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94f830d-ea1f-4db8-ba5f-27c1d25679b0",
        "cursor": {
          "ref": "dfa736a3-7f79-478f-9b93-0a225639c47d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "923f5513-3f9a-406b-b1c2-2fae0b694d5e"
        },
        "item": {
          "id": "f94f830d-ea1f-4db8-ba5f-27c1d25679b0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0c59409f-4a28-48aa-9df6-aecf1d0a68b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94f830d-ea1f-4db8-ba5f-27c1d25679b0",
        "cursor": {
          "ref": "dfa736a3-7f79-478f-9b93-0a225639c47d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "923f5513-3f9a-406b-b1c2-2fae0b694d5e"
        },
        "item": {
          "id": "f94f830d-ea1f-4db8-ba5f-27c1d25679b0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0c59409f-4a28-48aa-9df6-aecf1d0a68b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3820852-39fd-41d3-b140-55ea2dbc1cd4",
        "cursor": {
          "ref": "4e1527da-b626-4dc7-a9ed-385ec4b1340b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65ca86ca-3ee1-4b90-8d5b-861dd2606a30"
        },
        "item": {
          "id": "c3820852-39fd-41d3-b140-55ea2dbc1cd4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "200f7fa2-e8e2-4594-af39-fc5ec763ec7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3820852-39fd-41d3-b140-55ea2dbc1cd4",
        "cursor": {
          "ref": "4e1527da-b626-4dc7-a9ed-385ec4b1340b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65ca86ca-3ee1-4b90-8d5b-861dd2606a30"
        },
        "item": {
          "id": "c3820852-39fd-41d3-b140-55ea2dbc1cd4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "200f7fa2-e8e2-4594-af39-fc5ec763ec7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc83b1b-0f92-48bf-a622-b4fe22543932",
        "cursor": {
          "ref": "8dfb980e-7413-4c2f-96bf-003827625d09",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fdcbb4b4-a5cc-4b1b-8eb1-3dec5ca59be2"
        },
        "item": {
          "id": "bfc83b1b-0f92-48bf-a622-b4fe22543932",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f8afd667-ab19-425d-a989-af269083f19b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc83b1b-0f92-48bf-a622-b4fe22543932",
        "cursor": {
          "ref": "8dfb980e-7413-4c2f-96bf-003827625d09",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fdcbb4b4-a5cc-4b1b-8eb1-3dec5ca59be2"
        },
        "item": {
          "id": "bfc83b1b-0f92-48bf-a622-b4fe22543932",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f8afd667-ab19-425d-a989-af269083f19b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701acb73-2a3f-4a63-8f10-a3233b99a8aa",
        "cursor": {
          "ref": "4adb3da4-0fd5-46fc-9e9e-57ead7a7749f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc1fe51f-ca8c-48e4-bce0-fdcc0ba08a0a"
        },
        "item": {
          "id": "701acb73-2a3f-4a63-8f10-a3233b99a8aa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5e77f36f-313c-4207-aa37-28e259832ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701acb73-2a3f-4a63-8f10-a3233b99a8aa",
        "cursor": {
          "ref": "4adb3da4-0fd5-46fc-9e9e-57ead7a7749f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc1fe51f-ca8c-48e4-bce0-fdcc0ba08a0a"
        },
        "item": {
          "id": "701acb73-2a3f-4a63-8f10-a3233b99a8aa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5e77f36f-313c-4207-aa37-28e259832ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2601b42f-6d2e-4acd-ae63-334ff5ca8fb6",
        "cursor": {
          "ref": "e38a6d7f-2553-4f34-bced-8423b0a66b4a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "61acb5ea-4383-4001-96d5-3e165cd14e92"
        },
        "item": {
          "id": "2601b42f-6d2e-4acd-ae63-334ff5ca8fb6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0a555807-ccab-4dc3-824a-855ad29efd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2601b42f-6d2e-4acd-ae63-334ff5ca8fb6",
        "cursor": {
          "ref": "e38a6d7f-2553-4f34-bced-8423b0a66b4a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "61acb5ea-4383-4001-96d5-3e165cd14e92"
        },
        "item": {
          "id": "2601b42f-6d2e-4acd-ae63-334ff5ca8fb6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0a555807-ccab-4dc3-824a-855ad29efd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4bc648-d51d-4fb2-acb2-4885d3d89f0d",
        "cursor": {
          "ref": "fa01a15d-1a3a-4c09-a720-fc1d3630e64f",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9b1a024f-4218-4ada-be1b-2a612694471f"
        },
        "item": {
          "id": "bd4bc648-d51d-4fb2-acb2-4885d3d89f0d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b46e9ec5-e869-495e-85df-45d43c16777c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4bc648-d51d-4fb2-acb2-4885d3d89f0d",
        "cursor": {
          "ref": "fa01a15d-1a3a-4c09-a720-fc1d3630e64f",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9b1a024f-4218-4ada-be1b-2a612694471f"
        },
        "item": {
          "id": "bd4bc648-d51d-4fb2-acb2-4885d3d89f0d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b46e9ec5-e869-495e-85df-45d43c16777c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62108a-4778-4490-b51a-ef7af87c0e3a",
        "cursor": {
          "ref": "15484e70-aeb3-4e32-8204-ee7cf799d89c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "57208500-4d7f-48bd-93c8-264fee384a5f"
        },
        "item": {
          "id": "0d62108a-4778-4490-b51a-ef7af87c0e3a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "54dbdc83-ba4c-4e3e-adc2-fc36a4fdae0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62108a-4778-4490-b51a-ef7af87c0e3a",
        "cursor": {
          "ref": "15484e70-aeb3-4e32-8204-ee7cf799d89c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "57208500-4d7f-48bd-93c8-264fee384a5f"
        },
        "item": {
          "id": "0d62108a-4778-4490-b51a-ef7af87c0e3a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "54dbdc83-ba4c-4e3e-adc2-fc36a4fdae0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f99b585-afec-4aa2-8d01-126e1a7cd5a9",
        "cursor": {
          "ref": "4a423187-10e0-4f6f-9bdf-6dfcffa6663f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "34e455bc-1deb-46a1-a49b-5fcf0eeba2c2"
        },
        "item": {
          "id": "6f99b585-afec-4aa2-8d01-126e1a7cd5a9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b8cbd194-4995-4f8f-b22f-e88cef9fbd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f99b585-afec-4aa2-8d01-126e1a7cd5a9",
        "cursor": {
          "ref": "4a423187-10e0-4f6f-9bdf-6dfcffa6663f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "34e455bc-1deb-46a1-a49b-5fcf0eeba2c2"
        },
        "item": {
          "id": "6f99b585-afec-4aa2-8d01-126e1a7cd5a9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b8cbd194-4995-4f8f-b22f-e88cef9fbd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b6c658-4fda-4874-905a-8796e4a4cf6f",
        "cursor": {
          "ref": "3ccbf148-d3eb-4b1f-9264-5b22190bc2fa",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cc9d5626-3dd4-41bf-a4a2-2013df487e5d"
        },
        "item": {
          "id": "91b6c658-4fda-4874-905a-8796e4a4cf6f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "513e6553-cbff-46b5-8b92-9bd70802ef40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b6c658-4fda-4874-905a-8796e4a4cf6f",
        "cursor": {
          "ref": "3ccbf148-d3eb-4b1f-9264-5b22190bc2fa",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cc9d5626-3dd4-41bf-a4a2-2013df487e5d"
        },
        "item": {
          "id": "91b6c658-4fda-4874-905a-8796e4a4cf6f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "513e6553-cbff-46b5-8b92-9bd70802ef40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9246586e-ec21-4be2-a040-b382c03497e6",
        "cursor": {
          "ref": "eba77880-3974-4185-a881-10bf627a0017",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c3f1d69-a89d-400a-94c8-974ea682dde0"
        },
        "item": {
          "id": "9246586e-ec21-4be2-a040-b382c03497e6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7534d295-c5e2-4ade-837c-e3cb279360e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9246586e-ec21-4be2-a040-b382c03497e6",
        "cursor": {
          "ref": "eba77880-3974-4185-a881-10bf627a0017",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c3f1d69-a89d-400a-94c8-974ea682dde0"
        },
        "item": {
          "id": "9246586e-ec21-4be2-a040-b382c03497e6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7534d295-c5e2-4ade-837c-e3cb279360e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bb7a35-68db-430b-8848-5d999c4a9035",
        "cursor": {
          "ref": "16363b5b-0acf-4b63-96ab-4a881b9fd835",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "23a68fbc-d832-42d8-b2a2-20276e1cc18d"
        },
        "item": {
          "id": "39bb7a35-68db-430b-8848-5d999c4a9035",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "181a714c-46c5-4d0c-bdcc-470a2ff280ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bb7a35-68db-430b-8848-5d999c4a9035",
        "cursor": {
          "ref": "16363b5b-0acf-4b63-96ab-4a881b9fd835",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "23a68fbc-d832-42d8-b2a2-20276e1cc18d"
        },
        "item": {
          "id": "39bb7a35-68db-430b-8848-5d999c4a9035",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "181a714c-46c5-4d0c-bdcc-470a2ff280ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea9a8ed-5bd6-4641-887e-0de0fe241f7e",
        "cursor": {
          "ref": "73d27119-c114-4ab5-9df4-34dd367ef697",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3d40e7eb-2873-491e-942a-d51662bea37d"
        },
        "item": {
          "id": "1ea9a8ed-5bd6-4641-887e-0de0fe241f7e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58f810a9-713e-49d8-84cf-c5b916d3be9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea9a8ed-5bd6-4641-887e-0de0fe241f7e",
        "cursor": {
          "ref": "73d27119-c114-4ab5-9df4-34dd367ef697",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3d40e7eb-2873-491e-942a-d51662bea37d"
        },
        "item": {
          "id": "1ea9a8ed-5bd6-4641-887e-0de0fe241f7e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58f810a9-713e-49d8-84cf-c5b916d3be9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d052ae-4814-4dc4-ac94-03ab34785f8f",
        "cursor": {
          "ref": "7de0043c-9a0c-4f10-b74d-eeb7e05e66bd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d2d17848-d195-4c73-85d6-bdb5f5297580"
        },
        "item": {
          "id": "10d052ae-4814-4dc4-ac94-03ab34785f8f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "66718426-9692-4042-9299-a9b455ef186a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d052ae-4814-4dc4-ac94-03ab34785f8f",
        "cursor": {
          "ref": "7de0043c-9a0c-4f10-b74d-eeb7e05e66bd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d2d17848-d195-4c73-85d6-bdb5f5297580"
        },
        "item": {
          "id": "10d052ae-4814-4dc4-ac94-03ab34785f8f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "66718426-9692-4042-9299-a9b455ef186a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d47f6cf-e728-4295-9cfd-f23361b8f657",
        "cursor": {
          "ref": "cfa8047b-173c-4809-9a34-4a6fdcec3d82",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f6c5bc4-0582-4627-ac73-72dc391eefb6"
        },
        "item": {
          "id": "2d47f6cf-e728-4295-9cfd-f23361b8f657",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "00f2b1c1-9e7d-4a21-8c83-941ea2344fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d47f6cf-e728-4295-9cfd-f23361b8f657",
        "cursor": {
          "ref": "cfa8047b-173c-4809-9a34-4a6fdcec3d82",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f6c5bc4-0582-4627-ac73-72dc391eefb6"
        },
        "item": {
          "id": "2d47f6cf-e728-4295-9cfd-f23361b8f657",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "00f2b1c1-9e7d-4a21-8c83-941ea2344fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbee7e25-2aa9-4d84-ba40-12c3ea554b75",
        "cursor": {
          "ref": "414b3936-6e13-4d2a-8b94-d22de1ab8d7f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "89bd6c47-720e-49ff-a484-9184e708395f"
        },
        "item": {
          "id": "bbee7e25-2aa9-4d84-ba40-12c3ea554b75",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e4051f66-43a8-4cc3-af3a-acf92c86c818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbee7e25-2aa9-4d84-ba40-12c3ea554b75",
        "cursor": {
          "ref": "414b3936-6e13-4d2a-8b94-d22de1ab8d7f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "89bd6c47-720e-49ff-a484-9184e708395f"
        },
        "item": {
          "id": "bbee7e25-2aa9-4d84-ba40-12c3ea554b75",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e4051f66-43a8-4cc3-af3a-acf92c86c818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f86b3-d89d-48b5-a36d-9d67163333d8",
        "cursor": {
          "ref": "2f7c68ce-14eb-4edc-8b3a-344e185907bc",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3ff9d286-d464-4ea9-a1f8-f4703d2c7e42"
        },
        "item": {
          "id": "5f7f86b3-d89d-48b5-a36d-9d67163333d8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b88b91a4-b45d-4e22-bfe2-9e0739071f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f86b3-d89d-48b5-a36d-9d67163333d8",
        "cursor": {
          "ref": "2f7c68ce-14eb-4edc-8b3a-344e185907bc",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3ff9d286-d464-4ea9-a1f8-f4703d2c7e42"
        },
        "item": {
          "id": "5f7f86b3-d89d-48b5-a36d-9d67163333d8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b88b91a4-b45d-4e22-bfe2-9e0739071f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e6839-51be-4c7b-b45e-660c79f4dff8",
        "cursor": {
          "ref": "ccb3124b-d1c8-4af8-b85b-e05c2526106e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b7aa7d9c-648a-4b4d-9a87-212d3e9cd433"
        },
        "item": {
          "id": "118e6839-51be-4c7b-b45e-660c79f4dff8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "33cf7a14-1119-4fa4-96cc-527f2b96b416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e6839-51be-4c7b-b45e-660c79f4dff8",
        "cursor": {
          "ref": "ccb3124b-d1c8-4af8-b85b-e05c2526106e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b7aa7d9c-648a-4b4d-9a87-212d3e9cd433"
        },
        "item": {
          "id": "118e6839-51be-4c7b-b45e-660c79f4dff8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "33cf7a14-1119-4fa4-96cc-527f2b96b416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3c9962-a364-482e-9c1c-9d64f7714545",
        "cursor": {
          "ref": "f576eacf-46de-4821-a6f2-34290551ac29",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "40f53bc3-d291-44af-a4cd-af86ac1cb16f"
        },
        "item": {
          "id": "de3c9962-a364-482e-9c1c-9d64f7714545",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "efd60bba-5abe-428e-8ef0-c1f60fa19023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3c9962-a364-482e-9c1c-9d64f7714545",
        "cursor": {
          "ref": "f576eacf-46de-4821-a6f2-34290551ac29",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "40f53bc3-d291-44af-a4cd-af86ac1cb16f"
        },
        "item": {
          "id": "de3c9962-a364-482e-9c1c-9d64f7714545",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "efd60bba-5abe-428e-8ef0-c1f60fa19023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ccf0fe-61e4-43b3-8649-22e0a8936b28",
        "cursor": {
          "ref": "52ebd093-8549-48b2-8007-3e4a2a131ace",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9ca0344e-1089-4fb9-bf0c-11c4eb1b7042"
        },
        "item": {
          "id": "d8ccf0fe-61e4-43b3-8649-22e0a8936b28",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9b60db48-f3b4-479c-ad8c-290a95af528e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ccf0fe-61e4-43b3-8649-22e0a8936b28",
        "cursor": {
          "ref": "52ebd093-8549-48b2-8007-3e4a2a131ace",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9ca0344e-1089-4fb9-bf0c-11c4eb1b7042"
        },
        "item": {
          "id": "d8ccf0fe-61e4-43b3-8649-22e0a8936b28",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9b60db48-f3b4-479c-ad8c-290a95af528e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6ecb06-a36d-4b44-9caf-7068aecde874",
        "cursor": {
          "ref": "a082b238-a67b-4bb1-8ba6-e7017fc96850",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "91e286c4-382b-46a6-8899-fe377bab352e"
        },
        "item": {
          "id": "5b6ecb06-a36d-4b44-9caf-7068aecde874",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b2f1904d-a85d-4185-a993-39c2a1541206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6ecb06-a36d-4b44-9caf-7068aecde874",
        "cursor": {
          "ref": "a082b238-a67b-4bb1-8ba6-e7017fc96850",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "91e286c4-382b-46a6-8899-fe377bab352e"
        },
        "item": {
          "id": "5b6ecb06-a36d-4b44-9caf-7068aecde874",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b2f1904d-a85d-4185-a993-39c2a1541206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d88f509-c116-4e73-b72a-353cf00d9704",
        "cursor": {
          "ref": "62fed47e-7f79-4417-807d-d4caf78a1ede",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2449b6a8-8092-442d-9c12-d994531226cb"
        },
        "item": {
          "id": "5d88f509-c116-4e73-b72a-353cf00d9704",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "46eede96-ec66-4505-a88f-f74202f0f480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d88f509-c116-4e73-b72a-353cf00d9704",
        "cursor": {
          "ref": "62fed47e-7f79-4417-807d-d4caf78a1ede",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2449b6a8-8092-442d-9c12-d994531226cb"
        },
        "item": {
          "id": "5d88f509-c116-4e73-b72a-353cf00d9704",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "46eede96-ec66-4505-a88f-f74202f0f480",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3340bfb4-6590-4d41-912d-f4b0078149d3",
        "cursor": {
          "ref": "7a8a02ee-d545-4442-8e70-8d1071a884c4",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "96544848-849f-46e4-aec2-2eec43c7a408"
        },
        "item": {
          "id": "3340bfb4-6590-4d41-912d-f4b0078149d3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ba6c95be-6856-4a28-a237-d39b48fe0bd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3340bfb4-6590-4d41-912d-f4b0078149d3",
        "cursor": {
          "ref": "7a8a02ee-d545-4442-8e70-8d1071a884c4",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "96544848-849f-46e4-aec2-2eec43c7a408"
        },
        "item": {
          "id": "3340bfb4-6590-4d41-912d-f4b0078149d3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ba6c95be-6856-4a28-a237-d39b48fe0bd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5900b316-c150-4725-9081-f3a3c1b7e5d0",
        "cursor": {
          "ref": "381b70ab-17f3-4be8-a5cc-6bf47cb02612",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "344e4e81-546e-4229-82ea-2eb3e0aaeef1"
        },
        "item": {
          "id": "5900b316-c150-4725-9081-f3a3c1b7e5d0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a06ba6f2-df28-4117-99dd-0dc804194144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5900b316-c150-4725-9081-f3a3c1b7e5d0",
        "cursor": {
          "ref": "381b70ab-17f3-4be8-a5cc-6bf47cb02612",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "344e4e81-546e-4229-82ea-2eb3e0aaeef1"
        },
        "item": {
          "id": "5900b316-c150-4725-9081-f3a3c1b7e5d0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a06ba6f2-df28-4117-99dd-0dc804194144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb275d20-ca84-4828-998f-305276009252",
        "cursor": {
          "ref": "0ea4f46a-0ef0-42d7-b0f4-d185e858622c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "375d2566-f467-458d-bc09-d62829c93012"
        },
        "item": {
          "id": "cb275d20-ca84-4828-998f-305276009252",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fab3ccca-bc47-4d4a-a721-72cbd51ca48d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb275d20-ca84-4828-998f-305276009252",
        "cursor": {
          "ref": "0ea4f46a-0ef0-42d7-b0f4-d185e858622c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "375d2566-f467-458d-bc09-d62829c93012"
        },
        "item": {
          "id": "cb275d20-ca84-4828-998f-305276009252",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fab3ccca-bc47-4d4a-a721-72cbd51ca48d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1f3e5f-6965-4adf-a701-d9f00664de70",
        "cursor": {
          "ref": "8fd9dea0-71c1-4a6b-8879-2f808e0c03d3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dc645691-c538-4651-9e87-c4b00f8cec5c"
        },
        "item": {
          "id": "8d1f3e5f-6965-4adf-a701-d9f00664de70",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f504fc3b-dcd2-4999-baf4-6f85694f3932",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1f3e5f-6965-4adf-a701-d9f00664de70",
        "cursor": {
          "ref": "8fd9dea0-71c1-4a6b-8879-2f808e0c03d3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dc645691-c538-4651-9e87-c4b00f8cec5c"
        },
        "item": {
          "id": "8d1f3e5f-6965-4adf-a701-d9f00664de70",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f504fc3b-dcd2-4999-baf4-6f85694f3932",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2201a3d5-18c4-439a-8aaa-42b38badf987",
        "cursor": {
          "ref": "12fd9f2a-3bd5-4622-bfbd-9e9376faf1ee",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d0622d77-8995-4968-a2bd-c0ca72714e31"
        },
        "item": {
          "id": "2201a3d5-18c4-439a-8aaa-42b38badf987",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1279c8c8-d028-4695-b7aa-f631384f501b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2201a3d5-18c4-439a-8aaa-42b38badf987",
        "cursor": {
          "ref": "12fd9f2a-3bd5-4622-bfbd-9e9376faf1ee",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d0622d77-8995-4968-a2bd-c0ca72714e31"
        },
        "item": {
          "id": "2201a3d5-18c4-439a-8aaa-42b38badf987",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1279c8c8-d028-4695-b7aa-f631384f501b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddc5288-fdc5-4586-8538-876bc67d6117",
        "cursor": {
          "ref": "398fcc3e-991a-4d46-ad36-6775daeedba5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ab432dd5-e016-4360-a741-1294b219334b"
        },
        "item": {
          "id": "6ddc5288-fdc5-4586-8538-876bc67d6117",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "504d7f2f-6214-4e9a-8b96-1617f5c10886",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddc5288-fdc5-4586-8538-876bc67d6117",
        "cursor": {
          "ref": "398fcc3e-991a-4d46-ad36-6775daeedba5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ab432dd5-e016-4360-a741-1294b219334b"
        },
        "item": {
          "id": "6ddc5288-fdc5-4586-8538-876bc67d6117",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "504d7f2f-6214-4e9a-8b96-1617f5c10886",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d144c09-f765-466f-92d2-c5fda3b35c4a",
        "cursor": {
          "ref": "1e222181-549d-4b23-a5b6-2f8a7bbfa28f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "417a14cb-d024-45b6-882c-3f5b0ad6fffc"
        },
        "item": {
          "id": "2d144c09-f765-466f-92d2-c5fda3b35c4a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f41ec647-99f6-4cdf-b921-7cbc09c16b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d144c09-f765-466f-92d2-c5fda3b35c4a",
        "cursor": {
          "ref": "1e222181-549d-4b23-a5b6-2f8a7bbfa28f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "417a14cb-d024-45b6-882c-3f5b0ad6fffc"
        },
        "item": {
          "id": "2d144c09-f765-466f-92d2-c5fda3b35c4a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f41ec647-99f6-4cdf-b921-7cbc09c16b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d4cd9f-c348-4250-8882-ba48f8307133",
        "cursor": {
          "ref": "cb9639a4-5817-4ece-8116-5e48c8033225",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fbdce5ca-71a8-452b-85ab-47a849b19966"
        },
        "item": {
          "id": "65d4cd9f-c348-4250-8882-ba48f8307133",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bea16413-5837-4d9b-ab5c-c76f5537d82d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d4cd9f-c348-4250-8882-ba48f8307133",
        "cursor": {
          "ref": "cb9639a4-5817-4ece-8116-5e48c8033225",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fbdce5ca-71a8-452b-85ab-47a849b19966"
        },
        "item": {
          "id": "65d4cd9f-c348-4250-8882-ba48f8307133",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bea16413-5837-4d9b-ab5c-c76f5537d82d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ffe692-9861-45ba-ab0c-09c8ed65d063",
        "cursor": {
          "ref": "ba1a1ae6-2ecd-49d2-8806-17be33b31e93",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "04c1c5fa-fc3c-4639-87c7-ccf643cb0ab5"
        },
        "item": {
          "id": "a7ffe692-9861-45ba-ab0c-09c8ed65d063",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f466ee6d-ae14-499d-bf4b-a7f01f44594a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ffe692-9861-45ba-ab0c-09c8ed65d063",
        "cursor": {
          "ref": "ba1a1ae6-2ecd-49d2-8806-17be33b31e93",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "04c1c5fa-fc3c-4639-87c7-ccf643cb0ab5"
        },
        "item": {
          "id": "a7ffe692-9861-45ba-ab0c-09c8ed65d063",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f466ee6d-ae14-499d-bf4b-a7f01f44594a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d462f4a-e0a1-4a51-8d15-81b64bd39e1e",
        "cursor": {
          "ref": "ebb0a1f3-cd85-4c0c-accc-c2c36dc71768",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4e92b3cd-c8c6-445f-b86f-5837943bea1d"
        },
        "item": {
          "id": "4d462f4a-e0a1-4a51-8d15-81b64bd39e1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6b285038-e408-4aec-8a86-264e5df97283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d462f4a-e0a1-4a51-8d15-81b64bd39e1e",
        "cursor": {
          "ref": "ebb0a1f3-cd85-4c0c-accc-c2c36dc71768",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4e92b3cd-c8c6-445f-b86f-5837943bea1d"
        },
        "item": {
          "id": "4d462f4a-e0a1-4a51-8d15-81b64bd39e1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6b285038-e408-4aec-8a86-264e5df97283",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d15ee2d-00a7-4b39-be12-5be31f108f82",
        "cursor": {
          "ref": "fe09147e-093f-4386-8213-4cd7fb029706",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "57e0cf53-32c7-4fc8-b24a-056716980450"
        },
        "item": {
          "id": "9d15ee2d-00a7-4b39-be12-5be31f108f82",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3995caf6-154d-4b68-8e3d-8e927dd142fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d15ee2d-00a7-4b39-be12-5be31f108f82",
        "cursor": {
          "ref": "fe09147e-093f-4386-8213-4cd7fb029706",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "57e0cf53-32c7-4fc8-b24a-056716980450"
        },
        "item": {
          "id": "9d15ee2d-00a7-4b39-be12-5be31f108f82",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3995caf6-154d-4b68-8e3d-8e927dd142fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0bfa0e-1448-45de-b1e8-23cc74eb16ae",
        "cursor": {
          "ref": "27c471ec-ab3c-407c-b7fb-9bc99cfc6b25",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "582f8c51-af5f-49fb-b4ba-f16b67551d2d"
        },
        "item": {
          "id": "df0bfa0e-1448-45de-b1e8-23cc74eb16ae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2c30a511-05df-4be7-96c0-b65e0dc920f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0bfa0e-1448-45de-b1e8-23cc74eb16ae",
        "cursor": {
          "ref": "27c471ec-ab3c-407c-b7fb-9bc99cfc6b25",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "582f8c51-af5f-49fb-b4ba-f16b67551d2d"
        },
        "item": {
          "id": "df0bfa0e-1448-45de-b1e8-23cc74eb16ae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2c30a511-05df-4be7-96c0-b65e0dc920f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a042ef27-adc8-411c-9a6b-f2e0d85b7943",
        "cursor": {
          "ref": "6409dff5-7465-4d28-b48a-b8799548ba3a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7d8a8d91-9dfa-469d-b647-95558b6ac931"
        },
        "item": {
          "id": "a042ef27-adc8-411c-9a6b-f2e0d85b7943",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1a895873-2cf1-4816-88af-401775433194",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a042ef27-adc8-411c-9a6b-f2e0d85b7943",
        "cursor": {
          "ref": "6409dff5-7465-4d28-b48a-b8799548ba3a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7d8a8d91-9dfa-469d-b647-95558b6ac931"
        },
        "item": {
          "id": "a042ef27-adc8-411c-9a6b-f2e0d85b7943",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1a895873-2cf1-4816-88af-401775433194",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d673857-f90d-479c-9c12-3de03d159373",
        "cursor": {
          "ref": "aad83979-41d1-44c2-a0d8-3ba534b5198f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8ad24801-55b9-44f9-ae09-c9d292c1fb19"
        },
        "item": {
          "id": "6d673857-f90d-479c-9c12-3de03d159373",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "27a693be-1470-42f2-bff1-19147fc004a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d673857-f90d-479c-9c12-3de03d159373",
        "cursor": {
          "ref": "aad83979-41d1-44c2-a0d8-3ba534b5198f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8ad24801-55b9-44f9-ae09-c9d292c1fb19"
        },
        "item": {
          "id": "6d673857-f90d-479c-9c12-3de03d159373",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "27a693be-1470-42f2-bff1-19147fc004a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2f3be5-dfc7-4f44-8f6b-0ac6c0aca207",
        "cursor": {
          "ref": "15f470ed-23b2-4482-ba0f-7c9a91cfc63c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b6e17add-20ad-4a41-90e3-49eae55895d9"
        },
        "item": {
          "id": "3f2f3be5-dfc7-4f44-8f6b-0ac6c0aca207",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2ee11cf5-a1ce-4135-ae87-5d3c35319bc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2f3be5-dfc7-4f44-8f6b-0ac6c0aca207",
        "cursor": {
          "ref": "15f470ed-23b2-4482-ba0f-7c9a91cfc63c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b6e17add-20ad-4a41-90e3-49eae55895d9"
        },
        "item": {
          "id": "3f2f3be5-dfc7-4f44-8f6b-0ac6c0aca207",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2ee11cf5-a1ce-4135-ae87-5d3c35319bc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5934eeb-71db-4ea5-9a00-21a483e48d3e",
        "cursor": {
          "ref": "1fff7698-b055-4a71-8b86-8ff3dcecdd3e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "23d9fb5b-07ac-477f-a2ab-391b5f8300fc"
        },
        "item": {
          "id": "b5934eeb-71db-4ea5-9a00-21a483e48d3e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2a6d9b67-4683-47c2-a52a-e24d427a1beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5934eeb-71db-4ea5-9a00-21a483e48d3e",
        "cursor": {
          "ref": "1fff7698-b055-4a71-8b86-8ff3dcecdd3e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "23d9fb5b-07ac-477f-a2ab-391b5f8300fc"
        },
        "item": {
          "id": "b5934eeb-71db-4ea5-9a00-21a483e48d3e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2a6d9b67-4683-47c2-a52a-e24d427a1beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae2ad5-217c-49b0-a1bf-2d8d40bbee05",
        "cursor": {
          "ref": "c4d8c6fd-21c5-4ce4-94d6-3e20808ff75c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7ab02a80-95c7-47b6-a839-1b6466ee8ca0"
        },
        "item": {
          "id": "12ae2ad5-217c-49b0-a1bf-2d8d40bbee05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "94f06ad7-32fc-4103-bc8c-17c59279ee65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae2ad5-217c-49b0-a1bf-2d8d40bbee05",
        "cursor": {
          "ref": "c4d8c6fd-21c5-4ce4-94d6-3e20808ff75c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7ab02a80-95c7-47b6-a839-1b6466ee8ca0"
        },
        "item": {
          "id": "12ae2ad5-217c-49b0-a1bf-2d8d40bbee05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "94f06ad7-32fc-4103-bc8c-17c59279ee65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a256c9a2-495b-4afd-a576-bcba40073bac",
        "cursor": {
          "ref": "4de7ef06-1716-4997-952a-1c67eb4b8f6e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "589a3c1d-afb3-4686-9c77-19c7469985e0"
        },
        "item": {
          "id": "a256c9a2-495b-4afd-a576-bcba40073bac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "604a0c11-8666-4b9c-a48d-19fed01903da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a256c9a2-495b-4afd-a576-bcba40073bac",
        "cursor": {
          "ref": "4de7ef06-1716-4997-952a-1c67eb4b8f6e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "589a3c1d-afb3-4686-9c77-19c7469985e0"
        },
        "item": {
          "id": "a256c9a2-495b-4afd-a576-bcba40073bac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "604a0c11-8666-4b9c-a48d-19fed01903da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161d9c2d-2ebb-4dcd-a793-b6273f641938",
        "cursor": {
          "ref": "16ef894e-9055-4164-8c49-56bf0f517f9c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c05ab4e6-8773-4bcb-857b-891f1485d5e5"
        },
        "item": {
          "id": "161d9c2d-2ebb-4dcd-a793-b6273f641938",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5c178bbe-8bdf-4c74-ad41-d5e710f8bcb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161d9c2d-2ebb-4dcd-a793-b6273f641938",
        "cursor": {
          "ref": "16ef894e-9055-4164-8c49-56bf0f517f9c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c05ab4e6-8773-4bcb-857b-891f1485d5e5"
        },
        "item": {
          "id": "161d9c2d-2ebb-4dcd-a793-b6273f641938",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5c178bbe-8bdf-4c74-ad41-d5e710f8bcb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711c6008-0268-410c-bea7-448517a0112f",
        "cursor": {
          "ref": "1d752ea5-ac54-4a64-bf82-b1ac600dbb01",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "655af43e-923c-4535-a460-7fc60c492db4"
        },
        "item": {
          "id": "711c6008-0268-410c-bea7-448517a0112f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bd79f9b0-8008-4bac-855d-0c320d491c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711c6008-0268-410c-bea7-448517a0112f",
        "cursor": {
          "ref": "1d752ea5-ac54-4a64-bf82-b1ac600dbb01",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "655af43e-923c-4535-a460-7fc60c492db4"
        },
        "item": {
          "id": "711c6008-0268-410c-bea7-448517a0112f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bd79f9b0-8008-4bac-855d-0c320d491c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e8e31e-6a68-498c-8dba-0609e79022f7",
        "cursor": {
          "ref": "c1891307-74a3-44d4-9969-ae740a4ac357",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "857b374b-facf-4415-a6a5-2f5e7752723f"
        },
        "item": {
          "id": "20e8e31e-6a68-498c-8dba-0609e79022f7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "42456dff-56bd-47ed-9a64-51162c77d914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e8e31e-6a68-498c-8dba-0609e79022f7",
        "cursor": {
          "ref": "c1891307-74a3-44d4-9969-ae740a4ac357",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "857b374b-facf-4415-a6a5-2f5e7752723f"
        },
        "item": {
          "id": "20e8e31e-6a68-498c-8dba-0609e79022f7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "42456dff-56bd-47ed-9a64-51162c77d914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a4b3da-4d9c-4854-8f88-fbba81ca2357",
        "cursor": {
          "ref": "d5745315-10cc-4e00-b2ea-ddea5690bbb5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "56e0640b-dfba-46bc-bb8e-ca36376d3eab"
        },
        "item": {
          "id": "a5a4b3da-4d9c-4854-8f88-fbba81ca2357",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1ff0a3b3-3a2b-4725-b26e-7cb3d982a2c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a4b3da-4d9c-4854-8f88-fbba81ca2357",
        "cursor": {
          "ref": "d5745315-10cc-4e00-b2ea-ddea5690bbb5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "56e0640b-dfba-46bc-bb8e-ca36376d3eab"
        },
        "item": {
          "id": "a5a4b3da-4d9c-4854-8f88-fbba81ca2357",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1ff0a3b3-3a2b-4725-b26e-7cb3d982a2c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820e2fe-ea3d-4634-b449-3f1b46392ce5",
        "cursor": {
          "ref": "4fbbc219-af52-4ccc-85b3-110172a9e757",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19407e07-5096-453e-8a68-7fb26447887f"
        },
        "item": {
          "id": "3820e2fe-ea3d-4634-b449-3f1b46392ce5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b1ce37a-042a-4c59-a198-a1a7a39bdd7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820e2fe-ea3d-4634-b449-3f1b46392ce5",
        "cursor": {
          "ref": "4fbbc219-af52-4ccc-85b3-110172a9e757",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19407e07-5096-453e-8a68-7fb26447887f"
        },
        "item": {
          "id": "3820e2fe-ea3d-4634-b449-3f1b46392ce5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b1ce37a-042a-4c59-a198-a1a7a39bdd7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70447eaa-4bc2-4a51-ad2f-2173caec98ab",
        "cursor": {
          "ref": "09db2229-977b-41f3-8ec5-ee340795dbb3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3c64ed9f-8a36-4bc4-a57c-9d0f8f84dfe9"
        },
        "item": {
          "id": "70447eaa-4bc2-4a51-ad2f-2173caec98ab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "aee64411-d54d-445d-a051-da2447581068",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70447eaa-4bc2-4a51-ad2f-2173caec98ab",
        "cursor": {
          "ref": "09db2229-977b-41f3-8ec5-ee340795dbb3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3c64ed9f-8a36-4bc4-a57c-9d0f8f84dfe9"
        },
        "item": {
          "id": "70447eaa-4bc2-4a51-ad2f-2173caec98ab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "aee64411-d54d-445d-a051-da2447581068",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e584be-5a9c-4eea-b115-d7a104b81254",
        "cursor": {
          "ref": "2d6bac56-f0f8-4e10-ae9b-d64fcb4f5a7c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31774ebf-b104-4c94-93cf-29c0abc0fce1"
        },
        "item": {
          "id": "91e584be-5a9c-4eea-b115-d7a104b81254",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "60b99fff-311b-4af6-806c-61f8b5ca36ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e584be-5a9c-4eea-b115-d7a104b81254",
        "cursor": {
          "ref": "2d6bac56-f0f8-4e10-ae9b-d64fcb4f5a7c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31774ebf-b104-4c94-93cf-29c0abc0fce1"
        },
        "item": {
          "id": "91e584be-5a9c-4eea-b115-d7a104b81254",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "60b99fff-311b-4af6-806c-61f8b5ca36ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988259de-ba2c-4526-aabb-9920471c15a2",
        "cursor": {
          "ref": "f0a8c46e-fd7d-4068-80da-24b5c6d313d5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0908678d-51ca-4ad8-acb6-22f86098a9ed"
        },
        "item": {
          "id": "988259de-ba2c-4526-aabb-9920471c15a2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "33e42861-45e7-4cfc-b44a-b55e0369fc3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988259de-ba2c-4526-aabb-9920471c15a2",
        "cursor": {
          "ref": "f0a8c46e-fd7d-4068-80da-24b5c6d313d5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0908678d-51ca-4ad8-acb6-22f86098a9ed"
        },
        "item": {
          "id": "988259de-ba2c-4526-aabb-9920471c15a2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "33e42861-45e7-4cfc-b44a-b55e0369fc3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0493f2-a74c-44d1-ab75-25e30010ad33",
        "cursor": {
          "ref": "39f4846c-1a03-420c-8212-91c5a522cb0e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1c5f5a09-fc69-48f9-8a41-8ea214916e7c"
        },
        "item": {
          "id": "4d0493f2-a74c-44d1-ab75-25e30010ad33",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "45f8e49d-1c9a-4685-81f5-0ff5f1dca1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0493f2-a74c-44d1-ab75-25e30010ad33",
        "cursor": {
          "ref": "39f4846c-1a03-420c-8212-91c5a522cb0e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1c5f5a09-fc69-48f9-8a41-8ea214916e7c"
        },
        "item": {
          "id": "4d0493f2-a74c-44d1-ab75-25e30010ad33",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "45f8e49d-1c9a-4685-81f5-0ff5f1dca1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de640b9-4b96-4d9d-8d75-b86882bb7ea5",
        "cursor": {
          "ref": "7417075b-ee14-4c77-9aa5-a224a0721a9e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "53a33b52-e34d-4229-8498-d26019ed664d"
        },
        "item": {
          "id": "6de640b9-4b96-4d9d-8d75-b86882bb7ea5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25f5d5f6-eb5a-4b59-a61a-8f2d8ebe14d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de640b9-4b96-4d9d-8d75-b86882bb7ea5",
        "cursor": {
          "ref": "7417075b-ee14-4c77-9aa5-a224a0721a9e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "53a33b52-e34d-4229-8498-d26019ed664d"
        },
        "item": {
          "id": "6de640b9-4b96-4d9d-8d75-b86882bb7ea5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25f5d5f6-eb5a-4b59-a61a-8f2d8ebe14d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20742ae7-5342-464c-90cf-63932a4f1521",
        "cursor": {
          "ref": "86b7b684-5f07-4e7d-97ed-c51a229dd218",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6405f444-9378-4fd5-98da-d83280956a93"
        },
        "item": {
          "id": "20742ae7-5342-464c-90cf-63932a4f1521",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "914605f3-72ad-4fe8-98e6-68539068cec6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20742ae7-5342-464c-90cf-63932a4f1521",
        "cursor": {
          "ref": "86b7b684-5f07-4e7d-97ed-c51a229dd218",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6405f444-9378-4fd5-98da-d83280956a93"
        },
        "item": {
          "id": "20742ae7-5342-464c-90cf-63932a4f1521",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "914605f3-72ad-4fe8-98e6-68539068cec6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1511d-cffc-493e-85ff-8ed753b0bf68",
        "cursor": {
          "ref": "206b064b-c682-421a-8f56-d61fc083d0ab",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "319f55ed-9a3d-4432-bac5-2f5aef372343"
        },
        "item": {
          "id": "d4d1511d-cffc-493e-85ff-8ed753b0bf68",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d6f86f21-2562-459f-854a-29c0e90841d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1511d-cffc-493e-85ff-8ed753b0bf68",
        "cursor": {
          "ref": "206b064b-c682-421a-8f56-d61fc083d0ab",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "319f55ed-9a3d-4432-bac5-2f5aef372343"
        },
        "item": {
          "id": "d4d1511d-cffc-493e-85ff-8ed753b0bf68",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d6f86f21-2562-459f-854a-29c0e90841d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf84c88-eabb-455e-bfea-2504bf1c4c2a",
        "cursor": {
          "ref": "98090f4d-1b9f-4cab-b67b-6599db712903",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39c2ff9f-dce4-4f38-9e37-da1611a3b7c0"
        },
        "item": {
          "id": "acf84c88-eabb-455e-bfea-2504bf1c4c2a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a77d9ec2-da41-47b2-a91d-9e23d77e47b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf84c88-eabb-455e-bfea-2504bf1c4c2a",
        "cursor": {
          "ref": "98090f4d-1b9f-4cab-b67b-6599db712903",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39c2ff9f-dce4-4f38-9e37-da1611a3b7c0"
        },
        "item": {
          "id": "acf84c88-eabb-455e-bfea-2504bf1c4c2a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a77d9ec2-da41-47b2-a91d-9e23d77e47b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92943124-9042-42d6-b96b-61695173e410",
        "cursor": {
          "ref": "4d3a132b-b048-4e2a-b8a5-a9fdb12dc929",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "096c275e-8185-4c01-933c-44b606521425"
        },
        "item": {
          "id": "92943124-9042-42d6-b96b-61695173e410",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "13df7ba9-b8e0-478a-8f72-c0d87ed4fae4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92943124-9042-42d6-b96b-61695173e410",
        "cursor": {
          "ref": "4d3a132b-b048-4e2a-b8a5-a9fdb12dc929",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "096c275e-8185-4c01-933c-44b606521425"
        },
        "item": {
          "id": "92943124-9042-42d6-b96b-61695173e410",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "13df7ba9-b8e0-478a-8f72-c0d87ed4fae4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd91aa0-b004-495f-b086-9f1875449001",
        "cursor": {
          "ref": "e0b0a02d-c878-4f03-bbb8-a4d11a59fadd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fa64582b-92d6-441e-9c71-ba9105e07a2c"
        },
        "item": {
          "id": "4bd91aa0-b004-495f-b086-9f1875449001",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50344e93-4bd9-488b-8dea-81b98e359354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd91aa0-b004-495f-b086-9f1875449001",
        "cursor": {
          "ref": "e0b0a02d-c878-4f03-bbb8-a4d11a59fadd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fa64582b-92d6-441e-9c71-ba9105e07a2c"
        },
        "item": {
          "id": "4bd91aa0-b004-495f-b086-9f1875449001",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50344e93-4bd9-488b-8dea-81b98e359354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88daca8f-0b2b-491e-9751-ca8676475a8d",
        "cursor": {
          "ref": "f74d3f51-f660-4b36-ac32-29160ad415d9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2f5d88fd-b6a4-48f7-8446-03557df2420f"
        },
        "item": {
          "id": "88daca8f-0b2b-491e-9751-ca8676475a8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5a738b23-5b5b-4224-826d-b87fd888f493",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88daca8f-0b2b-491e-9751-ca8676475a8d",
        "cursor": {
          "ref": "f74d3f51-f660-4b36-ac32-29160ad415d9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2f5d88fd-b6a4-48f7-8446-03557df2420f"
        },
        "item": {
          "id": "88daca8f-0b2b-491e-9751-ca8676475a8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5a738b23-5b5b-4224-826d-b87fd888f493",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af72f676-dc3f-459d-897e-078d6bdfb72e",
        "cursor": {
          "ref": "74cd2980-e6b1-4911-9a6c-74208a0dfdd5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2b5fb6ae-6606-491c-8636-3d9f343647a3"
        },
        "item": {
          "id": "af72f676-dc3f-459d-897e-078d6bdfb72e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "698266bc-5326-40bc-b67b-af48d7b4368c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af72f676-dc3f-459d-897e-078d6bdfb72e",
        "cursor": {
          "ref": "74cd2980-e6b1-4911-9a6c-74208a0dfdd5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2b5fb6ae-6606-491c-8636-3d9f343647a3"
        },
        "item": {
          "id": "af72f676-dc3f-459d-897e-078d6bdfb72e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "698266bc-5326-40bc-b67b-af48d7b4368c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2311a37f-2309-47cf-9687-44f3563163a3",
        "cursor": {
          "ref": "a1dbfe26-e7d6-4b5f-a00a-bb423501ca4b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2e1c9df3-2210-4bd5-ae50-6f81a8fee6f9"
        },
        "item": {
          "id": "2311a37f-2309-47cf-9687-44f3563163a3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3fb543d6-666f-4cfb-a317-a08c1a4510f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2311a37f-2309-47cf-9687-44f3563163a3",
        "cursor": {
          "ref": "a1dbfe26-e7d6-4b5f-a00a-bb423501ca4b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2e1c9df3-2210-4bd5-ae50-6f81a8fee6f9"
        },
        "item": {
          "id": "2311a37f-2309-47cf-9687-44f3563163a3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3fb543d6-666f-4cfb-a317-a08c1a4510f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38691e34-dbee-4e96-af79-806af0e1b9a1",
        "cursor": {
          "ref": "57d9399a-2985-4e01-8413-b80990eebf51",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ce27d72f-f8f0-44ce-a767-a215fc369cc0"
        },
        "item": {
          "id": "38691e34-dbee-4e96-af79-806af0e1b9a1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "daffcc59-9fdb-4ca9-a397-aaed9a768846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38691e34-dbee-4e96-af79-806af0e1b9a1",
        "cursor": {
          "ref": "57d9399a-2985-4e01-8413-b80990eebf51",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ce27d72f-f8f0-44ce-a767-a215fc369cc0"
        },
        "item": {
          "id": "38691e34-dbee-4e96-af79-806af0e1b9a1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "daffcc59-9fdb-4ca9-a397-aaed9a768846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fb6d2e-aea1-4734-846f-c8b272967f5c",
        "cursor": {
          "ref": "9d4955e4-38d6-4fd8-964b-dbd9cba555f5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "378f6638-0b88-4843-a7a2-dd4933e59ce8"
        },
        "item": {
          "id": "c1fb6d2e-aea1-4734-846f-c8b272967f5c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "228a05db-11bf-4cf4-871b-50d66dd11ee3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fb6d2e-aea1-4734-846f-c8b272967f5c",
        "cursor": {
          "ref": "9d4955e4-38d6-4fd8-964b-dbd9cba555f5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "378f6638-0b88-4843-a7a2-dd4933e59ce8"
        },
        "item": {
          "id": "c1fb6d2e-aea1-4734-846f-c8b272967f5c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "228a05db-11bf-4cf4-871b-50d66dd11ee3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b976d0-6b82-4b0e-a92c-416c82bef085",
        "cursor": {
          "ref": "20cc4c82-9bca-4c66-bfa4-011b131f9b90",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fe543195-ee87-4d78-afd9-7e148401055d"
        },
        "item": {
          "id": "41b976d0-6b82-4b0e-a92c-416c82bef085",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5ffd8b3f-09f1-4463-b31f-21597c2a065f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b976d0-6b82-4b0e-a92c-416c82bef085",
        "cursor": {
          "ref": "20cc4c82-9bca-4c66-bfa4-011b131f9b90",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fe543195-ee87-4d78-afd9-7e148401055d"
        },
        "item": {
          "id": "41b976d0-6b82-4b0e-a92c-416c82bef085",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5ffd8b3f-09f1-4463-b31f-21597c2a065f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8558322-b408-4b94-8076-a8e754a0543d",
        "cursor": {
          "ref": "4395a141-863f-4c8f-94d5-8b02ef195f17",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3cfae788-6175-435a-a717-24a66ab4a3c1"
        },
        "item": {
          "id": "c8558322-b408-4b94-8076-a8e754a0543d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "72b17a8e-0650-41a8-be09-83e4ba2cdc1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8558322-b408-4b94-8076-a8e754a0543d",
        "cursor": {
          "ref": "4395a141-863f-4c8f-94d5-8b02ef195f17",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3cfae788-6175-435a-a717-24a66ab4a3c1"
        },
        "item": {
          "id": "c8558322-b408-4b94-8076-a8e754a0543d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "72b17a8e-0650-41a8-be09-83e4ba2cdc1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6334568f-7aba-4561-b661-f4072fa27077",
        "cursor": {
          "ref": "154a7aa7-2fa4-4776-b6fc-2303bdcad364",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc70b0e7-38c2-4104-8a48-557d885fabfb"
        },
        "item": {
          "id": "6334568f-7aba-4561-b661-f4072fa27077",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e038eb2-b9f6-4057-80a5-db6c91c28b41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6334568f-7aba-4561-b661-f4072fa27077",
        "cursor": {
          "ref": "154a7aa7-2fa4-4776-b6fc-2303bdcad364",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cc70b0e7-38c2-4104-8a48-557d885fabfb"
        },
        "item": {
          "id": "6334568f-7aba-4561-b661-f4072fa27077",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e038eb2-b9f6-4057-80a5-db6c91c28b41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4651d8b-73a1-4714-a5a5-6b070ecfd9ae",
        "cursor": {
          "ref": "ca17492d-3385-4905-aa0c-870ec94ebb80",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "78518409-795d-4f72-9598-fd186f7432e5"
        },
        "item": {
          "id": "b4651d8b-73a1-4714-a5a5-6b070ecfd9ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d896019-662c-422e-9611-dd781b9908df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4651d8b-73a1-4714-a5a5-6b070ecfd9ae",
        "cursor": {
          "ref": "ca17492d-3385-4905-aa0c-870ec94ebb80",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "78518409-795d-4f72-9598-fd186f7432e5"
        },
        "item": {
          "id": "b4651d8b-73a1-4714-a5a5-6b070ecfd9ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d896019-662c-422e-9611-dd781b9908df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee5f70a-1cce-4cef-b995-7c05b9c71b0d",
        "cursor": {
          "ref": "4d8d2f19-32d0-4249-8439-9bbb5c30e617",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "90cdd0ed-f315-4367-a190-f0221535ffd1"
        },
        "item": {
          "id": "7ee5f70a-1cce-4cef-b995-7c05b9c71b0d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7fcb66df-1a9e-44df-a641-7d8a8778e4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee5f70a-1cce-4cef-b995-7c05b9c71b0d",
        "cursor": {
          "ref": "4d8d2f19-32d0-4249-8439-9bbb5c30e617",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "90cdd0ed-f315-4367-a190-f0221535ffd1"
        },
        "item": {
          "id": "7ee5f70a-1cce-4cef-b995-7c05b9c71b0d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7fcb66df-1a9e-44df-a641-7d8a8778e4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd212099-030a-40a4-871d-292ace612e6b",
        "cursor": {
          "ref": "e0b4a8d7-ab11-4610-af46-5bce778ecfb9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4789f921-edaf-4e4f-9d35-32596331182f"
        },
        "item": {
          "id": "dd212099-030a-40a4-871d-292ace612e6b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3a6ff0ed-5b39-4891-9c66-06ab692fa503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd212099-030a-40a4-871d-292ace612e6b",
        "cursor": {
          "ref": "e0b4a8d7-ab11-4610-af46-5bce778ecfb9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4789f921-edaf-4e4f-9d35-32596331182f"
        },
        "item": {
          "id": "dd212099-030a-40a4-871d-292ace612e6b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3a6ff0ed-5b39-4891-9c66-06ab692fa503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8013f8-1c2b-4022-8812-abb2843567f8",
        "cursor": {
          "ref": "4d6f2598-7007-4931-9718-bd077cc1bed0",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f4e4d31-6c71-4a52-b194-dbc73afda43a"
        },
        "item": {
          "id": "5a8013f8-1c2b-4022-8812-abb2843567f8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "38711f38-8e73-48af-ba70-2f34bd2d3440",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8013f8-1c2b-4022-8812-abb2843567f8",
        "cursor": {
          "ref": "4d6f2598-7007-4931-9718-bd077cc1bed0",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f4e4d31-6c71-4a52-b194-dbc73afda43a"
        },
        "item": {
          "id": "5a8013f8-1c2b-4022-8812-abb2843567f8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "38711f38-8e73-48af-ba70-2f34bd2d3440",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b86c4b-3079-4728-8961-7edd18ce9576",
        "cursor": {
          "ref": "735db9ee-aa68-4702-9ab7-9ebd03971e2f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "01aa33a4-12e1-4bce-8bfe-c61037b7c94a"
        },
        "item": {
          "id": "f7b86c4b-3079-4728-8961-7edd18ce9576",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5800f07d-19fd-419c-8022-0571f2d8ba3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b86c4b-3079-4728-8961-7edd18ce9576",
        "cursor": {
          "ref": "735db9ee-aa68-4702-9ab7-9ebd03971e2f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "01aa33a4-12e1-4bce-8bfe-c61037b7c94a"
        },
        "item": {
          "id": "f7b86c4b-3079-4728-8961-7edd18ce9576",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5800f07d-19fd-419c-8022-0571f2d8ba3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc0034f-aea2-418d-ae2c-6113afa3232a",
        "cursor": {
          "ref": "23c040a1-c748-448f-960d-3abf0dcb8553",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "73fb9b85-4246-4143-94fd-6f16fafebd79"
        },
        "item": {
          "id": "3cc0034f-aea2-418d-ae2c-6113afa3232a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0ad263a3-95a0-40ce-844b-c1f5a5f9ffee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc0034f-aea2-418d-ae2c-6113afa3232a",
        "cursor": {
          "ref": "23c040a1-c748-448f-960d-3abf0dcb8553",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "73fb9b85-4246-4143-94fd-6f16fafebd79"
        },
        "item": {
          "id": "3cc0034f-aea2-418d-ae2c-6113afa3232a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0ad263a3-95a0-40ce-844b-c1f5a5f9ffee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25e23c2-91f1-4d11-a19b-6bae8300809a",
        "cursor": {
          "ref": "df1d2e4e-a964-456c-8c5a-69f8bcca6338",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8ad3f0e2-006e-415a-97f8-99c5c3d7ce11"
        },
        "item": {
          "id": "b25e23c2-91f1-4d11-a19b-6bae8300809a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f83e30f8-23fd-4bec-bd0a-b5b8edfecd5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25e23c2-91f1-4d11-a19b-6bae8300809a",
        "cursor": {
          "ref": "df1d2e4e-a964-456c-8c5a-69f8bcca6338",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8ad3f0e2-006e-415a-97f8-99c5c3d7ce11"
        },
        "item": {
          "id": "b25e23c2-91f1-4d11-a19b-6bae8300809a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f83e30f8-23fd-4bec-bd0a-b5b8edfecd5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bfe2e1-cb89-4d9b-81c4-9680398baa06",
        "cursor": {
          "ref": "4c8f3f9d-97e1-4df6-94e9-a797bc50e98e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "14c143f7-fcee-47c7-8f7e-a0c1d1388c1b"
        },
        "item": {
          "id": "75bfe2e1-cb89-4d9b-81c4-9680398baa06",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc487090-3691-481d-8545-d492a1e5ac3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bfe2e1-cb89-4d9b-81c4-9680398baa06",
        "cursor": {
          "ref": "4c8f3f9d-97e1-4df6-94e9-a797bc50e98e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "14c143f7-fcee-47c7-8f7e-a0c1d1388c1b"
        },
        "item": {
          "id": "75bfe2e1-cb89-4d9b-81c4-9680398baa06",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc487090-3691-481d-8545-d492a1e5ac3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21d4b67-b710-4cd1-8bb3-94bf800b6cf8",
        "cursor": {
          "ref": "0f1253f4-258f-49d2-824c-7fb9bd1e8fc8",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "28b8fe02-fc43-4667-9707-101aba5d77a2"
        },
        "item": {
          "id": "e21d4b67-b710-4cd1-8bb3-94bf800b6cf8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b7d24b72-6d77-4284-a1d4-c4856be0d8f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21d4b67-b710-4cd1-8bb3-94bf800b6cf8",
        "cursor": {
          "ref": "0f1253f4-258f-49d2-824c-7fb9bd1e8fc8",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "28b8fe02-fc43-4667-9707-101aba5d77a2"
        },
        "item": {
          "id": "e21d4b67-b710-4cd1-8bb3-94bf800b6cf8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b7d24b72-6d77-4284-a1d4-c4856be0d8f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b80071-f3ea-42c4-af66-b2914572ac66",
        "cursor": {
          "ref": "af76ad22-b74c-4f56-8ada-80bb48d0c374",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f3d6c779-809c-489f-a215-9b138e006f76"
        },
        "item": {
          "id": "a8b80071-f3ea-42c4-af66-b2914572ac66",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "70deaf6c-5b58-49ff-9c71-a88dd8fb3c0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b80071-f3ea-42c4-af66-b2914572ac66",
        "cursor": {
          "ref": "af76ad22-b74c-4f56-8ada-80bb48d0c374",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f3d6c779-809c-489f-a215-9b138e006f76"
        },
        "item": {
          "id": "a8b80071-f3ea-42c4-af66-b2914572ac66",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "70deaf6c-5b58-49ff-9c71-a88dd8fb3c0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ab7023-1e06-43be-bf6f-e82e0d826eed",
        "cursor": {
          "ref": "f647396d-8af1-49a7-95d2-5d040086e939",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77c1360c-74d8-48ef-84a4-7aee3396418f"
        },
        "item": {
          "id": "14ab7023-1e06-43be-bf6f-e82e0d826eed",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "240a566f-925c-420d-bf08-0e1b87abd48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ab7023-1e06-43be-bf6f-e82e0d826eed",
        "cursor": {
          "ref": "f647396d-8af1-49a7-95d2-5d040086e939",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77c1360c-74d8-48ef-84a4-7aee3396418f"
        },
        "item": {
          "id": "14ab7023-1e06-43be-bf6f-e82e0d826eed",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "240a566f-925c-420d-bf08-0e1b87abd48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c07fac8-9d25-48a6-8ee9-3883e51267c3",
        "cursor": {
          "ref": "a8a88876-43e4-468b-a8d2-d43e789384f8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be0734fb-18c8-425e-922b-0f452c2a8989"
        },
        "item": {
          "id": "6c07fac8-9d25-48a6-8ee9-3883e51267c3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8facf928-3128-47bb-bb3e-7e63e375d65b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6c07fac8-9d25-48a6-8ee9-3883e51267c3",
        "cursor": {
          "ref": "a8a88876-43e4-468b-a8d2-d43e789384f8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be0734fb-18c8-425e-922b-0f452c2a8989"
        },
        "item": {
          "id": "6c07fac8-9d25-48a6-8ee9-3883e51267c3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8facf928-3128-47bb-bb3e-7e63e375d65b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ebc7e34b-4036-413d-9c58-477714502991",
        "cursor": {
          "ref": "18e726c2-9473-4ce2-a9f7-5821dc93bf30",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "80c531aa-7cc6-4e7b-b800-c0a93cc6eb28"
        },
        "item": {
          "id": "ebc7e34b-4036-413d-9c58-477714502991",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c163d74f-598a-4207-96fc-965fd14afb3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "ebc7e34b-4036-413d-9c58-477714502991",
        "cursor": {
          "ref": "18e726c2-9473-4ce2-a9f7-5821dc93bf30",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "80c531aa-7cc6-4e7b-b800-c0a93cc6eb28"
        },
        "item": {
          "id": "ebc7e34b-4036-413d-9c58-477714502991",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c163d74f-598a-4207-96fc-965fd14afb3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "04f0eea3-c0b4-42df-bc4b-cdc40e532b09",
        "cursor": {
          "ref": "c6bc999f-c03a-4aa3-87f8-98823f40bfa5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "39cc3140-6d85-40e4-a7a4-bbf6186356f4"
        },
        "item": {
          "id": "04f0eea3-c0b4-42df-bc4b-cdc40e532b09",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cfbcf2d3-f2ad-4adc-905b-156a260fe265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "04f0eea3-c0b4-42df-bc4b-cdc40e532b09",
        "cursor": {
          "ref": "c6bc999f-c03a-4aa3-87f8-98823f40bfa5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "39cc3140-6d85-40e4-a7a4-bbf6186356f4"
        },
        "item": {
          "id": "04f0eea3-c0b4-42df-bc4b-cdc40e532b09",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cfbcf2d3-f2ad-4adc-905b-156a260fe265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "c1aad697-d449-4df1-84d9-cab37c997e65",
        "cursor": {
          "ref": "f501ce72-7642-407b-b272-aa08c2376c13",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f54b7a7a-5c93-49b4-a0bb-811a8b62d6a5"
        },
        "item": {
          "id": "c1aad697-d449-4df1-84d9-cab37c997e65",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "58574f79-a2ca-4a4f-9314-b95dba48bdd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "c1aad697-d449-4df1-84d9-cab37c997e65",
        "cursor": {
          "ref": "f501ce72-7642-407b-b272-aa08c2376c13",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f54b7a7a-5c93-49b4-a0bb-811a8b62d6a5"
        },
        "item": {
          "id": "c1aad697-d449-4df1-84d9-cab37c997e65",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "58574f79-a2ca-4a4f-9314-b95dba48bdd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9a5a2629-abef-4834-9d68-68a62bfa7266",
        "cursor": {
          "ref": "642cafa2-68eb-4da7-b0e0-5aa422ee5209",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b37d2529-98fb-4aee-bce9-7aa5add9d569"
        },
        "item": {
          "id": "9a5a2629-abef-4834-9d68-68a62bfa7266",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b432d9cb-c610-4ace-8666-f6c40cff71e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "9a5a2629-abef-4834-9d68-68a62bfa7266",
        "cursor": {
          "ref": "642cafa2-68eb-4da7-b0e0-5aa422ee5209",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b37d2529-98fb-4aee-bce9-7aa5add9d569"
        },
        "item": {
          "id": "9a5a2629-abef-4834-9d68-68a62bfa7266",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b432d9cb-c610-4ace-8666-f6c40cff71e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "42d6b16a-838d-4ae7-b1e6-b012b5581983",
        "cursor": {
          "ref": "9a8d5bc0-2eac-4700-b6f7-4e648fa2604b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1b2d31ca-9182-4cb2-a8e0-3b6fda80fad1"
        },
        "item": {
          "id": "42d6b16a-838d-4ae7-b1e6-b012b5581983",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c7f5d46f-b0c3-4bd0-a640-15270cd6bec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "42d6b16a-838d-4ae7-b1e6-b012b5581983",
        "cursor": {
          "ref": "9a8d5bc0-2eac-4700-b6f7-4e648fa2604b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1b2d31ca-9182-4cb2-a8e0-3b6fda80fad1"
        },
        "item": {
          "id": "42d6b16a-838d-4ae7-b1e6-b012b5581983",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c7f5d46f-b0c3-4bd0-a640-15270cd6bec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a6e7b990-b6c6-4920-96e7-aab03d69aec0",
        "cursor": {
          "ref": "2fb64221-e2c2-4aa2-903a-a2384d2c68dd",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b947d635-385b-45c7-8a39-c740b7e39f02"
        },
        "item": {
          "id": "a6e7b990-b6c6-4920-96e7-aab03d69aec0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8af2404-12f7-4e87-aed1-ef67ff2acfcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "a6e7b990-b6c6-4920-96e7-aab03d69aec0",
        "cursor": {
          "ref": "2fb64221-e2c2-4aa2-903a-a2384d2c68dd",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b947d635-385b-45c7-8a39-c740b7e39f02"
        },
        "item": {
          "id": "a6e7b990-b6c6-4920-96e7-aab03d69aec0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8af2404-12f7-4e87-aed1-ef67ff2acfcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "06951b28-6dc6-4ea1-a49a-e33cbe256441",
        "cursor": {
          "ref": "8a36c4e4-e91f-4f9a-98da-6d083aef9536",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4a116622-ae3f-4150-9aed-dedbc6bc1266"
        },
        "item": {
          "id": "06951b28-6dc6-4ea1-a49a-e33cbe256441",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6174e510-c37d-4688-8ee9-d6f6cc3f5c9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06951b28-6dc6-4ea1-a49a-e33cbe256441",
        "cursor": {
          "ref": "8a36c4e4-e91f-4f9a-98da-6d083aef9536",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4a116622-ae3f-4150-9aed-dedbc6bc1266"
        },
        "item": {
          "id": "06951b28-6dc6-4ea1-a49a-e33cbe256441",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6174e510-c37d-4688-8ee9-d6f6cc3f5c9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77446abe-ecd3-4fcc-9e63-b752e1fb0ecf",
        "cursor": {
          "ref": "4070818d-1aff-411d-b5ef-02a324ed6ff8",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d7af68cd-f3e1-4cb6-bda5-dde1d71f1e07"
        },
        "item": {
          "id": "77446abe-ecd3-4fcc-9e63-b752e1fb0ecf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "53fbbcb9-9574-4b0b-b3f7-d5e9ab92fc82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77446abe-ecd3-4fcc-9e63-b752e1fb0ecf",
        "cursor": {
          "ref": "4070818d-1aff-411d-b5ef-02a324ed6ff8",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d7af68cd-f3e1-4cb6-bda5-dde1d71f1e07"
        },
        "item": {
          "id": "77446abe-ecd3-4fcc-9e63-b752e1fb0ecf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "53fbbcb9-9574-4b0b-b3f7-d5e9ab92fc82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a378207-c41b-4542-8ec5-06fd8b054e00",
        "cursor": {
          "ref": "a80df0f5-c7d3-4845-a33a-ac37424f51e7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b3971c42-f29c-4dd5-9ce7-e6f98bfba834"
        },
        "item": {
          "id": "6a378207-c41b-4542-8ec5-06fd8b054e00",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2a1ec944-ff5f-4016-9bdb-2ec4baca7927",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a378207-c41b-4542-8ec5-06fd8b054e00",
        "cursor": {
          "ref": "a80df0f5-c7d3-4845-a33a-ac37424f51e7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b3971c42-f29c-4dd5-9ce7-e6f98bfba834"
        },
        "item": {
          "id": "6a378207-c41b-4542-8ec5-06fd8b054e00",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2a1ec944-ff5f-4016-9bdb-2ec4baca7927",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b112bf-be8e-45fe-8deb-2b8b31024067",
        "cursor": {
          "ref": "2f3f4726-b611-4f87-b041-4cb012b97d77",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8c96020a-d1ea-4369-981a-a9b5bd02e75e"
        },
        "item": {
          "id": "85b112bf-be8e-45fe-8deb-2b8b31024067",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "204021ef-84f6-44b1-a039-a594ba132fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b112bf-be8e-45fe-8deb-2b8b31024067",
        "cursor": {
          "ref": "2f3f4726-b611-4f87-b041-4cb012b97d77",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8c96020a-d1ea-4369-981a-a9b5bd02e75e"
        },
        "item": {
          "id": "85b112bf-be8e-45fe-8deb-2b8b31024067",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "204021ef-84f6-44b1-a039-a594ba132fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630eba5e-c669-428c-b227-cc3fa48dbe9b",
        "cursor": {
          "ref": "04086e47-d7a3-41dd-8186-be619b025f3a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b75176bf-a0d6-46c2-a2e9-6d9bdcb1c4ed"
        },
        "item": {
          "id": "630eba5e-c669-428c-b227-cc3fa48dbe9b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1987568b-6d4d-440d-bb51-1ee4ad907ccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630eba5e-c669-428c-b227-cc3fa48dbe9b",
        "cursor": {
          "ref": "04086e47-d7a3-41dd-8186-be619b025f3a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b75176bf-a0d6-46c2-a2e9-6d9bdcb1c4ed"
        },
        "item": {
          "id": "630eba5e-c669-428c-b227-cc3fa48dbe9b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1987568b-6d4d-440d-bb51-1ee4ad907ccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb33585-9991-4a3b-a463-fe27c1d01454",
        "cursor": {
          "ref": "bbd28a3b-a615-4f2b-b4e5-dd99f918a546",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f6df5a05-c759-491c-b097-25383f3af5f8"
        },
        "item": {
          "id": "4fb33585-9991-4a3b-a463-fe27c1d01454",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "985d068d-1987-4bb5-8747-6f7b943af442",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb33585-9991-4a3b-a463-fe27c1d01454",
        "cursor": {
          "ref": "bbd28a3b-a615-4f2b-b4e5-dd99f918a546",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f6df5a05-c759-491c-b097-25383f3af5f8"
        },
        "item": {
          "id": "4fb33585-9991-4a3b-a463-fe27c1d01454",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "985d068d-1987-4bb5-8747-6f7b943af442",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf2ff5-1460-4da2-b679-ebe1a922d6df",
        "cursor": {
          "ref": "db25130a-3066-4369-ab84-93897f6b95ca",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2233aa6b-9778-4c71-b249-fc8e633faa6a"
        },
        "item": {
          "id": "8cdf2ff5-1460-4da2-b679-ebe1a922d6df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d2c0704a-74e0-4e50-bc3d-fb3d6b5ae1b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf2ff5-1460-4da2-b679-ebe1a922d6df",
        "cursor": {
          "ref": "db25130a-3066-4369-ab84-93897f6b95ca",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2233aa6b-9778-4c71-b249-fc8e633faa6a"
        },
        "item": {
          "id": "8cdf2ff5-1460-4da2-b679-ebe1a922d6df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d2c0704a-74e0-4e50-bc3d-fb3d6b5ae1b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e97cd98-374f-4382-9fb0-2aae3d253dcf",
        "cursor": {
          "ref": "6c0180a8-c16c-4bab-bbfb-a8b9c81d7e77",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dea3ad85-cc42-45af-a985-5f9906636951"
        },
        "item": {
          "id": "6e97cd98-374f-4382-9fb0-2aae3d253dcf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7acd0e9e-a4b3-463f-8b18-8470464458f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e97cd98-374f-4382-9fb0-2aae3d253dcf",
        "cursor": {
          "ref": "6c0180a8-c16c-4bab-bbfb-a8b9c81d7e77",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dea3ad85-cc42-45af-a985-5f9906636951"
        },
        "item": {
          "id": "6e97cd98-374f-4382-9fb0-2aae3d253dcf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7acd0e9e-a4b3-463f-8b18-8470464458f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161f2e6d-dfd0-4364-961d-808bdd10b0df",
        "cursor": {
          "ref": "91e1a088-7fb3-4644-a22a-4b2f0f9c6fbe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d4119217-a3c4-41f1-b916-c6cd9009e050"
        },
        "item": {
          "id": "161f2e6d-dfd0-4364-961d-808bdd10b0df",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72697430-d18c-46a4-9a2c-4abe284be92a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161f2e6d-dfd0-4364-961d-808bdd10b0df",
        "cursor": {
          "ref": "91e1a088-7fb3-4644-a22a-4b2f0f9c6fbe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d4119217-a3c4-41f1-b916-c6cd9009e050"
        },
        "item": {
          "id": "161f2e6d-dfd0-4364-961d-808bdd10b0df",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72697430-d18c-46a4-9a2c-4abe284be92a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad12dffe-d8f1-4991-9e17-a18aeade6a0d",
        "cursor": {
          "ref": "1a52256b-a5dd-4895-8979-f03ab7d10efa",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a9b89bc0-aefd-4b28-a12c-e32ced9a9693"
        },
        "item": {
          "id": "ad12dffe-d8f1-4991-9e17-a18aeade6a0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "802243da-2deb-4391-b9df-bf248b3f5ffe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad12dffe-d8f1-4991-9e17-a18aeade6a0d",
        "cursor": {
          "ref": "1a52256b-a5dd-4895-8979-f03ab7d10efa",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a9b89bc0-aefd-4b28-a12c-e32ced9a9693"
        },
        "item": {
          "id": "ad12dffe-d8f1-4991-9e17-a18aeade6a0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "802243da-2deb-4391-b9df-bf248b3f5ffe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7b2aa6-8477-4647-aade-5f23e45de340",
        "cursor": {
          "ref": "72d1fce5-9c8f-404c-8c75-85cdd7a30d75",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37c46134-7e2d-488c-8816-160276865144"
        },
        "item": {
          "id": "af7b2aa6-8477-4647-aade-5f23e45de340",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0bb93673-1b57-4474-a08c-cd8341de866d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7b2aa6-8477-4647-aade-5f23e45de340",
        "cursor": {
          "ref": "72d1fce5-9c8f-404c-8c75-85cdd7a30d75",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37c46134-7e2d-488c-8816-160276865144"
        },
        "item": {
          "id": "af7b2aa6-8477-4647-aade-5f23e45de340",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0bb93673-1b57-4474-a08c-cd8341de866d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef50207f-70c6-4537-b668-c43f3c569764",
        "cursor": {
          "ref": "c210d5aa-de37-4cda-b0e5-feec6e8bca38",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c23b1f0f-3180-4b84-a237-f940d03ec599"
        },
        "item": {
          "id": "ef50207f-70c6-4537-b668-c43f3c569764",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "74e93f72-1bb6-4297-b00b-e47fcab6a193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef50207f-70c6-4537-b668-c43f3c569764",
        "cursor": {
          "ref": "c210d5aa-de37-4cda-b0e5-feec6e8bca38",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c23b1f0f-3180-4b84-a237-f940d03ec599"
        },
        "item": {
          "id": "ef50207f-70c6-4537-b668-c43f3c569764",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "74e93f72-1bb6-4297-b00b-e47fcab6a193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d02091-156c-46d1-9de5-9787a2911cd8",
        "cursor": {
          "ref": "a3ca5aef-3db2-4547-9572-909c2a6d4855",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8ce6ef7f-cee0-4b37-83ba-791f9ca59f8a"
        },
        "item": {
          "id": "59d02091-156c-46d1-9de5-9787a2911cd8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ac32adb1-24f8-4971-bd0c-bc0cc755fc22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d02091-156c-46d1-9de5-9787a2911cd8",
        "cursor": {
          "ref": "a3ca5aef-3db2-4547-9572-909c2a6d4855",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8ce6ef7f-cee0-4b37-83ba-791f9ca59f8a"
        },
        "item": {
          "id": "59d02091-156c-46d1-9de5-9787a2911cd8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ac32adb1-24f8-4971-bd0c-bc0cc755fc22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b6bd15-0a86-43bc-a261-994f166f727a",
        "cursor": {
          "ref": "210e4934-92dd-4e94-8c9a-ac507cfa0769",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b270498e-6ccd-4e78-b9d1-70f3730a9c7a"
        },
        "item": {
          "id": "18b6bd15-0a86-43bc-a261-994f166f727a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b9914a2-42c9-46bc-9ba2-f34254623c5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b6bd15-0a86-43bc-a261-994f166f727a",
        "cursor": {
          "ref": "210e4934-92dd-4e94-8c9a-ac507cfa0769",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b270498e-6ccd-4e78-b9d1-70f3730a9c7a"
        },
        "item": {
          "id": "18b6bd15-0a86-43bc-a261-994f166f727a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b9914a2-42c9-46bc-9ba2-f34254623c5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16d7a26-dd87-4535-9f8f-c04c5ce48203",
        "cursor": {
          "ref": "8b80f74a-b152-43f4-a2ad-c2973799467c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "eb8840a0-4109-49b7-9192-bc20b39d87f0"
        },
        "item": {
          "id": "a16d7a26-dd87-4535-9f8f-c04c5ce48203",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c622ca7b-36c3-4451-b2fe-b2836738d42b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16d7a26-dd87-4535-9f8f-c04c5ce48203",
        "cursor": {
          "ref": "8b80f74a-b152-43f4-a2ad-c2973799467c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "eb8840a0-4109-49b7-9192-bc20b39d87f0"
        },
        "item": {
          "id": "a16d7a26-dd87-4535-9f8f-c04c5ce48203",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c622ca7b-36c3-4451-b2fe-b2836738d42b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9158ca-2ab3-4fde-8abe-14bbd88d60c7",
        "cursor": {
          "ref": "182d8fdc-17c7-4a34-b8ee-447efe15ffc2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ea65a679-091e-49e5-acfa-3d0d27b4fb25"
        },
        "item": {
          "id": "3a9158ca-2ab3-4fde-8abe-14bbd88d60c7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fa7ac1b6-fe9a-4dcd-b0ec-e2658d5a6167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9158ca-2ab3-4fde-8abe-14bbd88d60c7",
        "cursor": {
          "ref": "182d8fdc-17c7-4a34-b8ee-447efe15ffc2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ea65a679-091e-49e5-acfa-3d0d27b4fb25"
        },
        "item": {
          "id": "3a9158ca-2ab3-4fde-8abe-14bbd88d60c7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fa7ac1b6-fe9a-4dcd-b0ec-e2658d5a6167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f23bd-ec0a-467c-8384-ad880cecf96f",
        "cursor": {
          "ref": "74289c5c-4f3d-46b6-a083-fda2d22cc58b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1dbfa761-d202-49e1-be23-f3cc1a687389"
        },
        "item": {
          "id": "c29f23bd-ec0a-467c-8384-ad880cecf96f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "330bbf31-8cba-4c7b-9691-ca0a7c5088a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f23bd-ec0a-467c-8384-ad880cecf96f",
        "cursor": {
          "ref": "74289c5c-4f3d-46b6-a083-fda2d22cc58b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1dbfa761-d202-49e1-be23-f3cc1a687389"
        },
        "item": {
          "id": "c29f23bd-ec0a-467c-8384-ad880cecf96f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "330bbf31-8cba-4c7b-9691-ca0a7c5088a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679a28c9-c736-4cac-874a-2333f42db3cb",
        "cursor": {
          "ref": "ef126377-3a50-4dec-b875-6ca69f6a5cdf",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4f7155d6-2e5a-45c5-a2a2-b0d99ae5e574"
        },
        "item": {
          "id": "679a28c9-c736-4cac-874a-2333f42db3cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80133114-a7cd-4a32-a334-03d2f97a7601",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679a28c9-c736-4cac-874a-2333f42db3cb",
        "cursor": {
          "ref": "ef126377-3a50-4dec-b875-6ca69f6a5cdf",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4f7155d6-2e5a-45c5-a2a2-b0d99ae5e574"
        },
        "item": {
          "id": "679a28c9-c736-4cac-874a-2333f42db3cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80133114-a7cd-4a32-a334-03d2f97a7601",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a0169c-d469-4494-975c-7ff14131ccd3",
        "cursor": {
          "ref": "24ed953a-c021-44b4-abb4-04034198af41",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cb953768-7086-4ccb-80eb-88508472427a"
        },
        "item": {
          "id": "41a0169c-d469-4494-975c-7ff14131ccd3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "202fb20f-c4f8-4d13-90a7-45569a7b4efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a0169c-d469-4494-975c-7ff14131ccd3",
        "cursor": {
          "ref": "24ed953a-c021-44b4-abb4-04034198af41",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cb953768-7086-4ccb-80eb-88508472427a"
        },
        "item": {
          "id": "41a0169c-d469-4494-975c-7ff14131ccd3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "202fb20f-c4f8-4d13-90a7-45569a7b4efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106e8833-9ae9-4159-bdad-65def35c8f3a",
        "cursor": {
          "ref": "dc0dfea3-a33b-43a0-831e-498e41395160",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ad7e113f-55d1-4d77-9e61-226b7546cd8c"
        },
        "item": {
          "id": "106e8833-9ae9-4159-bdad-65def35c8f3a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "18d8efd7-ecdd-4178-8d34-289be7f42730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106e8833-9ae9-4159-bdad-65def35c8f3a",
        "cursor": {
          "ref": "dc0dfea3-a33b-43a0-831e-498e41395160",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ad7e113f-55d1-4d77-9e61-226b7546cd8c"
        },
        "item": {
          "id": "106e8833-9ae9-4159-bdad-65def35c8f3a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "18d8efd7-ecdd-4178-8d34-289be7f42730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb4ba78-ebe2-448e-8fa0-287544d459c4",
        "cursor": {
          "ref": "ca26df70-1653-4293-ada1-de266274b4cd",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3db65c6c-cadb-4709-a076-d4dcf6fc69ce"
        },
        "item": {
          "id": "5cb4ba78-ebe2-448e-8fa0-287544d459c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "767ce98a-8024-4120-ad57-e1297f50b64e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb4ba78-ebe2-448e-8fa0-287544d459c4",
        "cursor": {
          "ref": "ca26df70-1653-4293-ada1-de266274b4cd",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3db65c6c-cadb-4709-a076-d4dcf6fc69ce"
        },
        "item": {
          "id": "5cb4ba78-ebe2-448e-8fa0-287544d459c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "767ce98a-8024-4120-ad57-e1297f50b64e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f9c490-660a-4a6a-bf7c-7f8d08a57142",
        "cursor": {
          "ref": "e8e49496-2798-41ae-94ff-7eac37281dc7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bbd3d6bc-d4d6-4276-88a9-1fec60252178"
        },
        "item": {
          "id": "b2f9c490-660a-4a6a-bf7c-7f8d08a57142",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26991732-378b-4486-92e2-2f195c4a8b61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f9c490-660a-4a6a-bf7c-7f8d08a57142",
        "cursor": {
          "ref": "e8e49496-2798-41ae-94ff-7eac37281dc7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bbd3d6bc-d4d6-4276-88a9-1fec60252178"
        },
        "item": {
          "id": "b2f9c490-660a-4a6a-bf7c-7f8d08a57142",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26991732-378b-4486-92e2-2f195c4a8b61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f35695-9766-4ed1-9568-06b7edb8804e",
        "cursor": {
          "ref": "e4538fdf-b9f8-43d7-8996-11edfa8cfbae",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2b154721-68c7-4759-9170-1a2bad39cf5f"
        },
        "item": {
          "id": "d4f35695-9766-4ed1-9568-06b7edb8804e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8ea3667d-d31e-4d9d-856b-31581e7edb0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f35695-9766-4ed1-9568-06b7edb8804e",
        "cursor": {
          "ref": "e4538fdf-b9f8-43d7-8996-11edfa8cfbae",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2b154721-68c7-4759-9170-1a2bad39cf5f"
        },
        "item": {
          "id": "d4f35695-9766-4ed1-9568-06b7edb8804e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8ea3667d-d31e-4d9d-856b-31581e7edb0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf1c7a5-96bd-498b-a5fb-16b1affba4ee",
        "cursor": {
          "ref": "8b88c6f9-3589-4f70-b25e-34c681893afd",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8260d94-bfbb-46db-99d0-161fdb25e9f1"
        },
        "item": {
          "id": "bdf1c7a5-96bd-498b-a5fb-16b1affba4ee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2a1c82ae-a7cb-414f-bba5-b98e406a2b4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf1c7a5-96bd-498b-a5fb-16b1affba4ee",
        "cursor": {
          "ref": "8b88c6f9-3589-4f70-b25e-34c681893afd",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8260d94-bfbb-46db-99d0-161fdb25e9f1"
        },
        "item": {
          "id": "bdf1c7a5-96bd-498b-a5fb-16b1affba4ee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2a1c82ae-a7cb-414f-bba5-b98e406a2b4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46e243c-a51d-438a-93be-5a4ba06549e4",
        "cursor": {
          "ref": "5f2e50d1-a03a-4fd4-b15d-cdc1cba4f687",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "395f6bc2-6b4d-48b5-b3c9-a37c37dc655d"
        },
        "item": {
          "id": "b46e243c-a51d-438a-93be-5a4ba06549e4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "79ecfcb3-2139-4e56-8d10-8dc7e3fc43d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46e243c-a51d-438a-93be-5a4ba06549e4",
        "cursor": {
          "ref": "5f2e50d1-a03a-4fd4-b15d-cdc1cba4f687",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "395f6bc2-6b4d-48b5-b3c9-a37c37dc655d"
        },
        "item": {
          "id": "b46e243c-a51d-438a-93be-5a4ba06549e4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "79ecfcb3-2139-4e56-8d10-8dc7e3fc43d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71e6e94-5c27-4f54-a905-232cdea8c1d4",
        "cursor": {
          "ref": "c8b3e621-1173-4c2d-8b23-5f523dc99717",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d0a27913-571c-4065-860b-a683b8fc62de"
        },
        "item": {
          "id": "c71e6e94-5c27-4f54-a905-232cdea8c1d4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8318bc51-4ba1-456e-bc14-7e62fa044597",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71e6e94-5c27-4f54-a905-232cdea8c1d4",
        "cursor": {
          "ref": "c8b3e621-1173-4c2d-8b23-5f523dc99717",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d0a27913-571c-4065-860b-a683b8fc62de"
        },
        "item": {
          "id": "c71e6e94-5c27-4f54-a905-232cdea8c1d4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8318bc51-4ba1-456e-bc14-7e62fa044597",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc3ad30-c652-4a2e-b9e5-abc9116a6211",
        "cursor": {
          "ref": "186f46ab-5bc0-42d2-b527-25671774a8ca",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "962f3162-8acd-440c-aa69-a910ca7feccb"
        },
        "item": {
          "id": "afc3ad30-c652-4a2e-b9e5-abc9116a6211",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "62dcfb88-564d-4796-8662-b62c9b1fcb7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc3ad30-c652-4a2e-b9e5-abc9116a6211",
        "cursor": {
          "ref": "186f46ab-5bc0-42d2-b527-25671774a8ca",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "962f3162-8acd-440c-aa69-a910ca7feccb"
        },
        "item": {
          "id": "afc3ad30-c652-4a2e-b9e5-abc9116a6211",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "62dcfb88-564d-4796-8662-b62c9b1fcb7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c32ce7-67d1-4533-8394-f4febc4ee218",
        "cursor": {
          "ref": "8a1eb66a-e00a-47e0-bd5d-180ba8870c96",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a19fe600-e1e4-4226-8505-8fdfdbee3420"
        },
        "item": {
          "id": "f6c32ce7-67d1-4533-8394-f4febc4ee218",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5e9e509f-de05-4474-9c53-7fd4540ea2b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c32ce7-67d1-4533-8394-f4febc4ee218",
        "cursor": {
          "ref": "8a1eb66a-e00a-47e0-bd5d-180ba8870c96",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a19fe600-e1e4-4226-8505-8fdfdbee3420"
        },
        "item": {
          "id": "f6c32ce7-67d1-4533-8394-f4febc4ee218",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5e9e509f-de05-4474-9c53-7fd4540ea2b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bc946e-f244-4c49-a891-b4ec4e842861",
        "cursor": {
          "ref": "9c73a1da-44ac-41c7-bff5-bad34657f90e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2e749c91-66d9-4aa1-9746-fd6a3a74da03"
        },
        "item": {
          "id": "58bc946e-f244-4c49-a891-b4ec4e842861",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "20895e50-3541-4cb2-9ffe-0a405688a1c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bc946e-f244-4c49-a891-b4ec4e842861",
        "cursor": {
          "ref": "9c73a1da-44ac-41c7-bff5-bad34657f90e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2e749c91-66d9-4aa1-9746-fd6a3a74da03"
        },
        "item": {
          "id": "58bc946e-f244-4c49-a891-b4ec4e842861",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "20895e50-3541-4cb2-9ffe-0a405688a1c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e2b4da-dd21-4087-a7a8-6438a3d0d194",
        "cursor": {
          "ref": "bba68c08-1a08-47f2-82ca-6fcd9de62961",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c247f014-abf0-484e-a271-98e0fd34bb8e"
        },
        "item": {
          "id": "d4e2b4da-dd21-4087-a7a8-6438a3d0d194",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3e98dec6-8d7f-4cea-83e2-d7115a034928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e2b4da-dd21-4087-a7a8-6438a3d0d194",
        "cursor": {
          "ref": "bba68c08-1a08-47f2-82ca-6fcd9de62961",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c247f014-abf0-484e-a271-98e0fd34bb8e"
        },
        "item": {
          "id": "d4e2b4da-dd21-4087-a7a8-6438a3d0d194",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3e98dec6-8d7f-4cea-83e2-d7115a034928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1cacb2-21be-40f6-8fed-13981cb49aff",
        "cursor": {
          "ref": "d7c271fa-60e9-4565-88f2-307f3b453f7f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e5c1aec5-79e6-4298-a736-a6fd8937fabd"
        },
        "item": {
          "id": "9f1cacb2-21be-40f6-8fed-13981cb49aff",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1971c406-601b-4c41-8cb6-064f92946289",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1cacb2-21be-40f6-8fed-13981cb49aff",
        "cursor": {
          "ref": "d7c271fa-60e9-4565-88f2-307f3b453f7f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e5c1aec5-79e6-4298-a736-a6fd8937fabd"
        },
        "item": {
          "id": "9f1cacb2-21be-40f6-8fed-13981cb49aff",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1971c406-601b-4c41-8cb6-064f92946289",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b32e83-cb2f-4690-b69c-41555a0cc7ac",
        "cursor": {
          "ref": "bec6e8e4-914d-491a-a609-d5e3811ff57a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b0299b72-8fa1-4cbd-8e02-58075903bd22"
        },
        "item": {
          "id": "19b32e83-cb2f-4690-b69c-41555a0cc7ac",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "91bfc9ba-a4b2-4fa5-8294-0275471a1c8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b32e83-cb2f-4690-b69c-41555a0cc7ac",
        "cursor": {
          "ref": "bec6e8e4-914d-491a-a609-d5e3811ff57a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b0299b72-8fa1-4cbd-8e02-58075903bd22"
        },
        "item": {
          "id": "19b32e83-cb2f-4690-b69c-41555a0cc7ac",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "91bfc9ba-a4b2-4fa5-8294-0275471a1c8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b89981-c599-4c4d-9f5e-89363a2b68b1",
        "cursor": {
          "ref": "d36a438a-0e36-4421-bc14-e1d46902345e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c532bb18-a4a1-4faa-8457-5cca66050236"
        },
        "item": {
          "id": "45b89981-c599-4c4d-9f5e-89363a2b68b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1291f4d2-251e-4654-b2ca-bf16d229ac1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b89981-c599-4c4d-9f5e-89363a2b68b1",
        "cursor": {
          "ref": "d36a438a-0e36-4421-bc14-e1d46902345e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c532bb18-a4a1-4faa-8457-5cca66050236"
        },
        "item": {
          "id": "45b89981-c599-4c4d-9f5e-89363a2b68b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1291f4d2-251e-4654-b2ca-bf16d229ac1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad03e5e9-44ad-4fec-854a-5dc904489666",
        "cursor": {
          "ref": "acdf925c-19ab-4937-972f-9e4284f2b889",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a9631cab-45da-42cc-85f8-5b8a35f51861"
        },
        "item": {
          "id": "ad03e5e9-44ad-4fec-854a-5dc904489666",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "795fd345-b822-42e8-b0a9-6cc1a09c4656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad03e5e9-44ad-4fec-854a-5dc904489666",
        "cursor": {
          "ref": "acdf925c-19ab-4937-972f-9e4284f2b889",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a9631cab-45da-42cc-85f8-5b8a35f51861"
        },
        "item": {
          "id": "ad03e5e9-44ad-4fec-854a-5dc904489666",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "795fd345-b822-42e8-b0a9-6cc1a09c4656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372acbdf-52d0-472c-8c02-664a3a60309f",
        "cursor": {
          "ref": "48844aeb-402e-451c-9ef6-8053a1197191",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "499d1e38-e02d-45a7-8ebc-7c38479c070b"
        },
        "item": {
          "id": "372acbdf-52d0-472c-8c02-664a3a60309f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "761f6353-1cc9-453f-8456-0e49f148575a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372acbdf-52d0-472c-8c02-664a3a60309f",
        "cursor": {
          "ref": "48844aeb-402e-451c-9ef6-8053a1197191",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "499d1e38-e02d-45a7-8ebc-7c38479c070b"
        },
        "item": {
          "id": "372acbdf-52d0-472c-8c02-664a3a60309f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "761f6353-1cc9-453f-8456-0e49f148575a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787f738c-c6c4-4e45-8c1e-7e873aa6b25f",
        "cursor": {
          "ref": "0862f9ef-8728-41e1-a283-930928e8bfd1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3c465b02-e8c2-4a5d-b1cc-60455e86d9e0"
        },
        "item": {
          "id": "787f738c-c6c4-4e45-8c1e-7e873aa6b25f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aacd1983-1a46-41cf-aa5b-0d6f4c599177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787f738c-c6c4-4e45-8c1e-7e873aa6b25f",
        "cursor": {
          "ref": "0862f9ef-8728-41e1-a283-930928e8bfd1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3c465b02-e8c2-4a5d-b1cc-60455e86d9e0"
        },
        "item": {
          "id": "787f738c-c6c4-4e45-8c1e-7e873aa6b25f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aacd1983-1a46-41cf-aa5b-0d6f4c599177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155b2bd1-6f78-4934-98ab-62680ee60df3",
        "cursor": {
          "ref": "343d1e36-975f-4517-b8b7-7c52574452f2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56bd2d5f-55af-4a56-9ce0-d2dbb2eeffc3"
        },
        "item": {
          "id": "155b2bd1-6f78-4934-98ab-62680ee60df3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "59598546-400f-4b26-b3d9-31a83142165d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155b2bd1-6f78-4934-98ab-62680ee60df3",
        "cursor": {
          "ref": "343d1e36-975f-4517-b8b7-7c52574452f2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56bd2d5f-55af-4a56-9ce0-d2dbb2eeffc3"
        },
        "item": {
          "id": "155b2bd1-6f78-4934-98ab-62680ee60df3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "59598546-400f-4b26-b3d9-31a83142165d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec1ec68-b706-48e0-b0c0-c640a1886d67",
        "cursor": {
          "ref": "6eb9cb0a-38a5-4f93-a11b-b51a034d6356",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "16eaf5eb-c165-4941-b2b9-27dcb2e6da3e"
        },
        "item": {
          "id": "3ec1ec68-b706-48e0-b0c0-c640a1886d67",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "62f396e3-da24-4538-94a1-c380b1082725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec1ec68-b706-48e0-b0c0-c640a1886d67",
        "cursor": {
          "ref": "6eb9cb0a-38a5-4f93-a11b-b51a034d6356",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "16eaf5eb-c165-4941-b2b9-27dcb2e6da3e"
        },
        "item": {
          "id": "3ec1ec68-b706-48e0-b0c0-c640a1886d67",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "62f396e3-da24-4538-94a1-c380b1082725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773dabf6-b7ce-483b-8536-6bc7ead8c231",
        "cursor": {
          "ref": "970a1278-46f1-4baf-b501-163599535aa0",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "33ffe4da-ce8a-4c36-9545-5e9117b1af6e"
        },
        "item": {
          "id": "773dabf6-b7ce-483b-8536-6bc7ead8c231",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2490b756-2564-443f-a36c-7ce5dbbf5a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773dabf6-b7ce-483b-8536-6bc7ead8c231",
        "cursor": {
          "ref": "970a1278-46f1-4baf-b501-163599535aa0",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "33ffe4da-ce8a-4c36-9545-5e9117b1af6e"
        },
        "item": {
          "id": "773dabf6-b7ce-483b-8536-6bc7ead8c231",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2490b756-2564-443f-a36c-7ce5dbbf5a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d182db84-0489-4a72-98f5-af2c03410159",
        "cursor": {
          "ref": "ad964a6a-bbfe-46c0-b47f-feba28be0285",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4661e8a4-b1d5-4f57-a406-79fa6c03af16"
        },
        "item": {
          "id": "d182db84-0489-4a72-98f5-af2c03410159",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b273e7bc-44ce-47c9-bcb6-c1387d620f5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d182db84-0489-4a72-98f5-af2c03410159",
        "cursor": {
          "ref": "ad964a6a-bbfe-46c0-b47f-feba28be0285",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4661e8a4-b1d5-4f57-a406-79fa6c03af16"
        },
        "item": {
          "id": "d182db84-0489-4a72-98f5-af2c03410159",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b273e7bc-44ce-47c9-bcb6-c1387d620f5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e762c5c-2d18-4076-b40c-2fb83eada9a6",
        "cursor": {
          "ref": "9ef1ba68-ddc7-4c21-831e-d8a54ca1138d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "36e258e5-b2fe-42a0-89db-bee66cb54d87"
        },
        "item": {
          "id": "3e762c5c-2d18-4076-b40c-2fb83eada9a6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "db92abd8-c9a7-4cac-8d5c-28a3fc4de85e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e762c5c-2d18-4076-b40c-2fb83eada9a6",
        "cursor": {
          "ref": "9ef1ba68-ddc7-4c21-831e-d8a54ca1138d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "36e258e5-b2fe-42a0-89db-bee66cb54d87"
        },
        "item": {
          "id": "3e762c5c-2d18-4076-b40c-2fb83eada9a6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "db92abd8-c9a7-4cac-8d5c-28a3fc4de85e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47329770-bc0a-4978-985d-bc5731938ddf",
        "cursor": {
          "ref": "99bf5bd4-6837-4e25-8528-a2ff8237aa2c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "21e8db40-0395-48a2-af97-1d98c1721cb6"
        },
        "item": {
          "id": "47329770-bc0a-4978-985d-bc5731938ddf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eaefee9c-5b1e-4a80-a92b-ceeed6cce88d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47329770-bc0a-4978-985d-bc5731938ddf",
        "cursor": {
          "ref": "99bf5bd4-6837-4e25-8528-a2ff8237aa2c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "21e8db40-0395-48a2-af97-1d98c1721cb6"
        },
        "item": {
          "id": "47329770-bc0a-4978-985d-bc5731938ddf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eaefee9c-5b1e-4a80-a92b-ceeed6cce88d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d4b0ee-18cd-4571-b10c-3c692bc1d48a",
        "cursor": {
          "ref": "60d81934-fac8-49b9-a237-4fb6da799d0c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1d67ef9d-7a10-46aa-b439-13720557c14c"
        },
        "item": {
          "id": "f1d4b0ee-18cd-4571-b10c-3c692bc1d48a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8fdaecb8-9bfc-4e70-8a1e-641037d67e49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d4b0ee-18cd-4571-b10c-3c692bc1d48a",
        "cursor": {
          "ref": "60d81934-fac8-49b9-a237-4fb6da799d0c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1d67ef9d-7a10-46aa-b439-13720557c14c"
        },
        "item": {
          "id": "f1d4b0ee-18cd-4571-b10c-3c692bc1d48a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8fdaecb8-9bfc-4e70-8a1e-641037d67e49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc258dae-aa7e-4936-a5c5-ae30981478d8",
        "cursor": {
          "ref": "ec7eece2-6f6a-4c71-87f6-18fb04b24478",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "734cefd6-645d-4427-bb12-f9a945fe4b0c"
        },
        "item": {
          "id": "fc258dae-aa7e-4936-a5c5-ae30981478d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "124f2a8c-efe4-4974-9d18-d8b0c4048e75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc258dae-aa7e-4936-a5c5-ae30981478d8",
        "cursor": {
          "ref": "ec7eece2-6f6a-4c71-87f6-18fb04b24478",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "734cefd6-645d-4427-bb12-f9a945fe4b0c"
        },
        "item": {
          "id": "fc258dae-aa7e-4936-a5c5-ae30981478d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "124f2a8c-efe4-4974-9d18-d8b0c4048e75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca05d0-f3af-4b73-bf48-79f59af0bbe5",
        "cursor": {
          "ref": "90a64670-6ee9-409a-bccd-110a8523b4ad",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "11a0d867-141f-43fa-8cd8-2283aa103473"
        },
        "item": {
          "id": "e7ca05d0-f3af-4b73-bf48-79f59af0bbe5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f41328a1-dfd7-4b70-a511-e2b528a54720",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca05d0-f3af-4b73-bf48-79f59af0bbe5",
        "cursor": {
          "ref": "90a64670-6ee9-409a-bccd-110a8523b4ad",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "11a0d867-141f-43fa-8cd8-2283aa103473"
        },
        "item": {
          "id": "e7ca05d0-f3af-4b73-bf48-79f59af0bbe5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f41328a1-dfd7-4b70-a511-e2b528a54720",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e893f3-ad13-4b5d-ae22-a0da8a2039f5",
        "cursor": {
          "ref": "4cf6f4d5-2b74-46b2-a024-d7ea273bd0fe",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "65114c47-cbc7-47d5-8388-3e6e23a34090"
        },
        "item": {
          "id": "87e893f3-ad13-4b5d-ae22-a0da8a2039f5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff5f2418-0f0d-4af7-9897-6074f5acf0aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e893f3-ad13-4b5d-ae22-a0da8a2039f5",
        "cursor": {
          "ref": "4cf6f4d5-2b74-46b2-a024-d7ea273bd0fe",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "65114c47-cbc7-47d5-8388-3e6e23a34090"
        },
        "item": {
          "id": "87e893f3-ad13-4b5d-ae22-a0da8a2039f5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff5f2418-0f0d-4af7-9897-6074f5acf0aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55483c6-dddb-4d0a-83b2-f2d41e90955b",
        "cursor": {
          "ref": "82d2c4ea-fd26-4c78-a6df-52879cc8ad43",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "57fa0824-0c1f-442b-a017-c3476ab83d7d"
        },
        "item": {
          "id": "b55483c6-dddb-4d0a-83b2-f2d41e90955b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "76193ff9-3cce-49eb-9674-5c98fe880920",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55483c6-dddb-4d0a-83b2-f2d41e90955b",
        "cursor": {
          "ref": "82d2c4ea-fd26-4c78-a6df-52879cc8ad43",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "57fa0824-0c1f-442b-a017-c3476ab83d7d"
        },
        "item": {
          "id": "b55483c6-dddb-4d0a-83b2-f2d41e90955b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "76193ff9-3cce-49eb-9674-5c98fe880920",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862036a5-7c3c-4cbc-9714-ad604d409d2e",
        "cursor": {
          "ref": "e5cfcc35-5ab9-4d86-9520-8175e0b741b1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61ab2d01-3783-46fa-8bf6-ca8916dfd3a2"
        },
        "item": {
          "id": "862036a5-7c3c-4cbc-9714-ad604d409d2e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "11ef7f90-e5bc-4155-beb6-2b2d94086953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862036a5-7c3c-4cbc-9714-ad604d409d2e",
        "cursor": {
          "ref": "e5cfcc35-5ab9-4d86-9520-8175e0b741b1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61ab2d01-3783-46fa-8bf6-ca8916dfd3a2"
        },
        "item": {
          "id": "862036a5-7c3c-4cbc-9714-ad604d409d2e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "11ef7f90-e5bc-4155-beb6-2b2d94086953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82868fb-ad17-4931-b4e9-78660cf82e30",
        "cursor": {
          "ref": "28cc3817-4d0a-4567-b319-18e73bcfd84e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "129ef731-2330-4eae-a8c6-be9ff4d3050b"
        },
        "item": {
          "id": "a82868fb-ad17-4931-b4e9-78660cf82e30",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6f1197da-1440-434c-a463-d189855f4701",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82868fb-ad17-4931-b4e9-78660cf82e30",
        "cursor": {
          "ref": "28cc3817-4d0a-4567-b319-18e73bcfd84e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "129ef731-2330-4eae-a8c6-be9ff4d3050b"
        },
        "item": {
          "id": "a82868fb-ad17-4931-b4e9-78660cf82e30",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6f1197da-1440-434c-a463-d189855f4701",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd98f6e-3b57-45be-bf3d-8e99e973a49b",
        "cursor": {
          "ref": "0ffe82e5-7357-4eda-84af-663594c28a9d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba37df53-9de1-4379-8e1b-6f46e8fd8915"
        },
        "item": {
          "id": "4cd98f6e-3b57-45be-bf3d-8e99e973a49b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19cde185-7e88-46ab-8f9f-431db2f652ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd98f6e-3b57-45be-bf3d-8e99e973a49b",
        "cursor": {
          "ref": "0ffe82e5-7357-4eda-84af-663594c28a9d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba37df53-9de1-4379-8e1b-6f46e8fd8915"
        },
        "item": {
          "id": "4cd98f6e-3b57-45be-bf3d-8e99e973a49b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19cde185-7e88-46ab-8f9f-431db2f652ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1a6102-044b-4ed4-862f-87c3d29beadf",
        "cursor": {
          "ref": "32745717-641f-4f50-8ee9-76c2f533ae52",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "988abb9c-4d0d-48a0-aca6-3294e14eeeaf"
        },
        "item": {
          "id": "ce1a6102-044b-4ed4-862f-87c3d29beadf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ab1aef96-6974-4569-ad85-a951c14254f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1a6102-044b-4ed4-862f-87c3d29beadf",
        "cursor": {
          "ref": "32745717-641f-4f50-8ee9-76c2f533ae52",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "988abb9c-4d0d-48a0-aca6-3294e14eeeaf"
        },
        "item": {
          "id": "ce1a6102-044b-4ed4-862f-87c3d29beadf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ab1aef96-6974-4569-ad85-a951c14254f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec776539-370a-48ce-b48d-3673332e1c38",
        "cursor": {
          "ref": "41236e57-decc-4dae-ae90-2d6ed98bab3b",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3bde135f-3e8c-49ce-9e41-db44c55231e3"
        },
        "item": {
          "id": "ec776539-370a-48ce-b48d-3673332e1c38",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "804f507a-17ba-42d7-86f8-a2e738d59272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec776539-370a-48ce-b48d-3673332e1c38",
        "cursor": {
          "ref": "41236e57-decc-4dae-ae90-2d6ed98bab3b",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3bde135f-3e8c-49ce-9e41-db44c55231e3"
        },
        "item": {
          "id": "ec776539-370a-48ce-b48d-3673332e1c38",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "804f507a-17ba-42d7-86f8-a2e738d59272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c21f04-8a20-4a1f-a59e-e7da51e864b9",
        "cursor": {
          "ref": "3dbb4222-1348-45fa-a439-2913f5a7ab6b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "21e5ebbd-52d2-4f7f-aa94-d14cd586a9f1"
        },
        "item": {
          "id": "f9c21f04-8a20-4a1f-a59e-e7da51e864b9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9fbd3d89-2eb3-480d-bd73-0761254ddd3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c21f04-8a20-4a1f-a59e-e7da51e864b9",
        "cursor": {
          "ref": "3dbb4222-1348-45fa-a439-2913f5a7ab6b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "21e5ebbd-52d2-4f7f-aa94-d14cd586a9f1"
        },
        "item": {
          "id": "f9c21f04-8a20-4a1f-a59e-e7da51e864b9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9fbd3d89-2eb3-480d-bd73-0761254ddd3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e5e901-7611-47df-a47f-872e95beceaa",
        "cursor": {
          "ref": "98ab466f-8d5d-432e-904a-9631f4c84360",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "adb97897-58a4-4e43-9735-376a0f301d47"
        },
        "item": {
          "id": "96e5e901-7611-47df-a47f-872e95beceaa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4bd11336-651a-4548-845f-465029d25461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e5e901-7611-47df-a47f-872e95beceaa",
        "cursor": {
          "ref": "98ab466f-8d5d-432e-904a-9631f4c84360",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "adb97897-58a4-4e43-9735-376a0f301d47"
        },
        "item": {
          "id": "96e5e901-7611-47df-a47f-872e95beceaa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4bd11336-651a-4548-845f-465029d25461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2508d5-c7fd-42ec-a9e0-922482c69d16",
        "cursor": {
          "ref": "da5bce4c-291d-4d10-9078-16c1d8e15fde",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3ccd536d-c851-469d-8b2c-7c52c434d8ee"
        },
        "item": {
          "id": "7d2508d5-c7fd-42ec-a9e0-922482c69d16",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "44d944d2-40d5-424c-9bc5-64c7289c898a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2508d5-c7fd-42ec-a9e0-922482c69d16",
        "cursor": {
          "ref": "da5bce4c-291d-4d10-9078-16c1d8e15fde",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3ccd536d-c851-469d-8b2c-7c52c434d8ee"
        },
        "item": {
          "id": "7d2508d5-c7fd-42ec-a9e0-922482c69d16",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "44d944d2-40d5-424c-9bc5-64c7289c898a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab2a1fc-4a40-48d7-a220-868ea3ef2063",
        "cursor": {
          "ref": "9c59cbdf-d9f9-40f4-94a3-8e01975babc4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b9ac94c4-ff6f-4a6f-9d41-a967fa6b2c22"
        },
        "item": {
          "id": "1ab2a1fc-4a40-48d7-a220-868ea3ef2063",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ccbf1aeb-50c1-408d-9f6a-af0838a72b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab2a1fc-4a40-48d7-a220-868ea3ef2063",
        "cursor": {
          "ref": "9c59cbdf-d9f9-40f4-94a3-8e01975babc4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b9ac94c4-ff6f-4a6f-9d41-a967fa6b2c22"
        },
        "item": {
          "id": "1ab2a1fc-4a40-48d7-a220-868ea3ef2063",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ccbf1aeb-50c1-408d-9f6a-af0838a72b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2395ad-ff90-456e-a07c-06a4b0368df4",
        "cursor": {
          "ref": "2f25de13-a328-474a-a45c-f18872061987",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "757afc8d-dd8c-4474-a620-0fee28cf5021"
        },
        "item": {
          "id": "5a2395ad-ff90-456e-a07c-06a4b0368df4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e67cdc17-28df-430c-ab52-586bfdcd3000",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2395ad-ff90-456e-a07c-06a4b0368df4",
        "cursor": {
          "ref": "2f25de13-a328-474a-a45c-f18872061987",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "757afc8d-dd8c-4474-a620-0fee28cf5021"
        },
        "item": {
          "id": "5a2395ad-ff90-456e-a07c-06a4b0368df4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e67cdc17-28df-430c-ab52-586bfdcd3000",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba91be44-dc1c-4226-b509-71481212de4e",
        "cursor": {
          "ref": "827c67ca-7745-4725-8283-6795450a659c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c793ab4b-ff6f-45d3-90ae-4afd537b3d7b"
        },
        "item": {
          "id": "ba91be44-dc1c-4226-b509-71481212de4e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db328ead-af3a-40ef-9a52-c004895d8d93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba91be44-dc1c-4226-b509-71481212de4e",
        "cursor": {
          "ref": "827c67ca-7745-4725-8283-6795450a659c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c793ab4b-ff6f-45d3-90ae-4afd537b3d7b"
        },
        "item": {
          "id": "ba91be44-dc1c-4226-b509-71481212de4e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db328ead-af3a-40ef-9a52-c004895d8d93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a056c361-02c7-4edf-b0d6-c6298eebba00",
        "cursor": {
          "ref": "043cd55c-d46e-47d9-bba1-5d9de51037b1",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d68eeed2-857e-4360-8a89-72b7e443f8a4"
        },
        "item": {
          "id": "a056c361-02c7-4edf-b0d6-c6298eebba00",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3178dde2-7a66-4bed-a6eb-ed5f003a1104",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a056c361-02c7-4edf-b0d6-c6298eebba00",
        "cursor": {
          "ref": "043cd55c-d46e-47d9-bba1-5d9de51037b1",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d68eeed2-857e-4360-8a89-72b7e443f8a4"
        },
        "item": {
          "id": "a056c361-02c7-4edf-b0d6-c6298eebba00",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3178dde2-7a66-4bed-a6eb-ed5f003a1104",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce495ce-5fde-4bcc-a4c0-da5df19f89b5",
        "cursor": {
          "ref": "7e217fda-35ff-45db-9412-5abf8d046187",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8186e7da-8670-4e98-9dcb-4dc3636f4056"
        },
        "item": {
          "id": "fce495ce-5fde-4bcc-a4c0-da5df19f89b5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "60348a7f-4362-4c52-a648-da8400eaaa43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce495ce-5fde-4bcc-a4c0-da5df19f89b5",
        "cursor": {
          "ref": "7e217fda-35ff-45db-9412-5abf8d046187",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8186e7da-8670-4e98-9dcb-4dc3636f4056"
        },
        "item": {
          "id": "fce495ce-5fde-4bcc-a4c0-da5df19f89b5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "60348a7f-4362-4c52-a648-da8400eaaa43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057312ca-7c3f-4d7c-9732-86aa0c37368e",
        "cursor": {
          "ref": "db8a0eb9-7654-42ec-8a27-0a49971ef228",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5004bb8-eeb0-4362-8536-eb72da7a8789"
        },
        "item": {
          "id": "057312ca-7c3f-4d7c-9732-86aa0c37368e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47da25b7-bb05-48c6-88cb-6b86cdf83b18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057312ca-7c3f-4d7c-9732-86aa0c37368e",
        "cursor": {
          "ref": "db8a0eb9-7654-42ec-8a27-0a49971ef228",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5004bb8-eeb0-4362-8536-eb72da7a8789"
        },
        "item": {
          "id": "057312ca-7c3f-4d7c-9732-86aa0c37368e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47da25b7-bb05-48c6-88cb-6b86cdf83b18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc2535e-e7cf-4b45-8a44-701b386e24cf",
        "cursor": {
          "ref": "8d8d460a-5fd5-405f-8c01-6f0e137c6d13",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "185f6971-2310-41f3-a7ee-dcab86ffbaca"
        },
        "item": {
          "id": "ebc2535e-e7cf-4b45-8a44-701b386e24cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "20388f99-8c67-46f9-a54a-b8887089f066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc2535e-e7cf-4b45-8a44-701b386e24cf",
        "cursor": {
          "ref": "8d8d460a-5fd5-405f-8c01-6f0e137c6d13",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "185f6971-2310-41f3-a7ee-dcab86ffbaca"
        },
        "item": {
          "id": "ebc2535e-e7cf-4b45-8a44-701b386e24cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "20388f99-8c67-46f9-a54a-b8887089f066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f772148d-6222-4380-a3e9-4843332b6e4a",
        "cursor": {
          "ref": "8ec3d630-8ec0-4478-85db-a5f82dfe1eb4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c3c4a004-f8ce-4406-9136-76380a166945"
        },
        "item": {
          "id": "f772148d-6222-4380-a3e9-4843332b6e4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "88d7b080-e61f-4b8d-8211-5c0533fabae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f772148d-6222-4380-a3e9-4843332b6e4a",
        "cursor": {
          "ref": "8ec3d630-8ec0-4478-85db-a5f82dfe1eb4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c3c4a004-f8ce-4406-9136-76380a166945"
        },
        "item": {
          "id": "f772148d-6222-4380-a3e9-4843332b6e4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "88d7b080-e61f-4b8d-8211-5c0533fabae8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d243a2-48f2-4777-92e1-7fcb89db742a",
        "cursor": {
          "ref": "a8f40711-db37-4769-8778-d75241b5ef72",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e1538638-80ec-4fa5-9611-79b50e8f936b"
        },
        "item": {
          "id": "95d243a2-48f2-4777-92e1-7fcb89db742a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8c0c162e-4555-4172-ad02-0324ebdb91bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d243a2-48f2-4777-92e1-7fcb89db742a",
        "cursor": {
          "ref": "a8f40711-db37-4769-8778-d75241b5ef72",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e1538638-80ec-4fa5-9611-79b50e8f936b"
        },
        "item": {
          "id": "95d243a2-48f2-4777-92e1-7fcb89db742a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8c0c162e-4555-4172-ad02-0324ebdb91bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa8fbc0-af19-4ad2-835b-2c9754184bdd",
        "cursor": {
          "ref": "70ec910b-f7f3-4a7a-a47d-da60fb78978f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fe07069-a62b-4864-a0b6-4be3f30a10fd"
        },
        "item": {
          "id": "5aa8fbc0-af19-4ad2-835b-2c9754184bdd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2b41587a-ad9b-4140-addb-5d42d540fb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa8fbc0-af19-4ad2-835b-2c9754184bdd",
        "cursor": {
          "ref": "70ec910b-f7f3-4a7a-a47d-da60fb78978f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fe07069-a62b-4864-a0b6-4be3f30a10fd"
        },
        "item": {
          "id": "5aa8fbc0-af19-4ad2-835b-2c9754184bdd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2b41587a-ad9b-4140-addb-5d42d540fb82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2cb77b-c192-4e01-b392-faa91bced957",
        "cursor": {
          "ref": "1587c15b-8186-439d-81b2-92059fd2d0f0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c2bddabd-94e3-40ea-b11b-6b7eb2692527"
        },
        "item": {
          "id": "0b2cb77b-c192-4e01-b392-faa91bced957",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "679795d1-6d46-404d-af23-4533ff2c64f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2cb77b-c192-4e01-b392-faa91bced957",
        "cursor": {
          "ref": "1587c15b-8186-439d-81b2-92059fd2d0f0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c2bddabd-94e3-40ea-b11b-6b7eb2692527"
        },
        "item": {
          "id": "0b2cb77b-c192-4e01-b392-faa91bced957",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "679795d1-6d46-404d-af23-4533ff2c64f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246b80c8-5806-4b3a-bea3-6906d607a759",
        "cursor": {
          "ref": "acaf4fbd-6ecd-48ca-bfd0-e49fbeaeabd3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "33a025ee-d11a-4385-a5f7-ce35e3494b0c"
        },
        "item": {
          "id": "246b80c8-5806-4b3a-bea3-6906d607a759",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9e07192d-ea78-4310-b404-9b6727bfcf6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246b80c8-5806-4b3a-bea3-6906d607a759",
        "cursor": {
          "ref": "acaf4fbd-6ecd-48ca-bfd0-e49fbeaeabd3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "33a025ee-d11a-4385-a5f7-ce35e3494b0c"
        },
        "item": {
          "id": "246b80c8-5806-4b3a-bea3-6906d607a759",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9e07192d-ea78-4310-b404-9b6727bfcf6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea7bd26-ac52-471a-8deb-0c0b3e172cd1",
        "cursor": {
          "ref": "83afa3de-ca88-4e75-9a2b-a051f1860530",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "388b2511-72d3-4c65-878f-d66e3a0bc487"
        },
        "item": {
          "id": "1ea7bd26-ac52-471a-8deb-0c0b3e172cd1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "999f8788-54e5-4c11-b454-3338dcdf4474",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea7bd26-ac52-471a-8deb-0c0b3e172cd1",
        "cursor": {
          "ref": "83afa3de-ca88-4e75-9a2b-a051f1860530",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "388b2511-72d3-4c65-878f-d66e3a0bc487"
        },
        "item": {
          "id": "1ea7bd26-ac52-471a-8deb-0c0b3e172cd1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "999f8788-54e5-4c11-b454-3338dcdf4474",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd679582-a391-4243-ae61-430ce58ce1bf",
        "cursor": {
          "ref": "0a9561bb-ad66-4949-bb3d-4205f9f6de2e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bae27f21-060e-4ac1-b82e-d3e10383bcd0"
        },
        "item": {
          "id": "dd679582-a391-4243-ae61-430ce58ce1bf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "21de8db8-7cde-4d3e-9cf8-ec3ceb0681e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd679582-a391-4243-ae61-430ce58ce1bf",
        "cursor": {
          "ref": "0a9561bb-ad66-4949-bb3d-4205f9f6de2e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bae27f21-060e-4ac1-b82e-d3e10383bcd0"
        },
        "item": {
          "id": "dd679582-a391-4243-ae61-430ce58ce1bf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "21de8db8-7cde-4d3e-9cf8-ec3ceb0681e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5b129b-7635-40de-8b33-258bb139f0c2",
        "cursor": {
          "ref": "48eaa0d3-c657-4a09-9b14-8972d1af4bd7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "eebe9814-b8c9-4b5e-9b50-296cc5e92c34"
        },
        "item": {
          "id": "cf5b129b-7635-40de-8b33-258bb139f0c2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "deca60e3-3da1-4566-9f0a-2670a8bd8320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5b129b-7635-40de-8b33-258bb139f0c2",
        "cursor": {
          "ref": "48eaa0d3-c657-4a09-9b14-8972d1af4bd7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "eebe9814-b8c9-4b5e-9b50-296cc5e92c34"
        },
        "item": {
          "id": "cf5b129b-7635-40de-8b33-258bb139f0c2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "deca60e3-3da1-4566-9f0a-2670a8bd8320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b20a75-7706-4640-aa8d-6efc976cb0b8",
        "cursor": {
          "ref": "272320a4-5b6d-4483-a044-e14722b9ce3d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7a82a1f7-eea3-48dd-b6aa-3ee07d13d446"
        },
        "item": {
          "id": "e8b20a75-7706-4640-aa8d-6efc976cb0b8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1909d025-8f50-4b8d-aa53-0894c6e9ece3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b20a75-7706-4640-aa8d-6efc976cb0b8",
        "cursor": {
          "ref": "272320a4-5b6d-4483-a044-e14722b9ce3d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7a82a1f7-eea3-48dd-b6aa-3ee07d13d446"
        },
        "item": {
          "id": "e8b20a75-7706-4640-aa8d-6efc976cb0b8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1909d025-8f50-4b8d-aa53-0894c6e9ece3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dae111-877b-4f0c-b937-ed79028466cb",
        "cursor": {
          "ref": "08361afb-6c29-4b26-ba18-960d3482bc4c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "17ce93ea-e079-4465-b908-ba858a1c89e9"
        },
        "item": {
          "id": "d7dae111-877b-4f0c-b937-ed79028466cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae239799-4fd8-4e95-9fe8-00efc98fb817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dae111-877b-4f0c-b937-ed79028466cb",
        "cursor": {
          "ref": "08361afb-6c29-4b26-ba18-960d3482bc4c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "17ce93ea-e079-4465-b908-ba858a1c89e9"
        },
        "item": {
          "id": "d7dae111-877b-4f0c-b937-ed79028466cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae239799-4fd8-4e95-9fe8-00efc98fb817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd60821-06e3-4a0e-9edd-7a5b6cbff8a2",
        "cursor": {
          "ref": "1ae4b5db-8a89-4213-a63f-46d3c7d39195",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d7e44ea9-589b-4574-819f-507fa0cc9e52"
        },
        "item": {
          "id": "7fd60821-06e3-4a0e-9edd-7a5b6cbff8a2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f12e211b-adfb-4216-8fef-1888e9a179e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd60821-06e3-4a0e-9edd-7a5b6cbff8a2",
        "cursor": {
          "ref": "1ae4b5db-8a89-4213-a63f-46d3c7d39195",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d7e44ea9-589b-4574-819f-507fa0cc9e52"
        },
        "item": {
          "id": "7fd60821-06e3-4a0e-9edd-7a5b6cbff8a2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f12e211b-adfb-4216-8fef-1888e9a179e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e198c-00d5-4dbb-b7eb-2d7c0f7d63ae",
        "cursor": {
          "ref": "57dc1b65-ccd0-43c3-9c24-77a45fcd48ef",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "20dfc373-775c-4291-9cc5-bb85281e92ac"
        },
        "item": {
          "id": "ee3e198c-00d5-4dbb-b7eb-2d7c0f7d63ae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "69d5933e-4c52-4706-bfa2-40a5df38a08e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e198c-00d5-4dbb-b7eb-2d7c0f7d63ae",
        "cursor": {
          "ref": "57dc1b65-ccd0-43c3-9c24-77a45fcd48ef",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "20dfc373-775c-4291-9cc5-bb85281e92ac"
        },
        "item": {
          "id": "ee3e198c-00d5-4dbb-b7eb-2d7c0f7d63ae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "69d5933e-4c52-4706-bfa2-40a5df38a08e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dde71b-0730-4dd7-8718-4aad76f55254",
        "cursor": {
          "ref": "5c8536da-b74b-4353-8b55-9d32a381600c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9258c63b-2606-43f4-9c49-f2b0eb6a6e30"
        },
        "item": {
          "id": "30dde71b-0730-4dd7-8718-4aad76f55254",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "915df145-37ab-4bf4-86d0-ffe83376ed0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dde71b-0730-4dd7-8718-4aad76f55254",
        "cursor": {
          "ref": "5c8536da-b74b-4353-8b55-9d32a381600c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9258c63b-2606-43f4-9c49-f2b0eb6a6e30"
        },
        "item": {
          "id": "30dde71b-0730-4dd7-8718-4aad76f55254",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "915df145-37ab-4bf4-86d0-ffe83376ed0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ac0a06-d6b4-45b7-bd21-2185e6af5dbd",
        "cursor": {
          "ref": "25d00503-bb3e-4d7b-9ba7-729f124020e0",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "56880b91-81f8-4ce5-af58-c4cd05b680ae"
        },
        "item": {
          "id": "a5ac0a06-d6b4-45b7-bd21-2185e6af5dbd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fadfe7e3-e0c4-4cc4-bbc2-3ba0350a4d60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ac0a06-d6b4-45b7-bd21-2185e6af5dbd",
        "cursor": {
          "ref": "25d00503-bb3e-4d7b-9ba7-729f124020e0",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "56880b91-81f8-4ce5-af58-c4cd05b680ae"
        },
        "item": {
          "id": "a5ac0a06-d6b4-45b7-bd21-2185e6af5dbd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fadfe7e3-e0c4-4cc4-bbc2-3ba0350a4d60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb2761f-97f2-4f9d-8b36-f94a25fa61b6",
        "cursor": {
          "ref": "f6705bd2-8d21-463c-a7b5-ed6d02217c2c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "96ab2290-d696-4363-ab20-4ff9cbb7cf62"
        },
        "item": {
          "id": "bdb2761f-97f2-4f9d-8b36-f94a25fa61b6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2c1ac339-b468-4d56-bcca-ec5d1e6903c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb2761f-97f2-4f9d-8b36-f94a25fa61b6",
        "cursor": {
          "ref": "f6705bd2-8d21-463c-a7b5-ed6d02217c2c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "96ab2290-d696-4363-ab20-4ff9cbb7cf62"
        },
        "item": {
          "id": "bdb2761f-97f2-4f9d-8b36-f94a25fa61b6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2c1ac339-b468-4d56-bcca-ec5d1e6903c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6930655-f575-452f-8703-1eff88dbcc3b",
        "cursor": {
          "ref": "8de07ea8-b824-498e-b362-8686d3fa069b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5c63cd2a-024e-4f6b-ac68-9cd522ce9754"
        },
        "item": {
          "id": "f6930655-f575-452f-8703-1eff88dbcc3b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "50635931-6fb1-4715-8fae-8a6f096c2468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6930655-f575-452f-8703-1eff88dbcc3b",
        "cursor": {
          "ref": "8de07ea8-b824-498e-b362-8686d3fa069b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5c63cd2a-024e-4f6b-ac68-9cd522ce9754"
        },
        "item": {
          "id": "f6930655-f575-452f-8703-1eff88dbcc3b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "50635931-6fb1-4715-8fae-8a6f096c2468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c3380c-3cac-4c23-a5ef-1fa96190dd54",
        "cursor": {
          "ref": "afd1f005-7d83-441b-94ff-2c3fb9a3a0d6",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "26fe4f17-d2f9-4609-9529-bda0c9bb354c"
        },
        "item": {
          "id": "71c3380c-3cac-4c23-a5ef-1fa96190dd54",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f32d8e37-db30-4105-9f3d-7d5dff90c778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c3380c-3cac-4c23-a5ef-1fa96190dd54",
        "cursor": {
          "ref": "afd1f005-7d83-441b-94ff-2c3fb9a3a0d6",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "26fe4f17-d2f9-4609-9529-bda0c9bb354c"
        },
        "item": {
          "id": "71c3380c-3cac-4c23-a5ef-1fa96190dd54",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f32d8e37-db30-4105-9f3d-7d5dff90c778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9202b47a-9b06-4503-adb0-e950dab0ca5e",
        "cursor": {
          "ref": "49daece9-637c-4598-8811-5129b6ee0553",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d865487d-814a-4b9d-b0cb-7caf57bd300f"
        },
        "item": {
          "id": "9202b47a-9b06-4503-adb0-e950dab0ca5e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "94d085ac-4ba8-48ed-8e7b-62fa34c42f96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9202b47a-9b06-4503-adb0-e950dab0ca5e",
        "cursor": {
          "ref": "49daece9-637c-4598-8811-5129b6ee0553",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d865487d-814a-4b9d-b0cb-7caf57bd300f"
        },
        "item": {
          "id": "9202b47a-9b06-4503-adb0-e950dab0ca5e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "94d085ac-4ba8-48ed-8e7b-62fa34c42f96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d86383-4396-4847-954f-9c2afa844051",
        "cursor": {
          "ref": "eae8b007-688b-4a45-90dc-588e0035cb4b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4dc5e8b4-5326-4f4b-b920-4f100960923d"
        },
        "item": {
          "id": "64d86383-4396-4847-954f-9c2afa844051",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d30434b9-a7f1-4781-93f8-50e28a9d5e96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d86383-4396-4847-954f-9c2afa844051",
        "cursor": {
          "ref": "eae8b007-688b-4a45-90dc-588e0035cb4b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4dc5e8b4-5326-4f4b-b920-4f100960923d"
        },
        "item": {
          "id": "64d86383-4396-4847-954f-9c2afa844051",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d30434b9-a7f1-4781-93f8-50e28a9d5e96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d8b4f1-bb4e-4e5a-aea6-f43cd695208c",
        "cursor": {
          "ref": "e4bb0fda-8256-45af-9961-b126ed269ed9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3b34094b-9037-40c3-bbb1-590cabf44729"
        },
        "item": {
          "id": "a1d8b4f1-bb4e-4e5a-aea6-f43cd695208c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7821cf0a-e7cc-46c8-bb78-08da4aa219fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d8b4f1-bb4e-4e5a-aea6-f43cd695208c",
        "cursor": {
          "ref": "e4bb0fda-8256-45af-9961-b126ed269ed9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3b34094b-9037-40c3-bbb1-590cabf44729"
        },
        "item": {
          "id": "a1d8b4f1-bb4e-4e5a-aea6-f43cd695208c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7821cf0a-e7cc-46c8-bb78-08da4aa219fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6efb95-e04c-46b1-ae3a-25df6db722ab",
        "cursor": {
          "ref": "0df6e2e2-efe4-4e5d-b6d1-ed1d0d8defc0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "13d37de1-f9b5-426b-a070-e70b9043315f"
        },
        "item": {
          "id": "4b6efb95-e04c-46b1-ae3a-25df6db722ab",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "06f77164-c9f2-4725-a413-63fc1888a3ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6efb95-e04c-46b1-ae3a-25df6db722ab",
        "cursor": {
          "ref": "0df6e2e2-efe4-4e5d-b6d1-ed1d0d8defc0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "13d37de1-f9b5-426b-a070-e70b9043315f"
        },
        "item": {
          "id": "4b6efb95-e04c-46b1-ae3a-25df6db722ab",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "06f77164-c9f2-4725-a413-63fc1888a3ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3041d8fa-0381-4afd-9980-122070e6d55d",
        "cursor": {
          "ref": "e6df9bb2-c0ed-4cfb-8992-eade1f77eddc",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b05b8f26-6587-4049-b8b3-12b4c9d3fdbb"
        },
        "item": {
          "id": "3041d8fa-0381-4afd-9980-122070e6d55d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "14972b68-a96f-4e7e-8321-42587276d6d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3041d8fa-0381-4afd-9980-122070e6d55d",
        "cursor": {
          "ref": "e6df9bb2-c0ed-4cfb-8992-eade1f77eddc",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b05b8f26-6587-4049-b8b3-12b4c9d3fdbb"
        },
        "item": {
          "id": "3041d8fa-0381-4afd-9980-122070e6d55d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "14972b68-a96f-4e7e-8321-42587276d6d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91513c2-296f-40fd-b929-ff25ea37dae7",
        "cursor": {
          "ref": "4812ec1d-59bb-4414-bf6c-18adcd9c5428",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "615a9cf5-3018-4dea-bedf-62b0d546a0c1"
        },
        "item": {
          "id": "c91513c2-296f-40fd-b929-ff25ea37dae7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "39913958-4f54-4a90-b973-95d71db0aa58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91513c2-296f-40fd-b929-ff25ea37dae7",
        "cursor": {
          "ref": "4812ec1d-59bb-4414-bf6c-18adcd9c5428",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "615a9cf5-3018-4dea-bedf-62b0d546a0c1"
        },
        "item": {
          "id": "c91513c2-296f-40fd-b929-ff25ea37dae7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "39913958-4f54-4a90-b973-95d71db0aa58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b74d29c-01cd-4924-bf65-984b56bd2bb4",
        "cursor": {
          "ref": "ac406488-f634-4655-a9d7-2849ce6cab10",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6b8ec33a-ab60-4885-aa03-89ceb611b90c"
        },
        "item": {
          "id": "8b74d29c-01cd-4924-bf65-984b56bd2bb4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "159e4479-cd9b-4637-9427-9b98bb8af48f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b74d29c-01cd-4924-bf65-984b56bd2bb4",
        "cursor": {
          "ref": "ac406488-f634-4655-a9d7-2849ce6cab10",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6b8ec33a-ab60-4885-aa03-89ceb611b90c"
        },
        "item": {
          "id": "8b74d29c-01cd-4924-bf65-984b56bd2bb4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "159e4479-cd9b-4637-9427-9b98bb8af48f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4457971-8e06-49ff-9bba-5e18f1735213",
        "cursor": {
          "ref": "297c7caa-17d8-4522-9c30-e889d74848db",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4aad3b32-d4fc-464b-89f1-ee338d0bbf6b"
        },
        "item": {
          "id": "f4457971-8e06-49ff-9bba-5e18f1735213",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2c3a281b-c7eb-4843-aee8-96595db7a2d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4457971-8e06-49ff-9bba-5e18f1735213",
        "cursor": {
          "ref": "297c7caa-17d8-4522-9c30-e889d74848db",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4aad3b32-d4fc-464b-89f1-ee338d0bbf6b"
        },
        "item": {
          "id": "f4457971-8e06-49ff-9bba-5e18f1735213",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2c3a281b-c7eb-4843-aee8-96595db7a2d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f31961-a4c6-4044-b25e-572298f6edb8",
        "cursor": {
          "ref": "a8695a1b-f438-407c-8612-289fb53b5ea7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8774454c-3906-4904-b92a-8e60a6459e41"
        },
        "item": {
          "id": "12f31961-a4c6-4044-b25e-572298f6edb8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fe7bb2c8-60ac-4b3d-8119-1d196bfae5d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f31961-a4c6-4044-b25e-572298f6edb8",
        "cursor": {
          "ref": "a8695a1b-f438-407c-8612-289fb53b5ea7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8774454c-3906-4904-b92a-8e60a6459e41"
        },
        "item": {
          "id": "12f31961-a4c6-4044-b25e-572298f6edb8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fe7bb2c8-60ac-4b3d-8119-1d196bfae5d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9758e9-e11e-479b-92b9-23acae936e33",
        "cursor": {
          "ref": "ff4f3e1d-28ac-4871-8f9d-5d2551fde250",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "39eb4dad-88c7-43a5-a154-215a8e323131"
        },
        "item": {
          "id": "cd9758e9-e11e-479b-92b9-23acae936e33",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c93943ad-4b1f-44e0-87f0-7c9fc5f38d1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9758e9-e11e-479b-92b9-23acae936e33",
        "cursor": {
          "ref": "ff4f3e1d-28ac-4871-8f9d-5d2551fde250",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "39eb4dad-88c7-43a5-a154-215a8e323131"
        },
        "item": {
          "id": "cd9758e9-e11e-479b-92b9-23acae936e33",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c93943ad-4b1f-44e0-87f0-7c9fc5f38d1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa23185e-f027-402f-9a35-782e4b316187",
        "cursor": {
          "ref": "52a00c59-e092-4422-9082-9cfa32e3eaee",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "424eede8-2538-4b83-bc30-571285cee3d7"
        },
        "item": {
          "id": "fa23185e-f027-402f-9a35-782e4b316187",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d742ee73-af59-4f0e-b2e6-63bef60eb8f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa23185e-f027-402f-9a35-782e4b316187",
        "cursor": {
          "ref": "52a00c59-e092-4422-9082-9cfa32e3eaee",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "424eede8-2538-4b83-bc30-571285cee3d7"
        },
        "item": {
          "id": "fa23185e-f027-402f-9a35-782e4b316187",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d742ee73-af59-4f0e-b2e6-63bef60eb8f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78fe377-5930-4bde-a539-83d7667f59bd",
        "cursor": {
          "ref": "834e81ee-291b-4a22-a17f-327bf2df416f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "57af0f5e-24b5-45b0-87ab-5800f548f904"
        },
        "item": {
          "id": "b78fe377-5930-4bde-a539-83d7667f59bd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a170008d-0e0e-4ae5-94e3-b280d2fcafde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78fe377-5930-4bde-a539-83d7667f59bd",
        "cursor": {
          "ref": "834e81ee-291b-4a22-a17f-327bf2df416f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "57af0f5e-24b5-45b0-87ab-5800f548f904"
        },
        "item": {
          "id": "b78fe377-5930-4bde-a539-83d7667f59bd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a170008d-0e0e-4ae5-94e3-b280d2fcafde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f65f51-9684-419e-9722-1b613a6c3167",
        "cursor": {
          "ref": "020d5883-5369-47be-b771-7a0d0601b7df",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d5caf30b-126d-4a34-9251-fc816744d29b"
        },
        "item": {
          "id": "e1f65f51-9684-419e-9722-1b613a6c3167",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dc6e0a9f-846a-4e08-8d30-85bc078737ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f65f51-9684-419e-9722-1b613a6c3167",
        "cursor": {
          "ref": "020d5883-5369-47be-b771-7a0d0601b7df",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d5caf30b-126d-4a34-9251-fc816744d29b"
        },
        "item": {
          "id": "e1f65f51-9684-419e-9722-1b613a6c3167",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dc6e0a9f-846a-4e08-8d30-85bc078737ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71024c60-b86c-4c8e-b7f3-b00112fd2b04",
        "cursor": {
          "ref": "1a2661f8-0682-4730-bcaf-1d7bd957847c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5f0d0c5f-2faf-45bd-ba0b-3d84cb7bb3da"
        },
        "item": {
          "id": "71024c60-b86c-4c8e-b7f3-b00112fd2b04",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c6992031-94c9-4254-a42b-b5df4dcc1d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71024c60-b86c-4c8e-b7f3-b00112fd2b04",
        "cursor": {
          "ref": "1a2661f8-0682-4730-bcaf-1d7bd957847c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5f0d0c5f-2faf-45bd-ba0b-3d84cb7bb3da"
        },
        "item": {
          "id": "71024c60-b86c-4c8e-b7f3-b00112fd2b04",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c6992031-94c9-4254-a42b-b5df4dcc1d7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a617a40-2af5-4db6-a2f1-b53c13291e71",
        "cursor": {
          "ref": "f486cc90-9453-4e4e-a7f5-815d1bcf0833",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "493f0b95-c4a0-4fba-9858-368f5ebfa36c"
        },
        "item": {
          "id": "5a617a40-2af5-4db6-a2f1-b53c13291e71",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a16048c2-5aae-408f-a0cb-b437d209622a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a617a40-2af5-4db6-a2f1-b53c13291e71",
        "cursor": {
          "ref": "f486cc90-9453-4e4e-a7f5-815d1bcf0833",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "493f0b95-c4a0-4fba-9858-368f5ebfa36c"
        },
        "item": {
          "id": "5a617a40-2af5-4db6-a2f1-b53c13291e71",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a16048c2-5aae-408f-a0cb-b437d209622a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eef7828-28b1-4e44-8ef6-460c76e4e34c",
        "cursor": {
          "ref": "224f7004-32d8-4cd8-8759-cf85abb07734",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8d9ae0ad-bf1b-4194-aa2f-3133e3d01376"
        },
        "item": {
          "id": "9eef7828-28b1-4e44-8ef6-460c76e4e34c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "203091c6-752a-4a7c-a68e-6b32d1f9ac58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eef7828-28b1-4e44-8ef6-460c76e4e34c",
        "cursor": {
          "ref": "224f7004-32d8-4cd8-8759-cf85abb07734",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8d9ae0ad-bf1b-4194-aa2f-3133e3d01376"
        },
        "item": {
          "id": "9eef7828-28b1-4e44-8ef6-460c76e4e34c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "203091c6-752a-4a7c-a68e-6b32d1f9ac58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f1e5a2-a4e6-4fa6-85bb-6f3f80db595a",
        "cursor": {
          "ref": "b9fcf44c-2ed8-4340-adf4-255f483f7928",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7291267b-b807-4cf6-94a6-a4a5ef6728f7"
        },
        "item": {
          "id": "c6f1e5a2-a4e6-4fa6-85bb-6f3f80db595a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5343fdfd-e126-404b-9b1e-24403e18c0bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f1e5a2-a4e6-4fa6-85bb-6f3f80db595a",
        "cursor": {
          "ref": "b9fcf44c-2ed8-4340-adf4-255f483f7928",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7291267b-b807-4cf6-94a6-a4a5ef6728f7"
        },
        "item": {
          "id": "c6f1e5a2-a4e6-4fa6-85bb-6f3f80db595a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5343fdfd-e126-404b-9b1e-24403e18c0bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd37163-fd06-48b9-a93d-fe3e2b18111f",
        "cursor": {
          "ref": "eafe811a-0924-485a-a02e-a79200d8f0bd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "646ebcbd-1157-4265-b7bf-175f2f42cd9c"
        },
        "item": {
          "id": "abd37163-fd06-48b9-a93d-fe3e2b18111f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ea77e151-86fd-4309-b8fa-b7ff35e5fd0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd37163-fd06-48b9-a93d-fe3e2b18111f",
        "cursor": {
          "ref": "eafe811a-0924-485a-a02e-a79200d8f0bd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "646ebcbd-1157-4265-b7bf-175f2f42cd9c"
        },
        "item": {
          "id": "abd37163-fd06-48b9-a93d-fe3e2b18111f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ea77e151-86fd-4309-b8fa-b7ff35e5fd0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b59530f-cb6b-4e1e-891a-988e581c58b8",
        "cursor": {
          "ref": "7473801a-fd85-4cf5-8d64-b10e68982cc3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72f665ad-7f50-453d-8977-1c3a1163f526"
        },
        "item": {
          "id": "2b59530f-cb6b-4e1e-891a-988e581c58b8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "95de460b-9396-40b1-889e-611020f92707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b59530f-cb6b-4e1e-891a-988e581c58b8",
        "cursor": {
          "ref": "7473801a-fd85-4cf5-8d64-b10e68982cc3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72f665ad-7f50-453d-8977-1c3a1163f526"
        },
        "item": {
          "id": "2b59530f-cb6b-4e1e-891a-988e581c58b8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "95de460b-9396-40b1-889e-611020f92707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559ea646-604e-430b-9ab4-bc899176ce39",
        "cursor": {
          "ref": "062f902b-c0a6-4c5f-b2a4-c7a54f98b1da",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "39f81669-2fea-43aa-ab50-f8b4776b4d5a"
        },
        "item": {
          "id": "559ea646-604e-430b-9ab4-bc899176ce39",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e67a5cd5-f6fe-408a-8c63-b48a66ddb655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559ea646-604e-430b-9ab4-bc899176ce39",
        "cursor": {
          "ref": "062f902b-c0a6-4c5f-b2a4-c7a54f98b1da",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "39f81669-2fea-43aa-ab50-f8b4776b4d5a"
        },
        "item": {
          "id": "559ea646-604e-430b-9ab4-bc899176ce39",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e67a5cd5-f6fe-408a-8c63-b48a66ddb655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbf512d-71e1-4cda-b0ab-2750751da695",
        "cursor": {
          "ref": "175eb737-59db-4d11-98cd-cc37f970bc33",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "be5a31e0-f154-4072-b3fd-0434b6440f9e"
        },
        "item": {
          "id": "cbbf512d-71e1-4cda-b0ab-2750751da695",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a4678a21-7a03-484a-9499-1e56e242f524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbf512d-71e1-4cda-b0ab-2750751da695",
        "cursor": {
          "ref": "175eb737-59db-4d11-98cd-cc37f970bc33",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "be5a31e0-f154-4072-b3fd-0434b6440f9e"
        },
        "item": {
          "id": "cbbf512d-71e1-4cda-b0ab-2750751da695",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a4678a21-7a03-484a-9499-1e56e242f524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cf591d-260a-405f-8ca6-7b71f142b6f5",
        "cursor": {
          "ref": "dc7ffd88-d102-467d-88ce-e70e1e5f455c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "990e06d7-4c10-4c08-a65c-e6175d4464d2"
        },
        "item": {
          "id": "d4cf591d-260a-405f-8ca6-7b71f142b6f5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cd1b1caf-31e5-4b17-8d1a-a6db671c8653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cf591d-260a-405f-8ca6-7b71f142b6f5",
        "cursor": {
          "ref": "dc7ffd88-d102-467d-88ce-e70e1e5f455c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "990e06d7-4c10-4c08-a65c-e6175d4464d2"
        },
        "item": {
          "id": "d4cf591d-260a-405f-8ca6-7b71f142b6f5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cd1b1caf-31e5-4b17-8d1a-a6db671c8653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178b89ac-77dd-477e-a614-d8059e996192",
        "cursor": {
          "ref": "6cea4fda-fb22-4d7a-865e-7f9a032b836f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "545b20c8-221d-4eff-a1ad-449e72765c58"
        },
        "item": {
          "id": "178b89ac-77dd-477e-a614-d8059e996192",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "672409a7-04ca-4f5f-a094-5820face610f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178b89ac-77dd-477e-a614-d8059e996192",
        "cursor": {
          "ref": "6cea4fda-fb22-4d7a-865e-7f9a032b836f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "545b20c8-221d-4eff-a1ad-449e72765c58"
        },
        "item": {
          "id": "178b89ac-77dd-477e-a614-d8059e996192",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "672409a7-04ca-4f5f-a094-5820face610f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5886fecd-8ad2-47aa-97c5-95c7cfc49f1c",
        "cursor": {
          "ref": "c6bd21f3-b598-4638-a43c-3f75adc2649e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "577d1693-dea1-48e1-8e9e-7f3edfe5b25b"
        },
        "item": {
          "id": "5886fecd-8ad2-47aa-97c5-95c7cfc49f1c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5ffd20b5-8a34-447c-95f9-998c6c82aad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5886fecd-8ad2-47aa-97c5-95c7cfc49f1c",
        "cursor": {
          "ref": "c6bd21f3-b598-4638-a43c-3f75adc2649e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "577d1693-dea1-48e1-8e9e-7f3edfe5b25b"
        },
        "item": {
          "id": "5886fecd-8ad2-47aa-97c5-95c7cfc49f1c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5ffd20b5-8a34-447c-95f9-998c6c82aad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fb0110-14bd-49b0-91d7-c95fe198b375",
        "cursor": {
          "ref": "f4a87b3a-e6cf-4ba6-af89-6ffa10d03712",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9bf93a15-d9a3-48aa-ad6f-3d8ea871a679"
        },
        "item": {
          "id": "92fb0110-14bd-49b0-91d7-c95fe198b375",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "323cea43-72d1-4a20-b675-3e3819a5808e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fb0110-14bd-49b0-91d7-c95fe198b375",
        "cursor": {
          "ref": "f4a87b3a-e6cf-4ba6-af89-6ffa10d03712",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9bf93a15-d9a3-48aa-ad6f-3d8ea871a679"
        },
        "item": {
          "id": "92fb0110-14bd-49b0-91d7-c95fe198b375",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "323cea43-72d1-4a20-b675-3e3819a5808e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a04810-d057-46d6-90a6-765290bfe467",
        "cursor": {
          "ref": "a25a9711-304a-47bb-8430-0569b19a02c2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d6f60458-31eb-4c3d-98dc-8cde703b57d3"
        },
        "item": {
          "id": "18a04810-d057-46d6-90a6-765290bfe467",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cebf1c31-d933-4e02-8f60-0f2b43f4fdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a04810-d057-46d6-90a6-765290bfe467",
        "cursor": {
          "ref": "a25a9711-304a-47bb-8430-0569b19a02c2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d6f60458-31eb-4c3d-98dc-8cde703b57d3"
        },
        "item": {
          "id": "18a04810-d057-46d6-90a6-765290bfe467",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cebf1c31-d933-4e02-8f60-0f2b43f4fdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43bc324-80c7-4271-ae7d-79ae77f4ac5d",
        "cursor": {
          "ref": "5535e215-56f5-4b49-a4cd-1cccfd7b33ff",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4e66d489-7383-4845-9c63-438153eca52a"
        },
        "item": {
          "id": "e43bc324-80c7-4271-ae7d-79ae77f4ac5d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e03ca6aa-a117-400f-bbfe-a2b22ab80702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43bc324-80c7-4271-ae7d-79ae77f4ac5d",
        "cursor": {
          "ref": "5535e215-56f5-4b49-a4cd-1cccfd7b33ff",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4e66d489-7383-4845-9c63-438153eca52a"
        },
        "item": {
          "id": "e43bc324-80c7-4271-ae7d-79ae77f4ac5d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e03ca6aa-a117-400f-bbfe-a2b22ab80702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506946d5-2e30-401e-90a9-ae464adab30f",
        "cursor": {
          "ref": "3cc19068-d330-48ef-bb4a-5bd753c7a672",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f2d97e8c-a9a2-4114-8a4e-be9447d8296b"
        },
        "item": {
          "id": "506946d5-2e30-401e-90a9-ae464adab30f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "84c98d6b-c944-4214-8306-7d0eb7515203",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506946d5-2e30-401e-90a9-ae464adab30f",
        "cursor": {
          "ref": "3cc19068-d330-48ef-bb4a-5bd753c7a672",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f2d97e8c-a9a2-4114-8a4e-be9447d8296b"
        },
        "item": {
          "id": "506946d5-2e30-401e-90a9-ae464adab30f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "84c98d6b-c944-4214-8306-7d0eb7515203",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17c84b4-f6fa-4d56-b8cb-d5ba39a0ccf4",
        "cursor": {
          "ref": "df150cd0-bd62-4834-a825-ceb69403b555",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a943bf77-1e26-4bd8-881d-e17e4e1fb076"
        },
        "item": {
          "id": "b17c84b4-f6fa-4d56-b8cb-d5ba39a0ccf4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff0fb9ce-0025-4413-bfee-46777c02c218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17c84b4-f6fa-4d56-b8cb-d5ba39a0ccf4",
        "cursor": {
          "ref": "df150cd0-bd62-4834-a825-ceb69403b555",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a943bf77-1e26-4bd8-881d-e17e4e1fb076"
        },
        "item": {
          "id": "b17c84b4-f6fa-4d56-b8cb-d5ba39a0ccf4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff0fb9ce-0025-4413-bfee-46777c02c218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b41b5a-7fca-48e8-99ae-6422f6eaee85",
        "cursor": {
          "ref": "7542f9b7-6f69-4dd0-8ac2-e5c4dafc8591",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "647798fa-955c-4f25-a4e8-18ef90969e3e"
        },
        "item": {
          "id": "27b41b5a-7fca-48e8-99ae-6422f6eaee85",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5c6f6f95-23e6-41aa-a041-b5a05ab32133",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b41b5a-7fca-48e8-99ae-6422f6eaee85",
        "cursor": {
          "ref": "7542f9b7-6f69-4dd0-8ac2-e5c4dafc8591",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "647798fa-955c-4f25-a4e8-18ef90969e3e"
        },
        "item": {
          "id": "27b41b5a-7fca-48e8-99ae-6422f6eaee85",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5c6f6f95-23e6-41aa-a041-b5a05ab32133",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6825f146-7d11-4d2a-aed1-75d921ff724a",
        "cursor": {
          "ref": "a210c3de-ef78-4cac-8595-d3ac9ba77f60",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec2165f2-05ff-4769-a9aa-6f6557e5397a"
        },
        "item": {
          "id": "6825f146-7d11-4d2a-aed1-75d921ff724a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5f3f3ef3-2f65-4e87-b8ef-b7db1b436640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6825f146-7d11-4d2a-aed1-75d921ff724a",
        "cursor": {
          "ref": "a210c3de-ef78-4cac-8595-d3ac9ba77f60",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec2165f2-05ff-4769-a9aa-6f6557e5397a"
        },
        "item": {
          "id": "6825f146-7d11-4d2a-aed1-75d921ff724a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5f3f3ef3-2f65-4e87-b8ef-b7db1b436640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f1378c-ffa6-4a6b-9a45-b3671e7c8800",
        "cursor": {
          "ref": "6796181d-fa56-44f2-9b09-45e68ac6d1c7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3732c48c-87f1-41d7-a838-477032d5db6d"
        },
        "item": {
          "id": "44f1378c-ffa6-4a6b-9a45-b3671e7c8800",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4ebd70b7-9f1e-4336-815f-1d17f0507b8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f1378c-ffa6-4a6b-9a45-b3671e7c8800",
        "cursor": {
          "ref": "6796181d-fa56-44f2-9b09-45e68ac6d1c7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3732c48c-87f1-41d7-a838-477032d5db6d"
        },
        "item": {
          "id": "44f1378c-ffa6-4a6b-9a45-b3671e7c8800",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4ebd70b7-9f1e-4336-815f-1d17f0507b8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05149a9-26a3-4dcc-bdab-b238643d4758",
        "cursor": {
          "ref": "bdc1b658-3dfe-4340-aeda-ddc0fdf15151",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4c6ea6ba-9f44-4c5b-82cd-33e73d49b062"
        },
        "item": {
          "id": "a05149a9-26a3-4dcc-bdab-b238643d4758",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5eaab981-5c94-4bc6-b016-f656f6cb68f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05149a9-26a3-4dcc-bdab-b238643d4758",
        "cursor": {
          "ref": "bdc1b658-3dfe-4340-aeda-ddc0fdf15151",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4c6ea6ba-9f44-4c5b-82cd-33e73d49b062"
        },
        "item": {
          "id": "a05149a9-26a3-4dcc-bdab-b238643d4758",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5eaab981-5c94-4bc6-b016-f656f6cb68f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1556a631-f734-44d1-8125-e0dbb07123e7",
        "cursor": {
          "ref": "79c2dbe4-dd85-4d34-9c15-3aafd4445b5f",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2262c534-3869-4f20-b2e7-8d5a2a3f6f82"
        },
        "item": {
          "id": "1556a631-f734-44d1-8125-e0dbb07123e7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bd36dbb6-5f68-4c79-86ba-6ba30721262c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1556a631-f734-44d1-8125-e0dbb07123e7",
        "cursor": {
          "ref": "79c2dbe4-dd85-4d34-9c15-3aafd4445b5f",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2262c534-3869-4f20-b2e7-8d5a2a3f6f82"
        },
        "item": {
          "id": "1556a631-f734-44d1-8125-e0dbb07123e7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bd36dbb6-5f68-4c79-86ba-6ba30721262c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4248d3-70d2-4cea-b98c-c451be222c59",
        "cursor": {
          "ref": "2278bb3c-8e53-4076-97d7-0a6cf2ad1d3b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f358b221-0c13-4831-84f8-90fd055f8b9c"
        },
        "item": {
          "id": "dc4248d3-70d2-4cea-b98c-c451be222c59",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2974e8cc-db30-4108-bcfe-85b46883afb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4248d3-70d2-4cea-b98c-c451be222c59",
        "cursor": {
          "ref": "2278bb3c-8e53-4076-97d7-0a6cf2ad1d3b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f358b221-0c13-4831-84f8-90fd055f8b9c"
        },
        "item": {
          "id": "dc4248d3-70d2-4cea-b98c-c451be222c59",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2974e8cc-db30-4108-bcfe-85b46883afb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a7ec42-8811-4ad8-83a7-59aea917aac5",
        "cursor": {
          "ref": "ee33a758-304f-4d62-af3b-34dfd6fcf9b8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "684a79ef-5e70-427b-8337-b3a827cf2ed8"
        },
        "item": {
          "id": "24a7ec42-8811-4ad8-83a7-59aea917aac5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fd9f6d7a-c513-4917-b91d-582489c11881",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a7ec42-8811-4ad8-83a7-59aea917aac5",
        "cursor": {
          "ref": "ee33a758-304f-4d62-af3b-34dfd6fcf9b8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "684a79ef-5e70-427b-8337-b3a827cf2ed8"
        },
        "item": {
          "id": "24a7ec42-8811-4ad8-83a7-59aea917aac5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fd9f6d7a-c513-4917-b91d-582489c11881",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14886070-f103-4218-91ff-50c52300a14c",
        "cursor": {
          "ref": "6be175cd-61e3-4eaf-9a3a-fd6d898159b5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ccb108a0-db42-46d4-bb89-93ef71d25e49"
        },
        "item": {
          "id": "14886070-f103-4218-91ff-50c52300a14c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eb29a517-57cd-44d3-b57d-6f1ad7e20bbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14886070-f103-4218-91ff-50c52300a14c",
        "cursor": {
          "ref": "6be175cd-61e3-4eaf-9a3a-fd6d898159b5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ccb108a0-db42-46d4-bb89-93ef71d25e49"
        },
        "item": {
          "id": "14886070-f103-4218-91ff-50c52300a14c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eb29a517-57cd-44d3-b57d-6f1ad7e20bbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bac22b-1a4e-46f6-a0d8-743b500b011e",
        "cursor": {
          "ref": "4bdd3cae-dbd7-466e-89bd-f01c6f13164a",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7963c679-85e1-47cc-9937-8f717d96a8e5"
        },
        "item": {
          "id": "77bac22b-1a4e-46f6-a0d8-743b500b011e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "030b0193-f398-4deb-bb21-f2f0952f8bea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bac22b-1a4e-46f6-a0d8-743b500b011e",
        "cursor": {
          "ref": "4bdd3cae-dbd7-466e-89bd-f01c6f13164a",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7963c679-85e1-47cc-9937-8f717d96a8e5"
        },
        "item": {
          "id": "77bac22b-1a4e-46f6-a0d8-743b500b011e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "030b0193-f398-4deb-bb21-f2f0952f8bea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbae782f-fc76-4453-84c6-8c15ab400c56",
        "cursor": {
          "ref": "de5e902d-81cc-48c6-afe6-1bf5eaa5b553",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4fddc350-b36d-47c1-86b8-5c8a5251360b"
        },
        "item": {
          "id": "bbae782f-fc76-4453-84c6-8c15ab400c56",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0c1afc9d-98b5-4c7c-b7d0-d37ee962bd6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbae782f-fc76-4453-84c6-8c15ab400c56",
        "cursor": {
          "ref": "de5e902d-81cc-48c6-afe6-1bf5eaa5b553",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4fddc350-b36d-47c1-86b8-5c8a5251360b"
        },
        "item": {
          "id": "bbae782f-fc76-4453-84c6-8c15ab400c56",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0c1afc9d-98b5-4c7c-b7d0-d37ee962bd6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec78657-4a2c-4f7b-a95f-3bc8120f1aa0",
        "cursor": {
          "ref": "37806daa-b56a-4c08-8665-9c952b253b67",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e5193f8-eec8-4bfb-9e8e-83dd701de284"
        },
        "item": {
          "id": "6ec78657-4a2c-4f7b-a95f-3bc8120f1aa0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4f76dd10-2263-4576-bdf3-ecd37e3a2c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec78657-4a2c-4f7b-a95f-3bc8120f1aa0",
        "cursor": {
          "ref": "37806daa-b56a-4c08-8665-9c952b253b67",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e5193f8-eec8-4bfb-9e8e-83dd701de284"
        },
        "item": {
          "id": "6ec78657-4a2c-4f7b-a95f-3bc8120f1aa0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4f76dd10-2263-4576-bdf3-ecd37e3a2c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e379bb-2fa9-4ca3-9417-3c903feaea4c",
        "cursor": {
          "ref": "d4f9b512-649b-4199-9f27-b58597f8fe51",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68763e7e-e0b9-4fed-a9f4-6dbb37f3f92a"
        },
        "item": {
          "id": "d7e379bb-2fa9-4ca3-9417-3c903feaea4c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8d793d2e-1323-48ec-ac07-d95e8cb42e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e379bb-2fa9-4ca3-9417-3c903feaea4c",
        "cursor": {
          "ref": "d4f9b512-649b-4199-9f27-b58597f8fe51",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68763e7e-e0b9-4fed-a9f4-6dbb37f3f92a"
        },
        "item": {
          "id": "d7e379bb-2fa9-4ca3-9417-3c903feaea4c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8d793d2e-1323-48ec-ac07-d95e8cb42e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d086fb85-6737-4d2f-b9af-c581c405d883",
        "cursor": {
          "ref": "cd29dbd7-8cff-4d3b-9722-91e92ac30bcf",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8fab748e-fafa-418f-b5a4-cea6289de9ba"
        },
        "item": {
          "id": "d086fb85-6737-4d2f-b9af-c581c405d883",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e5f555b3-2389-4c46-bf3a-b687921cfc09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d086fb85-6737-4d2f-b9af-c581c405d883",
        "cursor": {
          "ref": "cd29dbd7-8cff-4d3b-9722-91e92ac30bcf",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8fab748e-fafa-418f-b5a4-cea6289de9ba"
        },
        "item": {
          "id": "d086fb85-6737-4d2f-b9af-c581c405d883",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e5f555b3-2389-4c46-bf3a-b687921cfc09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be792eaa-28b5-48a7-94ce-c824d6d1dc90",
        "cursor": {
          "ref": "3b2cdd82-5d82-4fec-b9d3-d8c161bdf86b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "09061f35-dbbc-4225-9c24-70488c6b8aeb"
        },
        "item": {
          "id": "be792eaa-28b5-48a7-94ce-c824d6d1dc90",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5b88d13c-0f7f-487b-8c7a-08297be0c65f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be792eaa-28b5-48a7-94ce-c824d6d1dc90",
        "cursor": {
          "ref": "3b2cdd82-5d82-4fec-b9d3-d8c161bdf86b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "09061f35-dbbc-4225-9c24-70488c6b8aeb"
        },
        "item": {
          "id": "be792eaa-28b5-48a7-94ce-c824d6d1dc90",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5b88d13c-0f7f-487b-8c7a-08297be0c65f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99032811-5e9a-452e-b42f-178972043ab4",
        "cursor": {
          "ref": "323db31a-25d3-48ac-9d71-9d5c62d8e335",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "501ce10d-e7bc-4d98-a09b-a15cedfa4da8"
        },
        "item": {
          "id": "99032811-5e9a-452e-b42f-178972043ab4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ec687d76-e33f-44de-8d77-d9c7ef4f452e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99032811-5e9a-452e-b42f-178972043ab4",
        "cursor": {
          "ref": "323db31a-25d3-48ac-9d71-9d5c62d8e335",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "501ce10d-e7bc-4d98-a09b-a15cedfa4da8"
        },
        "item": {
          "id": "99032811-5e9a-452e-b42f-178972043ab4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ec687d76-e33f-44de-8d77-d9c7ef4f452e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a191d0ff-a684-4706-8b41-7b7159d93fa6",
        "cursor": {
          "ref": "ca23510c-f478-4a70-a54d-72acb0e734b8",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bbc7dcb6-3932-4476-8c26-386c7d56a223"
        },
        "item": {
          "id": "a191d0ff-a684-4706-8b41-7b7159d93fa6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2189c1ce-8f1f-4d5a-9d88-099a0f756373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a191d0ff-a684-4706-8b41-7b7159d93fa6",
        "cursor": {
          "ref": "ca23510c-f478-4a70-a54d-72acb0e734b8",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bbc7dcb6-3932-4476-8c26-386c7d56a223"
        },
        "item": {
          "id": "a191d0ff-a684-4706-8b41-7b7159d93fa6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2189c1ce-8f1f-4d5a-9d88-099a0f756373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef56aa1-5145-476d-b4ca-85fab9047cc1",
        "cursor": {
          "ref": "38815806-563a-48e3-8bc6-19e04fa8f06f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d945200e-f20b-4c9b-be1c-3d0d087d423b"
        },
        "item": {
          "id": "aef56aa1-5145-476d-b4ca-85fab9047cc1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f9d5a8e-75b0-473f-875b-c72e8b939142",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef56aa1-5145-476d-b4ca-85fab9047cc1",
        "cursor": {
          "ref": "38815806-563a-48e3-8bc6-19e04fa8f06f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d945200e-f20b-4c9b-be1c-3d0d087d423b"
        },
        "item": {
          "id": "aef56aa1-5145-476d-b4ca-85fab9047cc1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f9d5a8e-75b0-473f-875b-c72e8b939142",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cac19d-e877-4a4a-9490-4efe336233da",
        "cursor": {
          "ref": "ddc12e5a-4721-4b9c-a3a5-f30880cc2e4d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fb867481-a9a5-433b-b544-64e82e32bd59"
        },
        "item": {
          "id": "b6cac19d-e877-4a4a-9490-4efe336233da",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7f99d97c-4471-45a8-86b7-7edab1b4fc02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cac19d-e877-4a4a-9490-4efe336233da",
        "cursor": {
          "ref": "ddc12e5a-4721-4b9c-a3a5-f30880cc2e4d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fb867481-a9a5-433b-b544-64e82e32bd59"
        },
        "item": {
          "id": "b6cac19d-e877-4a4a-9490-4efe336233da",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7f99d97c-4471-45a8-86b7-7edab1b4fc02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07da404d-de6b-49c4-8191-0f21108bea77",
        "cursor": {
          "ref": "ad93916a-b800-4e52-aae2-fe03f4d3efcb",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "074353b1-5f73-4756-acc2-f9c1a20740a0"
        },
        "item": {
          "id": "07da404d-de6b-49c4-8191-0f21108bea77",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dee79957-a9ee-443f-aed6-3d0bd5c1d019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07da404d-de6b-49c4-8191-0f21108bea77",
        "cursor": {
          "ref": "ad93916a-b800-4e52-aae2-fe03f4d3efcb",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "074353b1-5f73-4756-acc2-f9c1a20740a0"
        },
        "item": {
          "id": "07da404d-de6b-49c4-8191-0f21108bea77",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dee79957-a9ee-443f-aed6-3d0bd5c1d019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9503eae-7c9c-4263-933f-a70059d8643d",
        "cursor": {
          "ref": "18d2f464-f112-4ba4-877b-90a2a23246f9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "14bc6b68-044f-4535-85cc-f97709932f9c"
        },
        "item": {
          "id": "c9503eae-7c9c-4263-933f-a70059d8643d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09fc9f71-1b96-4126-934d-e571920179ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9503eae-7c9c-4263-933f-a70059d8643d",
        "cursor": {
          "ref": "18d2f464-f112-4ba4-877b-90a2a23246f9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "14bc6b68-044f-4535-85cc-f97709932f9c"
        },
        "item": {
          "id": "c9503eae-7c9c-4263-933f-a70059d8643d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09fc9f71-1b96-4126-934d-e571920179ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11967572-5266-4d25-a4c9-3681a0f4032f",
        "cursor": {
          "ref": "c59ffcd9-b817-46f8-bbab-d51b6dffee20",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8752da2c-8099-4e2e-a437-b638771c58a1"
        },
        "item": {
          "id": "11967572-5266-4d25-a4c9-3681a0f4032f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b7ff48ae-38f7-4084-8abd-1d7a79a9dd62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11967572-5266-4d25-a4c9-3681a0f4032f",
        "cursor": {
          "ref": "c59ffcd9-b817-46f8-bbab-d51b6dffee20",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8752da2c-8099-4e2e-a437-b638771c58a1"
        },
        "item": {
          "id": "11967572-5266-4d25-a4c9-3681a0f4032f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b7ff48ae-38f7-4084-8abd-1d7a79a9dd62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b920a57-e95b-4431-bd39-e2e9bba96183",
        "cursor": {
          "ref": "a97b7308-46ad-4e15-8a61-18c079315baf",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "45bb4b86-daee-4816-8f7c-3baeb0a4602c"
        },
        "item": {
          "id": "8b920a57-e95b-4431-bd39-e2e9bba96183",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "de135bb4-374a-45ab-9eaa-d5ea8fd25888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b920a57-e95b-4431-bd39-e2e9bba96183",
        "cursor": {
          "ref": "a97b7308-46ad-4e15-8a61-18c079315baf",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "45bb4b86-daee-4816-8f7c-3baeb0a4602c"
        },
        "item": {
          "id": "8b920a57-e95b-4431-bd39-e2e9bba96183",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "de135bb4-374a-45ab-9eaa-d5ea8fd25888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c117e27-82a3-48b9-930e-56ab14b92dc6",
        "cursor": {
          "ref": "804ea2ea-34ee-4a47-83e0-0e643391e545",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "02788c72-f3e4-48ef-9154-fc82e23681bc"
        },
        "item": {
          "id": "7c117e27-82a3-48b9-930e-56ab14b92dc6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "559c97bc-bc0f-42f9-8950-cac434df8bbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c117e27-82a3-48b9-930e-56ab14b92dc6",
        "cursor": {
          "ref": "804ea2ea-34ee-4a47-83e0-0e643391e545",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "02788c72-f3e4-48ef-9154-fc82e23681bc"
        },
        "item": {
          "id": "7c117e27-82a3-48b9-930e-56ab14b92dc6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "559c97bc-bc0f-42f9-8950-cac434df8bbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac4003e-1fb6-4fb3-9900-b00d966886fd",
        "cursor": {
          "ref": "c16664b2-edc0-4844-b241-f186938b8d4b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8e6c733a-4a97-48c7-838a-7a480c595618"
        },
        "item": {
          "id": "5ac4003e-1fb6-4fb3-9900-b00d966886fd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "89980b8a-1b3e-4e32-b7b2-07f0a424c20d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac4003e-1fb6-4fb3-9900-b00d966886fd",
        "cursor": {
          "ref": "c16664b2-edc0-4844-b241-f186938b8d4b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8e6c733a-4a97-48c7-838a-7a480c595618"
        },
        "item": {
          "id": "5ac4003e-1fb6-4fb3-9900-b00d966886fd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "89980b8a-1b3e-4e32-b7b2-07f0a424c20d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5fc796-561c-4db5-a655-6a30409a3300",
        "cursor": {
          "ref": "348bf5ca-93f5-49b6-b282-7509b9c159cf",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "41ee321c-5746-446a-b79a-6a3ba7d47a32"
        },
        "item": {
          "id": "6b5fc796-561c-4db5-a655-6a30409a3300",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ba7991f5-bf30-484f-892e-3e40248b482f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5fc796-561c-4db5-a655-6a30409a3300",
        "cursor": {
          "ref": "348bf5ca-93f5-49b6-b282-7509b9c159cf",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "41ee321c-5746-446a-b79a-6a3ba7d47a32"
        },
        "item": {
          "id": "6b5fc796-561c-4db5-a655-6a30409a3300",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ba7991f5-bf30-484f-892e-3e40248b482f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5ed557-ff9b-4ef3-a624-eb9216a2746a",
        "cursor": {
          "ref": "c49fbda7-8a6c-4d85-b8f6-6a87acd5a029",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3c567224-97b5-4a7c-b6bc-ebdb4299bb35"
        },
        "item": {
          "id": "2b5ed557-ff9b-4ef3-a624-eb9216a2746a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cb290af7-beee-4c4b-a62a-489f42f19439",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5ed557-ff9b-4ef3-a624-eb9216a2746a",
        "cursor": {
          "ref": "c49fbda7-8a6c-4d85-b8f6-6a87acd5a029",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3c567224-97b5-4a7c-b6bc-ebdb4299bb35"
        },
        "item": {
          "id": "2b5ed557-ff9b-4ef3-a624-eb9216a2746a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cb290af7-beee-4c4b-a62a-489f42f19439",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81458d4-1825-4666-8389-b8a22c1eae55",
        "cursor": {
          "ref": "8b9ad680-5e62-4568-8c99-6571057e0f8f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a5766a5-0a1c-4450-ae9b-aa3e371d6bab"
        },
        "item": {
          "id": "f81458d4-1825-4666-8389-b8a22c1eae55",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "69b0a61f-78bd-40d0-a4d8-4d6a44a149d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81458d4-1825-4666-8389-b8a22c1eae55",
        "cursor": {
          "ref": "8b9ad680-5e62-4568-8c99-6571057e0f8f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a5766a5-0a1c-4450-ae9b-aa3e371d6bab"
        },
        "item": {
          "id": "f81458d4-1825-4666-8389-b8a22c1eae55",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "69b0a61f-78bd-40d0-a4d8-4d6a44a149d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db293189-697c-41f5-9a52-80dd6f9917af",
        "cursor": {
          "ref": "127b9b0a-a219-4f4b-9739-00c60e1b1fe6",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6f43a568-59f8-4b29-8ed7-0ab7099afda7"
        },
        "item": {
          "id": "db293189-697c-41f5-9a52-80dd6f9917af",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0ee9e6ab-2232-4526-842b-960cd939d15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db293189-697c-41f5-9a52-80dd6f9917af",
        "cursor": {
          "ref": "127b9b0a-a219-4f4b-9739-00c60e1b1fe6",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6f43a568-59f8-4b29-8ed7-0ab7099afda7"
        },
        "item": {
          "id": "db293189-697c-41f5-9a52-80dd6f9917af",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0ee9e6ab-2232-4526-842b-960cd939d15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753d36ee-a0e5-47b3-9fd0-1a7a3492861d",
        "cursor": {
          "ref": "d7749563-c5af-4f48-8c3c-132456ff5fa1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e37a6f53-e888-49a5-a572-e09e9672445b"
        },
        "item": {
          "id": "753d36ee-a0e5-47b3-9fd0-1a7a3492861d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "084f40a9-3854-47dc-b570-ef3671f12d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753d36ee-a0e5-47b3-9fd0-1a7a3492861d",
        "cursor": {
          "ref": "d7749563-c5af-4f48-8c3c-132456ff5fa1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e37a6f53-e888-49a5-a572-e09e9672445b"
        },
        "item": {
          "id": "753d36ee-a0e5-47b3-9fd0-1a7a3492861d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "084f40a9-3854-47dc-b570-ef3671f12d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599c02ca-b756-426f-a384-a58552822a03",
        "cursor": {
          "ref": "b8985135-d8fd-4cd7-a45f-5962d85a0c8c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "88aa0122-be6f-4911-8cb7-adb9b90da132"
        },
        "item": {
          "id": "599c02ca-b756-426f-a384-a58552822a03",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1c382a8b-7902-49de-9af3-84e06c8e18fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599c02ca-b756-426f-a384-a58552822a03",
        "cursor": {
          "ref": "b8985135-d8fd-4cd7-a45f-5962d85a0c8c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "88aa0122-be6f-4911-8cb7-adb9b90da132"
        },
        "item": {
          "id": "599c02ca-b756-426f-a384-a58552822a03",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1c382a8b-7902-49de-9af3-84e06c8e18fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad50c34-18a1-4a0d-8240-0a7911a0e509",
        "cursor": {
          "ref": "5b939ed5-3281-4373-8288-738e913e07b7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ef62b422-c5d5-4e5c-bea0-664ca792b98e"
        },
        "item": {
          "id": "cad50c34-18a1-4a0d-8240-0a7911a0e509",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c4df25a1-c69f-41ae-8e45-284c1265cd60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad50c34-18a1-4a0d-8240-0a7911a0e509",
        "cursor": {
          "ref": "5b939ed5-3281-4373-8288-738e913e07b7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ef62b422-c5d5-4e5c-bea0-664ca792b98e"
        },
        "item": {
          "id": "cad50c34-18a1-4a0d-8240-0a7911a0e509",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c4df25a1-c69f-41ae-8e45-284c1265cd60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3817a8b-a606-4b89-bc44-664c2c1448ad",
        "cursor": {
          "ref": "e9b4a632-57e8-44b9-988e-06d258301c80",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "39e8aeaf-69c2-417b-8a05-48dc6fc311e6"
        },
        "item": {
          "id": "c3817a8b-a606-4b89-bc44-664c2c1448ad",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ea81badf-66f0-42a0-aeed-ebcd311842c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3817a8b-a606-4b89-bc44-664c2c1448ad",
        "cursor": {
          "ref": "e9b4a632-57e8-44b9-988e-06d258301c80",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "39e8aeaf-69c2-417b-8a05-48dc6fc311e6"
        },
        "item": {
          "id": "c3817a8b-a606-4b89-bc44-664c2c1448ad",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ea81badf-66f0-42a0-aeed-ebcd311842c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200bddb0-844b-4213-9b7d-b1875f46fc6a",
        "cursor": {
          "ref": "8f4a3b8e-b7c7-4cd8-b209-77d451ce225b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7e043098-d411-44fb-b9fa-910abbb35bbd"
        },
        "item": {
          "id": "200bddb0-844b-4213-9b7d-b1875f46fc6a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "85a99b35-b5e0-4944-a7d4-4a07b03348c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200bddb0-844b-4213-9b7d-b1875f46fc6a",
        "cursor": {
          "ref": "8f4a3b8e-b7c7-4cd8-b209-77d451ce225b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7e043098-d411-44fb-b9fa-910abbb35bbd"
        },
        "item": {
          "id": "200bddb0-844b-4213-9b7d-b1875f46fc6a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "85a99b35-b5e0-4944-a7d4-4a07b03348c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607f8f52-4e8a-493f-9c59-74bec00d94cb",
        "cursor": {
          "ref": "e719d028-ff2e-42ac-9b39-0ab422045ecb",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "009614df-2db3-42f6-b478-fea06582adb4"
        },
        "item": {
          "id": "607f8f52-4e8a-493f-9c59-74bec00d94cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f3fe24b-4781-40da-bbb7-e36182a10906",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607f8f52-4e8a-493f-9c59-74bec00d94cb",
        "cursor": {
          "ref": "e719d028-ff2e-42ac-9b39-0ab422045ecb",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "009614df-2db3-42f6-b478-fea06582adb4"
        },
        "item": {
          "id": "607f8f52-4e8a-493f-9c59-74bec00d94cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f3fe24b-4781-40da-bbb7-e36182a10906",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4b54e5-a2c9-4005-8557-b035353fdc10",
        "cursor": {
          "ref": "54b54d9f-5152-42c4-9a02-a9f17ebb6fd3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "33bf1ea1-1328-427d-af00-3fc4d81e6c4e"
        },
        "item": {
          "id": "ab4b54e5-a2c9-4005-8557-b035353fdc10",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "43a621b6-db17-4121-9ba1-d66846bf3179",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4b54e5-a2c9-4005-8557-b035353fdc10",
        "cursor": {
          "ref": "54b54d9f-5152-42c4-9a02-a9f17ebb6fd3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "33bf1ea1-1328-427d-af00-3fc4d81e6c4e"
        },
        "item": {
          "id": "ab4b54e5-a2c9-4005-8557-b035353fdc10",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "43a621b6-db17-4121-9ba1-d66846bf3179",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7d0b95-1b45-43e0-8479-e443e8b0e2b1",
        "cursor": {
          "ref": "fe7677b5-32b0-463b-9eaa-b89f148ce6de",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "055998d9-7549-4dc5-9c36-5ab97336c715"
        },
        "item": {
          "id": "1d7d0b95-1b45-43e0-8479-e443e8b0e2b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3daf92aa-505b-4915-8b45-63781b606212",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7d0b95-1b45-43e0-8479-e443e8b0e2b1",
        "cursor": {
          "ref": "fe7677b5-32b0-463b-9eaa-b89f148ce6de",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "055998d9-7549-4dc5-9c36-5ab97336c715"
        },
        "item": {
          "id": "1d7d0b95-1b45-43e0-8479-e443e8b0e2b1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3daf92aa-505b-4915-8b45-63781b606212",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410b5ab-50a1-4072-bbd3-d69c6960e791",
        "cursor": {
          "ref": "24508b4f-1e66-437d-8868-c8713d20763a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f51b08b4-cdd1-4633-aaab-fa749192248d"
        },
        "item": {
          "id": "7410b5ab-50a1-4072-bbd3-d69c6960e791",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d4d0a33c-4898-4dc6-805f-624c64127cf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410b5ab-50a1-4072-bbd3-d69c6960e791",
        "cursor": {
          "ref": "24508b4f-1e66-437d-8868-c8713d20763a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f51b08b4-cdd1-4633-aaab-fa749192248d"
        },
        "item": {
          "id": "7410b5ab-50a1-4072-bbd3-d69c6960e791",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d4d0a33c-4898-4dc6-805f-624c64127cf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88b5719-f5c6-47e9-a30c-7975d6502069",
        "cursor": {
          "ref": "7666b118-4a5f-4216-a9e5-c0d900f05e8d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "52f8ad9b-cc9a-4c80-9048-827a8b336278"
        },
        "item": {
          "id": "c88b5719-f5c6-47e9-a30c-7975d6502069",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d9df4d46-200e-4060-938c-c67967174c96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88b5719-f5c6-47e9-a30c-7975d6502069",
        "cursor": {
          "ref": "7666b118-4a5f-4216-a9e5-c0d900f05e8d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "52f8ad9b-cc9a-4c80-9048-827a8b336278"
        },
        "item": {
          "id": "c88b5719-f5c6-47e9-a30c-7975d6502069",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d9df4d46-200e-4060-938c-c67967174c96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19bcf16-9c57-4181-ad86-4c34048e3488",
        "cursor": {
          "ref": "54129409-d6a2-4ecf-8ee1-75a95f91c2eb",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1396be26-b0e7-4ac5-90ce-a60cd2a97941"
        },
        "item": {
          "id": "c19bcf16-9c57-4181-ad86-4c34048e3488",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ed4c7162-96b6-4e56-b409-1a44f9b43e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19bcf16-9c57-4181-ad86-4c34048e3488",
        "cursor": {
          "ref": "54129409-d6a2-4ecf-8ee1-75a95f91c2eb",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1396be26-b0e7-4ac5-90ce-a60cd2a97941"
        },
        "item": {
          "id": "c19bcf16-9c57-4181-ad86-4c34048e3488",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ed4c7162-96b6-4e56-b409-1a44f9b43e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de46b0ad-1da1-43ed-82c3-73a35342a0ac",
        "cursor": {
          "ref": "f4a34bd4-ca12-4f05-8e51-6fb6b5ffc535",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5cd249a8-bb8a-4d7f-b793-d697539057e0"
        },
        "item": {
          "id": "de46b0ad-1da1-43ed-82c3-73a35342a0ac",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9c147cd6-bf7b-4889-9db8-2c43057f1417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de46b0ad-1da1-43ed-82c3-73a35342a0ac",
        "cursor": {
          "ref": "f4a34bd4-ca12-4f05-8e51-6fb6b5ffc535",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5cd249a8-bb8a-4d7f-b793-d697539057e0"
        },
        "item": {
          "id": "de46b0ad-1da1-43ed-82c3-73a35342a0ac",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9c147cd6-bf7b-4889-9db8-2c43057f1417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12b142e-2e33-4451-995f-c4a729cdc7bc",
        "cursor": {
          "ref": "487fcf31-9e09-4ce5-825a-641f73cf833a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d3c61837-9d01-41f8-99d8-3fc22cbed6d4"
        },
        "item": {
          "id": "f12b142e-2e33-4451-995f-c4a729cdc7bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3d8af115-5408-4d69-b6ed-3dde6ecc5c3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12b142e-2e33-4451-995f-c4a729cdc7bc",
        "cursor": {
          "ref": "487fcf31-9e09-4ce5-825a-641f73cf833a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d3c61837-9d01-41f8-99d8-3fc22cbed6d4"
        },
        "item": {
          "id": "f12b142e-2e33-4451-995f-c4a729cdc7bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3d8af115-5408-4d69-b6ed-3dde6ecc5c3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5765dde-e26a-44e7-a287-d3224efe8e5e",
        "cursor": {
          "ref": "e40afc61-a82c-4723-b3e8-ca3e432c08eb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f31a4ecb-9ff5-483d-bdea-80c47d0de28e"
        },
        "item": {
          "id": "b5765dde-e26a-44e7-a287-d3224efe8e5e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c35a572c-acce-4536-a596-494a7b8642ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5765dde-e26a-44e7-a287-d3224efe8e5e",
        "cursor": {
          "ref": "e40afc61-a82c-4723-b3e8-ca3e432c08eb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f31a4ecb-9ff5-483d-bdea-80c47d0de28e"
        },
        "item": {
          "id": "b5765dde-e26a-44e7-a287-d3224efe8e5e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c35a572c-acce-4536-a596-494a7b8642ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed12db3-8608-480a-94f7-1bf18b80c721",
        "cursor": {
          "ref": "a32000a8-86e0-4f90-a9a0-e045ee0347b4",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4ec8826e-143c-49c6-914c-47b9492b6ede"
        },
        "item": {
          "id": "8ed12db3-8608-480a-94f7-1bf18b80c721",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e83fe0b7-92f2-4004-89f1-406197297d6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed12db3-8608-480a-94f7-1bf18b80c721",
        "cursor": {
          "ref": "a32000a8-86e0-4f90-a9a0-e045ee0347b4",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4ec8826e-143c-49c6-914c-47b9492b6ede"
        },
        "item": {
          "id": "8ed12db3-8608-480a-94f7-1bf18b80c721",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e83fe0b7-92f2-4004-89f1-406197297d6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ed4f34-e12c-484a-9b5e-9ed091d63527",
        "cursor": {
          "ref": "35d304ba-0c31-4250-b654-5a08b144a1b3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "99c84562-6477-48fb-b7de-8364d911be78"
        },
        "item": {
          "id": "06ed4f34-e12c-484a-9b5e-9ed091d63527",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2d3b3c18-f141-420f-88a0-222aa74d6740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ed4f34-e12c-484a-9b5e-9ed091d63527",
        "cursor": {
          "ref": "35d304ba-0c31-4250-b654-5a08b144a1b3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "99c84562-6477-48fb-b7de-8364d911be78"
        },
        "item": {
          "id": "06ed4f34-e12c-484a-9b5e-9ed091d63527",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2d3b3c18-f141-420f-88a0-222aa74d6740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd45bf68-2d14-4b5a-abda-014cbc9a2ade",
        "cursor": {
          "ref": "5a772d38-a20f-4899-a1ca-7bea5fde5e55",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c19a106a-9043-453a-b32d-184d5219584b"
        },
        "item": {
          "id": "cd45bf68-2d14-4b5a-abda-014cbc9a2ade",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "565778be-8db8-46f1-8663-76d7bfef9d5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd45bf68-2d14-4b5a-abda-014cbc9a2ade",
        "cursor": {
          "ref": "5a772d38-a20f-4899-a1ca-7bea5fde5e55",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c19a106a-9043-453a-b32d-184d5219584b"
        },
        "item": {
          "id": "cd45bf68-2d14-4b5a-abda-014cbc9a2ade",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "565778be-8db8-46f1-8663-76d7bfef9d5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400e37de-dd8d-4af6-9f4e-48f6854114cb",
        "cursor": {
          "ref": "cb24824e-2226-4e13-8696-7941f7b628bc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "330e669e-7416-4df8-8fdd-70f6680c12e1"
        },
        "item": {
          "id": "400e37de-dd8d-4af6-9f4e-48f6854114cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "85a953ec-6869-43bd-92ee-27a3a03b0c35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400e37de-dd8d-4af6-9f4e-48f6854114cb",
        "cursor": {
          "ref": "cb24824e-2226-4e13-8696-7941f7b628bc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "330e669e-7416-4df8-8fdd-70f6680c12e1"
        },
        "item": {
          "id": "400e37de-dd8d-4af6-9f4e-48f6854114cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "85a953ec-6869-43bd-92ee-27a3a03b0c35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b6182c-6acb-44dc-bf85-758a57961900",
        "cursor": {
          "ref": "03cf163b-2bab-4262-a478-e9745e806118",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c55e5bcb-00f3-48d0-b102-7a4783fed3e1"
        },
        "item": {
          "id": "69b6182c-6acb-44dc-bf85-758a57961900",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8d9de28f-c8eb-4466-8e0d-c87e1e8ec71b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b6182c-6acb-44dc-bf85-758a57961900",
        "cursor": {
          "ref": "03cf163b-2bab-4262-a478-e9745e806118",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c55e5bcb-00f3-48d0-b102-7a4783fed3e1"
        },
        "item": {
          "id": "69b6182c-6acb-44dc-bf85-758a57961900",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8d9de28f-c8eb-4466-8e0d-c87e1e8ec71b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a90ec54-3a08-4c2b-9bd6-d764782ed11d",
        "cursor": {
          "ref": "39403552-f873-4586-bdf7-cd95fe96c8e7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "92e1a624-a646-4304-9dc8-824b5e9aace6"
        },
        "item": {
          "id": "9a90ec54-3a08-4c2b-9bd6-d764782ed11d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "65eddd28-9f8a-4d26-a17a-46b24d7ab1f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a90ec54-3a08-4c2b-9bd6-d764782ed11d",
        "cursor": {
          "ref": "39403552-f873-4586-bdf7-cd95fe96c8e7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "92e1a624-a646-4304-9dc8-824b5e9aace6"
        },
        "item": {
          "id": "9a90ec54-3a08-4c2b-9bd6-d764782ed11d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "65eddd28-9f8a-4d26-a17a-46b24d7ab1f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756d23c-3bee-4af1-b5e8-574349e1560d",
        "cursor": {
          "ref": "5e58589a-84c5-4ad1-bd0e-6f58df52060e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "89bfd86f-0db2-41cc-a593-bd02d8508e45"
        },
        "item": {
          "id": "7756d23c-3bee-4af1-b5e8-574349e1560d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "500c4884-fdef-40b3-925a-ce4fe3189b90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756d23c-3bee-4af1-b5e8-574349e1560d",
        "cursor": {
          "ref": "5e58589a-84c5-4ad1-bd0e-6f58df52060e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "89bfd86f-0db2-41cc-a593-bd02d8508e45"
        },
        "item": {
          "id": "7756d23c-3bee-4af1-b5e8-574349e1560d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "500c4884-fdef-40b3-925a-ce4fe3189b90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977da51b-967b-4d6b-8216-8126cd4a715c",
        "cursor": {
          "ref": "e0377cd7-a36d-462a-8d61-e956824fbc34",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "db12569d-d710-4fb6-8b62-d03a2661da55"
        },
        "item": {
          "id": "977da51b-967b-4d6b-8216-8126cd4a715c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2f0a6935-85db-47d6-a4a9-b8014d73060b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977da51b-967b-4d6b-8216-8126cd4a715c",
        "cursor": {
          "ref": "e0377cd7-a36d-462a-8d61-e956824fbc34",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "db12569d-d710-4fb6-8b62-d03a2661da55"
        },
        "item": {
          "id": "977da51b-967b-4d6b-8216-8126cd4a715c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2f0a6935-85db-47d6-a4a9-b8014d73060b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2180b5-9f94-4160-9e1f-a81fffb8918b",
        "cursor": {
          "ref": "c1752eb6-75d9-49dc-bb11-978d4240bf89",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "17f60865-d331-40c9-b96f-2883758b5f46"
        },
        "item": {
          "id": "4b2180b5-9f94-4160-9e1f-a81fffb8918b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "215efbe0-19c1-47b8-8e82-9b55ea9f165b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2180b5-9f94-4160-9e1f-a81fffb8918b",
        "cursor": {
          "ref": "c1752eb6-75d9-49dc-bb11-978d4240bf89",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "17f60865-d331-40c9-b96f-2883758b5f46"
        },
        "item": {
          "id": "4b2180b5-9f94-4160-9e1f-a81fffb8918b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "215efbe0-19c1-47b8-8e82-9b55ea9f165b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c79ce89-d162-4cef-bded-d22b979c07c2",
        "cursor": {
          "ref": "8b774d15-c304-4775-ac52-fc8d467700e9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ba4676aa-32d8-43bb-bbb2-18f22689641c"
        },
        "item": {
          "id": "7c79ce89-d162-4cef-bded-d22b979c07c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7a052264-dc19-4e14-923c-137ca5efdcd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c79ce89-d162-4cef-bded-d22b979c07c2",
        "cursor": {
          "ref": "8b774d15-c304-4775-ac52-fc8d467700e9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ba4676aa-32d8-43bb-bbb2-18f22689641c"
        },
        "item": {
          "id": "7c79ce89-d162-4cef-bded-d22b979c07c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7a052264-dc19-4e14-923c-137ca5efdcd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec138f2-c9bb-4566-a81e-440cbf34b723",
        "cursor": {
          "ref": "4355affc-5859-4718-8615-5ad3da9ea4f3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "861d4743-6433-4180-92a3-55dfb8fd50c8"
        },
        "item": {
          "id": "5ec138f2-c9bb-4566-a81e-440cbf34b723",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5efc89a6-9e0b-4e49-8a4d-f5014ab27cb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec138f2-c9bb-4566-a81e-440cbf34b723",
        "cursor": {
          "ref": "4355affc-5859-4718-8615-5ad3da9ea4f3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "861d4743-6433-4180-92a3-55dfb8fd50c8"
        },
        "item": {
          "id": "5ec138f2-c9bb-4566-a81e-440cbf34b723",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5efc89a6-9e0b-4e49-8a4d-f5014ab27cb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3770be-8851-464e-bfff-cc61f23e132f",
        "cursor": {
          "ref": "55754c12-f686-4e62-9394-1426ddf1612b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "57de09c2-d5d8-45b3-b47d-65a07f2e3131"
        },
        "item": {
          "id": "ae3770be-8851-464e-bfff-cc61f23e132f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0d9755ce-bb4c-4ebf-bf23-36061bb7eb45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3770be-8851-464e-bfff-cc61f23e132f",
        "cursor": {
          "ref": "55754c12-f686-4e62-9394-1426ddf1612b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "57de09c2-d5d8-45b3-b47d-65a07f2e3131"
        },
        "item": {
          "id": "ae3770be-8851-464e-bfff-cc61f23e132f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0d9755ce-bb4c-4ebf-bf23-36061bb7eb45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2102f6-e99a-4699-aa53-b545c85eaa5e",
        "cursor": {
          "ref": "84568491-e20d-4806-8059-e9e091dab2fa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d270b478-b7bb-40f4-8ae1-c763844b7ae2"
        },
        "item": {
          "id": "2a2102f6-e99a-4699-aa53-b545c85eaa5e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2efeb811-3d0c-46e6-8972-603cf4bad671",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2102f6-e99a-4699-aa53-b545c85eaa5e",
        "cursor": {
          "ref": "84568491-e20d-4806-8059-e9e091dab2fa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d270b478-b7bb-40f4-8ae1-c763844b7ae2"
        },
        "item": {
          "id": "2a2102f6-e99a-4699-aa53-b545c85eaa5e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2efeb811-3d0c-46e6-8972-603cf4bad671",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0681e90d-7cdc-426c-8da1-7bf1c95daae9",
        "cursor": {
          "ref": "11894df4-d288-434a-bab9-f7319f753c12",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aeb0ad9d-6099-4d8d-a7f4-119f14fc973b"
        },
        "item": {
          "id": "0681e90d-7cdc-426c-8da1-7bf1c95daae9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f003c930-b0ea-4a33-89a1-c297aaf4c397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0681e90d-7cdc-426c-8da1-7bf1c95daae9",
        "cursor": {
          "ref": "11894df4-d288-434a-bab9-f7319f753c12",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aeb0ad9d-6099-4d8d-a7f4-119f14fc973b"
        },
        "item": {
          "id": "0681e90d-7cdc-426c-8da1-7bf1c95daae9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f003c930-b0ea-4a33-89a1-c297aaf4c397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9689121-dde3-4024-bca1-034ec4db890d",
        "cursor": {
          "ref": "435ab286-a20d-4a5d-9b37-1d251ea5c403",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "efea64f4-6e24-4502-9518-d742e5c0b0b2"
        },
        "item": {
          "id": "f9689121-dde3-4024-bca1-034ec4db890d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5791c70b-9ff4-4659-b31a-7d1a29b8a5b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9689121-dde3-4024-bca1-034ec4db890d",
        "cursor": {
          "ref": "435ab286-a20d-4a5d-9b37-1d251ea5c403",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "efea64f4-6e24-4502-9518-d742e5c0b0b2"
        },
        "item": {
          "id": "f9689121-dde3-4024-bca1-034ec4db890d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5791c70b-9ff4-4659-b31a-7d1a29b8a5b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179c5ac-3f03-4f43-b244-b6e01df51add",
        "cursor": {
          "ref": "dc217415-7a99-456d-804d-3b501ab117e7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "77b84bd0-35e1-42d1-8270-f307681db7c0"
        },
        "item": {
          "id": "2179c5ac-3f03-4f43-b244-b6e01df51add",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "357c80ba-f856-450b-b767-8fc23196b940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179c5ac-3f03-4f43-b244-b6e01df51add",
        "cursor": {
          "ref": "dc217415-7a99-456d-804d-3b501ab117e7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "77b84bd0-35e1-42d1-8270-f307681db7c0"
        },
        "item": {
          "id": "2179c5ac-3f03-4f43-b244-b6e01df51add",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "357c80ba-f856-450b-b767-8fc23196b940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afeb2ff-b915-4be7-b657-f473981b804e",
        "cursor": {
          "ref": "fdc1b08e-e1d2-432c-a8e6-eb49ec573b81",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a16e2508-846e-469f-a230-a08d84fbb59a"
        },
        "item": {
          "id": "0afeb2ff-b915-4be7-b657-f473981b804e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fe3c6fea-7d0f-4ce6-abef-5ded61826f8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afeb2ff-b915-4be7-b657-f473981b804e",
        "cursor": {
          "ref": "fdc1b08e-e1d2-432c-a8e6-eb49ec573b81",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a16e2508-846e-469f-a230-a08d84fbb59a"
        },
        "item": {
          "id": "0afeb2ff-b915-4be7-b657-f473981b804e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fe3c6fea-7d0f-4ce6-abef-5ded61826f8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64b399d-204b-4e1d-97cc-0c3e0bce9a81",
        "cursor": {
          "ref": "b84998ec-fe42-4b93-999d-51ea94850499",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f3ac999c-075e-4274-8c2e-2a9a0cb8a074"
        },
        "item": {
          "id": "d64b399d-204b-4e1d-97cc-0c3e0bce9a81",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ba7ec03b-67c2-4cda-9ab0-b438eae944c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64b399d-204b-4e1d-97cc-0c3e0bce9a81",
        "cursor": {
          "ref": "b84998ec-fe42-4b93-999d-51ea94850499",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f3ac999c-075e-4274-8c2e-2a9a0cb8a074"
        },
        "item": {
          "id": "d64b399d-204b-4e1d-97cc-0c3e0bce9a81",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ba7ec03b-67c2-4cda-9ab0-b438eae944c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8240eaee-3cf4-4c2d-8df2-d89b01776230",
        "cursor": {
          "ref": "c62c76ea-ed52-487c-a022-5814f1cd3bc8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "07398389-6b73-45df-871d-9badb9464e0b"
        },
        "item": {
          "id": "8240eaee-3cf4-4c2d-8df2-d89b01776230",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "00d68e7f-1c76-4aee-8152-4957233f3951",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8240eaee-3cf4-4c2d-8df2-d89b01776230",
        "cursor": {
          "ref": "c62c76ea-ed52-487c-a022-5814f1cd3bc8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "07398389-6b73-45df-871d-9badb9464e0b"
        },
        "item": {
          "id": "8240eaee-3cf4-4c2d-8df2-d89b01776230",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "00d68e7f-1c76-4aee-8152-4957233f3951",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b45bb6-220b-4170-9569-77518b3599dc",
        "cursor": {
          "ref": "4f057281-eb11-4e91-9561-675ea6543411",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "03a53517-3654-43ce-8fbb-6d544545ce08"
        },
        "item": {
          "id": "64b45bb6-220b-4170-9569-77518b3599dc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "87eb5bdb-c4f4-49f9-9221-bb8ab9073c9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "64b45bb6-220b-4170-9569-77518b3599dc",
        "cursor": {
          "ref": "4f057281-eb11-4e91-9561-675ea6543411",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "03a53517-3654-43ce-8fbb-6d544545ce08"
        },
        "item": {
          "id": "64b45bb6-220b-4170-9569-77518b3599dc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "87eb5bdb-c4f4-49f9-9221-bb8ab9073c9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e267c955-effe-44a3-bdbd-0583614c7fb4",
        "cursor": {
          "ref": "b66782d2-3d1d-483e-aeff-09f964ea901c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ebafc593-fb53-43a1-921e-991e807d5613"
        },
        "item": {
          "id": "e267c955-effe-44a3-bdbd-0583614c7fb4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7c588905-abae-4699-81e7-77b0ec72675b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "e267c955-effe-44a3-bdbd-0583614c7fb4",
        "cursor": {
          "ref": "b66782d2-3d1d-483e-aeff-09f964ea901c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ebafc593-fb53-43a1-921e-991e807d5613"
        },
        "item": {
          "id": "e267c955-effe-44a3-bdbd-0583614c7fb4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7c588905-abae-4699-81e7-77b0ec72675b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "39873124-eaeb-49cb-9095-6317ded9ed03",
        "cursor": {
          "ref": "74ee675e-79e5-408c-8be4-73ba456677d6",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "51938b21-da68-46f8-8ad2-11f8212dc891"
        },
        "item": {
          "id": "39873124-eaeb-49cb-9095-6317ded9ed03",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4c1f7dfa-bfae-4ae6-a17e-e58f3459e314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "39873124-eaeb-49cb-9095-6317ded9ed03",
        "cursor": {
          "ref": "74ee675e-79e5-408c-8be4-73ba456677d6",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "51938b21-da68-46f8-8ad2-11f8212dc891"
        },
        "item": {
          "id": "39873124-eaeb-49cb-9095-6317ded9ed03",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4c1f7dfa-bfae-4ae6-a17e-e58f3459e314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
        "cursor": {
          "ref": "ef11d0f3-df55-4081-a6d9-5135e73eddae",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "21ca9a8c-325a-423b-8832-1695b49ed545"
        },
        "item": {
          "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1c1dfa0-0b93-4e8c-b361-a00fc3228a20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
        "cursor": {
          "ref": "ef11d0f3-df55-4081-a6d9-5135e73eddae",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "21ca9a8c-325a-423b-8832-1695b49ed545"
        },
        "item": {
          "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1c1dfa0-0b93-4e8c-b361-a00fc3228a20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
        "cursor": {
          "ref": "ef11d0f3-df55-4081-a6d9-5135e73eddae",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "21ca9a8c-325a-423b-8832-1695b49ed545"
        },
        "item": {
          "id": "6192b83c-6702-4ad1-89c3-745eeed9e6b0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1c1dfa0-0b93-4e8c-b361-a00fc3228a20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a899e7-8b68-48b2-b3c7-5faf2fe797c5",
        "cursor": {
          "ref": "ea481523-f40e-436d-b428-9a51f67bfa87",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "30691c9c-be88-499b-b4ef-d64eaa6f3f5e"
        },
        "item": {
          "id": "61a899e7-8b68-48b2-b3c7-5faf2fe797c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc65e4c5-4e10-4b27-b32d-083ba8bdef98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a899e7-8b68-48b2-b3c7-5faf2fe797c5",
        "cursor": {
          "ref": "ea481523-f40e-436d-b428-9a51f67bfa87",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "30691c9c-be88-499b-b4ef-d64eaa6f3f5e"
        },
        "item": {
          "id": "61a899e7-8b68-48b2-b3c7-5faf2fe797c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc65e4c5-4e10-4b27-b32d-083ba8bdef98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8aa416c-783e-4934-a7f7-260d78afb3d8",
        "cursor": {
          "ref": "dfefb7a2-77db-48b2-9625-98f7b239d7bf",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ebfbd85f-9096-4d47-88a3-fa4ae1582590"
        },
        "item": {
          "id": "c8aa416c-783e-4934-a7f7-260d78afb3d8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "16225b35-4ba5-4887-9e0e-2460bf0dd495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8aa416c-783e-4934-a7f7-260d78afb3d8",
        "cursor": {
          "ref": "dfefb7a2-77db-48b2-9625-98f7b239d7bf",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ebfbd85f-9096-4d47-88a3-fa4ae1582590"
        },
        "item": {
          "id": "c8aa416c-783e-4934-a7f7-260d78afb3d8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "16225b35-4ba5-4887-9e0e-2460bf0dd495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}