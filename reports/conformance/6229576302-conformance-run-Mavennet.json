{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1a8a224e-1c99-4454-8850-ffd2bf4e56ee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ef3b10be-cef1-4896-8bf6-d534c2a5296c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b13dc6f-5228-4402-84cc-b0fb750e9701",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c36390bb-df44-4e7e-9a0f-bff2c06c6c64"
                }
              }
            ]
          },
          {
            "id": "1789bbac-30aa-41b3-8e6c-72859a2d8f5f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9df256e7-acff-46f0-9e6a-ce22b4f2bff7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bfd6a33e-c841-48af-9d85-1b44395d1290"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c45d95ea-b9af-41b4-ad9d-5a969b3cdfeb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "25929b8a-b2a5-4221-9e5f-f2e29f9296b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12178d48-2bd2-4640-a897-3723ec15ecf0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0387fb5e-df13-49e9-8867-cb8b457308ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf0f984b-a575-4565-bf04-3e979d989784"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d842d0b7-69d0-453a-8d9e-efa851ddb8ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3826902f-3669-41df-bf0c-7f528538e091"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ceb22c82-083c-4f37-8b86-c1d34cb36fd2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42211c48-d522-43dd-9163-d05bdd5ccae3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bee5ac33-131f-4979-843b-4915193eb71f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6db51c74-afa9-43ea-b316-b9d6e4e88500"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c04d874-9f38-44d3-b05e-32ad9f7d0a2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd8fa0b7-1944-4abf-abce-b90655d84e8f"
            }
          }
        ]
      },
      {
        "id": "6a3986e5-6782-465b-9a0f-10e004ca6cc2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8cf7be88-a5a8-4856-90e5-b62c2b7874a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64ddf296-7b31-490e-842d-2c5716dda363",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebecfe92-65dc-4e91-abaa-5e2e8a7b1d1a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c889112-b294-4e3c-ac3b-471d68b987e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f36ea3e3-7bdf-448b-9f0c-2b2c03f6dc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3e3ad1-d3a0-4c2c-81a0-442d633d5f39",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776017ed-ef3d-4372-9dd0-7fcdd86a491c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afc22353-e712-4a93-88bd-a20996f08a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897561ee-e29b-4b64-9d15-0b4cde540a7e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ee5aba-45f3-4646-b4f4-649a3476e817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45ccaef0-37e0-4f7c-acd0-802a064a5fd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d637a1ea-4d16-4f1a-bb47-925a192b17c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c80ee85-ed4c-4b4b-97f8-e0e23cb6a008",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9878b0-c401-4263-9bd0-2293d305341e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcc66fbe-1817-447f-8d33-6abd5114ee64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdcfe51-35bc-4348-937a-673ff2f068f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26eda914-1ea1-4b1a-b42a-9c26f6a4d3a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e183d6b-26f4-4053-b043-592bb6109dae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2db7366b-6b59-4e5c-a780-19510af8a39c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45e51806-19d5-4b8f-9141-2f387f767c64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "919010e3-5213-407b-80ba-dcc475ce662b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb059c2f-46ba-485f-86dc-50d26ba94409",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5d0c7c7c-7b37-4bdb-bd1d-f790e8c13879"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdcba6b8-a81e-4ba0-949f-e6f076725f1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f563ad55-0675-4531-86bd-edc98189f834"
            }
          }
        ]
      },
      {
        "id": "f71ba056-370b-4409-b921-c9aa0992232d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "32b24f37-f177-4af6-b82e-12ddb457f6bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca20cd44-f63a-4b87-8e21-daadf4ad65a5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "884eacd8-05d4-4a75-8bb2-66ed4473f97f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb7a094-7470-40fc-96db-20d5dbfd7358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32924b83-a73e-425e-87c0-605a582860e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5fc5dc-9ebb-4a82-9910-f1b1b5c4c7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca2ca40f-27b3-4734-8026-c1fdecab6231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ac6cf0-13f2-43c6-b66f-cef164064338",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03df2e5-2740-4adb-b91c-8f2919d05626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24428153-e6b8-48e9-ba0a-45e782000342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f2242f-47c7-433f-9858-625d6479c134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "891d3015-cb89-4f82-9202-bf29ca34badc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd76a4c3-bb69-4b5a-9d5c-67fd2a72c5fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d6be7f-59df-4148-be1c-b8e12eb5f53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe3c79f-2f3f-4312-83b1-5c7e026ed8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd08194-728c-4612-ad61-e19b562e942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf6b7acc-a771-4074-86fa-3583d7fbaada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb38c34-39ea-4c6a-b3ba-011745e68e8c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154185f8-4298-435b-b34c-d6f9652523a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e751820b-9d66-45c0-ab23-36d78dce6f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b23f109-7b25-4603-a8d8-58ddbd3394bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36469c27-58fb-49ba-9b1a-11f75349615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f81dde4-a89a-496c-be22-36a7eb015d29",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64e4a46-3ef9-4777-9862-61a803b337de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56d2cf0-5b11-4748-937d-bc7fadb9370e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71c5572-62cc-456c-967a-03a249e2db7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e442678-14b3-48a6-98f4-e50c1ca0d65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d65054-b6c8-4e43-b126-7407c36df4f9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7893394d-e579-47ce-a001-0d54d40aebe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b964da34-1d73-4917-bf1f-0d692ec5941e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b789239-6377-4ea9-858f-0932aabbdac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b11c199-1788-4275-94b3-8c60ae74251e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea8f2a9-0876-4298-8104-dbaf8eed8615",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31cf2d3-f0f7-4c66-b63e-f1311bcdf811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc1711a-af64-4bc2-8c06-460507e9583d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574735cf-0ee4-4ac5-8fdb-23f55c5922da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c964d8d-8c0f-4c9c-a6f6-5db2aaed6970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e155b13f-0a57-4f23-aedc-5e952c94cfa0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48245b7f-b48f-4ce8-b506-1f20994710f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8652a68a-0e4c-4c6c-96ef-1900f044ac66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36ab43e-cb84-47d7-ae8e-c26f598a6b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ad09308-64e1-45cf-a507-e5bd1937433e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa1fde9-ed42-4ffe-95b5-814a3ee270ce",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b78a7-b897-4f2b-a7fe-f1e9a52f01f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95f4fef-521f-4148-9165-36045b95847c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b649b25-d1a3-4dfc-bf1e-ec32ad9942d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5e35394-2b24-4ef1-b894-5ed23a4f5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1002c2d-b88f-43d4-9959-2eb0f9d0ed3d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7be832-1796-4523-b8d7-f93be40101f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c03523c-a54a-4aad-a4d7-db93e57dbde2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2f2c08-c65f-4878-90b4-ee9a8f173752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7d7b121-b35f-4e14-a7e2-9ce2eb859dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e9e6dd-41c0-45b3-990c-7fcac9a75aba",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60513b59-d25d-4fd4-898a-91e23cbac9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c402da-ae4c-44f6-b759-68cf4fc8d35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5dd5a0-bc8d-4a26-9391-0bb85b1b13ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c9e65ac-09e9-4f0c-8925-8dfb96276c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f129efbc-9d41-4c6c-beb7-dcd861b63437",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d71c0a4-6825-40cc-89e2-8373fbc2d064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2134dc0c-1c49-4ea3-9189-3bb7933c841a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d3ba20-7a05-42bd-b304-022faa8f349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d13d530-e990-4327-a9c1-382272b0675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087fe556-050f-431e-a06f-64e88915ff4c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86084ba4-be95-4502-8b16-e48769d84e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66921f8-1591-4f3f-b595-d526dae5dcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26220f72-4430-420f-9620-5ee97217e340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f888ae12-49a4-4129-a37a-407fde422919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cac9b8-fb09-4dfb-a973-eee3de8ddb25",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa5aa5-a932-4518-b484-b5e1c930acaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed03d51-e5c0-4a41-8a04-b1ebb1f4dbc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9ea5d4-bf7b-4416-87f6-927798c65f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e73f788f-2b13-42b2-a652-cab0520ce482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed01bc26-d09d-4d86-91a4-fc6334f21d39",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579da582-69ab-4b22-945a-ff4d54e27b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c445a3-fe22-4a96-905f-1587ecf7000b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb80cb8-3b56-4c8e-8eef-8b457fa2c89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "388c4212-2f2e-485f-870e-dd771fbe87da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739f494f-7477-485a-a70c-1dd658044a0d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77590029-bbad-41c9-ab1e-09a44b74fe07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be98e99-dbb0-40d9-826e-27204c6d1e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009cbfd4-1c51-461c-90b7-fb64f762b9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "275974c3-5057-4ce9-a6ee-795afe1d723b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b56b61-886d-48d8-8d22-6bfa388f51d9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70c74ca-3ca9-44d7-8070-7cefc628b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc9f5e3-8eb3-4dba-a36d-5e02ef88a55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055c2d9a-43f9-4c1a-8c10-c241cb1677c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef455b98-1dc9-42db-a1d7-7246a9525cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e48441-d39a-41c5-bf13-a9ddd0291b8f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b861ac3-4bc6-4e25-89fc-9ef4415d60e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d76d11c-965d-41cd-9295-d93d55cc4921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c15de1-c9c2-46df-9577-53c8af240e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "78bdb4f0-a4e5-4b6f-be3d-8d8e5e7c0db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde0b363-9274-4994-91a4-f260d4f31d96",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a5e167-9a30-4ebe-a98a-cf3c7dc66223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803f58c0-ce5f-4eb6-9275-016ca0ed3af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1b2778-7916-437b-829e-3bf421fe1941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4a6798-2314-4ee2-89dd-064530ac6489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aee947d-b890-4c0b-8907-11662ea04d1f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0af2cb-4dd8-46c2-8848-bf4d06ff5883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f50636-c980-4c21-8531-0331b117233d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886fe479-0d6e-4589-8063-526b7696db9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "397677ad-2d56-4c96-aca1-cfec5fe600ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a855568-553b-4b11-9274-182f22f60bed",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc99d131-a250-4df9-a8a0-98011242108c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0a0ac9-7125-486a-961c-d71471bab5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb43955-db4e-4598-932e-befccc60507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f984b9-d467-409c-baa2-3abf25ba79b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71a8650-7cac-4351-bb41-4d5fedcbfeb0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72af51b-3f11-4f11-9405-057f5e418ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63863589-1cbf-400a-89bd-d57f7b77c48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74377048-0596-430a-b8a2-feaa2d7bdeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8f0b47-cd3c-438d-9015-fb67f418c672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105b6bfd-9ad5-46a8-bdf6-b53daed43a3c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b187547-a159-47bc-8599-8e52f4d8ae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153b42d6-8170-42bf-b52e-4c9adc788fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecaeb12-6407-48be-8457-74c3a01ea704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11fe1a66-b25c-43b2-8f46-1479cb432191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcee80e-91f0-4aec-9be6-940ff6e83d73",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c682851-569e-4215-bc3a-e10681282699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d256cea3-88d7-48cd-b5c9-3edd90ea164c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a689cc6f-fc64-4cc7-b530-c16edda0e09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85e0ac3-987f-4ad5-80fb-1b0fce6eef07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbff4ce5-6360-4cec-92b3-59d040b9d089",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae3675f-773d-4c38-8637-5c243e147fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc85c20-2791-4121-aff6-d7311d890644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f93b7a-ac50-48da-91ab-5c198ddb1e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f194911-94b3-400b-a72e-f957e17055f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d214d35b-f7b3-4425-bac1-7ca40fc11645",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361e9ba8-3c69-4922-b6a5-814b417e06c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e597d2b8-881b-4b7d-ae61-6810e242bd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbbc6bc-8aa2-4dd9-93bd-08fe6c0eead7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2915f45a-9b20-4c76-9cbf-16261de6e2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add6a742-7224-44b0-bc56-ac3319a14713",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc15b96-fac1-4b2d-adc0-630fbcee1388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0932bfa4-9c05-493b-b187-0c04889fc625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2bc9cf-6f4b-49f8-a8b4-1101154f4131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fadd5148-74e9-40f3-a84c-12183622a7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d8c106-1e51-4481-aba3-11c668afed50",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60414d72-a019-4aaa-b8de-6aa79a0d121f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4b7ca4-105e-4b87-ae85-a30babf885a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af72829c-9fcc-41c3-bff1-d4a50bb6d3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b10e81e5-39cc-47f7-8285-e08599333df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ac5960-0175-46fd-9252-fd20b507ae77",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dae54ac-0063-49f7-91e0-d8e0fe06e4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0478f2-366b-4f0f-b780-7e65c73023c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3488df3-cb1b-4b3f-96dc-b8ce3349957d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33851f74-9be7-40c2-8e32-63ab2c7c937c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14ad00f-5c96-4ef3-8c25-5374cfa273ca",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328a13c3-5ec7-406d-a40d-b8d4ebac9d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0834c3-58d5-4a2c-9ec2-a255ddbd36e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c87bc7f-e7ac-4ed6-ae2d-5064b8938900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a07fb4e-3d99-4291-81aa-1b50e19bea20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e5e46c-af5d-41bc-a4db-184c93f9d348",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd72af79-5a5a-4942-b017-db5b730818e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0756ba-108b-40d3-9c0c-58aca924a8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7c3cbb-9a74-43b5-a8de-169e2bb678f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "92a8f7fd-58e6-49ee-95b5-0cdb5fd02a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed4b319-ce85-4405-bd76-b0e0ddd502b2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29656aa5-2c3f-4e63-84e5-0f8894e4a39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c1fa3b-08b2-4eba-941c-00502681fae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0975f92a-9898-4580-9507-3c8ff64c7075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf2d95a-5d80-4629-8428-24eff7a325f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3f961c-7121-4b11-ac8d-5680726602ee",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0ed646-9da1-4c2b-b948-bddd6ab778da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88911005-ddd2-45b0-ba55-6f637f667d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aace92f-0110-4d45-91ad-c1202c2e476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69b1dd4-6f00-48b7-8172-586c7a99a85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f0e07a-db4e-41fb-949b-26cbbb8667ff",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aa240e-6b09-4002-8dfb-1c8cf1ded2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd1a1a2-0fe4-4b5a-aece-b6b7cda4cb8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6942b756-5a05-4939-acc3-bc1285b81471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "147169ed-d9a9-4d94-9fc1-67bc6c6b2d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ee0339-1be1-4b5a-a728-80310ec11032",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debc13e4-14a4-44f2-a70a-c2d046ac27e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657c8e23-76e4-4a06-ba5c-7f0f8a2fc1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941e99f4-fa89-4a57-a0f0-b25bac46012a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c55489e-3ae1-42c3-925b-a0f0c0292c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6974d17c-eb13-4cc2-ba88-de50a43cadbe",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ad19a0-330e-428b-9938-b85ba4bbee38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f50b7d5f-d98b-452e-9f34-34d97862199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea203da4-0843-4d6d-96da-14c7b7959fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "078cdd5b-8065-46fb-96aa-3a7a175e0c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c9e568-5594-4753-822b-de824a908486",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a74026-46f8-411c-b7db-2a4d2cc50912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918278b5-ca11-48bf-8ed9-74f1543ccc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709ab8bc-35e7-4764-8589-613845688e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c5d9ed-177d-4dc4-8e8a-7859ea0b0b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0184fb44-f2b4-4f48-b480-94e04f8f2fe6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3787182f-9240-422f-8f6d-1f4e2329af73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f10470e-b46c-4aaf-86c2-3bd74caf9599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf9c269-53e8-4e75-8984-202d425b3615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3486e0c-97dc-4b97-9af8-8d0c0685403a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae42c781-94f2-4449-8047-fe9cdfd6f9fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396246d1-ca84-48e6-880e-5e9aa7f0d12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14292f6c-a867-47f7-b7fa-b670da0104ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4daf785-2ddb-4da6-901e-af8372cdab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "57c57bcc-cd24-4260-b385-4d92707885bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca7a871-bece-4d55-a89b-83c08a15bc8a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7c6032-776c-4ec0-9ed4-b7cd177a3f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13de958-1670-4845-96b1-c507748b80ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3e0ffa-81ea-4528-880e-51db95954f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "31e04ea9-901d-44be-b488-7a0451484537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9c3a48-0367-4c35-afd0-053d41ac0cf1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77515e25-cb4a-4e28-be42-a1e8e1025a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555cda0d-82f2-4920-b6a0-d5908b61b1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0215dfa4-15cc-4397-aa2d-45ced3a51ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7a5813-7b85-453d-8c37-6ce531927190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242e54fd-0a5e-4608-b1f3-92d5ec1ff2cf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e5dca4-ce80-4f4d-9fd1-cc326bd5ba06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd57349-2a76-44fb-a751-66b92eda9d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413f2448-f08f-4871-b87d-dba482a36912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "02b83f94-adc6-46cd-9671-3672f656c443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc5235d-6a15-4187-8501-a380d3ecebad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53d5809-55a6-4a47-ad38-c0a7d819921e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d57fd8-fdd4-48d1-9844-fa6904978568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaf6a9e-17f3-48d8-a7e2-fbf4ec05f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e655b765-ecb9-4c14-9abc-14a7c7876fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cdd302-b2c6-4d5d-90dd-f8ae99a7d8a5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531c0c79-33df-4267-b2ef-700e8b2ece2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5042241d-7caa-418a-bf85-62ffc8f49b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebeb18ec-2d13-4bf1-96d9-50af2d926653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c08829-cf63-4140-9a69-52d4653529b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb16ca02-c42c-4074-9b31-316cd9f2fd4d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7ba7e2-a2bf-46d2-a2ce-39eeb9ef099b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292f1ec7-9bd6-4870-9e92-9aaa921518f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef5628c-a175-4e44-a5ad-d40e14e14ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d79304e-1983-480c-a9f8-a10afcbb9570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a85148-b8ba-4145-aa81-7cb8a323b70d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191d239b-a770-4bd0-9bdd-a6d7256cafbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734c8137-3ec1-459d-aab3-dca10075221a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb353c4-1565-48d1-953e-11f83a2f2b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b5005e-7b28-4c3e-b7d0-839b20095014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652fb737-1c7d-42f7-95fc-f7bc749e78a0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a832aa-f12c-40bc-b164-4d3b7b923131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8571957-82af-4846-bf7a-fa9067e29c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c8bb61-c7ca-4c78-9d12-c12176cc4199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d19ae7b8-a631-4597-8c49-9667d7a2deee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fab1d9-c46a-4971-8d64-d41b3f3252f2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06f5785-8246-42e2-8347-fa0b8925e7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4356b3-1f9a-4137-a732-18ef492fd135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0030e4b-12ab-46ef-adac-12ba526383de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2e5587-c538-4e03-be89-8ff3de0bd603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6b9416-cf3d-4422-8c9b-0d8d000e97c8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c07fe8-1905-4e14-8088-73c83759f847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2ad039-4d79-467b-b0cf-83a412a101ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c99263c-b506-412c-aa76-0bd031dcffc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a7d6ab-e80b-4f79-8783-669ba18a9684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6560a901-0541-4769-90bb-c24d791bbc5b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89c95e7-bcbc-40f2-bfed-0da8b42a7686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271d4e2f-e3cc-4919-9de8-ea3c8badc411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a8d5cc-351b-4235-876e-ee61545307ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88dce505-0361-493d-8162-9857ed47c0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b661c8-6a08-45c3-b0da-45cf8eac346c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e4085f-6312-49b9-b292-28643e3af8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03dfca91-0d3f-4dc8-b8a1-0ef7d6127583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cd326b-fad1-41e8-88c0-790897363b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05c6b3b-28d6-477c-ab58-34da6bbba3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee3a831-ad34-414f-b97f-f150b01cbcab",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5f9e2c-0101-4a6c-9b02-3c9bceb3b345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da927303-9485-4d80-85e9-726daf378472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3d819c-7fc0-4469-a2e5-64f63890d72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb3fa10-7ee6-437c-bfaf-3c92f79cf59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c9b4ef-942b-4e22-a809-dd705b3246cf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422f590b-da4d-427c-b6d1-d6fdee3dd657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58a58a0-67a3-492d-85f1-2ef4e79ed47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1132a856-7da1-4389-b691-52d4e0e2f10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99cb99c3-8d84-455c-948c-cc207a04c9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc73a4f8-b81b-4669-8649-af84f87f423a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53c8a90-dd8f-4e73-9e7b-581831e46eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1fc903-af8c-42d4-b032-f261bb695b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3db9321-383d-4ff0-b9a4-b7b25d476624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf7bc0c-7fa0-4133-9fd5-8aab4a924394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc4f8c7-38d0-45ad-a79f-1e7161045f82",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9f684e-b97a-4d52-b563-0a0ccda46324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae737555-f934-44c9-b25b-5aedec0ee12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e81ccf-7ab1-4adf-b82c-75abc29d1899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a35603-d83e-493e-8284-97513bdb3f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e287ac-cc8f-4c7f-8a84-7cbf253aca2b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a072b56-b21f-4d6b-a565-a7c3e6a12e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92545577-771f-4741-a71a-c4635e4874d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe51ac3a-cd4d-4874-9196-fbf1bd0b10f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "47d81e2f-6a56-4d2d-8e4b-7e781256bd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6696a4bf-8370-4f1c-aced-ef004406eba1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cf4701-d020-4003-80b4-8b09656031a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4fa58d-be2c-466f-930f-2960e359756f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364676c2-8fe9-47fa-a274-3d0344598862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffaa819e-5874-4b09-b7ee-318a754def5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf21669d-4ec8-4684-9d92-79b3195e7362",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b169c8f6-286a-4bbc-801a-2dd4f5d199c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea25cdd0-faaa-41ab-9798-563e2cca09a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3561c893-83de-4c98-9962-49337048e4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "767dbb19-0a8f-4f76-8d92-1555c090ff97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7135978f-d706-4147-a5c2-55489c7c94ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85783cc0-67d1-4fd5-9c84-fd92f8c60936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b034c191-11ff-4d41-b92f-e0a0ebe3d7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0253710-fd3e-4090-a38b-4b9e4b6b2683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "660346bf-a6f2-4194-9e35-17bc7236dffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181c5f69-7e2a-4c56-9718-cb2f9a7d2e08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb980e24-0e12-4d8c-82f2-9c4ec056bb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20320990-fc57-41e8-a398-618dcdba94cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9827c8f-f60e-4770-86ff-355848c4320e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "95793df6-5a07-48fb-95d8-75e61d5377ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0a5c23-afdc-44f0-a48b-cb70da0624f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4d37cb-9f49-4924-9795-6bb805ba7d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640b1045-9d07-4065-aa8d-00035ed6edef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f30c420-2357-42eb-bf8a-5d9b6888de17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a10e7438-bd06-4854-ae06-f1ac33b5df17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fd4508-e842-4463-8fe8-4bc9b3fab543",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cefaa6-d662-4b10-b512-7d3a80d1df08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251b2e37-fac8-4f83-bb5a-23c2b19d69ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c14c1c-a9ff-46f3-9b87-11da86bae886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9d8ee8-6360-468c-ba9b-4327f4f1c71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91b0d7e-c875-4343-8bb9-a0c079176684",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e923446f-1091-4cfb-be19-ea91fe4c2d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa57502e-0717-4b2b-a0ac-4c49af4b6e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114ff2e0-5f0f-43d6-a049-172ab879da96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d716f4-b666-4d1b-a89a-1ccb87df1477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cfa6aa-4199-4d30-83c4-2416c0838008",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcaff98-424b-4596-a142-231af45c01d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8d3ebf-4755-4e37-9ade-1d6b19e40e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3970e4-bf5e-4eb3-8fe7-15ab93d835f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd0edd6-6f38-4a6d-99e1-119b6c0e333e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d212e60-ffbc-4f30-9659-a3d62112361f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79abaef4-5f4e-4de0-8c8b-a91e3f0f3bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561486ce-51b6-46da-bd07-094c20c47ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4d9dd5-334e-41e3-ab7d-ec988294c41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41eb562e-ccd9-4549-959b-d435058271b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7a6ad9-41dd-4363-a4b5-8455816b745e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea0723a-d3c2-4811-adb8-a1bf4fe527a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb582be-32ff-45aa-8ba1-40adb6f37427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa6704c-a5a4-4ca0-b569-675e86b02fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03723323-44d2-4850-aa81-2fd9ce93fefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088a2653-ced1-4a68-a316-bd30aeebd5bb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c00cc9-e303-44a2-893d-00e67b215ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc11744a-4122-4587-9ec8-2bd5b5cd879a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832b9a63-e0de-46dd-8d01-94503bbe0c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8579389a-bad5-489d-acbf-0384b4f34bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c431a292-74bf-426c-8553-dc1a28af1c69",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dca5f51-121f-4577-a913-fa4a742c62e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5371d375-1831-4840-b6ed-37bf0edc2f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d484fedb-1ece-4f5e-a030-a8e3ac2af752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d733f22-7d6d-4f9c-823c-7aaef9193610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf67e22-7c6c-4006-82d3-725254d7e559",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d3bde4-a779-42f8-9a59-5cff123d0422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d956ef63-4d95-4620-89d8-6eb559a53bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62d06a3-2d06-44ed-9a83-fe82510c87f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5edc57-05e9-49df-9947-a62c3b2bd646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6028774-1898-4fbb-8a50-4105675087cc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90b1db1-cbe4-473d-ac4c-d4e59db76c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195d55e1-0e17-4dae-b1af-c25d310a7dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f6f8d9-b291-422b-8be8-300aa75ae5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e0e459-ce6c-403b-90e9-43aa4372b34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446753b0-1eec-494f-a5a6-674dd8cdd13f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f31e47f-0329-450e-89f4-db5fd1dd484f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1893af67-7c7a-4c56-b5d6-6d086fe5ae82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddfbc0c-cb7e-4add-afeb-745e158fa942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "735f31de-4cc0-43b1-8c1a-a2ef6936d118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924721a1-a8af-479e-a1e3-88eba82d8a2b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5226d41-1a41-4283-8644-428b85d3ff83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ba039a-19a9-4c1d-98f0-46ce5e329d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64573620-aeda-486d-b0b6-dd0707141ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "304ef598-3165-48b8-afae-9ea241323ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17583036-9167-46e1-87cc-6162348da2c1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b05448e-a92c-4ad3-bd36-292280eae36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7ee1fc-15fa-420e-82be-04204a32ddfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1873304d-e0de-48bd-944b-a1486be1b21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93e01f63-3a42-4713-9813-d7a2a62fa445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a79a896-79e1-4052-9b3a-0f9d381923c9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a800e5a-9dce-478b-a4bd-b673d9d6b141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a254d16-18a2-4cb1-84d9-255fed0e6440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b889d5-865a-4933-9f53-7bb8c5cca52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab256604-9293-4401-88da-bf56fa9267dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c860aa-aaef-4198-8ca9-e0847d697e53",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91198d39-a524-4383-9787-7fd034a72d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12c7a33-a211-4c03-93c9-c247b74c1f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c70be83-2e07-4269-8a7b-ff97117d4a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb2ce36-4d4d-402d-832d-b59c09bad24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13e57d6-298e-41e6-b755-b2756a89c5c0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6b91f8-074f-41f4-aa30-33c1ec5d0cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c83055-138e-4b72-84f9-a8c2350bfef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f671e5b3-3048-4976-affb-fec244f83a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e364a7d-2a88-4544-bf4d-0bba5dcb0aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ee7d93-cb67-4c8d-9046-c920db125751",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af651075-9c38-4afc-9081-66045d76637b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a67215-f92f-480d-b2cd-8bbf1fcac34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9159f022-b06b-4d1c-b7f2-2281ce0934cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dc70c0-d97a-4dfe-8087-6fa3ec2bb12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3007bf-c4c7-4ff9-a53e-7c1b7ec326be",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61252682-2d04-42e5-bec0-828d2ea58b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98461327-7177-4f38-a007-e6c937a2b4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6ad3f0-8ada-4e45-9796-07b8f81cced1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e951783-2b72-486f-a944-41b6633f5e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b9305b-08ec-411d-8ac9-e6cf3e25bf50",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dd1c1d-3f19-42c7-acea-67e246b6083c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de2a4d2-3aea-4691-bfda-fb32322e55f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704c1618-cd87-45ad-a03d-c0e6d16d8705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20528326-6f25-402d-9644-0da728c4e1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adac77a0-5d80-435b-96d7-423d41334d86",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5491f1ac-b13c-4cf1-8649-255e0b8bb6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0eaccc4-84c3-4b57-9a27-f3355cc77b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ef56e5-739d-4fea-bd77-8e21679e8cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45f8e115-3636-4933-bb2e-da462aa33c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd56449a-c53f-443f-b639-03ea94b98157",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f635adb-ecc0-40ca-a924-a774357c6156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7e928e-fb12-4add-8b19-0adbaab92b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa72c1a-e30f-4e93-a621-f381356f3f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "137a0a7d-d919-4a43-a0b4-8014534e4ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dfd0a9-4d4c-413e-bf9d-e75491317fbc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62fbf0b-ce14-4da5-987f-9e42ac69daec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d386698d-0f81-497d-bc82-5b95637d3b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f47851-9c50-4923-999e-e99c8dc979a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86735cb8-420a-4ac6-8ce2-24174d6617eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355bed6e-c6f6-4ba2-a1e2-a6316667cb94",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744812cb-c451-4acb-ac74-26a7c8ede967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e38be6b-b6f7-4bc3-8d7f-97c377fef201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdd757c-7e55-459f-95c0-7ea01b411228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2667fa63-4798-4e19-acb5-6fbe118bb3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26b827a-9a81-440e-bd61-567590da5cd0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7320f1b6-79a9-46df-8b50-d1e985ed60e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ef3253-c373-42b0-8020-672806f8937e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc23a82b-110b-4c8b-8257-f0a42dc66596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d80160c-b6f0-4673-b3c0-f541a7d5baa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb1e908-19e6-47a2-8693-ee84176bae45",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65a8eab-28cb-40fe-9873-2337ece32a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61df71c2-0717-4ddd-9bfd-c02602df9d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49004090-4219-4007-a33b-af7a07d07126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6e8e22-ee4b-4f18-9848-b73610ebe2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5cd84b-a143-4c3c-9170-6aab76c8ad9b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388d781e-deeb-4613-8d19-25ce8cec7130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f8f818-1253-4bdf-86e8-3d840651e204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3db264e-cca0-41a8-a486-4bbac92bcec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89d01cff-7994-445e-b192-61e09f2f525f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7088b452-f1d9-4110-beac-2cc668500aa0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3808862f-9df1-49ed-a007-4e01fbd607ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2d3f1b-cea3-49e9-9f4a-651d651c9f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb13e04-d578-4ec8-ba9b-8ffdfd85114f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56814fa3-8937-465e-8183-9b8f941dcf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b9d564-cdc0-41f8-ba36-79c54146670f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9801ad26-ebe5-4432-a9ed-fc6b4b6dcdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70da676-dea6-4be3-af39-bfd80b6eaf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cfb6c6-c8f2-49ee-95c1-c079a5974cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "01715ab3-b569-4b3e-ae04-22f8028ce097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa58aa3-3c7c-4237-b574-eed91de6a985",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480ce66-5855-4b7b-bf3d-671359592fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6a374d-9480-494e-ad12-60723eac7c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e68405c-2051-4cdb-98a6-c8cdd647f6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bccc91b7-ada9-4924-ae80-56c9589976d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226ac472-0545-406d-b06d-a0ee460b9eac",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d0efe1-453d-4456-8c07-22d9fa261edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01dc0e9-9635-4fe8-bb6f-c93f7f2bdf7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8a791c-51fb-47cd-9b78-cc2761f76bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "85bf8bfc-e83e-42d1-8981-102cc04a9eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b101e6f-2b12-40e6-9901-816a4ed34a53",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6370bee0-a984-4ac5-b430-ed4f7f2f776e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5727077-832c-4083-a2ab-a50d11427dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222afe2e-6a3c-4963-906a-792634ff0eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de3f9002-b399-4399-9582-4a86b319c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d649351f-a2bc-4e96-903e-2e2b1d857425",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76437bb3-ff47-4468-a93b-84fe756de514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4a15933c-ce47-4d80-b29d-6af3f0191090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b72b2ff-3077-46f2-86a7-fdbdfc7b8585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "331aefb2-1b0c-4d67-9c67-2f9924cc3278"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2fe68841-550b-4653-aae4-a5ace408a1fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fc9e6c7-3a9a-4048-9e13-2d54f1cf3f78",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd13432-3fc7-4b14-8b05-d540ba3d3662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae9b79a7-b01f-4902-8bae-cce75185716d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029e1096-61f1-46a0-aefd-f1284712cb9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdab20ea-a61c-4669-b45f-6d015981ffa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9eb05be-b9b6-4408-8f12-79bc91845251",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09b5b3c3-65de-4f93-81ea-a2a5d2a0e8fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82e9a7b7-e9e9-4f1f-b1ac-b66aabc846e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a23e79fe-212d-47e0-8fad-a4ac28ff5352"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4339ba46-2d36-4b4d-9bfc-4f946aa65d1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5bd4b1c-9f9f-42af-9dfa-7d960586469a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc8a9f12-19fb-471c-85a4-c5581bd56183",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dedb154-7033-4bef-baf4-8baae3e65693"
                }
              }
            ]
          },
          {
            "id": "e1cb9b07-6e45-4087-ad11-bcf452109ff5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f64cf7e-5590-431b-bae6-c43c643accdf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b656540b-2968-4f00-8bdf-f8245c590ed2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70bd4aca-1758-4c9e-a016-0b1748381147"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cc23e2e-5354-4617-9044-76b40e392d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b83e184-0412-448b-b761-29629f3d0bb3"
                    }
                  }
                ]
              },
              {
                "id": "df386e4b-d359-4f53-9324-3e539c342761",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57f8603a-805b-43b9-ae22-903d31d7b323",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de1b8aeb-7a99-49dc-851b-f30058d88907"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e5a940f-d128-4393-be2e-151b873024ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ae89307-b3f7-4cb1-9a8a-d8c020c3a1bc"
                    }
                  }
                ]
              },
              {
                "id": "eb4dc92d-5ba5-4180-86e3-180b4b2cb0d8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71cb8203-ca4a-41af-81fc-da1625065f93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36159a5d-12f5-4e0e-81c2-98fde08440bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fddf9547-03af-4f95-b8f2-6c32a3f86730",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "38b683ea-01a2-449e-8011-c61e4aae3455"
                    }
                  }
                ]
              },
              {
                "id": "ecb33e9c-10e9-4eac-a713-d6874701419d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "214bd38f-a292-495e-83ec-8b0541476208",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7f44fba-0d3f-423c-8e7c-de030f61b441"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6469e601-2b16-44b8-b3a2-55f63c47c6b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "17c5ce63-a9b1-43cc-863a-804456165b3e"
                    }
                  }
                ]
              },
              {
                "id": "5fddb20c-cc44-45bf-b166-16a23b1f42a9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d89af118-ded7-45a8-b549-804c9385d623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "960cb730-226d-4a1a-884e-ab7a05889dda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae8a520f-52c3-47cf-be5e-210c6eb9cd03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bb81e705-8bb7-4d62-bcba-1bad709921f4"
                    }
                  }
                ]
              },
              {
                "id": "45862f27-39b9-47a9-be2a-d7dd0654ed30",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e32d3e4-cf40-4184-86ba-b7039c32e542",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fce0a2be-929a-4b42-bb4f-66af2d7f4d49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a8718db-05d4-47a0-9c4e-4147352cfb70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "052c74e2-d649-48a2-8db2-371285d09a44"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "534989bd-4bf3-461e-b654-2c1b0a4c5a36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bc4d79b-dc18-4ab7-8059-f1c6efef14b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "036d83be-2018-493f-a6a8-778f034fe3f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b02fabb-f4d3-496c-92dc-1b51cf9bd60d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3a252e9-ff94-4963-8c3e-8be69e7f18a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "448aad92-5d99-4a40-9104-61aae2ec043c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59564ac1-65bc-4d81-93d7-e95fe67263c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eebe29c8-62f6-403e-bd09-e6c79e3a96e5"
            }
          }
        ]
      },
      {
        "id": "b2b668a2-1132-4f9c-945c-77d59c4036cc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "77079ea5-d92c-49c6-9c84-a5e0cf81fca8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68f369bf-1a83-48f2-af26-87c12f803fcf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98b3f286-6e69-46dc-9bc6-958aeaeccae5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13d8675-c0e6-4b6f-9793-1ea7d4a44e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8485c718-1011-40d9-bf53-6196b9b0fb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f87d3d-9313-42ff-83dd-72bcf80b1689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9c1e36-b516-425d-a4c2-78afe9c78067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e71b61-745c-42a5-8503-44bd217dbc71",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a14f53-c984-46d4-adcb-1fba7ff6515f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b76ea5-cd9c-4c04-8e6e-83ca6bf27494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed613bca-a0fb-4a2c-919d-cf7779803ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ca5d2b-7e6c-4978-b6e3-d55be7e5ba6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73823b4c-800f-4f23-91a8-42d31facb176",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c69d8af-4867-41a4-9e15-a77026d26da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23870b1-4282-4b07-9c9d-decdb4513c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b540af-18ab-4e35-b93d-1ce62bba2cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29e8dcc8-d6fc-4157-8de2-63e305ed08a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a393181d-88a4-49dc-a1bc-6e0891e76d91",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d015192-652b-4aae-aa5c-46255c0d9c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3e1ec8-facc-4e65-bbea-d5730f69b83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aae4b58-3a2a-4661-ad6e-2f7b5880be72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b65aff-a07d-4d60-9366-0f2cbf66ff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ad63f-d212-4860-b757-086587387d3d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6f282b-6fdc-4bff-b0f6-13aa55fcfe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fbd409-edb1-449d-81e2-c6bf8d317b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a92534-73ca-4167-b6a7-9dcd6405ea29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78be813-c58b-4512-b4bc-2d19a96dc803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590b9d2d-ab14-4448-94fd-32b9be2cb912",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7948940-60c1-40cb-83fb-6225a296c59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d713dc-84c8-4437-92a1-db38760df607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed68c24-35f6-46b4-a08a-8dfc32fe5abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7a98d4-5e1b-4288-9c5b-7584205ef283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59be0630-2e2e-463d-898c-fdde1d5b66c6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7876c684-5ae4-48d1-a9bc-a94b4cf4becc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b92f56-7ab3-4e98-ad1b-e235e8fe3b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea51f68-1239-42f5-b19c-41f5e5545fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e26b4e70-96cc-466b-a61a-4866319abaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c627db-bab3-4bd1-a0f8-ddc1f394751e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00822792-8be3-4be6-becb-33825d23303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f745999-8bf1-4f02-a859-6695474f0d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19135732-17cb-4eea-ba9d-166a25517673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c6b6d3-1372-442b-9bdd-b279802bff47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603b7142-97c8-4077-9a0a-2ea4e951d6c9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350be78d-6d93-4d96-b49a-423f10f9eb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f380ae3b-4462-485f-80cc-17dff3d1d64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f3056-3708-4f0a-8b71-c4876c72726a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "acba7931-209a-4d7a-bddf-33509469cccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe78894-b655-4f37-9455-0205f9468f99",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfdf777-85a3-43f5-879e-4b40adf2c707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8365d58e-ec09-460c-98c1-cbed4ff6d3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbc0707-fd69-42b3-83aa-53b9c71ba57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e408755-69da-4502-a64f-a01cbfdcda76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b3627e-bbb9-4322-a7a0-1a883141bd12",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ecf1f8-b31a-4592-90c3-ee0a2619aad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65f4ed2-d92c-4054-8ed4-e63869328fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0755d2-f5d6-42cb-ab76-30c945e8047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "914bdad3-cbf6-4895-b2e3-f7ce1501ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1599051d-0f6d-4299-8c72-c1a6351dae5e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fec05a-d85f-4908-a613-a939ffb806b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa808017-67e9-4c63-8fd2-75cda12d3d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e178349-9361-4b6e-9e4f-fda5a282c154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76f09d35-979e-4f38-9e08-d2bf60c5ed8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444f9634-a778-44a8-9d15-ee29b5a0e76e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e70368-8dd0-4acf-a7f9-7f99ca2d4de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fbf350-24fc-4690-b9c0-40fade2eac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec791335-7cc7-451c-90e1-b3d2b1b28e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b8be33-bfe7-4fac-9aca-b3f3039e754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385f33ab-70a4-4ebc-a511-9064e138bfad",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6caa461-c4b3-4e27-bf8c-ac2921ee8a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6113156f-ce61-4ccc-b49c-df365a2f96ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061fc273-e611-43b7-b17c-224be72e16c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e89921c-f4dc-43b8-a836-2447823a7b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913557c5-8ae5-46d1-a550-7b1cef120b29",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9664c15-15c2-4047-9c15-633d766b7656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460f853f-879f-41c3-ae47-0c84b5053955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a3ebc0-d34d-4927-8798-51c9c237b08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6dfb2a8-1b01-4a42-8c52-186ca874afa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7ffb89-d3e3-4a55-b55e-429cbae32a94",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329fe244-b5e5-4514-81ea-5eb7acef9039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51630b0-3d85-40c9-adea-67fb0ba66bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bf2cc1-32fe-4160-9236-31c960f2f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0932153-c530-41dd-b12a-04c1b1471f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd9b7a6-c972-48da-900d-7a17a33dc979",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a3e164-a185-411a-834c-2ae7366a8f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244b7744-fac6-45ea-ba95-3fedb644fca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4d72c9-650c-4f5f-ae52-17e30c40978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e96c52e9-f583-4c92-8d16-60e4f2cf12cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dad025b-3484-423f-821e-6de7ef718b4e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e0c2aa-573a-4772-9219-f484e7ad6b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88b43ad-524e-4e12-8132-9754cfe25408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30333aa8-ba91-4055-a3de-2246b0b158d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7d226c-6df6-4faf-9c6f-4b87989f4767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe2104b-6a08-49b8-a948-ba62e3f894f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545c2421-5fd1-49e8-8e8f-64523dc10633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf80750b-947d-4ae4-9067-1521bbb18087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7682e53-e7c0-48e1-8160-3dba68f23d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1567114f-2683-4a91-8139-a49f4b4f9158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13af5862-48ef-4416-8570-012064af7855",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c94a61-0b58-46ba-900a-19136143fc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89efd5a-6ef2-4010-8650-23e10fe1550d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2070db09-19d1-4182-a3ec-1ec65ba120db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "740fb43d-fdee-4855-a082-301e7cb51043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54386afe-6ba5-4df1-80f2-0b48b81465b2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fac9af-048a-4133-9a0c-d34d222b637a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ef155e-984f-4fec-bfd6-749ab3d3a379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb76b7d-9023-4d69-8afc-d5ac63477fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "940e2edd-dbe6-49bb-b857-6afb5c9c0701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e226e57-de56-4ea5-b45f-8a24da607c33",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eba9338-4758-41ed-8b80-f84cfcfd0118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43da298-3d21-4938-84a8-b35dfe062c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1336331e-81e0-4cc6-8096-9fb980d37aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf6b5a8-4e1d-41f4-a748-4cf93265297b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b48ea59-8b5f-4216-9b73-de3c8868c5c0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b07e23-e328-4556-a7ae-a9888c8fa4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92220c88-a353-4b46-8701-dbef396b059e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c1f481-6770-4155-93d0-80d1dee14297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb976b19-9645-41c6-9224-6a985d70f175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e570208c-b7e8-4b2d-b1bd-a51e7974c52d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668e7a2d-d433-4bbd-8425-504f125fdb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561e5d71-6841-40a8-8ab5-74665c8eeffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1978723-9670-44c9-952e-b34220ea70d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3de0af0-3ff4-4a1d-99c1-3c114786a89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51de703f-4729-49fc-9fcc-c570c6c2cb35",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2925e67d-e0ab-47bd-b99a-728de40dec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89b99f9-0a39-4ca7-a943-96cf1e74642f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeb6bf2-5aeb-41bb-a25b-69b0a782cc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e3a5d6-25af-460f-bae8-03c923e8bdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0cf17c-2265-4e77-8f61-b3a19f0ce787",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43905463-e2e4-4295-8308-934bec99dc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28049b0-c1e4-451d-a468-417c3766841a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7a19be-547f-4cf1-b5e7-e3a8689c9c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21cb0f18-06b7-4cfc-915e-52c74fa6cef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5ebe05-0b6c-4b92-84c9-a16720e0e61c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc06873-c836-4d7e-9557-725b2029b0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aba5ff9-f249-410a-9904-b713c40b934e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa1f1c9-0376-45ec-a9d1-0ca0ffd33d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440a75cd-11a9-4ec1-a3b8-2cfb994b2b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c1719b-3928-4b03-a93a-82ede7d0e16c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0b650d-b5af-43ce-9051-f8301af59e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90a163d-c2fe-4f59-9bb2-1217c92e09f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91585e7-ded2-45b1-90e7-572401f5a03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a3824e-1126-4b7b-ba48-0466fca6f559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7522b8-45fb-420e-ba34-ee8d7ed87763",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab66d8c2-90ea-4152-b24b-50550c6d196e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c931f7-c371-4598-9b0d-8f7077845841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733bda7c-e351-4716-ade6-cb2e99888b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1328420b-caba-4c0c-b0e3-430275e93f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d86285-7956-4aa9-a019-919fa1994526",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe75390-6196-4b76-8676-45ddb0dad8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eecfc35-1f54-431d-ab4d-0aaa2aac170f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30b43cc-20c2-4e8c-8171-9911c698d707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9add7e9e-b2d9-4f17-a440-74e5e332665c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95a3a38-2efe-4c49-aed0-0778dbb1cd15",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f156a4-b746-45f5-8d26-27608a1abc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4115de25-e43d-4d72-a5bf-25038f4dc57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd7f5e-e39f-49fb-b54b-fa32e3110c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1994ae40-a3cd-4f81-abf7-a46eb09ea4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d65f4f-4d53-4f12-b5da-83ab8ed75bc2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95c8521-af13-42f6-b8e8-a3bd399d3b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceaa4e8e-6286-4b28-92bf-84a848e9c829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bddd98-fa7b-4347-9938-72e69b8615ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea185f2f-f757-4085-b33c-cd24e8cde48c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dc72c7c8-a76e-4bf9-8d21-e75f4e972192",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74e3335b-2aac-4739-bb44-85d3ed298101",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b383b9-39b1-4997-a0d1-f014427f0a4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "67eaaff2-3256-45d5-8daf-75cb5d243d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4acf0a-6f78-43db-80d3-d631b05f8006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b7530da-3943-4c5d-88dc-74d8d5ccf122"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53181c9d-e302-46fd-9e6d-5c3cfee5730c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da64d73b-d748-476f-9fca-c1fdd5f31488"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "688d51d8-de80-42c9-90b3-8e39170fec6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0a9f3b9-0e0a-4b9f-8a2e-d50d3e814f69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cda096fa-4252-4705-8e52-c02c76194a0d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f8a3d3c-de69-4f58-a909-76edfccbd974"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "391056ee-2b06-4cd3-8545-2261d2c0220e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f23fe22-f839-4b44-8d47-e0ec98e31522"
            }
          }
        ]
      },
      {
        "id": "15b7c7f6-886b-4488-a72f-48ef24f03dad",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1d0e297a-2448-48aa-9f89-3c396e088847",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00bb283b-3bce-4f30-9433-9a38568960f5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ac3981c-966b-444f-b4a1-08d76cfc272e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa449e52-f260-45df-b04c-39c4ac31e4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c50329-19f6-4117-afb1-6af2cebcbdfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486ba0ba-165a-431b-aa50-c6bcff40365f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a32f45a4-8863-46ca-90a3-a14a6bb07de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9895d1-a167-4268-98a6-36dfb971f2d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96e4604-21b2-4830-aa61-9c712c89c1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ecf716-a48c-4fc9-bcdd-c6e81d8a5fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37895722-ea2e-41e7-aa9b-ad77e1043d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b3bcdc-de66-4b81-97c3-bfe0058e6119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866b8af0-eef9-4d53-a573-d62108d330d3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac0f8a1-5182-4129-85fb-d55364f1ecd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e897c6ae-76e2-46ce-a751-438790a38751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd1d3f6-5667-40cc-a9c7-050303456ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb408130-b23c-4e25-b824-7c9c7cb43fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712ae716-f1a7-4b1e-80cf-6de078d04436",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca8350f-58ae-4e38-a447-23ac478167b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057f3248-6daa-41e9-9492-cc33450b7893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef699ec-916b-4af6-811d-88f8ea673410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "360ee3df-224b-4343-8b10-d003dceecd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d273c4d9-e797-4618-8552-3b58a9a3ce00",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25af757d-5fb1-4e0d-89be-423967aa6051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266c96a8-dfb3-415f-9dc4-ec6028ffc673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecba74a7-04e0-4b99-bdb4-c4eb8a9b24ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e45e3a-97cf-495a-9cbf-d85eca962264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe3d525-736f-431a-b1b8-1f08722dd9b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7988fbe0-a385-4f1d-8280-763c07ee8514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ee19e6-2078-4ac4-b27d-cf7bee2ffc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8778a2e5-867a-4cb4-8431-c2e0cc8d72bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19ee1f47-d0e9-4ad3-b961-298005680ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e78786-b44c-4afd-94b9-74ee35b6ac39",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf54e58-011b-437c-b12b-9207fa6667e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97db509-d2ee-40f1-ab17-453049b8b9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2de5058-ca38-4a1e-a465-fc007cd6b2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b53d16e2-730d-464a-b6f3-4c6cff8b542a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e55470-3a90-4fa5-a314-02ab78b020c9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c3084e-c9b0-4131-897b-35ddfd9c6adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a3b7b1-89a9-463f-8a80-3598d1fb1fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaf2cf2-5818-4e05-bf04-e508f97c9f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93a93dc-709d-40f3-96fc-0b85ece54a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3ad181-ffac-437d-91ee-ad6c069e0a3a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5569da-5dcd-48c2-94dc-3d8c2b498f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c543b9bf-e84b-4a41-8d03-e0e17535c96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3d7e11-28fd-4a2a-952f-5a736d425066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3a65f0-c059-426b-80d9-50d7410e2110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e80b18-f59c-4099-b97d-2213b8df489b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbef1e56-38c4-4347-924a-79c33b589a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7dafec-ff83-48d0-b3e5-3a70e40da989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb8dbbb-6a4f-4270-b68f-c8369bead58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12eee1d2-9d9d-4128-9359-6c3fbeaeeb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910601ee-45b1-4cd8-9c40-777436b2b6c3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92508f8-f429-434a-8512-40cc1b3e2c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b3b071-e317-49db-8b68-8b782f736bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccba67e-0aff-4a44-88f4-f7a51bddc670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfc2b9a-6a2c-4f92-9eef-0a841375eece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340fd18d-c94c-4b5c-8151-f23696460b4a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf1d598-37c1-4212-af88-994bffcabec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd2aba3-fcac-48a6-9e3c-b7445ff89f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5c88b1-bdf3-40bf-adc6-c6e0fa3a69aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50e0b8f6-7e8d-41ca-b237-0bb1b4eafc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e59dfa-dede-41b3-be8c-24db35bbebbd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc86323e-abb5-4b15-8ba4-50fdc4a302ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f2b7c7-8abe-4e65-9b6f-5f7848dcfe95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5836bc-2f62-4ae3-87a6-f744bccbed07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b2a243-ad17-4812-9a80-05bcb0965ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e293954d-f04f-49d0-9db7-08e5647d8857",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af9a6b-8554-4bd2-91d2-b72ad7909348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee27986-6ccd-4d23-96bf-6f66b52901b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198c0e68-c54c-4970-96f3-2f2585b6adbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8289a935-3d05-4557-8073-7a897f40f467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4080bc13-4e5b-4d86-b773-13918c236c69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0108809a-e82b-42b0-89f6-979ef0ad3fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01162089-e3c0-4337-bed4-111a9d9b9afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51eccf99-251c-4c52-bbe3-aaf2225a94e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca429ec-5df6-41da-91c4-99634f0e828d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb83faa2-16c8-4b6d-978e-1f8674cfef85",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a35f1c-3435-4352-897c-c01ceedf092b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cf9c40-8700-43d7-90fe-b14ee8d3f06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732bffbe-52cd-4c7f-92ee-36300c9c88ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab7432a-92ff-4cbd-a0a1-6a6165272635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95816c47-0c6a-465a-91a5-1b1cef602f39",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b394940-63f9-4472-b1d6-ab5afe697b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac206ea-dcb7-4334-862a-7938d247e7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3a5ff5-3495-4318-9753-525b8cd02cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0978ef5c-df38-4dca-9784-5b4ff06a602a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeac1ba6-99e8-4b97-b37c-bcc3f2be92a7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb526aea-23da-4c63-a10f-0f9b92c50e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a08374-6e6e-4677-83c5-c7511b61f3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129737ca-8025-4ca2-997f-709e826e8584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c92ce8e-9a97-40ef-9f82-3c1fa058c8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1fab47-e4c2-4429-86fe-f21517067613",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f046d48-c9a4-43ad-99bb-54073d6878d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab570ae-f657-4295-8397-1ea1427f0939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b52eff7-e019-4d3f-9ec3-34aed91a0a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f89389bc-a510-4b56-99a2-42694495ade4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1823ce-631a-4220-8ff8-9d5d894faf2a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb024494-d87e-4c89-aa93-736cc85bacf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b194ed8b-dd44-4f6f-b267-5c568dd62af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd9468d-0653-4ebd-8057-5fa0fa36d6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b0584b-c9c1-41c3-a28d-421439606caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5c4b21-107e-443a-8534-36d6a42ef391",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d4da5e-9400-4f1c-96a2-aebac9892113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92d18a0-e6d6-4afc-a818-5b156268d411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2336b119-dde2-46fc-886c-40ac9f018ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b991cf94-cab9-479b-89e7-736ba6002f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8695796a-d6cb-4af8-b72a-cbecfc705839",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427c069c-867c-4f09-878f-9968aeebae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710e9058-720e-4ab4-b9ea-e9fcb403b98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8769a487-7a36-412d-b9f8-bb66b95cf55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31560f3d-f75a-491b-8810-18faa0711448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86173ae7-a845-48db-b758-0bf66eb2b4c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af887ed-a757-44a9-a4db-d4727abcd5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde75479-2eaf-49d9-a491-1edb5760821d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db1e06c-3cbb-4f92-bf87-3e77f0a674a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb71b083-be1a-43e2-8d56-b524403845b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8964527-3b6c-4249-99bb-a0ba2d5967d2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f81b4b1-8905-4532-8083-95706c4bfdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b5df66-b393-4e63-bf25-1876bd9c0707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78deb97b-60b4-4c66-bc75-cf249794debe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46aaa14-d7fb-4814-bdb4-1c985dc07d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f113495e-e609-4147-b94d-d057985a5b5d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e422427d-512a-4a5e-90e3-2e20292263ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a135e523-c5f9-4917-ab74-34e915966d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2269c27a-4d40-4097-88e0-8cbbdd51a36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dba76c8d-f9f5-4000-bf6b-dd924821808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b083d56b-a3b7-4188-9bc3-50e671e9bd8e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e745b56-750c-4597-a9ed-0a60bd124a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01a1cc1-871b-4447-96d3-9991a3f1bb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412a259c-4894-41b0-a023-1a78de6d5613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be56f76-c5c4-407d-ad0f-d69cc1ca550c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d837bb71-04dc-466c-bd99-42b72b97eec8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df769eb0-a26a-434d-9190-9ea8623c2d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e81fcf-e38b-43d0-acdb-4e0a0ca3d3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f219dd9b-c72a-4ca1-bb5b-710fdb6509ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd2acdc-7df5-4ce1-b77e-ecb3fc71011a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ad1b0-a009-4978-baee-1e6ed2cb0953",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4d283b-152a-4824-b971-2ea93538f7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9942a287-4ab6-46ea-bc3a-ef7884b2065f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4cf27e0-d675-4724-a5ad-926b1979ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4abf0266-c68c-40f7-9818-72dc86a3a33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98141062-a659-4e20-9b9c-1d0bebd0dadd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eda837-946e-4762-9184-c1af2ec3aa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab9c846-8205-4b67-8ed1-a3c3bd1e4869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03aa903a-aed9-4373-b278-5508c4cd837c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0d8307-8db5-407c-80d7-77950fba2a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c898a7-527d-4e58-b92c-d9edcb671ccb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfef531-bd0a-4696-bcb5-39dbd52ecc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f91f23-15be-4201-b32f-a6b13d1ee6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa45361e-3d2a-42b6-9a0e-00aaeb4a061e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed31e1b-fd9d-4c46-9171-0f2dd88b6406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0987da11-9ae4-4d6a-8a29-336ac21a04f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e48cdf8-b4e1-4c6c-a1cf-65c07dc24a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c4c8f2-f9a9-404b-970a-d9f03e39ffd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67ca538-05fc-433a-810d-a3b0deb185db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd37e15e-3941-4adf-b411-f89e13150af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fab42a-e434-497e-a6d1-2980787cb0b5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f3d585-37a2-4a05-aa2f-47c063dbd6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95948af-47ce-47f6-b85d-b39f2b98a0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e4f550-55de-486d-a494-044713b2aaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28d783f-d8ff-48c3-be8c-df3dc06687b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37296fdf-102a-443b-966d-6917843371f0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d64b4ba-243f-43a9-a511-5b1753729a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717c1081-2f61-490f-be5b-15fda922e9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d724440-0c02-4d14-8eea-29331782cb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a2d502-a1c4-4de5-91e2-970a54016cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6147cd-1de2-43e7-86f0-3716e3118b69",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35195e92-4c54-41a1-b75c-a2367ac97048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c648673-270a-4b47-a5c5-076b8df757c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92183f42-aa0f-477e-9e05-36956e7fa279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a360df3-f19a-4062-a50b-f52f053d9ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8accb7c-7b63-4e9d-b165-5bb3bf9ba9b3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d167fb5-2569-4d5f-8b7f-7f3c27e6f895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12c0d1c-d765-478c-a0fd-4ddd0cdaf1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0559a99-9860-4654-928b-86532a11945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86c921b-a820-48fd-9a9e-561cbd097364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a91214-8e80-4854-8869-6bebb1c36f8c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd14d43-aeda-47b0-9476-fcf3b39c85e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a58f1c-7b58-4de9-b9ba-20dbcf814d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e574fb7b-d095-40dc-9238-e86532ac5ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7890017d-0661-46a4-aaf9-9b02cb9f98ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce07930-9b1f-490b-a945-46467f761c85",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbcef64-0095-4602-a9c4-7d3c8430582f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b759181-3655-4bcb-8eac-5ca2d04e0913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea52824a-b11c-45dc-81a6-54a75402a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46585058-d8e9-4004-ad2e-70bda6687456"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0c21f0c-7650-4414-935d-668bab56925e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "578de7a2-9199-4053-9232-c7b6b272e31c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525db488-c6c6-4d1a-b959-69e484eb0472",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8066d3-f071-4968-84f7-eb22506c22b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8194b13-7283-40dd-8540-dcd51412feb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5654a2cd-7e23-4d73-bf25-c2d50b87a9d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68b86eb4-67c0-4bdf-ab3f-019ffad48c03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a80e5757-f25c-4278-8197-260c31934b16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5af0d1ed-e237-4899-8288-b60d61b1a242",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aee46e78-67da-4924-98c5-162d1494364b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7515dd61-6f81-4053-9fc8-f70877db7d6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e68d01ab-ac37-4423-9042-f564fc22fc8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5d1de2b-e7c4-4be1-aba7-ec494c43dc54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "246ebbb6-8a3d-4611-8b5b-a87328ece16d"
            }
          }
        ]
      },
      {
        "id": "ba82cb77-e011-448a-b495-8fefd37cf639",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bb58d856-c933-468e-a6ec-d51955be0fc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92519124-cb1f-4ed4-b8e9-9f547111e908",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cc5353c-c910-4883-b16b-cd549544fd9e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca97544a-5b3d-483a-9213-74ac720a848d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfade607-fc22-4c47-abd2-c18bb353f8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864ae5ce-2aa6-462b-9d28-374e27976f38",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae57f554-c48a-400b-aad5-4abc48241632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e513ffc3-f9c4-4498-b84d-e657f397ad52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44595ae-808c-4518-8764-ac3dce4c1e8b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e77a5e-adc8-42fc-b257-386abb4b8523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee41b87a-435f-46ea-9e49-47a0d99299f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00bc3d7-23f7-4859-9f85-d9b894db3987",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219e92a9-e558-4514-b5dd-b5680ca6314c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097e1ca1-9913-4377-b704-3bd7645e1dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f683eb1-198d-4b18-ae3d-ab8d3ba6e87b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e53344f-ea71-4128-8bdb-191d07d408d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f070a2-bcee-4efa-a620-05d29eccfd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca81799-2f21-4fee-9486-90dadfed169d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444d8f10-cefb-4d89-9a60-25cefa88b4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4892da8-4856-43de-8f09-d3cf00e49997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b1af02-e8e9-40d5-891b-a1beb27ebe3d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032fcaa6-a34b-491e-a18f-b275695cafaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5d3cff-ee68-46c0-9b7e-3265e23ad609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dca2d3-9517-42e4-9dbb-23273a859af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b49109-bcb6-499f-905d-ca8b2e7e28bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0d43e1-2259-49cb-b014-6e447fbe7a1a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742c3388-25e3-42fc-b627-91cf339d70db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38eac80b-f67a-4f78-bd18-b58e3b7da1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceddfc08-37f4-4370-acea-d2e76bb6da51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00186f3-145a-4237-b357-43a32ed8e21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d299cc-5bd8-4459-afd9-6e3b6d3f7a95",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3b0ae1-1bbb-4567-9f73-900d73789bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fcff727-bdc1-49cb-8d8c-898a2d46d29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fabeb1-3d79-4d60-b4de-7e8e2e00f374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9dbc77-21c6-486d-93a9-cc9534b3b7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fca8e4-7155-407b-9db1-4d67eb27d7fb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ca5662-244f-4c63-a165-6144d647147c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b3c95fe-9313-4844-9498-d1fe0e913294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f52ff2b-ad99-4bd6-b4f9-57bc6d4b0906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d9e1dc-aad4-4e22-91e9-f4cd8e222fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93030fec-2f21-4c15-975d-2b1770884d41",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61d90f4-7242-4af7-9b07-dc3be48e0356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9f7c33-ba23-4f50-bb86-ed6895ba3b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c30e69d-06d3-42f4-a14f-a939efea881c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a04d51-4105-4b97-8444-b82fed39888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836f7ba7-5825-45be-984e-359ab2437d7d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b533cd-74f0-4a79-aa65-540611b10721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6895e5-954b-40da-80a2-520b313ed710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97a2f60-0b83-49b3-9e4c-9ac1290cdb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa13167-10ad-4e93-9405-eecfb91561af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68414ccc-7a16-432b-bb9a-ef4d5f1f2463",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ca83bd-b965-4123-a010-5d64fc33f68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250f1aaa-8c73-4965-930a-ebfcfbef9a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1319d71-2cb6-4882-a176-a3b35a54478d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7125fc-46cd-4e92-bf35-29aecabc7f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b959840e-54cf-40b3-a8f4-d302bdc78b47",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7421a170-dcbd-420e-934d-945daf07ef06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae4e91a-b58f-4af6-a057-e864c42a8b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed368655-b7b6-4516-82ce-facc8a8d6eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5333b2c7-ae49-49a6-916a-d23335a21779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f625f07a-87d7-470f-8ec2-c339c8c2edcd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8851e59-c7f4-43b7-9d66-411f6a9b09ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b0e3e0-2798-47c2-b262-7eac88c1f464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ecfeca-909c-4909-99d7-f079bdcff5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e037774c-87e7-428d-8978-d88523478daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c687d22d-50fa-41d5-9116-d6a34af4cb87",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ee3560-f25d-4779-bdf4-07a8f0240c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce68111c-989b-45cf-8808-110524b19285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d42b4a9-a571-4486-baaf-f0a0ccc31b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc093f1-e9f8-4397-9427-b495c02c6e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544696b1-7ff7-4d7f-be71-bc0fb0b8891d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeb4bf4-0a07-443f-b3e0-bb2a318abb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4347e08-201a-405d-8181-10d6472fceb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacaa6eb-ea48-4eda-91ab-d26c81c89657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4af815f-b1b6-45c2-996f-9fe8016a46eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5967914-3cc7-419f-b529-e6cd18b1c4b9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ab96f9-d9e5-4283-99d6-c0a6a0a4a04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1cd7af-c4c5-42f4-945f-992d969588a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "780c2357-4d78-4496-b38c-e9e16c3ca5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde2b2e9-ca30-450b-9f6f-068d39be777b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8a0304-2c4a-41d0-9e76-815dc89d022c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9751b1a5-f030-49bc-b56f-3f14dd3a1ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a86f58-533b-4512-be0c-37795bd24992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf89348-4d64-4a3d-965b-94941913f1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a49f73-7512-4468-9096-18a01c9bcaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4beb7b2-f690-4743-91c1-8f8ff5633c83",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652a4003-7e48-422e-be17-18e1d914fb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f266513e-bb3b-4a8d-b853-2c5e23f51ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643021a6-1f04-479e-9222-d19af1a30832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aaaaff8-bd1e-4c8c-8c97-15747bd5759e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478f5f0e-9e4d-4b16-bb1e-35adc02c0d85",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8d43d5-f423-4953-a7f3-21c6d2d6bf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ec1a99-4ea2-4569-a11a-0cb7441969c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be571fa3-7ca2-48e1-a051-403d5471e049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d8d86e-b26a-414b-9d4d-0ee7ce1c0883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709119b8-0285-4529-9892-00c777803ddd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475cac9f-bb20-410a-89c5-403c70d1ea46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9c9f0d-57ed-45ec-aee1-b06bb9888bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "059779c7-3fdb-4fda-9a2b-d8872bec3800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bf373c-a57b-4356-b098-41d4a621a1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c175287e-63a5-4916-822f-bba01a41c239",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84adf7d3-20d4-41ea-bfc1-70019b93fe7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3322a1c7-f096-4969-aa84-90ace68e87bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1328e4f4-8328-4ae4-aa40-ade9650784e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37905667-4c92-4859-9212-36bf3533f953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46191084-afd5-4c77-9621-73caa899fae7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb08f70-cefe-49a3-85c0-9da2bcd6d595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3b9dfd-10ab-466c-83d8-8b586be7e3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c022b1aa-2c86-4eff-be8c-33167636d5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3645ba-2401-4495-9f75-b4de52068fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070cbdfc-c5c5-46fb-b826-186c6688e78d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bac572-a522-45db-9276-d9dc8fc66ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ea8e99-95cb-4986-a306-7c341129aa86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f13191-f5f6-424d-8d3b-6ffab7ed6a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e6c7e9-8b7c-445a-8336-66f600562178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2679578b-3077-40c2-889d-44be68c34843",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c587fa06-26ad-40d6-a352-13c8cae2ad4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de7e04f-0a61-4694-bdde-5f36b05353f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52803fa-cd5a-4af1-86af-9cb3e5a53070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eafef6c-fff1-4f43-80dd-8c059c1ffdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ed1c92-3816-4f8b-a96c-32e7ffadd229",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6fd4cd-8274-4c10-a4b7-5371f0255316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb811e7-8e2d-48f3-8ff0-f1dc596f6b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204714ae-d0a5-4066-8d53-6eb533f480b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f79138d-17a6-4f51-b92d-f5e67d8b25f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5de019d-b717-446f-8bde-188d872523fa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f9d71a-8c92-4424-a5f7-67b1b53a222c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f01340-491a-4401-abef-68691d27e72a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeaeafd8-b00d-49c6-b577-2c54fd26d0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b65603-12b2-4e08-8356-d1e4707e5efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26fc22c-910b-4771-8093-373f41ab954f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eb9c26-2fa1-4afa-a912-081b923d7938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "685f4245-fcc1-47ea-837e-a9558787d0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e4a621-2940-4f01-9e44-68c3a8dc632e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f839805c-7ffc-4004-8006-86cc68e586ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c900c4cc-a757-4185-8f77-700961974021",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1a813a-6d21-49fc-9740-a91103149441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0833ae-694e-446a-b1e9-8675e177c70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd17cb69-b0b1-4c87-a1f9-d53e97c1a373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2864b2a-6b99-46fe-a115-94a2ba2faea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0961294-562f-414c-83c2-8d693744cbb6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa929028-8caf-4a7a-ad35-7820cacfbe32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63918879-c7a8-4e19-91a5-2c23a9809091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084ac87c-8a26-423b-922f-28720cfb4128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d76c84-e0fc-4659-b380-6330340cbfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9ecfd0-3362-47fc-9b7b-09278ba77006",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c24be7-23a1-4df8-87fd-ad667bbd0b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "154927c0-9542-49e9-94f7-4826c7cfdf29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac677cd1-2ae7-499b-8ad4-8c9db51fcd4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e4064e-460a-4488-b4b3-8007637989d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b02bf66-eb20-4371-b1f7-2035100fe07d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5e7843-54a3-4226-8137-69ae6c32f37f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd95ea3-c9b6-4690-87f4-0bf24c792f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbe2d7a-eb9b-49da-96c9-9fca47ac9698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d134976-c60e-4a5e-81b3-1e02774dc056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761fbfc-9d14-4ef6-abb6-207cc0b456b4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a827f9-9f02-4ba1-a541-222a6c5dd5db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e310fa66-fd4d-4144-a288-16c76ec718bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b678445-1657-4490-9cad-a863be41001a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01d805c-ea9c-458d-afac-64f52c1531f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614454e6-8174-4522-a50a-7c36b8b12590",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219c2086-c8d7-4b4c-9792-95751ab5c711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1689064-4e61-4b09-9273-0910c1bcf72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33547c0-eab1-4b9d-a0cc-ac21276756af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89eb122-916f-44f8-8f82-cb418b854a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545d1eb9-76ba-4c8d-a161-e74a4f0463db",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ea564d-e771-4c5d-90e9-8a145adaf8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4a015a-040b-47f3-a10c-accad5d5b80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4275c4ca-049c-4d54-8793-df079bcd0f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52abf3c-ae11-4006-ba2b-bbccfe1adab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e18523-032e-41ab-aacf-03d5ffd922c0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275e3aff-0cca-4a82-b56f-f7b9e6acd095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af758d77-1374-4561-8f8b-460c72790474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872682e3-d76d-4116-87ec-2b049836c078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbacef9f-3589-4647-aee8-3d259dd052de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abc5c34-b6ec-4c66-992e-470914a3c59f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395a7336-185f-4fa6-8d16-51b807161545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75cd8284-701c-4fa2-aa76-39400b0e7258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d4cf41-acf3-479a-b3d3-5d725b6eac6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bde05b-e9f5-4f1f-a994-edc94a457b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c360185f-a9a5-4418-9d37-ed9bfdebd2a4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eef5bd7-8b28-4140-9165-1d1dda34649d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e281ee-5ff4-413f-9abf-02377d703ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3feaf833-a723-47a2-b756-4e5436eac862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdebbc0-8283-414b-aa81-67f419b43448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ac1977-2830-47f7-8673-23403bdfb07e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fdf53d-d5aa-4e9c-811d-3e855d0cb946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731893b9-596c-4008-a838-319d3d284c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc24f82-f243-4c91-8031-3aa7a5020b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd750f18-47b0-4f1e-901b-d7369be71800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ac6712-27b3-4b79-bf9b-e9dde5070d8e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09885d1f-f3f7-4bba-a5ae-96ce9cb34c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8365f50-59f8-4fb7-913a-c75f998f5be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81998cc5-a69c-4052-aa46-e717850385b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fec5ec2-9295-4c2f-9821-d9a6960bf8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99182c5-396c-4201-8061-869d782340ef",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d888e2-20f5-45a9-8bb4-49dfdd01f51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285c29e6-24af-4c56-92b5-18a40cabc669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2da71d7-ce73-4050-8a96-c331b42a5d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41e6804-65f4-4fde-8602-96b5f1ee7131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d36d16-6f6f-42d8-a2e2-fbb01b65abb2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61acb5c7-ba63-4f3e-9ca3-4d726b753f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2db31f-cb5a-4dbc-9811-93b8adb0bbfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d71990-c1aa-4edb-a0e6-fab89b920da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379576c8-2866-4498-a02c-dc5671a4cf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e71d79e-70ce-467e-bdc5-a96629eb0564",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e956f8-a127-44a6-8bba-9d182249f271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8b2510-326c-4476-9fe2-7b49cf244948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc2f8db-7593-4e58-9ceb-73bdc182b856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ff7573-492c-48bf-88cf-7563537afec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d281f7-9f01-4384-bc1a-0f1f11ff2a82",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686579ee-d731-4a47-b4b1-452eac24a526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429d65f4-9f83-4448-af0a-790677b2ff07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c953ec-2659-478e-9493-31bdd59fdf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd9e62e-7eb8-41ac-9013-9422fab942e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299888df-8290-4817-921e-3fe56be8ebaf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acc2091-6ec5-4695-aa7c-1093b5fd0fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074f6ca3-044d-4c69-84e1-82fef236a89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c78e25-45ef-41f7-b595-bb34a298bd12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e176e5-df56-408e-aa2c-2eda13161e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3a8b7f-16aa-4600-9b64-0a9107cc923a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bac157-7cb6-4947-b92e-f087e1e54135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfeb4b6d-7d2b-4132-811c-7a30cd276e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076df3c-02b7-400a-aa5f-1f1e075d0568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37fa7550-0960-4f8f-aac2-7febb5d75839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd7f42d-73ef-4922-8e75-81607b373998",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7692cb78-2eb8-416d-9e3b-d9ac2d425f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86adc921-6313-491f-ba3b-23fb13cdc9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfe181b-de88-48cd-a3cd-aa5ee04b6353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dbb5a9-ae4b-4e6e-9cdf-956212061983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29213eaf-8c82-4ea9-9c86-3902b0803377",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c70ccf-6c9a-455e-a945-96dcd270dc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d74595-25d1-4d09-a5b3-dc301b5724c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e690329a-c4f2-4be1-97b1-aa3d6866399f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3edcc5f-2a7b-49c2-a994-3984e9b33581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e2e9c6-cd02-4e25-bb6b-bf6c82574860",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1f2c01-73e4-46f9-8e2d-d13dcacfef9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eccc619-6c0d-4737-b25d-824ab7c75d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92cf00a-c73e-4df1-bcae-538b4d1056ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac561b0a-c6cb-4f4b-9089-890c215af3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17782a2-1229-4be8-924e-f3d7f193964a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c51115-c04f-48eb-a76e-69fcf7be5eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b1819c-50fd-4c4c-90de-8577a35fd211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f94aea7-d9a0-4c88-8197-8ee844c96561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4113388-3249-4cf0-ad26-408d38abd387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee54c69a-e8ce-49ec-823c-fc760c9bdbf0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3a63bc-000d-490b-881c-4512bb025dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e3f0b8-f5e0-4c57-9339-91420cd8ef9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0037f305-cacd-4391-8bb4-7cf796b619e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9961e05f-40e7-4f19-b0af-4175e6264cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813ca9c7-0a68-49ef-b6cd-041374611f70",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38704ca-2130-43cd-ba93-60e26338124d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7192a1-780c-4800-bc1f-5d55208b2570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af3c16c-5cd3-481f-bed0-32d870adb742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59de1ab-5ba4-4494-8d17-1969f25f96e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a20257-3c69-41cf-9864-6cc2013e593c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dc1277-5944-4e1e-a283-2fb6f3a2fc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53313da4-97e4-4368-a0fc-d57e000cfcf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc784ff-bfa2-4747-8242-9487d41fdbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb2f42e-f258-4140-9ae3-91b82e053acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d20140-259f-48aa-ad93-6ed013502e90",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeec009-4b01-4586-a6a3-fbcbf6b5efed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd1e670-e9f2-4ea2-842f-eade57940f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aac10db-12cb-4cca-a13d-18b4882b2b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149c703a-d59e-4c2e-a40f-d14148ac3ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9971564-4e64-495e-905d-35bebe595af8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee5e566-96fa-4b3f-9eab-8022592cf345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2386b81f-1634-4291-a4de-ca0097959366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72313087-ebe9-4433-8e57-35aec75fb05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4344cf-cbec-45c8-916f-826bab972033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aac6551-d0c5-464e-8d06-83479806b060",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a66d0c-a52d-4246-aaa6-f8a75a11cde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0580fb8c-d1e5-4994-ab00-833eab7bd873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d231792-19ed-4a08-8dbb-3f7dd3038aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b25ebf-a844-48c8-bab6-96deb92f13e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8714dd96-e301-47bc-adfa-e7823937ea4f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025b5d6f-0a81-4dcb-b246-d91b63abc453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5173baed-3f5b-482b-bcb7-139b6b3499ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbc2b20-6cef-4ce9-aa9e-509dfcd703c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03ec0bb-cfd6-4563-9708-3ef0b35007a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85add1ec-aed9-4d0c-9ded-b1def1b5f049",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474e5856-172f-49e2-a891-6f7adf0386fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99f3922-881f-4b56-b6c3-52d6c383f306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb05cac-f002-49cc-b1b0-f48e31b31b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc972e8-bff1-4d12-b899-ef0387889cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b01208-5e14-42a3-b97c-ced2421291ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2019354-c013-4649-b930-57ddedd77ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36aa165-77cb-4547-916b-c30b7dc9d962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbbe470-acea-4990-a425-7eff8802e9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3386fc2-1672-473b-8be6-da2f205612d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5818680d-3c1e-42eb-abb8-a0c05b9eaca1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d48e2b8-4bfc-46f4-ab6f-f228ce9eca19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6567795b-b048-4354-8b44-d06218b127ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f368ed-778a-41de-91ef-0764ba15128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40051c98-0f3e-48c1-b7a7-35f48142f861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832e50c7-72d9-4917-9f9c-ac2ae9d31b41",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49737901-e85d-4dd2-8c1a-d1cfd308eb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d60984-5382-4b7d-b30f-d620f2415095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e179f8-be80-4275-937d-85e9a271fb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4566a5-9515-4088-9da4-896393b47735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8768d92-5a7a-4d02-9252-79d7d33a3e95",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81daef7a-5ee2-4f21-abfd-df73d5b203f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a16e09-8268-4838-891c-2348b5d4c1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "783eb753-e7ac-446b-8adf-2cc1c4347a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb4a20-19e4-4fe5-9c84-a7aa9c0fcd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211d983c-e098-4d0a-b0bb-528af0ef2438",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3688d80c-5e84-44a4-8118-8da2e9514e27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6218e7d0-8a3d-4ada-a3cc-c5f6216b511b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f092cd-29cc-4c41-bbb2-17e5a14500af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383568d8-776b-4fe3-9dcd-5f7998733de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b51fe76-8aa8-4247-92cc-df41daebd834",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79f51e0-374c-490e-9b0a-00380d18c916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aa98129-3726-44ca-ac24-17967d062f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e61d54-39d7-4488-8686-b75ac4ec5348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fc494e-e7b3-4a68-8c5f-7b54f4a916f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c184504c-d4db-412e-8b65-9b3f14723c06",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba7dd92-1071-44c6-97f4-7965e3cff494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b186b82f-60b3-47e8-a14f-783d07674de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc49833-b4a0-430d-8608-dc6bb54d1b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9282c71c-d5b2-4b2c-b157-1f4fcbcab90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b744371-9842-4299-bac3-f1481c805c0e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375bde83-b2c9-4602-a474-72920d092370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4de49b63-c63a-4ef6-96ff-ee798effaabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf44eb18-6207-4c5f-b040-e98c8d960129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c432f120-579f-4702-9991-42e672e9ccc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f09a0a3-24ad-49ef-a34f-00d67696e174",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c097b2c7-449b-42a6-acb6-51a514688797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4939e6-51f6-46dd-a33f-de4de21474cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae28884-5ceb-4b2a-931b-989c459dd587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d60a4d-91b5-4268-b5ae-b3bca7983b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e82c99e-f10c-4051-8bbf-b00c32e573cc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144c3e0c-e8b6-4d57-8994-21758d0f4a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32280edc-c9e1-4a80-8137-792efe2baae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bc3c2a-7c8c-48a4-be22-915c8813d2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42e9b3d-467e-4efe-90f3-ebcafdf0b2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9024489c-acb1-429f-99e1-98c88b7fb2a1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1642446e-3c2f-4511-9806-e90266a77fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff088c4a-687b-4a79-b2d0-ad866524ceb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a291f07e-d586-468c-96d4-6bdcf8689e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae7d245-ce0c-4531-9465-d0a7318f6814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d8bd9b-b63b-4133-9c87-1e17d0f73c16",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496fb4a5-a220-4b01-a9f1-cea1398813c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27292ddb-d1e7-4c22-b852-75619c5b775a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b66de2-139e-4416-bbbb-4f268e83696b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5810fdc4-e703-4726-82ab-7ea9179ef4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8701b8ac-d203-4ebd-b55b-d6ac520b8382",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faddeb22-8b48-439a-b24c-d97aa6fa4c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ea1320-1478-4881-b77e-23a81057999d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd9ac11-17b9-43d6-ba16-924ecaa1cf29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85c5db5-9346-4a9d-b956-e3cf056dd221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98c1154-2c33-406f-a7d7-f79f028c0f85",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5afa9ec-1dee-4589-9d8b-b3b8197b3168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a32b8d53-8ea2-460a-8112-401bb0e307e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b2fa67-f2eb-4d28-a6f7-9384b3575015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd4cd2d-6db3-4231-b2ad-6f098b5f6624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a62d7f7-7592-4b14-ba46-52e311e1361d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47462f8-d83b-48f5-a7d7-db9cc02a379c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc7c459-e5e6-407e-bca7-7d8365630028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e2fe18-8c11-47bf-9df5-424c1eec39ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d227df24-e106-4be4-857c-4904796172dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362466a3-c407-400d-a4ea-bc65690bd15c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16fd509-1bbd-4846-8505-a009f454d58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65538948-d076-470e-93ac-ca39894caa68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0c6ce8-df96-4fb8-a448-75b7cc47dde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcb355a-3ad4-4d40-a90d-446f129e8e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f4ed02-b2c0-49af-8ee8-f300c3cef438",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130c83c6-c5af-4018-9cbb-ba8d9fddcace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f160ed40-11a2-4199-b590-d2cd20485e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af840f8-63f5-4114-8228-5fd92037274e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c498ce8-f161-4ec3-b916-1fece952fac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17675802-bee9-4d10-bb6b-68f25248bfad",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e413f7-d385-47a5-b661-4cd366a61d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab37c6d-8361-4b35-ba71-8fd816f793c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e311e7-d459-4b9f-aae2-893375da9291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fbddf2-ae0d-4978-bfa3-1afd4e3ac2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349d5183-45f0-4426-9536-0b89985a6b5e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6792e44-702f-4b2c-8c51-1edddec8e668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad87ab85-7b37-4cf5-9d69-7fbdcd789294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ff7622-60a3-4e72-b624-bd147f397cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2d6c0c-94ff-4cdd-8ae0-5765654cf885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b7a74e-1f0a-4417-9fa1-dbacf787d5b3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1073f8-e6dd-4afb-accc-8f3e622ec23b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5041786b-5f4c-439d-ae7e-a17922664b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3153a9fe-f466-4c90-9b69-e991eaf5895e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84298f12-2e24-4850-aebc-651b2128a5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d63fde-f235-4ec3-a9cb-484f622e015d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989ba46d-f23e-4d7c-8981-b2a50d9f5fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3893dd3-6619-4df6-92a9-43222c564656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c23524-d0bc-4fd7-bb50-e72cf8369e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8bf98e-218c-487a-b1b9-1da591be8d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65597796-a363-4f54-a997-fb9ba3bcc54c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebe5f81-c8b3-43d4-be48-b8f8adb5566f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d8b1d4-0f60-4429-9a97-d663e23e3a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22139a39-fb33-4c61-b455-ef15b9f90231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb85c00-49ae-4e4f-88b2-e096034d1191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331dbe7f-c079-4af6-8e62-73e503160b19",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb17964-db2a-4f4f-ae99-2c234883ff28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660f229d-2796-4615-a969-e50ce449e2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52ad8ac-dd33-408b-a0b1-d391db398d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a10c18-e3ae-4e21-adec-de25039607aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23947d4-56a8-4f7f-aa24-632a0cf24dac",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f424d4af-098e-4e05-9240-084c1f1669a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28f5dbb-583c-42d6-9bbb-18e7d6eae4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e812c6b9-bd9c-48a6-a69f-192e485c8d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7715da-8ac4-4042-b5f8-3e933ccacc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ba54ba-6498-42b2-923c-7a2aaa9ad3da",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904bd22a-3be0-4f7f-935a-1fc9b41228a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f95e02-341c-4211-bc17-45cde5e67b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a5fd9b-be4d-47c9-89e2-636a0c6ad753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9cac51-dd2e-43a0-a610-802893244fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e257e4c0-4bf7-4bc6-8d38-535847739faa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bbcc7e-35d1-4388-b137-e14a39fd3be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb3edac-4349-43ed-bbcb-24f23cab7e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0411a44-90cc-4fb6-8d97-804bf8fd7448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625b7d29-998e-4dfc-a357-c32db9f51d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01802fc2-0623-4789-a071-945b35552c0c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f212d805-ecd8-4f74-928b-327a2c7c053e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ccd4c0-c912-42c9-9847-ef2ac0ddbc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2f8a40-5fbd-4a12-8f40-57ca217ba521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cb496a-bbde-4ad7-a52a-5d381bb5adae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e769da6-c3c7-4d56-9373-300c4b74e0f0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8cd071-ab9c-40da-8bb8-68d9cdea5be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b528bb-6cad-4313-99fc-3f31413fc4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2c85e7-c95a-463b-817c-5e7178d630e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280d7c2f-f718-4da2-a388-22976399c49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeb31d4-477b-4b14-86a1-809ab84fab4e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efaba615-9109-4c47-85fd-b3878fe0f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fe907c1-d0fe-4aa0-96ea-d8489f944260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04303e1c-d993-44aa-81f3-cdbf284c82fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a58d8b-f388-43a6-b77a-f00f077e0ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687704b1-5d16-43e3-a3b2-28853486ee3e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1356c7-92e6-448a-b0ae-325a98ddd746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c1dde3-9eaa-4914-9d56-225032dc6ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4addaf-3b18-487b-9600-2b150e62e72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9253edf-50e6-4cad-a9ae-5e41e3141adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddbfb33-6708-4796-832d-7ce1e1bc7ab0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e24231-1703-491e-b410-4eb6a69ed248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8dbe044-ddf4-474b-9c5b-c2a226bad96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8632697-849f-4c04-ac3e-d33067492689",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11ccf11-b6dc-443a-8d1e-a59fb0296897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eb5a5d-13fc-4262-bf52-add12e07e1bf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f7c5b4-a301-4867-a74d-d7acbbdf58dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16604a8a-b5a0-4cbc-b8c5-c317fee05222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15ce5c2-64f0-4424-8c5b-78c347b1e229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e0983b-e044-4d7a-ab57-5057fb9f6a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f0b44d-b7eb-4e51-9d5e-fd0208838ea6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3982c1ee-c282-41a8-92f1-9c0d11a1a742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceaedf6d-9ab7-4dbe-ba10-8f0a7693ffd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391db00c-a431-481d-ae51-55a1ceedfddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff315839-6920-474c-8041-188a629de056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd6b1fb-3d3c-4c24-9ddb-a2476b0e03a8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643d0519-45f4-4c79-af68-464e0a4e7cc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505eac85-2177-430d-8d75-8bc595f94ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4a65af-a99d-47b5-bb7e-43db3b708430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b599270-5d87-43bc-8470-c301a55dde47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b413e1a9-ce5f-404c-9339-b50777896f1a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ea1bdc-7e45-41a2-a49d-3e8d855afd18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000eb1df-7779-496d-8c6b-70b5b4f29ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62e822c-4247-44a4-8902-cd8d5a7d79f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e74ff63-347e-40b7-84b4-5339747f05ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2f3376-f4d3-4d21-8277-8804c91d37d9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9b5da7-43b4-41b5-828c-3553cfbd8dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "514235a6-85a7-4381-aaf3-d2cdba7dd575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af23114c-47a3-479b-b958-17ebd0b4bf33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac44354-0015-4295-ab3f-5008c56d751a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5f485a-cb37-4842-915d-94a573133b99",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df08d97e-14f0-456b-8f50-e063c2cf1fc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d9d054-a9ad-4534-895f-560cab96f03a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba05b81b-d224-4acb-a787-3363cf46d5c0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99bfa607-34f2-419a-807f-ddcc8e44c34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44a2e1d-a810-424f-8d79-e8ae111665aa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2beab18-b194-40f4-acff-2c1d3dd81b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a375a7ef-f98c-4f90-a914-394f44a57937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c64a7b-bee5-4ec7-af62-fc96390ea731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9f753b-44ab-4a7f-9b7a-01fdb26d71b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fbf1f6b-b2d3-4faa-804f-664d3e1ddd07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5236b29-622a-49a1-9e60-29f3a546c0dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aaecbaa-e652-4776-9a04-11b59977bb74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8817960f-f397-4fa1-89fd-5174a442232c"
                    }
                  }
                ]
              },
              {
                "id": "48558ff3-d4d1-4599-8106-f32a6d2284d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa8f3d3f-d7cb-40cd-801c-471fad5a276c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36fba18-47e6-4e4a-8cab-8bc8c6cb4245",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1f56f596-fdc1-4590-9aba-04241d3ec20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6379e0e0-22ec-40a6-b283-82b9b2231fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "995f559e-8b2e-4234-9bbe-69b9b265fc6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d29b2d9f-a69f-44ae-bae2-112c4f6887a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22f27a35-480e-48cd-a1f1-bc0eb8da8085"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16832829-e6f0-46c3-ae09-4a25bfe91826",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5adb0ff4-b91b-469d-a3c9-e213ba8038fc"
                    }
                  }
                ]
              },
              {
                "id": "7b0c6ebc-6d95-41dd-bf31-07f6c12455a3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "66399259-6290-415f-b13b-012c2782fb52",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57845603-8e65-485b-a0d5-0514501c4170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dca23301-1e52-44cf-b879-69b4a9d00441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe39938-d399-4692-84f3-ead85c8cdcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfee3af-696a-40be-a0d5-dc7a02f164a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5b5647e2-42da-46de-9772-808f90aacf10",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d549242e-b51f-4ed3-90eb-bb7abaea1822",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33f93687-2242-4dab-80ba-7d4ffc98e502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a6db20d0-f909-4fb4-a35b-53b635023a12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cae867e-690d-4a4a-b3e3-2b2963c3008d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "facb0bfb-46a1-4f67-957f-2c7fa8542309"
                    }
                  }
                ]
              },
              {
                "id": "f7ed61ff-8c06-400c-b64a-20ee2605844b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61a535c4-e594-4759-a639-8b631b96280c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "51a827ed-0883-4c9d-8955-9cd07c6eb0cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21a4bef5-d24e-46e2-8b9c-ccd89c5a6330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61425bb6-5402-4931-8dcb-63dd43d0bf56"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a6cb46e-967e-46e4-aeb3-5cae446a9bd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "122466a0-ea85-433b-88d5-d0bdd8ce11ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6245e18-cf3c-4420-a17d-b2a5139b44f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94a7df4e-c2c3-4738-be4e-93b8692c14d4"
            }
          }
        ]
      },
      {
        "id": "c34dba3d-9e3e-41c0-870e-29cdcdd7898a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c9620e28-5f4b-4719-8310-1bab6d2116bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53e66604-701a-467f-84aa-208ab29d4613",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9f9fba7-913f-4d0d-b2b4-d8303ead7cc6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a183c9-fa69-4e69-9987-4cb630241f44",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb71d19e-2699-4dc7-a2f0-8b54ff0f629c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04f2173-a27a-4a35-9357-749c573b737e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c9f6f00-890d-4cfc-8bee-0b826b453cf5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce5e3f79-d6ee-4d13-aba8-a0433c69aecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6be2054-a040-486b-b8f1-985c48f01da1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20f0ff3e-8ffa-480e-9872-f93336e17d62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4910ac81-7389-435f-a1d7-8ad5870ab9de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43ebe312-9d66-4d5e-9e8b-6c6f062d000b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ffc68140-1bb1-4d45-b94e-935892441e37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb2c9f4b-de09-4e9c-ac6e-f9e1eee94c09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3038e103-19a1-434a-b5a4-300fc2196940"
            }
          }
        ]
      },
      {
        "id": "10e3939c-6b71-4353-8049-4c8817e66eda",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "42a01d6a-521d-4dbe-9e18-77a3709973a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33f0687a-c5a3-4675-bb40-e9a6e6e08182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "131b11f8-cb14-4357-a7f2-0d461bfcac98",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8b3546-205c-4a4a-8ccd-b46299c7dab9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6f12199-067a-4b37-8ed9-6e30091df721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5639f678-9937-4487-9ec5-a0827d05ee9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48d7c5ea-b7ba-4651-a28e-64cc0dd7ec37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47648fa7-a920-4df7-a8ee-892b7579e5ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d9170e6-9224-4ae6-9219-5d0dde0aaf72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60feee44-d882-43f1-9909-68813f51a1d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c392aed-8725-430e-aa5d-73183c639da0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05d4e862-d41c-4ca5-9f10-3a7e859528ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ff80032a-8838-46a6-8fde-d0e962fbd43a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b5d76be-66b5-498a-bc0a-c436c18d0ee4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2f499ed-ab63-49ab-bf23-b3bba6611660"
            }
          }
        ]
      },
      {
        "id": "d338ff3a-224e-494d-82b8-10493c55f1ff",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "686df47c-2904-4cee-bf8e-ac8699f8f09d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcaaf27b-c2b7-4ff2-a78a-8c7507c01115",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b8de957-10f4-4ae9-b20a-b9efd5bf86b5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5422d71d-5ba4-49b4-9e55-dba3b44b5341",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab46d103-4fb9-408f-a58c-bd56b4e307ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f673a78-e9bb-4800-a9a6-145954850277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "103e36d0-d800-4ecc-8c4b-b180c7868916"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c214104-e503-4b6d-a5c1-55dc61d28fcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ad353c0-b66e-4bd0-81b8-43bf12fc2f25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e06595f9-f91c-4926-8bf8-ed57df016872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af0d736-daf7-457c-af48-33a120a13cd3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f278baba-5df6-4158-af76-398cfc28690c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "16b4fd6f-33bb-4dc3-a226-94cd44a9ee2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7551efb4-a408-4a6c-aa72-cb0245a663a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24c95119-4f1b-4000-b571-4598e57f0635"
            }
          }
        ]
      },
      {
        "id": "0be77ef1-0ae4-424b-8056-ea223c7658f9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fdb6a12-cc02-489b-8fea-75065f371fa1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcad5afa-93ed-4881-a4ac-dfae19c703ba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "051c2e4a-8ff5-46e9-ae66-22486e8e07d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "391017a8-ee51-4d5a-9d06-d921bb9ca5cd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "368b5e15-3a77-441d-a038-de49f4bcaa3f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 164.71478873239428,
      "responseMin": 21,
      "responseMax": 1945,
      "responseSd": 320.93557061428805,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695083612218,
      "completed": 1695083670918
    },
    "executions": [
      {
        "id": "ef3b10be-cef1-4896-8bf6-d534c2a5296c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bc9951db-c698-4330-a4af-10279769d113",
          "httpRequestId": "45e24215-6318-47b2-8e73-2b7ef765d6c0"
        },
        "item": {
          "id": "ef3b10be-cef1-4896-8bf6-d534c2a5296c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d9e0107f-ff28-4617-9120-9e3af086a37b",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "1789bbac-30aa-41b3-8e6c-72859a2d8f5f",
        "cursor": {
          "ref": "4eb39e52-82b8-4921-b901-d2697923d0ad",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b09da28f-23be-4b9b-bfbb-572828441051"
        },
        "item": {
          "id": "1789bbac-30aa-41b3-8e6c-72859a2d8f5f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "10007811-f962-47e9-afb3-d3938c7e4af3",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "12178d48-2bd2-4640-a897-3723ec15ecf0",
        "cursor": {
          "ref": "352dd6ed-078b-4d4f-9cab-a10474d37c0d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b727a501-d031-456b-aac9-441f6821cc18"
        },
        "item": {
          "id": "12178d48-2bd2-4640-a897-3723ec15ecf0",
          "name": "did_json"
        },
        "response": {
          "id": "00d11f21-f62a-494e-a70a-5c69597f14c4",
          "status": "OK",
          "code": 200,
          "responseTime": 370,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebecfe92-65dc-4e91-abaa-5e2e8a7b1d1a",
        "cursor": {
          "ref": "02b0c67f-ac4a-411e-ba0a-b073ebcf2fc8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca7a76c5-d850-487b-8bca-0902939f8ea5"
        },
        "item": {
          "id": "ebecfe92-65dc-4e91-abaa-5e2e8a7b1d1a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6111230a-d2e9-49ed-808b-7025870c6f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebecfe92-65dc-4e91-abaa-5e2e8a7b1d1a",
        "cursor": {
          "ref": "02b0c67f-ac4a-411e-ba0a-b073ebcf2fc8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca7a76c5-d850-487b-8bca-0902939f8ea5"
        },
        "item": {
          "id": "ebecfe92-65dc-4e91-abaa-5e2e8a7b1d1a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6111230a-d2e9-49ed-808b-7025870c6f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3e3ad1-d3a0-4c2c-81a0-442d633d5f39",
        "cursor": {
          "ref": "f4885493-670d-48a1-995a-c94fe36fde2b",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ff1a4b5f-dcfe-4b3b-89dd-02909e3a2f1c"
        },
        "item": {
          "id": "ae3e3ad1-d3a0-4c2c-81a0-442d633d5f39",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a7e1fdcf-c154-47d0-8395-6c09458a32f0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 127,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897561ee-e29b-4b64-9d15-0b4cde540a7e",
        "cursor": {
          "ref": "b89812a9-5631-4939-93ae-034e29de3b99",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f4d05821-02d1-43cf-beea-b63df6c640af"
        },
        "item": {
          "id": "897561ee-e29b-4b64-9d15-0b4cde540a7e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6fc6cd5d-ba60-431f-99b0-c95cb64ffbaa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c80ee85-ed4c-4b4b-97f8-e0e23cb6a008",
        "cursor": {
          "ref": "441dae57-2d7b-4b6f-a783-b48d895276d0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "38e439af-5936-482d-8e6d-8d88d927fb9d"
        },
        "item": {
          "id": "5c80ee85-ed4c-4b4b-97f8-e0e23cb6a008",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5ef0e377-9f8f-4ea9-a6ac-a92e6fea2f89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db7366b-6b59-4e5c-a780-19510af8a39c",
        "cursor": {
          "ref": "2b9ccb32-9baf-45cf-9186-ea2bd1c1f170",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "968ffa9a-309b-498d-80ef-71f8666b1afc"
        },
        "item": {
          "id": "2db7366b-6b59-4e5c-a780-19510af8a39c",
          "name": "identifiers"
        },
        "response": {
          "id": "041ffac2-d336-4df8-ba38-efa23dc7fbcb",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884eacd8-05d4-4a75-8bb2-66ed4473f97f",
        "cursor": {
          "ref": "710213ac-59b7-4139-ba9a-54e132bc6d27",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "39d0aff8-efb3-467d-bf12-392e8209a1c0"
        },
        "item": {
          "id": "884eacd8-05d4-4a75-8bb2-66ed4473f97f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8ef00e01-35f7-408d-b180-992b2415f3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ac6cf0-13f2-43c6-b66f-cef164064338",
        "cursor": {
          "ref": "2315823f-e71d-4204-8621-b057fc0daa50",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "64f7f62e-d1f4-4188-945e-3b4ba98185e6"
        },
        "item": {
          "id": "00ac6cf0-13f2-43c6-b66f-cef164064338",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "642663c5-ea02-4dde-a746-1ffc232a9e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd76a4c3-bb69-4b5a-9d5c-67fd2a72c5fe",
        "cursor": {
          "ref": "f3e2e39e-3e6b-4737-adae-3e0cbd025217",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "58ba06bd-a67e-4f56-8162-1005af9ecaa8"
        },
        "item": {
          "id": "cd76a4c3-bb69-4b5a-9d5c-67fd2a72c5fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f410abac-4218-4f8e-8578-5ed9a903ad1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb38c34-39ea-4c6a-b3ba-011745e68e8c",
        "cursor": {
          "ref": "96734da9-f797-45dd-8159-955484b983d9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "65e24c96-3e41-4d0a-8005-76bd243b1fbc"
        },
        "item": {
          "id": "2cb38c34-39ea-4c6a-b3ba-011745e68e8c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cbc675f6-d9de-4083-b3b5-0cb82b4db4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f81dde4-a89a-496c-be22-36a7eb015d29",
        "cursor": {
          "ref": "8063587c-6710-4ae6-9b4a-dbaed5970dac",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a711e6da-8bd7-4ae4-8e07-095a7cc75b2a"
        },
        "item": {
          "id": "9f81dde4-a89a-496c-be22-36a7eb015d29",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f809a994-97dd-4ce9-8f92-c510201867f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d65054-b6c8-4e43-b126-7407c36df4f9",
        "cursor": {
          "ref": "6ebb7783-e0bd-4249-89c8-6f228ecd7461",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b38aca4-7f38-420d-9bc2-a5efe6d9abed"
        },
        "item": {
          "id": "96d65054-b6c8-4e43-b126-7407c36df4f9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b2926081-71f0-4f80-a6ad-a9d495af3ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea8f2a9-0876-4298-8104-dbaf8eed8615",
        "cursor": {
          "ref": "431b9f2a-80cf-496e-81cb-976fd93cfbcc",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "378cb7b9-392d-4da7-bd33-f676fe745046"
        },
        "item": {
          "id": "0ea8f2a9-0876-4298-8104-dbaf8eed8615",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "05413cf2-d49c-4e77-84b3-2baab1bc42be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e155b13f-0a57-4f23-aedc-5e952c94cfa0",
        "cursor": {
          "ref": "a8edaa60-3cbf-4f76-875f-efb84ff5b48f",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2bc32f2c-d7cc-4833-9d40-9f9f22345185"
        },
        "item": {
          "id": "e155b13f-0a57-4f23-aedc-5e952c94cfa0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "23ebf111-9298-4e27-aca6-b0562eb39db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa1fde9-ed42-4ffe-95b5-814a3ee270ce",
        "cursor": {
          "ref": "d52443d3-c0a9-43fb-92f2-f7f64c208f5a",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e2b05213-4c3b-470c-9a32-868673432fb8"
        },
        "item": {
          "id": "7aa1fde9-ed42-4ffe-95b5-814a3ee270ce",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e246fc04-a506-454a-9232-7dbcd2a3d82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1002c2d-b88f-43d4-9959-2eb0f9d0ed3d",
        "cursor": {
          "ref": "14c0f8c8-f6e6-4700-9509-841b82838e19",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1066f49f-185a-4fbb-989c-b3cf89a77d3f"
        },
        "item": {
          "id": "b1002c2d-b88f-43d4-9959-2eb0f9d0ed3d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a7e5a519-8fd5-46ff-9fb6-807f013766d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e9e6dd-41c0-45b3-990c-7fcac9a75aba",
        "cursor": {
          "ref": "d40eba5d-1a1f-48ce-803f-da002eb10a72",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3de55f09-49a5-4b7c-8a7d-842070422e71"
        },
        "item": {
          "id": "67e9e6dd-41c0-45b3-990c-7fcac9a75aba",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e3dd01d-fbdf-4759-80d0-5411963b8535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f129efbc-9d41-4c6c-beb7-dcd861b63437",
        "cursor": {
          "ref": "186c989f-5928-4175-88d4-1d54bba8499e",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "502e3cc7-62d0-4417-a39f-9e390a82adef"
        },
        "item": {
          "id": "f129efbc-9d41-4c6c-beb7-dcd861b63437",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "426806b4-e832-4cf6-8ebf-ec8826094849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087fe556-050f-431e-a06f-64e88915ff4c",
        "cursor": {
          "ref": "6d66fc75-8322-4cbf-adf2-17d18a847e62",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a2dc0034-1fda-428e-85ee-1a0306ce04fa"
        },
        "item": {
          "id": "087fe556-050f-431e-a06f-64e88915ff4c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b53acf0c-c44f-4524-9927-5f8bd167f80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cac9b8-fb09-4dfb-a973-eee3de8ddb25",
        "cursor": {
          "ref": "25a016ae-4499-4330-ae83-5b7453648c5c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3f8ad9b3-f183-449c-83c2-ae6ed21d74a9"
        },
        "item": {
          "id": "45cac9b8-fb09-4dfb-a973-eee3de8ddb25",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c0868dac-68f4-45cc-85cf-20d51d9f9627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed01bc26-d09d-4d86-91a4-fc6334f21d39",
        "cursor": {
          "ref": "fce3341e-a997-45c1-9dae-c5f8b60c02d0",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3d22c69f-de99-457f-9761-45ab8d64b6ee"
        },
        "item": {
          "id": "ed01bc26-d09d-4d86-91a4-fc6334f21d39",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9ab1a658-c825-4aef-8364-ed010dbe9133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f494f-7477-485a-a70c-1dd658044a0d",
        "cursor": {
          "ref": "b6811ab6-c97e-4141-9646-ab07e7c44c12",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "468a03cf-19b9-4bc3-8066-3d1075e40382"
        },
        "item": {
          "id": "739f494f-7477-485a-a70c-1dd658044a0d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "32dbcda1-4796-4ba8-ba73-7cf766f9c9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b56b61-886d-48d8-8d22-6bfa388f51d9",
        "cursor": {
          "ref": "96919419-dc7a-4f4d-bd01-8c4039a376d6",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1138a6b1-eb88-4e60-9594-ad6ccc7b1033"
        },
        "item": {
          "id": "14b56b61-886d-48d8-8d22-6bfa388f51d9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1980f3e-ba25-47da-8284-36ce0d0c7481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e48441-d39a-41c5-bf13-a9ddd0291b8f",
        "cursor": {
          "ref": "7b309ec7-381e-446b-8f25-ebcc67dd3dbb",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4453a4db-4d1d-4663-9d86-e00fb36d1149"
        },
        "item": {
          "id": "e0e48441-d39a-41c5-bf13-a9ddd0291b8f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4e92024a-c08d-42c1-9b45-ea58c27ecfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde0b363-9274-4994-91a4-f260d4f31d96",
        "cursor": {
          "ref": "cbb391fe-771b-4d4f-95ab-61e6483082b0",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f8b825d3-dbe5-4ab1-81d9-820281013507"
        },
        "item": {
          "id": "fde0b363-9274-4994-91a4-f260d4f31d96",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a8ff99c6-2bee-4c3d-9f6b-6ddcaf5b7844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aee947d-b890-4c0b-8907-11662ea04d1f",
        "cursor": {
          "ref": "55e7aa7e-5dc1-4dae-b23a-8c3d4f1ad5e2",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4ee4d317-9b4f-4d0b-831a-4dbd39ee0f43"
        },
        "item": {
          "id": "7aee947d-b890-4c0b-8907-11662ea04d1f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e030db98-245d-4fa2-8bee-b97a3fd39fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a855568-553b-4b11-9274-182f22f60bed",
        "cursor": {
          "ref": "cbc4a596-a84b-4201-8e23-88a595653057",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "91594a7d-dcc1-4fc7-b64f-21ddf5633484"
        },
        "item": {
          "id": "7a855568-553b-4b11-9274-182f22f60bed",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "79b07976-3075-4271-a0b4-1d00089e3660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71a8650-7cac-4351-bb41-4d5fedcbfeb0",
        "cursor": {
          "ref": "001959fa-c1cf-4a85-bd48-615f079f8ee9",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5b25a35-39cb-4779-8f9e-ac2e693bba5b"
        },
        "item": {
          "id": "a71a8650-7cac-4351-bb41-4d5fedcbfeb0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c0a245c4-2cb0-4c03-a630-ff88f6b47884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105b6bfd-9ad5-46a8-bdf6-b53daed43a3c",
        "cursor": {
          "ref": "c72380ae-0181-4c18-b2f9-69ccc959ee8e",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a52bf785-01a9-4962-8159-d45813558b42"
        },
        "item": {
          "id": "105b6bfd-9ad5-46a8-bdf6-b53daed43a3c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b3f0f751-a2e8-4346-b7d0-ac0b86523dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcee80e-91f0-4aec-9be6-940ff6e83d73",
        "cursor": {
          "ref": "957b6539-bc94-4819-8e99-181d0f9b17ec",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a7b145fc-4c71-45a9-ad08-5ba9218179e5"
        },
        "item": {
          "id": "0dcee80e-91f0-4aec-9be6-940ff6e83d73",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "85468d66-9385-4476-8fc5-8d6d6619f77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbff4ce5-6360-4cec-92b3-59d040b9d089",
        "cursor": {
          "ref": "1766f595-c627-4163-b623-a15aa2bb23a8",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a603d1a0-91bd-4a66-9eac-77a9c8c90a8b"
        },
        "item": {
          "id": "bbff4ce5-6360-4cec-92b3-59d040b9d089",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fb8de3a6-e9d3-4eaf-ad8e-7b4d92aaaad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d214d35b-f7b3-4425-bac1-7ca40fc11645",
        "cursor": {
          "ref": "499066d1-500c-495e-aee6-46ad27ba80fd",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bcbd415c-2bb3-4d95-be1b-c5c21af71ccf"
        },
        "item": {
          "id": "d214d35b-f7b3-4425-bac1-7ca40fc11645",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6509e689-8440-4b14-ae29-a435738b6bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add6a742-7224-44b0-bc56-ac3319a14713",
        "cursor": {
          "ref": "6f2b96a3-d6ca-4a10-9d00-16bb7fd75f2c",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1f734c1a-8105-4813-bd34-81551bccb8c7"
        },
        "item": {
          "id": "add6a742-7224-44b0-bc56-ac3319a14713",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fa45e794-c857-4a1b-b929-9cb72f5d846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d8c106-1e51-4481-aba3-11c668afed50",
        "cursor": {
          "ref": "7fb7f1a9-4ff5-475b-9f78-f0451012d604",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a70aadbd-06bb-4979-916f-18339ed1a906"
        },
        "item": {
          "id": "39d8c106-1e51-4481-aba3-11c668afed50",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3c5e2063-dc3f-4a21-a115-28ac3a28c026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ac5960-0175-46fd-9252-fd20b507ae77",
        "cursor": {
          "ref": "0033fc28-1609-48f5-8090-4b5400e81085",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6da739fa-3c4d-4ba7-8c64-b8080dde36d6"
        },
        "item": {
          "id": "c2ac5960-0175-46fd-9252-fd20b507ae77",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a10a6d62-fbd7-4b50-b30e-f6e20f1faa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14ad00f-5c96-4ef3-8c25-5374cfa273ca",
        "cursor": {
          "ref": "a15f23f1-71b3-4e57-822f-168649f42b75",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9d05b4c6-02f2-475c-9067-a8779bde225e"
        },
        "item": {
          "id": "a14ad00f-5c96-4ef3-8c25-5374cfa273ca",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "296bbad4-e98e-4437-be4d-d597fe6d422d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e5e46c-af5d-41bc-a4db-184c93f9d348",
        "cursor": {
          "ref": "61335ea0-b1ac-4bd4-a65b-972c8808eb5f",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6ad8351b-75a6-4b38-aa54-7310277dbf43"
        },
        "item": {
          "id": "12e5e46c-af5d-41bc-a4db-184c93f9d348",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "66b5a81f-c791-4ad0-8c02-ec83d7d013c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1ed4b319-ce85-4405-bd76-b0e0ddd502b2",
        "cursor": {
          "ref": "6893db44-c915-410d-bd19-ba2767a8176b",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2ecb03e6-b088-450e-88cb-9a0fd960b5c8"
        },
        "item": {
          "id": "1ed4b319-ce85-4405-bd76-b0e0ddd502b2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9abe77c6-2f6c-42db-af68-840152f998e0",
          "status": "Created",
          "code": 201,
          "responseTime": 1945,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ae3f961c-7121-4b11-ac8d-5680726602ee",
        "cursor": {
          "ref": "704c90e4-52dd-4735-9eb7-35f800fa1dd4",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8fe704c4-49d7-48b7-ad2c-24ba9c91839b"
        },
        "item": {
          "id": "ae3f961c-7121-4b11-ac8d-5680726602ee",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "067728d7-7e71-4038-8158-c01bb0084dd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c6f0e07a-db4e-41fb-949b-26cbbb8667ff",
        "cursor": {
          "ref": "39301bd2-2495-43a2-8151-c51e925af805",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0ca664ea-45b1-4b58-b680-8521e2b34211"
        },
        "item": {
          "id": "c6f0e07a-db4e-41fb-949b-26cbbb8667ff",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3d17d855-d3ee-4c30-8166-8a8cdfcda0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ee0339-1be1-4b5a-a728-80310ec11032",
        "cursor": {
          "ref": "666ebdbf-7e3a-4e37-8f05-b9a082571650",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6de036c5-5f31-40d7-a520-16ec12d80cc2"
        },
        "item": {
          "id": "07ee0339-1be1-4b5a-a728-80310ec11032",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7a529abb-d96a-49ee-9c3b-ab27ecb0ea53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6974d17c-eb13-4cc2-ba88-de50a43cadbe",
        "cursor": {
          "ref": "2b0ac512-bfdb-4e5a-995a-6b0cb08daaf3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "46502512-17a6-4ef6-8057-69432c7e47c9"
        },
        "item": {
          "id": "6974d17c-eb13-4cc2-ba88-de50a43cadbe",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "144052c2-2ca0-4829-a99a-d6b6049bfc82",
          "status": "Created",
          "code": 201,
          "responseTime": 1447,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "24c9e568-5594-4753-822b-de824a908486",
        "cursor": {
          "ref": "f730c179-5f60-4f4d-8186-5c82216732ae",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e02adad0-330f-4348-8235-a07e64a2844f"
        },
        "item": {
          "id": "24c9e568-5594-4753-822b-de824a908486",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5d7182b8-fadc-4d25-b80b-02ee203ec2cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0184fb44-f2b4-4f48-b480-94e04f8f2fe6",
        "cursor": {
          "ref": "01ae0f83-d811-4917-b25d-4ce3a07fc7e4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5327f3b2-96f8-41c2-9169-7b07f9550ad1"
        },
        "item": {
          "id": "0184fb44-f2b4-4f48-b480-94e04f8f2fe6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "eb98909b-13f9-4525-95a1-c4dd196257f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1161,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ae42c781-94f2-4449-8047-fe9cdfd6f9fa",
        "cursor": {
          "ref": "1bceafbf-c538-46be-8c3b-2c0f095a80d8",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c2153fc8-fc5f-4d53-8fd0-d78c2e35e702"
        },
        "item": {
          "id": "ae42c781-94f2-4449-8047-fe9cdfd6f9fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "48f18ea2-1b15-4fd7-8968-e621124e7ead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7ca7a871-bece-4d55-a89b-83c08a15bc8a",
        "cursor": {
          "ref": "39b2ce90-2088-4ba3-bb09-b03029334db7",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "19df3fdf-5ded-4572-8228-9bab43e9cfbd"
        },
        "item": {
          "id": "7ca7a871-bece-4d55-a89b-83c08a15bc8a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c50f0657-822b-4890-bcad-a4847bf6a350",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ef9c3a48-0367-4c35-afd0-053d41ac0cf1",
        "cursor": {
          "ref": "a13c8d6c-ea42-4a3b-8a1b-deaad099f3f9",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c268ae1-486f-4f28-ba55-42dc22706869"
        },
        "item": {
          "id": "ef9c3a48-0367-4c35-afd0-053d41ac0cf1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "309c65fe-ef68-474e-886f-2691f727407e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "242e54fd-0a5e-4608-b1f3-92d5ec1ff2cf",
        "cursor": {
          "ref": "f0b145ba-cd5f-412b-a4f4-93b8977baba9",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7c4f444f-b6cf-4cf0-b8a2-64c22602d707"
        },
        "item": {
          "id": "242e54fd-0a5e-4608-b1f3-92d5ec1ff2cf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3e6881ba-f134-482e-83ab-3783f27f7280",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9dc5235d-6a15-4187-8501-a380d3ecebad",
        "cursor": {
          "ref": "7e7df679-71f1-4255-8b33-643d8769e91a",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "83fa2373-7dce-464f-9097-a30fa270be2e"
        },
        "item": {
          "id": "9dc5235d-6a15-4187-8501-a380d3ecebad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0da27624-476f-45ec-b315-f93c33278101",
          "status": "Created",
          "code": 201,
          "responseTime": 1457,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "91cdd302-b2c6-4d5d-90dd-f8ae99a7d8a5",
        "cursor": {
          "ref": "ced44fb2-5c97-4f79-8f66-1a1aa54c5ab4",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "502632c7-908a-47ea-b6f5-0853db9770f4"
        },
        "item": {
          "id": "91cdd302-b2c6-4d5d-90dd-f8ae99a7d8a5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eadc175a-b9b1-4fd2-bddc-73bae04adb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb16ca02-c42c-4074-9b31-316cd9f2fd4d",
        "cursor": {
          "ref": "5dfe5fc5-1f12-4955-83e0-c480d7f05090",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9e82e740-fa45-44c9-a871-6ea13ff46491"
        },
        "item": {
          "id": "eb16ca02-c42c-4074-9b31-316cd9f2fd4d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee5a086c-350c-4c9c-ab1f-e63a133b7712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a85148-b8ba-4145-aa81-7cb8a323b70d",
        "cursor": {
          "ref": "c4f6d619-4d9f-4d03-8a7a-c1a768e4a537",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d264cddd-7ff4-444b-9ec7-aa28fe8a64e4"
        },
        "item": {
          "id": "68a85148-b8ba-4145-aa81-7cb8a323b70d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ff6cc5a6-1be4-42db-a7fc-f01fe77b6347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652fb737-1c7d-42f7-95fc-f7bc749e78a0",
        "cursor": {
          "ref": "09d0bdf4-8fa8-479b-b2bb-db5d1be17de2",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c8d5e522-4ba4-4bec-b1b7-4f47c107b24d"
        },
        "item": {
          "id": "652fb737-1c7d-42f7-95fc-f7bc749e78a0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cb02e926-d4f4-4a06-a109-a8d2a246e5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fab1d9-c46a-4971-8d64-d41b3f3252f2",
        "cursor": {
          "ref": "a0375041-8c34-4531-adeb-38be247b8d63",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5fec8f7f-88be-4bfe-96d3-61edfa3cf100"
        },
        "item": {
          "id": "09fab1d9-c46a-4971-8d64-d41b3f3252f2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4a84a328-237e-464e-8bb4-e5c1356197ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6b9416-cf3d-4422-8c9b-0d8d000e97c8",
        "cursor": {
          "ref": "393f0d1f-b162-4e12-ae4f-b00fea809c35",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8079c842-c1fa-44d5-b83e-bcf11b6faf7a"
        },
        "item": {
          "id": "ed6b9416-cf3d-4422-8c9b-0d8d000e97c8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a99364fa-0ac2-4f0b-aca3-f5389103e4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6560a901-0541-4769-90bb-c24d791bbc5b",
        "cursor": {
          "ref": "0cb07882-723e-45b5-8d87-9830731ac684",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "df96b6e1-4588-4ef6-a7e1-66a66e9bbabd"
        },
        "item": {
          "id": "6560a901-0541-4769-90bb-c24d791bbc5b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7b6efee1-9405-48af-b7f8-9b055dd0118f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b661c8-6a08-45c3-b0da-45cf8eac346c",
        "cursor": {
          "ref": "d9fd711c-10ca-4ba8-80cc-4a5d4a136cd1",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "988cba14-b190-4cce-91e2-c1d534deb671"
        },
        "item": {
          "id": "75b661c8-6a08-45c3-b0da-45cf8eac346c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "01b947b2-da0e-4a06-8e55-4f8d8ad71db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee3a831-ad34-414f-b97f-f150b01cbcab",
        "cursor": {
          "ref": "d5bba1a7-0658-4d38-8146-0fd27da176c9",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "01737698-3aaa-4b52-9ec1-a6b7687d0a83"
        },
        "item": {
          "id": "3ee3a831-ad34-414f-b97f-f150b01cbcab",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d8128c63-bd62-4255-b9c4-2b06d72827a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c9b4ef-942b-4e22-a809-dd705b3246cf",
        "cursor": {
          "ref": "82151083-6832-4d36-85c2-9226a199f8b6",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "366f4681-bd0d-4c2c-9ccc-1b6063b1bba9"
        },
        "item": {
          "id": "23c9b4ef-942b-4e22-a809-dd705b3246cf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "75e2dad5-ce5b-43c5-8d6d-17933e4266d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc73a4f8-b81b-4669-8649-af84f87f423a",
        "cursor": {
          "ref": "27b2926e-af85-4ba9-899f-c41504d4e44d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "27aede53-10e3-4008-9fcd-e7a46c3a415b"
        },
        "item": {
          "id": "dc73a4f8-b81b-4669-8649-af84f87f423a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6dbb14be-e67b-40ac-af80-e324587a23c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc4f8c7-38d0-45ad-a79f-1e7161045f82",
        "cursor": {
          "ref": "5a7754db-8e9c-4984-9551-9e5e6c99c6ca",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36e5bfb8-d21e-489d-a52b-0832ec98f2f8"
        },
        "item": {
          "id": "edc4f8c7-38d0-45ad-a79f-1e7161045f82",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "537f58d2-af7e-431c-be40-1a7ea2840944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e287ac-cc8f-4c7f-8a84-7cbf253aca2b",
        "cursor": {
          "ref": "79162951-ddee-4a8d-8c98-0550ed3d07f3",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76039508-1458-4ab5-89c4-d3e26ddb569f"
        },
        "item": {
          "id": "91e287ac-cc8f-4c7f-8a84-7cbf253aca2b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a5b00970-62af-4799-9397-9a255227204d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6696a4bf-8370-4f1c-aced-ef004406eba1",
        "cursor": {
          "ref": "5f1072b3-51bc-4431-9c96-2a4c0a667fbd",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a3b8b090-65e5-433c-8f73-b1fd01c97ba7"
        },
        "item": {
          "id": "6696a4bf-8370-4f1c-aced-ef004406eba1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "14ea4174-f1cf-427e-96e4-c9607d11ba47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1203,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "cf21669d-4ec8-4684-9d92-79b3195e7362",
        "cursor": {
          "ref": "6739df8e-84e0-4fce-b421-5e47244d7fbe",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b8ca095f-9fe7-4fdd-a61a-dab9fa472047"
        },
        "item": {
          "id": "cf21669d-4ec8-4684-9d92-79b3195e7362",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4412424c-6a8f-4cc9-83a0-30504a230372",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1221,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7135978f-d706-4147-a5c2-55489c7c94ff",
        "cursor": {
          "ref": "a5295d74-cb36-48bd-9378-a25d5bcdfcf4",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7ba2d91c-be3a-4958-9c6a-0f1a6ca55606"
        },
        "item": {
          "id": "7135978f-d706-4147-a5c2-55489c7c94ff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e589f8a8-5f6c-42a4-bc97-ffeb7023df5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "181c5f69-7e2a-4c56-9718-cb2f9a7d2e08",
        "cursor": {
          "ref": "184d3fd4-c796-4995-9730-b4dc9a578061",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7a7e2134-5955-4541-ac5e-2a659fc072ee"
        },
        "item": {
          "id": "181c5f69-7e2a-4c56-9718-cb2f9a7d2e08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f8325009-0775-4c7a-abf0-8ce745dfe21a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1202,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5c0a5c23-afdc-44f0-a48b-cb70da0624f3",
        "cursor": {
          "ref": "aeb9e8ef-6568-46f5-a9d5-4a13421cc22f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "96d981d6-a416-4af8-ab17-bbc44cb72cf3"
        },
        "item": {
          "id": "5c0a5c23-afdc-44f0-a48b-cb70da0624f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c80fd70a-fde9-45ab-82c8-cd8c04171ab6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "68fd4508-e842-4463-8fe8-4bc9b3fab543",
        "cursor": {
          "ref": "316715db-6a9c-4fe4-bc82-dfe2958ac43f",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8dc1aa1c-4878-4c89-bdfb-f26ef7b75f75"
        },
        "item": {
          "id": "68fd4508-e842-4463-8fe8-4bc9b3fab543",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4fbb53ca-e162-48cd-be6f-f47ba238277d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91b0d7e-c875-4343-8bb9-a0c079176684",
        "cursor": {
          "ref": "1f353529-327b-4eca-bb8e-f928112048c0",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a4bc2537-e98c-446a-9b59-a5eacce69900"
        },
        "item": {
          "id": "a91b0d7e-c875-4343-8bb9-a0c079176684",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b588925f-c663-41a5-bca6-3c10ff8d586f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cfa6aa-4199-4d30-83c4-2416c0838008",
        "cursor": {
          "ref": "e4fc73c8-6ec0-41d5-83f5-84576fa3bf34",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c9feaf13-46b2-4020-9b27-bbf9fe4fca64"
        },
        "item": {
          "id": "99cfa6aa-4199-4d30-83c4-2416c0838008",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2fd75259-ea86-43db-96e6-487d58de6058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d212e60-ffbc-4f30-9659-a3d62112361f",
        "cursor": {
          "ref": "38668523-0c5f-4f5f-9f12-b66626e134e0",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6758122f-43fc-4044-a527-4db8205ad406"
        },
        "item": {
          "id": "7d212e60-ffbc-4f30-9659-a3d62112361f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7411bf5f-ff23-47a7-b054-c1eddbf07d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7a6ad9-41dd-4363-a4b5-8455816b745e",
        "cursor": {
          "ref": "2516195c-565f-4607-aedc-596a74f1bb28",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bade58ad-2f18-4e4b-b422-6c310ac67da3"
        },
        "item": {
          "id": "0f7a6ad9-41dd-4363-a4b5-8455816b745e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7917caaf-475b-43eb-b196-a2fecd2ab78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088a2653-ced1-4a68-a316-bd30aeebd5bb",
        "cursor": {
          "ref": "487395a3-0837-4a74-ac41-fe4c3dc0a852",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11809a76-f87c-4909-9287-c3ec52cdb3c8"
        },
        "item": {
          "id": "088a2653-ced1-4a68-a316-bd30aeebd5bb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dc38614f-bfe0-4936-a4c9-9aacec65a3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c431a292-74bf-426c-8553-dc1a28af1c69",
        "cursor": {
          "ref": "21c6d4b9-68f7-40a2-a4a3-9a3e82822be0",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4d2dca07-0654-4378-9320-c75fe98f155e"
        },
        "item": {
          "id": "c431a292-74bf-426c-8553-dc1a28af1c69",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8e3c8a26-51a4-420e-a0ea-b72342b3c1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf67e22-7c6c-4006-82d3-725254d7e559",
        "cursor": {
          "ref": "384c35f1-e8af-4ac7-9246-fb34efee259b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "90484a32-82b9-42ad-96de-1d2e736666b0"
        },
        "item": {
          "id": "1cf67e22-7c6c-4006-82d3-725254d7e559",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e4db6b43-f112-48e4-aa3b-83a827060737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6028774-1898-4fbb-8a50-4105675087cc",
        "cursor": {
          "ref": "781d27c9-ec6b-42df-bf5f-29265c80ce67",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "372b24a2-3e27-4160-8780-44b7d4a482aa"
        },
        "item": {
          "id": "a6028774-1898-4fbb-8a50-4105675087cc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "490f35c0-f5b9-406b-9593-574796c936b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446753b0-1eec-494f-a5a6-674dd8cdd13f",
        "cursor": {
          "ref": "cdfe6847-b35e-4fe0-8cdf-ebe2651e647a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5a0b3fd2-9d75-45ac-b315-bffbde27466c"
        },
        "item": {
          "id": "446753b0-1eec-494f-a5a6-674dd8cdd13f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "11d76dde-a300-41ce-bb7c-c74aee2bf4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924721a1-a8af-479e-a1e3-88eba82d8a2b",
        "cursor": {
          "ref": "48e16c1e-ee07-48b0-a9ae-e887df4ce5c6",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8f3d8088-39f7-4dbc-a28e-22086b8e5997"
        },
        "item": {
          "id": "924721a1-a8af-479e-a1e3-88eba82d8a2b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5e319ce8-d4ad-44ce-97cd-1578ee4a308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17583036-9167-46e1-87cc-6162348da2c1",
        "cursor": {
          "ref": "73199afa-7a70-4953-8480-bb9fa307ecde",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3954dfc5-6f7f-4e3f-b585-e7d1a8c9dae4"
        },
        "item": {
          "id": "17583036-9167-46e1-87cc-6162348da2c1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "942e7a86-0729-4079-ae1d-cb5372fa271a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a79a896-79e1-4052-9b3a-0f9d381923c9",
        "cursor": {
          "ref": "e6902070-f397-4917-b398-aa60bc61ff77",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c125c61d-1984-4321-815a-133157dcd670"
        },
        "item": {
          "id": "5a79a896-79e1-4052-9b3a-0f9d381923c9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d4b959bb-4bdf-490d-8881-8dcc3072b583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c860aa-aaef-4198-8ca9-e0847d697e53",
        "cursor": {
          "ref": "496ec752-d90d-4ea9-8da4-1eba1d9ffba3",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "372eb23b-a226-415a-830d-a2081efecdc7"
        },
        "item": {
          "id": "96c860aa-aaef-4198-8ca9-e0847d697e53",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7f737186-9362-4cde-9814-1d8ddaad2c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13e57d6-298e-41e6-b755-b2756a89c5c0",
        "cursor": {
          "ref": "0002b52f-d56b-4fd1-9906-9aa6b35e3cce",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "37e23fe3-af7c-49f5-b247-24f9821dfba9"
        },
        "item": {
          "id": "c13e57d6-298e-41e6-b755-b2756a89c5c0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4f74eafa-e66e-4660-8517-1892a05b9e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ee7d93-cb67-4c8d-9046-c920db125751",
        "cursor": {
          "ref": "3326853d-bd4a-4e50-b8eb-a68cb96f5aee",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fd4df4ce-b4fa-450f-80e7-0dbed97ea912"
        },
        "item": {
          "id": "a2ee7d93-cb67-4c8d-9046-c920db125751",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3dd056e3-ca10-47c9-a2f6-7ee15216f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3007bf-c4c7-4ff9-a53e-7c1b7ec326be",
        "cursor": {
          "ref": "77f64fad-1e4d-4ea1-9de3-27b546c25884",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ea26836a-e9e5-410e-90cb-2904af5903dd"
        },
        "item": {
          "id": "3e3007bf-c4c7-4ff9-a53e-7c1b7ec326be",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "49786779-5884-4e82-aed7-8e27d2b34b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b9305b-08ec-411d-8ac9-e6cf3e25bf50",
        "cursor": {
          "ref": "c1896d45-f29f-4da0-983e-9279cd2c24ef",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7a969194-61e0-4643-82ec-f5166a5d597e"
        },
        "item": {
          "id": "09b9305b-08ec-411d-8ac9-e6cf3e25bf50",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "36467084-3d8b-42ac-8fd8-4c0c14cad94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adac77a0-5d80-435b-96d7-423d41334d86",
        "cursor": {
          "ref": "14f14c91-a28c-4aae-8869-fa816f36cca2",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c592791-fec3-44bd-bd22-41d9aa202387"
        },
        "item": {
          "id": "adac77a0-5d80-435b-96d7-423d41334d86",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "201bbbea-83cb-49aa-9121-3713d8655571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd56449a-c53f-443f-b639-03ea94b98157",
        "cursor": {
          "ref": "82d06a74-1fe8-4ea5-a939-d724a05eb20c",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fab71e56-8170-4dc6-9522-97e752bd98cb"
        },
        "item": {
          "id": "cd56449a-c53f-443f-b639-03ea94b98157",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "296cffb5-2e24-4fb3-b828-0ff75b0d554d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dfd0a9-4d4c-413e-bf9d-e75491317fbc",
        "cursor": {
          "ref": "43bf72f6-8223-43ab-a821-946f50dcfacd",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "195913c1-6386-48b5-b6cb-e77d12ffd95c"
        },
        "item": {
          "id": "81dfd0a9-4d4c-413e-bf9d-e75491317fbc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "564bae93-1f54-424d-98c7-1b3e5e5aa013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355bed6e-c6f6-4ba2-a1e2-a6316667cb94",
        "cursor": {
          "ref": "ea00b355-505d-44dd-a966-14d846e4cfcf",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f3095ac0-29e8-45f2-a4c2-ec6101a8c4c0"
        },
        "item": {
          "id": "355bed6e-c6f6-4ba2-a1e2-a6316667cb94",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "87f217fe-9b81-445e-a96e-caeaaacd1362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26b827a-9a81-440e-bd61-567590da5cd0",
        "cursor": {
          "ref": "e9eb8403-7843-40fc-9a06-b75fb2a48c5e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5ea883b4-4efa-4960-bef7-3c1314ce6fe7"
        },
        "item": {
          "id": "b26b827a-9a81-440e-bd61-567590da5cd0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "da70fa4e-b0cc-40b6-84ca-d20231a15be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb1e908-19e6-47a2-8693-ee84176bae45",
        "cursor": {
          "ref": "0a96a682-a1c3-4b42-8d3a-d9f041e9a907",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2c069a94-6486-4474-b9ce-3d5f44f62146"
        },
        "item": {
          "id": "8bb1e908-19e6-47a2-8693-ee84176bae45",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e07d6935-966e-4304-b997-07904144e423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5cd84b-a143-4c3c-9170-6aab76c8ad9b",
        "cursor": {
          "ref": "14915be9-c3b8-49b8-80a4-7331683262fd",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "850f99ea-d0fc-4c00-b28d-7acbf636af69"
        },
        "item": {
          "id": "ba5cd84b-a143-4c3c-9170-6aab76c8ad9b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "245adc76-1abe-469a-b1e3-c2e3083e79af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7088b452-f1d9-4110-beac-2cc668500aa0",
        "cursor": {
          "ref": "91a15062-1dde-43a4-a485-010c69f78a10",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ebd8a52e-72fa-467f-9ee7-583616432bff"
        },
        "item": {
          "id": "7088b452-f1d9-4110-beac-2cc668500aa0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d3fe7ffd-773a-47ea-8a92-46cac7f54bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b9d564-cdc0-41f8-ba36-79c54146670f",
        "cursor": {
          "ref": "9e33cc20-2333-4d2c-a583-6664ed7cdaf7",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e2e9ec7a-cad0-454d-a707-34b5977770ce"
        },
        "item": {
          "id": "63b9d564-cdc0-41f8-ba36-79c54146670f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "255824c8-7068-48e7-a960-2d82b5d4b31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa58aa3-3c7c-4237-b574-eed91de6a985",
        "cursor": {
          "ref": "b1056e0a-92e5-40ac-b4e1-645677b6b44d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0fc96905-229d-462d-b19a-8df6cd3cad1a"
        },
        "item": {
          "id": "2aa58aa3-3c7c-4237-b574-eed91de6a985",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9cb1692c-9477-4167-9a8b-d8591953408f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226ac472-0545-406d-b06d-a0ee460b9eac",
        "cursor": {
          "ref": "49cc8b20-74e6-48f1-9375-d9d98837c30d",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "70a43197-5784-4813-863d-77bc8f3c322c"
        },
        "item": {
          "id": "226ac472-0545-406d-b06d-a0ee460b9eac",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4f0ca951-c861-4053-a673-538fab4f5ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b101e6f-2b12-40e6-9901-816a4ed34a53",
        "cursor": {
          "ref": "05fb0a30-d6d7-4889-af51-63d4d0b1866a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9c171a9-f2e1-437e-ad21-d04620086be5"
        },
        "item": {
          "id": "2b101e6f-2b12-40e6-9901-816a4ed34a53",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0b6e8b1c-d5cc-46a8-98d3-ac5fc8770465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d649351f-a2bc-4e96-903e-2e2b1d857425",
        "cursor": {
          "ref": "cdc635a8-840f-4184-8477-4c2aa98711a3",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b96299d9-bc37-460c-b903-7a3da6701068"
        },
        "item": {
          "id": "d649351f-a2bc-4e96-903e-2e2b1d857425",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2eac073c-d8cf-4af8-b3ff-fa3875667777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc9e6c7-3a9a-4048-9e13-2d54f1cf3f78",
        "cursor": {
          "ref": "1b2f5c0b-b63d-4c95-b430-3b23f45cce7b",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "967a0b0b-d0f0-47b5-beff-a192be408ed6"
        },
        "item": {
          "id": "3fc9e6c7-3a9a-4048-9e13-2d54f1cf3f78",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "301bbb6b-01f3-4876-9fdf-58945138ef0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f64cf7e-5590-431b-bae6-c43c643accdf",
        "cursor": {
          "ref": "6c8e81a6-69e4-44f9-904c-5109551be8b3",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6e35b5c9-40cc-4207-844a-504c7e48ad26"
        },
        "item": {
          "id": "1f64cf7e-5590-431b-bae6-c43c643accdf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "393a64d4-da2f-4060-9f68-1c4259bff1c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1582,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "df386e4b-d359-4f53-9324-3e539c342761",
        "cursor": {
          "ref": "de3e21ea-4f60-4c60-aee8-a8f90dbb0041",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f82d712e-1d25-45b1-a9b7-0fe16118a3b5"
        },
        "item": {
          "id": "df386e4b-d359-4f53-9324-3e539c342761",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a56c1c32-063f-4674-8483-230b6f49e8f8",
          "status": "Created",
          "code": 201,
          "responseTime": 1441,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4dc92d-5ba5-4180-86e3-180b4b2cb0d8",
        "cursor": {
          "ref": "0576fabe-e2f3-41d9-8b1f-28d78dd81590",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "76e2b57a-8c1e-4659-b9fa-249d5e298f13"
        },
        "item": {
          "id": "eb4dc92d-5ba5-4180-86e3-180b4b2cb0d8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "79922e55-374e-45c5-9012-3bc0fee99a0f",
          "status": "Created",
          "code": 201,
          "responseTime": 1383,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb33e9c-10e9-4eac-a713-d6874701419d",
        "cursor": {
          "ref": "884aa72b-6722-4dd3-8989-3f3def3a45e6",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8fe78ff5-b869-40a7-b52b-2e72f20bb64c"
        },
        "item": {
          "id": "ecb33e9c-10e9-4eac-a713-d6874701419d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b24dec9f-3b67-42c2-a175-8f6186b38643",
          "status": "Created",
          "code": 201,
          "responseTime": 1474,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fddb20c-cc44-45bf-b166-16a23b1f42a9",
        "cursor": {
          "ref": "01fcd26c-5a4f-49dd-955f-f8013e25471d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "06695fbc-3d12-45df-a606-fa035e2e5b4b"
        },
        "item": {
          "id": "5fddb20c-cc44-45bf-b166-16a23b1f42a9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e76a8c06-ff7b-41b8-8bb4-74472eea3098",
          "status": "Created",
          "code": 201,
          "responseTime": 1473,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "45862f27-39b9-47a9-be2a-d7dd0654ed30",
        "cursor": {
          "ref": "54dbf96f-fbb8-4459-b350-cb3cbf94a901",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "56083517-5c2d-4ced-85a4-7aab80fb0b3f"
        },
        "item": {
          "id": "45862f27-39b9-47a9-be2a-d7dd0654ed30",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fe648722-6aa1-48d0-9415-335140f729bd",
          "status": "Created",
          "code": 201,
          "responseTime": 1509,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b3f286-6e69-46dc-9bc6-958aeaeccae5",
        "cursor": {
          "ref": "e4e2d860-bb5e-4071-9b7d-d873cdbcc247",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "26f069f3-9035-4b96-8f90-a7730a7c41d2"
        },
        "item": {
          "id": "98b3f286-6e69-46dc-9bc6-958aeaeccae5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a756cec7-1a32-4d61-9d98-d80675cbb93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e71b61-745c-42a5-8503-44bd217dbc71",
        "cursor": {
          "ref": "a90ca6b4-dd9a-4553-ae47-2678f978a9e2",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8470d7c9-67b5-4419-aecd-8c914417df44"
        },
        "item": {
          "id": "d9e71b61-745c-42a5-8503-44bd217dbc71",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eaf3105d-adfe-454c-ba8c-7599ab6a3039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73823b4c-800f-4f23-91a8-42d31facb176",
        "cursor": {
          "ref": "86be1a86-aedf-48f2-8365-3ee23701b8e5",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "51de2c65-ff32-4477-8686-c00f4f10a00a"
        },
        "item": {
          "id": "73823b4c-800f-4f23-91a8-42d31facb176",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "27f4c61c-9a95-4d1b-a0fc-2004b43ee105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a393181d-88a4-49dc-a1bc-6e0891e76d91",
        "cursor": {
          "ref": "63a1175f-e7db-4520-b243-ea626e69ff47",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "769f850a-7d8e-483f-89d7-10a4a957271d"
        },
        "item": {
          "id": "a393181d-88a4-49dc-a1bc-6e0891e76d91",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cf44cc9-896e-4268-a53e-ebbd183dabbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359ad63f-d212-4860-b757-086587387d3d",
        "cursor": {
          "ref": "c7182603-bffe-41b1-a773-3728974f05e8",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a7a1e454-3f69-485b-b30c-a19616787d84"
        },
        "item": {
          "id": "359ad63f-d212-4860-b757-086587387d3d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "63d053c8-0279-4c5b-b260-91b5abaa5143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590b9d2d-ab14-4448-94fd-32b9be2cb912",
        "cursor": {
          "ref": "8a9b318a-ab4e-471c-a3d9-414719a9dded",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4b9d99c0-e76c-4528-b25d-43f447d32d1e"
        },
        "item": {
          "id": "590b9d2d-ab14-4448-94fd-32b9be2cb912",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4cfa10c9-3186-4392-9382-d3d865c7c56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59be0630-2e2e-463d-898c-fdde1d5b66c6",
        "cursor": {
          "ref": "44b89533-2a1a-489d-a061-7ecab2737191",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c9d00fe6-9376-466a-afcf-a96e17109836"
        },
        "item": {
          "id": "59be0630-2e2e-463d-898c-fdde1d5b66c6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8d4ff2d5-696b-47ec-a094-f0f10c966b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c627db-bab3-4bd1-a0f8-ddc1f394751e",
        "cursor": {
          "ref": "705a9d95-8a9c-4e91-8402-243a369c75c7",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bf76e282-852d-4bf7-a90f-20fbebc728d1"
        },
        "item": {
          "id": "a9c627db-bab3-4bd1-a0f8-ddc1f394751e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8a40c9c9-891c-4780-b5a1-41fea4da559f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603b7142-97c8-4077-9a0a-2ea4e951d6c9",
        "cursor": {
          "ref": "e0859fd5-7bf6-4702-8cbd-9586fa464e9d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "148e330d-19fd-4deb-b7c0-e0f68060f0e6"
        },
        "item": {
          "id": "603b7142-97c8-4077-9a0a-2ea4e951d6c9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a11e5596-61e0-4298-886d-7f9b56cb80f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe78894-b655-4f37-9455-0205f9468f99",
        "cursor": {
          "ref": "fad06298-87bd-41d9-8df1-4568bf7ffb00",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e28685a5-cea6-4279-942b-905a77e5ddc3"
        },
        "item": {
          "id": "abe78894-b655-4f37-9455-0205f9468f99",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "304a1932-71ca-4a61-8e2c-748369ec61c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b3627e-bbb9-4322-a7a0-1a883141bd12",
        "cursor": {
          "ref": "63ee7465-abf9-487c-bc6c-c7526b3043a5",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8571056a-7b92-4ac2-b506-d1823a086368"
        },
        "item": {
          "id": "a5b3627e-bbb9-4322-a7a0-1a883141bd12",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f160fcc8-fc3c-4a8a-81a1-7fa460cbed2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1599051d-0f6d-4299-8c72-c1a6351dae5e",
        "cursor": {
          "ref": "2443823a-a627-41e2-afd2-5d7828a82381",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fcf50136-aaa6-4f56-b694-906a264b4b38"
        },
        "item": {
          "id": "1599051d-0f6d-4299-8c72-c1a6351dae5e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "78301869-7982-4ea6-921e-6c4e828dbbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444f9634-a778-44a8-9d15-ee29b5a0e76e",
        "cursor": {
          "ref": "82b914b9-2d6f-4815-80cb-140bee0dcd6e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e736eccd-4306-40ee-a6b2-4ac6632d2675"
        },
        "item": {
          "id": "444f9634-a778-44a8-9d15-ee29b5a0e76e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2405113f-f252-4f91-9b12-5ebd6d1cc80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385f33ab-70a4-4ebc-a511-9064e138bfad",
        "cursor": {
          "ref": "c941dfe5-4dd0-4b03-849c-250124df2268",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e5cb9729-72fa-4bc9-b45a-5696a6bb8690"
        },
        "item": {
          "id": "385f33ab-70a4-4ebc-a511-9064e138bfad",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "687873cd-ec71-4949-b55d-a72f2b626af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913557c5-8ae5-46d1-a550-7b1cef120b29",
        "cursor": {
          "ref": "6e536188-0fb8-469c-95ab-2907bc047025",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f1b93c34-6612-454c-aa4a-316dbf4c1795"
        },
        "item": {
          "id": "913557c5-8ae5-46d1-a550-7b1cef120b29",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1eb1f0c6-bcbc-46b3-b92d-f1ee26e8b188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7ffb89-d3e3-4a55-b55e-429cbae32a94",
        "cursor": {
          "ref": "aa87b0d7-611a-4405-b7a3-339aec9b7a56",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bfb85730-7a53-471a-9b15-3131fbec43c8"
        },
        "item": {
          "id": "ce7ffb89-d3e3-4a55-b55e-429cbae32a94",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6ee28664-e179-4f94-a869-5caa7105077b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd9b7a6-c972-48da-900d-7a17a33dc979",
        "cursor": {
          "ref": "f324e9a8-2942-478a-be25-d557aad91b60",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5cab2193-2f6d-4daf-8fee-bb9c79e5cd2f"
        },
        "item": {
          "id": "abd9b7a6-c972-48da-900d-7a17a33dc979",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6b5d4611-2493-4e5c-8b84-a74e4be02e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad025b-3484-423f-821e-6de7ef718b4e",
        "cursor": {
          "ref": "87b4e90c-8b98-402e-a9e7-964138b12ae2",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "62285ba8-99f6-4fa5-98f4-17e846459742"
        },
        "item": {
          "id": "8dad025b-3484-423f-821e-6de7ef718b4e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9d0a25cc-d96e-4d2c-a846-1b2ba9aef209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe2104b-6a08-49b8-a948-ba62e3f894f6",
        "cursor": {
          "ref": "a8afa220-11c8-450d-bb1e-a045f50e4588",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5c47561a-b416-4430-ac01-12a0e2234eb1"
        },
        "item": {
          "id": "efe2104b-6a08-49b8-a948-ba62e3f894f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4634b376-882a-41f1-ba8d-28091ab1b37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13af5862-48ef-4416-8570-012064af7855",
        "cursor": {
          "ref": "a8d44e0a-a564-4c53-822d-c7fbee58d9ff",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "21a75347-1cc4-4471-8561-71f03db43bce"
        },
        "item": {
          "id": "13af5862-48ef-4416-8570-012064af7855",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7db64b30-d770-416c-b45c-208bf7710b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54386afe-6ba5-4df1-80f2-0b48b81465b2",
        "cursor": {
          "ref": "dbd365f7-263f-4833-af2c-769e9818e67d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38809478-31ad-442e-b113-e646d0c82deb"
        },
        "item": {
          "id": "54386afe-6ba5-4df1-80f2-0b48b81465b2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "051f62c8-ddf3-4ce5-bdb0-760d73a2f3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e226e57-de56-4ea5-b45f-8a24da607c33",
        "cursor": {
          "ref": "37f996c6-b914-41fa-96d1-8ada2f681cb5",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d07e9fe3-4e80-467e-b97d-9db9453cd64d"
        },
        "item": {
          "id": "2e226e57-de56-4ea5-b45f-8a24da607c33",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4f11ae5d-4f75-434e-a29a-8b146255f910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b48ea59-8b5f-4216-9b73-de3c8868c5c0",
        "cursor": {
          "ref": "a6111e79-04a0-42e9-a9d7-5ea521f02610",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1ebf3877-bc77-4a96-bf52-1ce0169b3ca8"
        },
        "item": {
          "id": "3b48ea59-8b5f-4216-9b73-de3c8868c5c0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d2c87b2b-606e-4555-81af-45b8f13651e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e570208c-b7e8-4b2d-b1bd-a51e7974c52d",
        "cursor": {
          "ref": "b8c7905f-0b7a-4b12-8cf7-2dab6db9f87a",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "313ba46e-6ef3-4eb8-99bc-6d1795a1bb8d"
        },
        "item": {
          "id": "e570208c-b7e8-4b2d-b1bd-a51e7974c52d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8c3f6463-d482-4bcf-8ec2-58f401c2a78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51de703f-4729-49fc-9fcc-c570c6c2cb35",
        "cursor": {
          "ref": "01d4371a-2277-4d23-b92d-9295a992655c",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ac2a2f0f-49ab-41fc-b7a7-587898ef1cdb"
        },
        "item": {
          "id": "51de703f-4729-49fc-9fcc-c570c6c2cb35",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4ad652e8-ecee-482a-99ac-7ebf26731fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0cf17c-2265-4e77-8f61-b3a19f0ce787",
        "cursor": {
          "ref": "4591a63b-0581-44b0-8e18-af5d717d8e34",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c6a10479-bdd4-4012-ac8e-79f89c8269d7"
        },
        "item": {
          "id": "ff0cf17c-2265-4e77-8f61-b3a19f0ce787",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "78d74721-7222-4d0d-8796-ced1bce8807f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5ebe05-0b6c-4b92-84c9-a16720e0e61c",
        "cursor": {
          "ref": "72fbb796-56ef-4589-8e09-47a58a7ae619",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8f7c84ce-4c44-41a7-bcb9-a337b3712c55"
        },
        "item": {
          "id": "de5ebe05-0b6c-4b92-84c9-a16720e0e61c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6368dbd1-f85b-4cf5-a133-2e41f2d2e27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c1719b-3928-4b03-a93a-82ede7d0e16c",
        "cursor": {
          "ref": "cdf37aff-c405-49fe-9b32-bbf0055714fb",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c351ab93-a30a-47d8-aa78-b22fe9f4f549"
        },
        "item": {
          "id": "26c1719b-3928-4b03-a93a-82ede7d0e16c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "092d4c9d-0f6a-4ca3-881a-7816803c7895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7522b8-45fb-420e-ba34-ee8d7ed87763",
        "cursor": {
          "ref": "4c9306c4-fe1b-4bc9-88bb-6ed864fd6405",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5a696f5c-feb1-4f9a-bb6c-c0f180a04f68"
        },
        "item": {
          "id": "9f7522b8-45fb-420e-ba34-ee8d7ed87763",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24462f81-70f8-42a2-ba6f-c09e33b02533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d86285-7956-4aa9-a019-919fa1994526",
        "cursor": {
          "ref": "df3145de-4b0f-4a21-8068-7bc92040ba54",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2177d368-3818-4237-a19e-e2fbab5e84bc"
        },
        "item": {
          "id": "14d86285-7956-4aa9-a019-919fa1994526",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "60656a06-fa50-48ce-9d25-49101006dd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95a3a38-2efe-4c49-aed0-0778dbb1cd15",
        "cursor": {
          "ref": "f311ee6e-3e5d-4e49-bb96-34d07e46cbe7",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cb10a1b-0276-40b0-9e25-84d6f16edfac"
        },
        "item": {
          "id": "a95a3a38-2efe-4c49-aed0-0778dbb1cd15",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2f072d56-4072-4b2c-9c4d-030264b01088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d65f4f-4d53-4f12-b5da-83ab8ed75bc2",
        "cursor": {
          "ref": "120251b9-f239-4b67-b16d-cb2d5c489ca3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5370b47f-f65c-4cfd-953f-931a48b99ad7"
        },
        "item": {
          "id": "c0d65f4f-4d53-4f12-b5da-83ab8ed75bc2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "878e28bf-5968-408f-887e-812c753af123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e3335b-2aac-4739-bb44-85d3ed298101",
        "cursor": {
          "ref": "a53d38b4-f6a2-4783-8c0e-85ebc76f5fd2",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "176edd21-da2c-4562-985f-568beb0db5b8"
        },
        "item": {
          "id": "74e3335b-2aac-4739-bb44-85d3ed298101",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "34cd1c84-bf61-4c35-9518-aff4d90fc185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac3981c-966b-444f-b4a1-08d76cfc272e",
        "cursor": {
          "ref": "3f80f2a9-801d-4010-8e75-5dec2dcf4d32",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "85217152-1b71-4c1d-aa58-9054fa94c637"
        },
        "item": {
          "id": "8ac3981c-966b-444f-b4a1-08d76cfc272e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e13aa84d-0da4-4473-83c4-ec03257dbcbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9895d1-a167-4268-98a6-36dfb971f2d7",
        "cursor": {
          "ref": "33da601b-98d8-4913-b2c3-c9c4fbc317b1",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "433817b1-3b4b-42fc-a486-d79168900872"
        },
        "item": {
          "id": "bf9895d1-a167-4268-98a6-36dfb971f2d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9012d1b3-8e74-4754-ae33-62a5e17a9287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866b8af0-eef9-4d53-a573-d62108d330d3",
        "cursor": {
          "ref": "95f2856d-e52f-4b46-b93d-a5bf170b4bf3",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ab569bb9-925c-4dc4-89b5-c17eb9e2e139"
        },
        "item": {
          "id": "866b8af0-eef9-4d53-a573-d62108d330d3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "96120c88-1e2b-4ec2-ba4d-430561914b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712ae716-f1a7-4b1e-80cf-6de078d04436",
        "cursor": {
          "ref": "0846246e-9f5a-4248-971d-e0c8899a924c",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ae6643cf-e538-4642-b9b7-c5770d9278b5"
        },
        "item": {
          "id": "712ae716-f1a7-4b1e-80cf-6de078d04436",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4520eb45-cde4-4c60-917d-05e298ea429a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d273c4d9-e797-4618-8552-3b58a9a3ce00",
        "cursor": {
          "ref": "90d660b9-b370-4d53-a7a3-cdd922ab7fdb",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f4d3d23b-77fe-4ee0-973f-794ad7aeef9c"
        },
        "item": {
          "id": "d273c4d9-e797-4618-8552-3b58a9a3ce00",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "be22c262-3965-47f4-bdca-3ee2deec701b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe3d525-736f-431a-b1b8-1f08722dd9b5",
        "cursor": {
          "ref": "a0324003-b496-4500-ba78-21ddaeeb0444",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "30bb64f4-681a-47ee-b5a2-577267e9cbbd"
        },
        "item": {
          "id": "abe3d525-736f-431a-b1b8-1f08722dd9b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cc825968-46cd-4d7f-bfe4-c41824518124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e78786-b44c-4afd-94b9-74ee35b6ac39",
        "cursor": {
          "ref": "b5f9a817-7ea2-443b-bf27-596a6f5ca7c5",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4af58e33-f07c-4ff8-a731-a006db431f29"
        },
        "item": {
          "id": "e7e78786-b44c-4afd-94b9-74ee35b6ac39",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ab2cba88-8a49-4cf8-b588-adab595e9dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e55470-3a90-4fa5-a314-02ab78b020c9",
        "cursor": {
          "ref": "0bd65f2a-7ff4-4d43-aae2-dad11f3d6640",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "15baf1bc-add0-49f7-a087-8d062a4a8d8a"
        },
        "item": {
          "id": "25e55470-3a90-4fa5-a314-02ab78b020c9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bc9b4089-8bdb-4115-8d65-500309bffec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3ad181-ffac-437d-91ee-ad6c069e0a3a",
        "cursor": {
          "ref": "4dd3039c-6bd0-4b0d-b31c-cda58574e440",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "16c9cc91-3d78-4916-95e6-013552f0da8f"
        },
        "item": {
          "id": "dd3ad181-ffac-437d-91ee-ad6c069e0a3a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ffe3eea2-a7c1-46cb-b68d-6f033de7ffaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e80b18-f59c-4099-b97d-2213b8df489b",
        "cursor": {
          "ref": "b478a2ca-cc0e-4d15-b064-ff70c72a95b5",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4af89006-8a4f-4374-b003-356c67e0d69a"
        },
        "item": {
          "id": "97e80b18-f59c-4099-b97d-2213b8df489b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2bca4797-13bd-4b58-9b9e-6726c62bb247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910601ee-45b1-4cd8-9c40-777436b2b6c3",
        "cursor": {
          "ref": "3697e4b0-96ab-4d58-b4ce-bca2caf54174",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cdafe8e1-075e-4464-9821-45fad360a9e0"
        },
        "item": {
          "id": "910601ee-45b1-4cd8-9c40-777436b2b6c3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9dc5ff07-64bc-42c2-8cd2-2dd92cec9407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340fd18d-c94c-4b5c-8151-f23696460b4a",
        "cursor": {
          "ref": "9bd6e820-660a-4501-aa84-8bbc1f5850a9",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f1e9415d-6447-4b83-96b0-5be3dd727497"
        },
        "item": {
          "id": "340fd18d-c94c-4b5c-8151-f23696460b4a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a06fbaac-6017-40c5-881e-34a1d143789a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e59dfa-dede-41b3-be8c-24db35bbebbd",
        "cursor": {
          "ref": "0c751b5b-8e5a-457b-8be1-ed51700982fa",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2d06bd15-1b39-4f3a-bcc3-2e529dba3656"
        },
        "item": {
          "id": "f6e59dfa-dede-41b3-be8c-24db35bbebbd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6f05ffec-4508-48d3-9c59-81c96d91fda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e293954d-f04f-49d0-9db7-08e5647d8857",
        "cursor": {
          "ref": "1ba8fa52-e552-476d-ac60-243efdb3831f",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "72d5ecfa-d433-463f-b7dd-472d7c02e51c"
        },
        "item": {
          "id": "e293954d-f04f-49d0-9db7-08e5647d8857",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "338e071c-208c-45df-a52c-9335c57b1c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4080bc13-4e5b-4d86-b773-13918c236c69",
        "cursor": {
          "ref": "01e0875f-c144-4a2d-8b5d-8f50df7753f0",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "74cb60ea-9d27-48b7-9d05-81d31d133eec"
        },
        "item": {
          "id": "4080bc13-4e5b-4d86-b773-13918c236c69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dfc58cf5-db04-42f5-8a3e-ce37e8843df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb83faa2-16c8-4b6d-978e-1f8674cfef85",
        "cursor": {
          "ref": "01b779e6-5a99-4fa8-9755-ecf31982d93b",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "053fa999-0710-4a3a-9290-b4f4bd975fd4"
        },
        "item": {
          "id": "cb83faa2-16c8-4b6d-978e-1f8674cfef85",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c109f382-7d63-404a-8b8a-628ecbb5624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95816c47-0c6a-465a-91a5-1b1cef602f39",
        "cursor": {
          "ref": "c1cfaeff-921f-431b-8d31-d6adc6e5ba1d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "746f37ee-3988-4304-a2a0-51bf02643909"
        },
        "item": {
          "id": "95816c47-0c6a-465a-91a5-1b1cef602f39",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e903a0f9-5365-4549-9912-ac6a814e0b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeac1ba6-99e8-4b97-b37c-bcc3f2be92a7",
        "cursor": {
          "ref": "e146007e-f49b-4023-96d7-cdf8c0f1a192",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ae7d8013-0976-4ffd-9258-339cab164338"
        },
        "item": {
          "id": "aeac1ba6-99e8-4b97-b37c-bcc3f2be92a7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "294e5271-3f77-4cf7-8ff4-782857b24864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1fab47-e4c2-4429-86fe-f21517067613",
        "cursor": {
          "ref": "3361da77-4adc-4b13-b372-6500941cd567",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ad7f4ace-1151-4edd-8068-5b21069affec"
        },
        "item": {
          "id": "df1fab47-e4c2-4429-86fe-f21517067613",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "28af5ec4-5784-4d4a-b819-24aef9e981d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1823ce-631a-4220-8ff8-9d5d894faf2a",
        "cursor": {
          "ref": "b334ad97-bafe-4cb5-acbb-81053212223b",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "308a620e-64ec-432d-9cae-e02e8295baaa"
        },
        "item": {
          "id": "ec1823ce-631a-4220-8ff8-9d5d894faf2a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bd4effe5-c26b-4573-bd05-840cda66cbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5c4b21-107e-443a-8534-36d6a42ef391",
        "cursor": {
          "ref": "7cb49e86-5134-4ca4-ae8b-494846b9c18a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4486ace0-e5ad-4eae-aaa4-74d1024e1e29"
        },
        "item": {
          "id": "0b5c4b21-107e-443a-8534-36d6a42ef391",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a00183d7-5dce-4ff1-ae6d-481a19eb24ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8695796a-d6cb-4af8-b72a-cbecfc705839",
        "cursor": {
          "ref": "2f1e0484-5b91-4a7e-b5ca-ac1284d66623",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "69a55b44-7a66-4583-9018-d3faeefa3e25"
        },
        "item": {
          "id": "8695796a-d6cb-4af8-b72a-cbecfc705839",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a38903e7-9e38-4513-8ee1-38f3eb6b69ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86173ae7-a845-48db-b758-0bf66eb2b4c8",
        "cursor": {
          "ref": "4ae20d72-ac80-4428-aa65-cc74aaa84329",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2229bcc2-a2ca-4b3f-b454-cc4ef1a9a494"
        },
        "item": {
          "id": "86173ae7-a845-48db-b758-0bf66eb2b4c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1b976a5a-67d5-41c8-88a0-55389e05720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8964527-3b6c-4249-99bb-a0ba2d5967d2",
        "cursor": {
          "ref": "33780657-3159-4a87-aa94-97eb604fad7c",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "27601358-0761-4679-986c-5ba20bcd91a5"
        },
        "item": {
          "id": "a8964527-3b6c-4249-99bb-a0ba2d5967d2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ab61ba7c-0038-4d9c-963d-353789efe11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f113495e-e609-4147-b94d-d057985a5b5d",
        "cursor": {
          "ref": "62fd2625-762d-4862-83e2-bf91cf84e40e",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd4e28c6-b365-4e50-8239-6260ced9db9a"
        },
        "item": {
          "id": "f113495e-e609-4147-b94d-d057985a5b5d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "33d124b8-3f2a-435d-9ce6-4b6288957c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b083d56b-a3b7-4188-9bc3-50e671e9bd8e",
        "cursor": {
          "ref": "c03fc8db-ae6e-4010-bcef-3170bcaf5b87",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b2ba017f-8557-499a-a472-db1227c07ff2"
        },
        "item": {
          "id": "b083d56b-a3b7-4188-9bc3-50e671e9bd8e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "11deefaf-5762-42d8-a469-23bc0aa4d646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d837bb71-04dc-466c-bd99-42b72b97eec8",
        "cursor": {
          "ref": "0b1ac8e1-f6e3-4571-b13e-19794cef810b",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cae93eeb-5b8b-4040-a485-7a49bc86b991"
        },
        "item": {
          "id": "d837bb71-04dc-466c-bd99-42b72b97eec8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "671dd220-104e-4de0-b9c6-686bdd9e5343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ad1b0-a009-4978-baee-1e6ed2cb0953",
        "cursor": {
          "ref": "a9ad6edd-72d0-4a8b-b4fa-0d4d2f98280f",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e45bc87-9209-45be-9ef1-46a0a76d64b6"
        },
        "item": {
          "id": "216ad1b0-a009-4978-baee-1e6ed2cb0953",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b193488c-69ab-4c1e-bf78-65cefd842363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98141062-a659-4e20-9b9c-1d0bebd0dadd",
        "cursor": {
          "ref": "26952726-806e-4f6e-82c9-ea01b7b6cb70",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2fdec64f-4bd1-45c2-a040-6c32bbe68497"
        },
        "item": {
          "id": "98141062-a659-4e20-9b9c-1d0bebd0dadd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "73749a52-6c1d-4cb9-b6b5-832d2738a647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c898a7-527d-4e58-b92c-d9edcb671ccb",
        "cursor": {
          "ref": "bef0723c-66f3-4bfb-a4dc-14a8503811e9",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6d5f044-452c-466f-aba5-acb65faf3969"
        },
        "item": {
          "id": "b2c898a7-527d-4e58-b92c-d9edcb671ccb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a5028876-00a2-4694-aab2-9c7cc10acc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0987da11-9ae4-4d6a-8a29-336ac21a04f6",
        "cursor": {
          "ref": "f2cfb402-80fb-4031-bb0b-df9da8ea013c",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "97e4590b-26f9-4cc1-82c9-d19e82fec284"
        },
        "item": {
          "id": "0987da11-9ae4-4d6a-8a29-336ac21a04f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "def28098-f438-4b8b-a043-2d84a814c1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fab42a-e434-497e-a6d1-2980787cb0b5",
        "cursor": {
          "ref": "96ed342d-a81f-44c0-925e-42efbc506424",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4ce800d6-a224-4101-b87c-797434ae858c"
        },
        "item": {
          "id": "19fab42a-e434-497e-a6d1-2980787cb0b5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "41855ef6-52fd-492c-8e3e-0d8c1afe28b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37296fdf-102a-443b-966d-6917843371f0",
        "cursor": {
          "ref": "7f50cd75-9b42-4e07-8925-74b15030dfd9",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e6229af9-8929-4f37-865c-6eee8109d9cb"
        },
        "item": {
          "id": "37296fdf-102a-443b-966d-6917843371f0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5a320855-7a4a-4b12-bc7d-4fdf37ba4b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6147cd-1de2-43e7-86f0-3716e3118b69",
        "cursor": {
          "ref": "d0bbf6ff-be68-4b01-b222-85833230a94b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7b98d7fd-96bd-4c65-97c5-49ee044cc16d"
        },
        "item": {
          "id": "7b6147cd-1de2-43e7-86f0-3716e3118b69",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ab00aeb3-7086-4a2b-b190-4707c7fc929a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8accb7c-7b63-4e9d-b165-5bb3bf9ba9b3",
        "cursor": {
          "ref": "4a179295-b154-44de-8759-37c468140e24",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4e95422c-e0d9-4745-9168-0f1b3d5a604f"
        },
        "item": {
          "id": "e8accb7c-7b63-4e9d-b165-5bb3bf9ba9b3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ab0d4b61-1658-4aab-9453-e9e27e22a14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a91214-8e80-4854-8869-6bebb1c36f8c",
        "cursor": {
          "ref": "a7e31538-7ac7-4f04-9704-5a57dec59afd",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3907ca49-2864-4163-9b91-46eba918ad62"
        },
        "item": {
          "id": "a6a91214-8e80-4854-8869-6bebb1c36f8c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3c84e4e0-705f-4e48-acdf-f5f96d7c5cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce07930-9b1f-490b-a945-46467f761c85",
        "cursor": {
          "ref": "62017e24-6a81-4ac8-a918-649a66171398",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6bbe0a0f-2507-44ab-8042-90bdf2d4d369"
        },
        "item": {
          "id": "fce07930-9b1f-490b-a945-46467f761c85",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "99e2714e-aace-4b9a-8566-5a9d7c93920c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578de7a2-9199-4053-9232-c7b6b272e31c",
        "cursor": {
          "ref": "2ab45171-face-47be-9d5a-1c6aade4150b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3657cd0f-419e-497c-a14d-a54e1b4588d4"
        },
        "item": {
          "id": "578de7a2-9199-4053-9232-c7b6b272e31c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "91cbabc3-00aa-4a9d-92fe-f80b4701e5ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc5353c-c910-4883-b16b-cd549544fd9e",
        "cursor": {
          "ref": "2faf1f65-f857-425e-951c-efac5d881e7e",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "793c21d3-ed14-4908-99f9-5849d6cf182a"
        },
        "item": {
          "id": "0cc5353c-c910-4883-b16b-cd549544fd9e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f2fe7675-e104-4bdc-8e65-66eee735133d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864ae5ce-2aa6-462b-9d28-374e27976f38",
        "cursor": {
          "ref": "0e926511-e3cb-482c-ae5b-32884665fedf",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "215ab4d6-a3d8-4418-b958-bc91ce41ecc4"
        },
        "item": {
          "id": "864ae5ce-2aa6-462b-9d28-374e27976f38",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0bb1ac16-58c2-4d9b-8c29-90ef5a24b50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44595ae-808c-4518-8764-ac3dce4c1e8b",
        "cursor": {
          "ref": "8bb55e65-731d-407b-aab8-bb2729416ede",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f79353cf-7084-4b9b-95d1-9f9f52ed8dc1"
        },
        "item": {
          "id": "f44595ae-808c-4518-8764-ac3dce4c1e8b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e20bbeb1-673e-4faf-bedf-13f44ede7617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00bc3d7-23f7-4859-9f85-d9b894db3987",
        "cursor": {
          "ref": "c7fe295f-2b8a-4037-818c-953623e8ac56",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2ce06663-5371-48c4-8f85-490e265ab032"
        },
        "item": {
          "id": "a00bc3d7-23f7-4859-9f85-d9b894db3987",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "875f3e86-5ce4-4932-89f5-9a416f7a9398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f683eb1-198d-4b18-ae3d-ab8d3ba6e87b",
        "cursor": {
          "ref": "0641d6da-608a-4b7c-b7a3-7003c7adcd8c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d3d298a1-3cd8-4088-b7e0-a60642625031"
        },
        "item": {
          "id": "3f683eb1-198d-4b18-ae3d-ab8d3ba6e87b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "254b0e08-0620-4c52-a2d8-836de39e183c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca81799-2f21-4fee-9486-90dadfed169d",
        "cursor": {
          "ref": "65014bcb-163a-42e8-afb9-09b9ca732f99",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4b58319b-9bd5-4b72-b3a5-b11e32385235"
        },
        "item": {
          "id": "2ca81799-2f21-4fee-9486-90dadfed169d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "19d34830-a43d-4c67-ba8d-be975aa5d0d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c4b1af02-e8e9-40d5-891b-a1beb27ebe3d",
        "cursor": {
          "ref": "fca95e73-f5dd-4f2e-9fa9-79548c3bbf93",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4fb7a889-bcde-47ab-bcda-c1a8ce2de405"
        },
        "item": {
          "id": "c4b1af02-e8e9-40d5-891b-a1beb27ebe3d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6f4dfce2-4e63-41b7-a385-5682d6032dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0d43e1-2259-49cb-b014-6e447fbe7a1a",
        "cursor": {
          "ref": "4e1b60df-4eb3-4fc1-8a38-66c18fc4ccd5",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d903eebc-1bba-4d61-94b0-04575165457e"
        },
        "item": {
          "id": "5f0d43e1-2259-49cb-b014-6e447fbe7a1a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5efaed90-2f65-419b-8a70-659d424341c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d299cc-5bd8-4459-afd9-6e3b6d3f7a95",
        "cursor": {
          "ref": "d2d2b538-a1de-4c8a-886a-55247c870492",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6acccb15-bf67-4f51-aa6b-909706d8c1c8"
        },
        "item": {
          "id": "40d299cc-5bd8-4459-afd9-6e3b6d3f7a95",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e3704cdf-ab2a-45df-b29d-836021bd6a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fca8e4-7155-407b-9db1-4d67eb27d7fb",
        "cursor": {
          "ref": "b448e235-4340-4d88-9fad-88e8cd7663d4",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "422140df-45d4-4909-b2db-cf318347dfdb"
        },
        "item": {
          "id": "73fca8e4-7155-407b-9db1-4d67eb27d7fb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b60341ef-1ca7-4904-befc-c815c2006257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93030fec-2f21-4c15-975d-2b1770884d41",
        "cursor": {
          "ref": "ba507d47-f7a7-4bc4-883d-7f6c9d3017bf",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7e7e2d4-4fff-4402-b2d3-7db2eae1e724"
        },
        "item": {
          "id": "93030fec-2f21-4c15-975d-2b1770884d41",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a426cb98-0c79-4c6f-84d3-c3f38d8d199b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836f7ba7-5825-45be-984e-359ab2437d7d",
        "cursor": {
          "ref": "d663c891-b5b3-495f-9811-11507449508c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f4ae8bae-2562-425a-bb14-f3e09b67b16e"
        },
        "item": {
          "id": "836f7ba7-5825-45be-984e-359ab2437d7d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "26325481-8dc5-4543-9275-8823134c47e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68414ccc-7a16-432b-bb9a-ef4d5f1f2463",
        "cursor": {
          "ref": "a84c1aa0-95b4-4fbd-98cc-f054d115d910",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c950e7e8-5f00-4d8f-83dd-d406dceaedaf"
        },
        "item": {
          "id": "68414ccc-7a16-432b-bb9a-ef4d5f1f2463",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "458d809b-f188-493e-b56c-2a29f2a758e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b959840e-54cf-40b3-a8f4-d302bdc78b47",
        "cursor": {
          "ref": "6f73ab82-a6fc-4b2a-aadf-8d7288d1fa54",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a7875d3e-aa0f-4e53-8706-90266910cc49"
        },
        "item": {
          "id": "b959840e-54cf-40b3-a8f4-d302bdc78b47",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a61f6e2e-86af-4a71-a786-01db323f9c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f625f07a-87d7-470f-8ec2-c339c8c2edcd",
        "cursor": {
          "ref": "8b297239-b3a3-4eef-a927-4c1f7055c962",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2fcd6ada-8cf2-4209-b232-a07dbf7cc554"
        },
        "item": {
          "id": "f625f07a-87d7-470f-8ec2-c339c8c2edcd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "30cff31b-0375-449f-bc96-d32de2330999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c687d22d-50fa-41d5-9116-d6a34af4cb87",
        "cursor": {
          "ref": "ddaf6e9f-e956-4b50-81b0-3da2606a1382",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7d44a7af-5cde-47bb-9f5f-0770761b5ac7"
        },
        "item": {
          "id": "c687d22d-50fa-41d5-9116-d6a34af4cb87",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "76779bc7-efbb-4095-b8d2-41f3177cf6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544696b1-7ff7-4d7f-be71-bc0fb0b8891d",
        "cursor": {
          "ref": "0e96af23-9718-4dd9-b4a4-821a4e35f40e",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "55da0666-bd5c-4d03-8b4a-41cd7707d162"
        },
        "item": {
          "id": "544696b1-7ff7-4d7f-be71-bc0fb0b8891d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "84cab2e4-9b40-48f5-9efc-91ce92543b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5967914-3cc7-419f-b529-e6cd18b1c4b9",
        "cursor": {
          "ref": "18947246-26e9-4a03-ac50-9fcf0df1dadb",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b78b7c3d-a912-44ed-9fc4-279ba72fe750"
        },
        "item": {
          "id": "a5967914-3cc7-419f-b529-e6cd18b1c4b9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3cebc28b-680c-4048-9cd4-c6287c28b19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8a0304-2c4a-41d0-9e76-815dc89d022c",
        "cursor": {
          "ref": "0ea45d3a-0bab-47a6-8531-b4f6bc67f6ee",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c3437b22-43bb-43fa-925a-5e40da6051c1"
        },
        "item": {
          "id": "fc8a0304-2c4a-41d0-9e76-815dc89d022c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b02bc880-4b5e-4a69-9379-ea72a3d422e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4beb7b2-f690-4743-91c1-8f8ff5633c83",
        "cursor": {
          "ref": "fe1f01b5-cca1-4f16-92c7-2adee5ad9e43",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fc77b29c-9a08-4dc4-b64f-d555518882f2"
        },
        "item": {
          "id": "a4beb7b2-f690-4743-91c1-8f8ff5633c83",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c7054335-1645-42e3-8c17-8f12fee45c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478f5f0e-9e4d-4b16-bb1e-35adc02c0d85",
        "cursor": {
          "ref": "5429a53f-1bc0-4f33-bc17-8d99b49f0700",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3a108582-573b-41e0-8d90-098b6c225900"
        },
        "item": {
          "id": "478f5f0e-9e4d-4b16-bb1e-35adc02c0d85",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f7d0bfa8-1dc1-4440-9ba8-c92dceb6cbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709119b8-0285-4529-9892-00c777803ddd",
        "cursor": {
          "ref": "a43aae92-e2be-47a3-821b-60bb1c7c42ee",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "913a7203-d559-45b6-a75e-0e2c62590e07"
        },
        "item": {
          "id": "709119b8-0285-4529-9892-00c777803ddd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c5e79c62-7288-4c59-b4e9-6ee61b0b77a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c175287e-63a5-4916-822f-bba01a41c239",
        "cursor": {
          "ref": "0ee74197-d1e9-4eaf-827b-6fef23725209",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e8d1cd02-2263-4f7a-9645-9d419d4dafb5"
        },
        "item": {
          "id": "c175287e-63a5-4916-822f-bba01a41c239",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fd35db01-071b-4ccf-9509-ba7546f6965f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46191084-afd5-4c77-9621-73caa899fae7",
        "cursor": {
          "ref": "01c8951e-61c4-411a-a200-07d6b9b50dfd",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "320067be-3251-4033-a288-df28102653ce"
        },
        "item": {
          "id": "46191084-afd5-4c77-9621-73caa899fae7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "85107e83-451d-45fb-bac1-64589b95955c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070cbdfc-c5c5-46fb-b826-186c6688e78d",
        "cursor": {
          "ref": "4d3b3bb7-1fb8-4d16-9dd9-4d13525f4ac8",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "72514681-228a-4e10-ba70-b1bf4537acd5"
        },
        "item": {
          "id": "070cbdfc-c5c5-46fb-b826-186c6688e78d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "984217d6-ab5c-469e-a92a-c767ce9b5b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2679578b-3077-40c2-889d-44be68c34843",
        "cursor": {
          "ref": "fd97d37d-5487-47a9-a914-11e84c966b58",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6c92c9a4-af22-4aac-9568-659f9de97247"
        },
        "item": {
          "id": "2679578b-3077-40c2-889d-44be68c34843",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e6ab142c-2474-4803-9488-eb3f8cad32aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ed1c92-3816-4f8b-a96c-32e7ffadd229",
        "cursor": {
          "ref": "c03ccaa2-f77d-4f11-bf67-9031c15f3f4e",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a6db673d-ee06-4b0a-80dd-8ccf258978a8"
        },
        "item": {
          "id": "57ed1c92-3816-4f8b-a96c-32e7ffadd229",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ad274d47-751d-4e55-9b0d-1b9a080eafe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5de019d-b717-446f-8bde-188d872523fa",
        "cursor": {
          "ref": "a2b880bc-817e-4204-aad7-5168b7b861a6",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cc91388b-ae9c-48f3-b8a9-f8de440249fe"
        },
        "item": {
          "id": "e5de019d-b717-446f-8bde-188d872523fa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "037f48b0-be2a-4e1d-b193-9128624825b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26fc22c-910b-4771-8093-373f41ab954f",
        "cursor": {
          "ref": "55a35844-121c-4cac-8524-116accf9318e",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d9ae1328-df8c-4f31-bace-b10fb638cf30"
        },
        "item": {
          "id": "f26fc22c-910b-4771-8093-373f41ab954f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6cacccd5-1118-4d2f-89aa-de4f8b3ebd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c900c4cc-a757-4185-8f77-700961974021",
        "cursor": {
          "ref": "29c59905-a0a6-489e-8035-11777508100f",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "86208233-34d2-48d0-8abd-c4c5c22c7b6e"
        },
        "item": {
          "id": "c900c4cc-a757-4185-8f77-700961974021",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "09d88ba4-a462-40f4-8a1c-a6340ff30448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0961294-562f-414c-83c2-8d693744cbb6",
        "cursor": {
          "ref": "58c79f9e-18ef-4022-8f90-6f87104ae2e3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9db37c35-be8a-4318-a8f4-ca73c1d24ffb"
        },
        "item": {
          "id": "a0961294-562f-414c-83c2-8d693744cbb6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4a9cd9b4-a724-41ae-8cf7-61f3ba9766e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9ecfd0-3362-47fc-9b7b-09278ba77006",
        "cursor": {
          "ref": "04ffa375-17c7-4cb5-aa27-7d11f65d3a95",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6a39aade-86c5-4e6c-99e7-0bab543c89df"
        },
        "item": {
          "id": "1e9ecfd0-3362-47fc-9b7b-09278ba77006",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "19d44b5b-aec6-444e-b69f-87c412af06f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b02bf66-eb20-4371-b1f7-2035100fe07d",
        "cursor": {
          "ref": "99128301-41b4-419e-abc5-592785bc920d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c73a72d2-bf85-48b8-9e24-ac9857d760bf"
        },
        "item": {
          "id": "4b02bf66-eb20-4371-b1f7-2035100fe07d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbcb2979-68f8-42c2-8874-c92b4ceeab30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c761fbfc-9d14-4ef6-abb6-207cc0b456b4",
        "cursor": {
          "ref": "bd230d52-8047-41d9-b019-c35f8aa85580",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4fe95b7f-f357-44fd-a475-4e8af2075d58"
        },
        "item": {
          "id": "c761fbfc-9d14-4ef6-abb6-207cc0b456b4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9cd7eca3-bf5a-4b89-98a9-f2f638bf0f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614454e6-8174-4522-a50a-7c36b8b12590",
        "cursor": {
          "ref": "37bccb78-325a-4a79-b1bf-4564b4051851",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "eab16659-dcfa-41db-a0dd-8b63459fad8c"
        },
        "item": {
          "id": "614454e6-8174-4522-a50a-7c36b8b12590",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a960e10d-a8fd-4457-85f4-dc41f4eb5ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545d1eb9-76ba-4c8d-a161-e74a4f0463db",
        "cursor": {
          "ref": "7814a715-116d-4ac7-b71b-19783be199c4",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8c9485d0-e7ad-4276-985c-379e97c70415"
        },
        "item": {
          "id": "545d1eb9-76ba-4c8d-a161-e74a4f0463db",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6739f65f-67db-45cc-9295-c4a809e1feff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "51e18523-032e-41ab-aacf-03d5ffd922c0",
        "cursor": {
          "ref": "a531f689-cd29-4b7a-abb7-ef58dc8dda79",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7a05ea5b-ee6c-4ddb-bbf5-87c860935caa"
        },
        "item": {
          "id": "51e18523-032e-41ab-aacf-03d5ffd922c0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1be1c8be-2a98-44f7-ab92-bbbcf86aa9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1abc5c34-b6ec-4c66-992e-470914a3c59f",
        "cursor": {
          "ref": "65723f11-0cc1-4214-8e0a-1038380cc7c1",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2c4953e8-f98b-4819-b91c-255ab46786c6"
        },
        "item": {
          "id": "1abc5c34-b6ec-4c66-992e-470914a3c59f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0cff05fd-3111-4441-ba83-53e2a9b5c4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c360185f-a9a5-4418-9d37-ed9bfdebd2a4",
        "cursor": {
          "ref": "767900df-bb5d-40ce-b26d-bacd47cf317c",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7bfa7359-6224-4c3c-98c0-3852aac8f2f9"
        },
        "item": {
          "id": "c360185f-a9a5-4418-9d37-ed9bfdebd2a4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dea8c3ad-6b90-445d-9dbd-87595c5313b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ac1977-2830-47f7-8673-23403bdfb07e",
        "cursor": {
          "ref": "32979035-a164-43d3-8294-ea40221aa346",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "51d89fac-0f49-419e-ad00-8526b0ef3454"
        },
        "item": {
          "id": "c6ac1977-2830-47f7-8673-23403bdfb07e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "73a88cb7-6fa0-4532-8551-c28eb3fb630a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "57ac6712-27b3-4b79-bf9b-e9dde5070d8e",
        "cursor": {
          "ref": "e830a22f-a686-4c3a-98b4-dfcd78afee31",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "403742d4-843c-4ead-b799-413c8a3c3515"
        },
        "item": {
          "id": "57ac6712-27b3-4b79-bf9b-e9dde5070d8e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2803b9ec-2e31-4196-b6aa-89d04860a837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1196,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a99182c5-396c-4201-8061-869d782340ef",
        "cursor": {
          "ref": "68dfad36-23aa-4b6b-91fa-21510638637d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "81be7ad4-061f-4f4e-80e9-42850ba81081"
        },
        "item": {
          "id": "a99182c5-396c-4201-8061-869d782340ef",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f58bc172-6c26-4878-95ce-dd2890be43e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "61d36d16-6f6f-42d8-a2e2-fbb01b65abb2",
        "cursor": {
          "ref": "4c9d5dda-b16e-4561-93ad-c20ec42c8e44",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "af3f6224-a3da-4cea-a3b6-f229575a3e7b"
        },
        "item": {
          "id": "61d36d16-6f6f-42d8-a2e2-fbb01b65abb2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "161b2fb7-c0e7-4b8f-a503-55f8b82a6940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7e71d79e-70ce-467e-bdc5-a96629eb0564",
        "cursor": {
          "ref": "fdb61a9a-fc73-48d2-87ac-49a386630763",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd874ee5-7945-4b63-9264-890e45d81e7a"
        },
        "item": {
          "id": "7e71d79e-70ce-467e-bdc5-a96629eb0564",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bd569dff-42f6-407f-9bc2-beba99ec496a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "41d281f7-9f01-4384-bc1a-0f1f11ff2a82",
        "cursor": {
          "ref": "0ffc2111-9f21-4dd9-91d0-989996b8315d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6df3df05-039c-449c-977b-db99e8626020"
        },
        "item": {
          "id": "41d281f7-9f01-4384-bc1a-0f1f11ff2a82",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4231f32d-a42a-4f1f-bd1c-fe90b66d986e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "299888df-8290-4817-921e-3fe56be8ebaf",
        "cursor": {
          "ref": "770e9a10-5c3b-4e6f-aefc-9f0570b01186",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cf594339-cba3-4178-bc4b-052a73c60e71"
        },
        "item": {
          "id": "299888df-8290-4817-921e-3fe56be8ebaf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ac57fd0f-1994-4520-a83b-d1cadafbc5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3a8b7f-16aa-4600-9b64-0a9107cc923a",
        "cursor": {
          "ref": "eea00081-85ff-456d-bc49-babfc7d84368",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ba8e4d9b-8ace-4314-a255-01e31083d03b"
        },
        "item": {
          "id": "db3a8b7f-16aa-4600-9b64-0a9107cc923a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9e6e790f-bf4d-4d4d-a59e-27444f5d192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd7f42d-73ef-4922-8e75-81607b373998",
        "cursor": {
          "ref": "fc00b04f-27f6-43a6-ac84-e0300e432209",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c6c2c1c9-a7cc-48ae-ad34-0e219f0584b1"
        },
        "item": {
          "id": "dcd7f42d-73ef-4922-8e75-81607b373998",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0c7cf46c-dd0e-42bc-b3ff-06e508a9e5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29213eaf-8c82-4ea9-9c86-3902b0803377",
        "cursor": {
          "ref": "abc7ad1b-942f-4256-a75d-96bfff9cb305",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1fd02540-ab3f-4d2b-80e0-a7a4ab2e1e73"
        },
        "item": {
          "id": "29213eaf-8c82-4ea9-9c86-3902b0803377",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f90793a7-8457-41f0-b307-6255dbd8691c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e2e9c6-cd02-4e25-bb6b-bf6c82574860",
        "cursor": {
          "ref": "6c19550c-216e-4255-9824-f65c0c7dcddb",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4cb98d28-b751-4ede-86e7-7c081d385da2"
        },
        "item": {
          "id": "87e2e9c6-cd02-4e25-bb6b-bf6c82574860",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "34332d44-35be-402d-ab48-9f0f5c6e6f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17782a2-1229-4be8-924e-f3d7f193964a",
        "cursor": {
          "ref": "24cf9048-2ae4-42c5-ba16-f76432bbdb78",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "79c19f4d-7ef2-4fa4-b2ec-7d60d1a6c367"
        },
        "item": {
          "id": "c17782a2-1229-4be8-924e-f3d7f193964a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fa5584fd-1e7a-466d-a0b5-2dcdcff0182c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee54c69a-e8ce-49ec-823c-fc760c9bdbf0",
        "cursor": {
          "ref": "bad254a1-3eae-47bc-a9ab-4574cbc2bd41",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "54d1509b-5cf1-47f0-bfb5-1757e1a380e6"
        },
        "item": {
          "id": "ee54c69a-e8ce-49ec-823c-fc760c9bdbf0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0df94ae9-77e9-494e-8590-3d5740b1aafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813ca9c7-0a68-49ef-b6cd-041374611f70",
        "cursor": {
          "ref": "20db9a76-f6c9-40bb-a1a9-c4eda5ea7757",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b9c32c4a-c7ef-480d-bd0d-936613d96c05"
        },
        "item": {
          "id": "813ca9c7-0a68-49ef-b6cd-041374611f70",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b9639fe3-0f4d-4081-a873-9b0bc5f66eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a20257-3c69-41cf-9864-6cc2013e593c",
        "cursor": {
          "ref": "e043c7ce-8a1e-47dc-82d2-c044a2e7be92",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "eae373f9-88a7-48a3-b1c3-363ca3b22c7d"
        },
        "item": {
          "id": "57a20257-3c69-41cf-9864-6cc2013e593c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "670dd0b4-0dad-432c-b084-d9318f48bc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d20140-259f-48aa-ad93-6ed013502e90",
        "cursor": {
          "ref": "e72d53ab-bc91-4dac-a304-8ca8fe491e71",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6557fe18-ef3e-4f83-b093-13e43b8ff8fe"
        },
        "item": {
          "id": "23d20140-259f-48aa-ad93-6ed013502e90",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8e28b1ba-1978-4592-ab01-9b8f9ab4c1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9971564-4e64-495e-905d-35bebe595af8",
        "cursor": {
          "ref": "c0a449e8-cb5d-45ab-ae3e-cdfd048dd130",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f0c4bdb6-b543-4278-b0f8-de0763ca84df"
        },
        "item": {
          "id": "f9971564-4e64-495e-905d-35bebe595af8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ed61611d-f359-4fb4-a345-a7df28f8dbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aac6551-d0c5-464e-8d06-83479806b060",
        "cursor": {
          "ref": "decc3799-5a0f-4532-ad69-8ac757c1e9d1",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "574d6d69-3507-472b-bc8b-fb4cac8c999d"
        },
        "item": {
          "id": "9aac6551-d0c5-464e-8d06-83479806b060",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "37f2c444-ea8e-4b72-9224-8efb87975ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714dd96-e301-47bc-adfa-e7823937ea4f",
        "cursor": {
          "ref": "9aa55dc8-340c-4f15-9998-ccf3d7acc426",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9328161e-b680-43bc-a39c-afccde7a7d61"
        },
        "item": {
          "id": "8714dd96-e301-47bc-adfa-e7823937ea4f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1b08e1f7-5288-449c-ace9-1c423fd66ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85add1ec-aed9-4d0c-9ded-b1def1b5f049",
        "cursor": {
          "ref": "584d160e-8972-43e5-9f61-a56eebc08214",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "473d54be-0130-4c7a-9b8a-b6e914541da5"
        },
        "item": {
          "id": "85add1ec-aed9-4d0c-9ded-b1def1b5f049",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d5ef9f64-f0c1-4a43-93c9-d73907c1ef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1177,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b8b01208-5e14-42a3-b97c-ced2421291ea",
        "cursor": {
          "ref": "25eb83ae-497a-4eba-9e2d-af33850dcb80",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7eed5a7a-f513-4f47-9e4c-fc825a80c715"
        },
        "item": {
          "id": "b8b01208-5e14-42a3-b97c-ced2421291ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3080539f-8ae9-4bc4-b5a1-2d25e05811a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1156,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5818680d-3c1e-42eb-abb8-a0c05b9eaca1",
        "cursor": {
          "ref": "ce83fe54-e5df-4f24-a6fa-3824f85d5572",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b73bd752-be2c-4a24-8439-b2f1a81785ff"
        },
        "item": {
          "id": "5818680d-3c1e-42eb-abb8-a0c05b9eaca1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "baa4dede-b646-4593-82bb-edec95f9870e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "832e50c7-72d9-4917-9f9c-ac2ae9d31b41",
        "cursor": {
          "ref": "b99d30be-922f-4fb9-941e-bba6365ad313",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "16973d77-6f37-4475-a74d-21ce15c72775"
        },
        "item": {
          "id": "832e50c7-72d9-4917-9f9c-ac2ae9d31b41",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9349a688-2729-46bf-b056-96c3e02ec0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1202,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f8768d92-5a7a-4d02-9252-79d7d33a3e95",
        "cursor": {
          "ref": "19c9c59d-6acc-44b0-b540-a14b8081ba19",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9f0c6ea4-3bee-4a28-aa84-90697e918e4f"
        },
        "item": {
          "id": "f8768d92-5a7a-4d02-9252-79d7d33a3e95",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7a1c197a-575c-4604-9b62-0170ce589a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "211d983c-e098-4d0a-b0bb-528af0ef2438",
        "cursor": {
          "ref": "1e5e3842-2127-44da-a9fe-4646c7c3d32c",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "281cba68-b5cc-4d9c-bdda-bf82d350aaaa"
        },
        "item": {
          "id": "211d983c-e098-4d0a-b0bb-528af0ef2438",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d84b69b6-cc41-4a35-86da-a18541f7f264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b51fe76-8aa8-4247-92cc-df41daebd834",
        "cursor": {
          "ref": "b7d87938-9045-46ff-a24c-a49c3fd03f19",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "017dc246-fd9d-43e9-b60e-b90f4b711dfa"
        },
        "item": {
          "id": "2b51fe76-8aa8-4247-92cc-df41daebd834",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e59d16d5-6f2a-4770-9e60-af0de1380e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c184504c-d4db-412e-8b65-9b3f14723c06",
        "cursor": {
          "ref": "34b4cc6e-e37e-4006-ba57-4243e09f14ea",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8733f724-60c6-48dc-a2dd-08c0a6be5c4c"
        },
        "item": {
          "id": "c184504c-d4db-412e-8b65-9b3f14723c06",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1286bc87-856b-473c-a790-38d08e2ed7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b744371-9842-4299-bac3-f1481c805c0e",
        "cursor": {
          "ref": "8cb628b0-3407-47d2-8e95-9637e3956c89",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "730c3c61-d55c-41c3-803f-c81be26edece"
        },
        "item": {
          "id": "8b744371-9842-4299-bac3-f1481c805c0e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1006ea95-f4c7-41b3-b0c0-278e22e9a4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f09a0a3-24ad-49ef-a34f-00d67696e174",
        "cursor": {
          "ref": "32a53775-2276-48fd-acaf-03f54e25a3d2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac259658-60ee-452d-9ecc-c8d5daf567c6"
        },
        "item": {
          "id": "3f09a0a3-24ad-49ef-a34f-00d67696e174",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "415b5066-c099-477d-a320-5caa13f8c33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e82c99e-f10c-4051-8bbf-b00c32e573cc",
        "cursor": {
          "ref": "2c5d2de3-4fb3-4800-8ee7-323d8c428f2a",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "538ebe71-e7af-4740-af7c-574b31bff6a5"
        },
        "item": {
          "id": "2e82c99e-f10c-4051-8bbf-b00c32e573cc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2db088b6-8f9b-4293-b165-3710056134c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9024489c-acb1-429f-99e1-98c88b7fb2a1",
        "cursor": {
          "ref": "bca64950-abcd-4b59-a39a-27513ed23313",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "476de584-64b1-466c-9381-de1cca27e9be"
        },
        "item": {
          "id": "9024489c-acb1-429f-99e1-98c88b7fb2a1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "58af8c45-1119-412e-8ba7-daa048dc01a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d8bd9b-b63b-4133-9c87-1e17d0f73c16",
        "cursor": {
          "ref": "c1a2a8e8-567e-459c-96f0-bd3be9dfc779",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "37a21b24-dea3-42b8-b701-c66fc8da36b6"
        },
        "item": {
          "id": "a8d8bd9b-b63b-4133-9c87-1e17d0f73c16",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8ab9f9ca-6765-4ee5-99d1-9c77232d904f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8701b8ac-d203-4ebd-b55b-d6ac520b8382",
        "cursor": {
          "ref": "f2b67a91-c98b-4893-a090-580d81173001",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "72fa1f45-fc88-4ac9-ab76-1f0251f5b1ec"
        },
        "item": {
          "id": "8701b8ac-d203-4ebd-b55b-d6ac520b8382",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e7f94f2c-9c6e-4302-93ba-f3056ca81cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98c1154-2c33-406f-a7d7-f79f028c0f85",
        "cursor": {
          "ref": "a46e1b5a-aa9a-4b38-bdfa-61928145859f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a52c8db3-87fb-4a4e-af29-9c18bc6b6961"
        },
        "item": {
          "id": "e98c1154-2c33-406f-a7d7-f79f028c0f85",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a4af182c-0237-405c-954b-19fe7475dd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a62d7f7-7592-4b14-ba46-52e311e1361d",
        "cursor": {
          "ref": "1c1cd21b-13bd-46bc-961a-b2674ef44f5e",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cbc3f05f-3cf8-4810-a0ad-fa4d4def99e4"
        },
        "item": {
          "id": "1a62d7f7-7592-4b14-ba46-52e311e1361d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "089d6f3e-6b79-415e-b239-0d9f9b3e64e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362466a3-c407-400d-a4ea-bc65690bd15c",
        "cursor": {
          "ref": "4ab58336-06c2-460f-bce1-f2ac7f821f90",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ae28c4b0-97bd-4cf7-947d-823435b9a8e0"
        },
        "item": {
          "id": "362466a3-c407-400d-a4ea-bc65690bd15c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "468a48bb-b92a-416d-a03e-8d3e266c9f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f4ed02-b2c0-49af-8ee8-f300c3cef438",
        "cursor": {
          "ref": "373d96de-b4bc-45ea-a20c-8dffa89395b4",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0ad7515f-3dde-4b8d-a4c5-d726d289b2b6"
        },
        "item": {
          "id": "56f4ed02-b2c0-49af-8ee8-f300c3cef438",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "987c483d-9350-4f10-a03e-0d2ad348a116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17675802-bee9-4d10-bb6b-68f25248bfad",
        "cursor": {
          "ref": "b63680f6-6a9f-4de3-b6ee-2ae7c3279fb5",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "87e840d4-b773-4966-8f40-bbce11e1f9f5"
        },
        "item": {
          "id": "17675802-bee9-4d10-bb6b-68f25248bfad",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "303245c2-06a5-4121-a017-1adbf8283962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349d5183-45f0-4426-9536-0b89985a6b5e",
        "cursor": {
          "ref": "66115205-12f8-446f-a44b-962445226dc8",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5d02be19-609a-4818-8eae-b85406458dec"
        },
        "item": {
          "id": "349d5183-45f0-4426-9536-0b89985a6b5e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dce2a75f-47aa-4404-8297-1f00ef50f0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b7a74e-1f0a-4417-9fa1-dbacf787d5b3",
        "cursor": {
          "ref": "6f29f2f1-28cb-4020-9fa1-fc1bf267acac",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "59a5dec7-ce2a-4d25-b900-d7b9037fd388"
        },
        "item": {
          "id": "e7b7a74e-1f0a-4417-9fa1-dbacf787d5b3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "252e4381-df50-441f-a3c8-acc96d4f51c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d63fde-f235-4ec3-a9cb-484f622e015d",
        "cursor": {
          "ref": "38658595-f57d-4603-9473-84735d48a61c",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a70ff22d-cad8-4815-8d73-00c979e676ae"
        },
        "item": {
          "id": "b2d63fde-f235-4ec3-a9cb-484f622e015d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b6feb06b-19d8-47df-8062-798d2052475d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65597796-a363-4f54-a997-fb9ba3bcc54c",
        "cursor": {
          "ref": "91eff467-8b79-4f90-bfa5-c3aedc73f629",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f8185ecd-9bf6-4d29-80e1-ecb42154f553"
        },
        "item": {
          "id": "65597796-a363-4f54-a997-fb9ba3bcc54c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8c4f583-fe50-43b8-aff4-0e65720a2e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331dbe7f-c079-4af6-8e62-73e503160b19",
        "cursor": {
          "ref": "566829da-6c74-4fad-9873-ceb5f6c90812",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "86769c14-ceaf-489a-a763-bfb30fa87c43"
        },
        "item": {
          "id": "331dbe7f-c079-4af6-8e62-73e503160b19",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "290943d0-58ea-4d76-9f33-9860a57b5dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23947d4-56a8-4f7f-aa24-632a0cf24dac",
        "cursor": {
          "ref": "318e7ac2-653c-44f9-a889-20071e6a2ce9",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "28df6e5c-cd94-47a1-87e2-ad8b53a5a994"
        },
        "item": {
          "id": "d23947d4-56a8-4f7f-aa24-632a0cf24dac",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cea4184e-bf0a-459e-ab44-641904663d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ba54ba-6498-42b2-923c-7a2aaa9ad3da",
        "cursor": {
          "ref": "04024827-b008-491e-941c-eb9e76f12759",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "54e2f3cc-cabb-4851-ab3d-b6db65b54629"
        },
        "item": {
          "id": "64ba54ba-6498-42b2-923c-7a2aaa9ad3da",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c4a620b1-1082-411b-8872-e8a6f62f71a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e257e4c0-4bf7-4bc6-8d38-535847739faa",
        "cursor": {
          "ref": "dba53a52-bc44-43c4-9a86-bbcaf599ba88",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2bfbf5ce-b147-45fd-80a2-c244215ff721"
        },
        "item": {
          "id": "e257e4c0-4bf7-4bc6-8d38-535847739faa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a610f3db-86fe-4656-ab4a-6d756ae79b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01802fc2-0623-4789-a071-945b35552c0c",
        "cursor": {
          "ref": "e825daa0-994a-48c3-ba6d-20739c127907",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3870eb2a-1a57-475e-b84f-c9caea9b28fc"
        },
        "item": {
          "id": "01802fc2-0623-4789-a071-945b35552c0c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0ff4a04d-ce94-4f5f-a5c4-e23070cf85b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e769da6-c3c7-4d56-9373-300c4b74e0f0",
        "cursor": {
          "ref": "1cd7fe29-7b91-45ba-8c6b-71bee5492663",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e3fefbe5-1218-46d1-8390-0593bdebac18"
        },
        "item": {
          "id": "2e769da6-c3c7-4d56-9373-300c4b74e0f0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "435fee3e-8908-4f91-a089-fccabab489f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeb31d4-477b-4b14-86a1-809ab84fab4e",
        "cursor": {
          "ref": "9194a732-3d1c-4014-a864-09b453933d13",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "378b4031-5adb-400f-ad62-c9d3e02261ae"
        },
        "item": {
          "id": "8aeb31d4-477b-4b14-86a1-809ab84fab4e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d81f246-758c-4c8c-9b8e-f63fbd2eaeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687704b1-5d16-43e3-a3b2-28853486ee3e",
        "cursor": {
          "ref": "def3f183-b56b-4771-8edc-1010b65d872b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e51e1e9a-1438-44b2-94ad-36185fb3fa97"
        },
        "item": {
          "id": "687704b1-5d16-43e3-a3b2-28853486ee3e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8ed98fd6-bb06-4ebc-b8fe-55350dc23fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddbfb33-6708-4796-832d-7ce1e1bc7ab0",
        "cursor": {
          "ref": "3b0159cb-8f41-4f1a-a974-d3a725f026f0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d59c503c-baba-4078-96be-471dffad0bf5"
        },
        "item": {
          "id": "2ddbfb33-6708-4796-832d-7ce1e1bc7ab0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "803e8392-f409-4cdc-90ef-54d3886db3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eb5a5d-13fc-4262-bf52-add12e07e1bf",
        "cursor": {
          "ref": "247b9c2b-7f5a-4b8a-a884-3f433232f37a",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6d993eb7-006a-46eb-8434-1ecc83e1b9c9"
        },
        "item": {
          "id": "e0eb5a5d-13fc-4262-bf52-add12e07e1bf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "70582f2a-077d-4aea-ab77-487d81a45d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f0b44d-b7eb-4e51-9d5e-fd0208838ea6",
        "cursor": {
          "ref": "4ae040a6-2893-43c5-9cf8-865a3cef5b63",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c8ceb151-5b8b-4228-a112-e367866f0576"
        },
        "item": {
          "id": "a4f0b44d-b7eb-4e51-9d5e-fd0208838ea6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b69e3b8c-dd01-42f2-ba41-d37b53bcfe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd6b1fb-3d3c-4c24-9ddb-a2476b0e03a8",
        "cursor": {
          "ref": "31a16b56-f0f3-4341-8185-3d2ab5bfd36b",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fa542af1-0c78-4974-b870-57a3fa710851"
        },
        "item": {
          "id": "3cd6b1fb-3d3c-4c24-9ddb-a2476b0e03a8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "43e788a8-2a95-4b78-91c6-5f3a65bde047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b413e1a9-ce5f-404c-9339-b50777896f1a",
        "cursor": {
          "ref": "00b17107-11eb-448f-a6a9-91fa36841847",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9df1a2be-6850-4adb-857e-03a9525992e8"
        },
        "item": {
          "id": "b413e1a9-ce5f-404c-9339-b50777896f1a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fc3d2c38-47ae-42e5-87c8-083800ab117d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2f3376-f4d3-4d21-8277-8804c91d37d9",
        "cursor": {
          "ref": "5baf1528-1806-4a40-afed-58e013fc3728",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9200b93a-cb35-4f69-afe5-ff8aee4aeda2"
        },
        "item": {
          "id": "6a2f3376-f4d3-4d21-8277-8804c91d37d9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3a084eba-5880-428f-99ff-b430ce4b66cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5f485a-cb37-4842-915d-94a573133b99",
        "cursor": {
          "ref": "c3891df5-2b6e-423b-8aac-9487db0112ed",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e7aaeb86-2660-4705-bbb0-8008bbc45b0d"
        },
        "item": {
          "id": "9b5f485a-cb37-4842-915d-94a573133b99",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "77b8eb43-7c57-4b67-a399-092000a7d6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44a2e1d-a810-424f-8d79-e8ae111665aa",
        "cursor": {
          "ref": "5b657e36-3758-4c2a-8f54-377749fc9acd",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "657ec7a1-5a1b-4f49-952f-d4cf8dd5fd4a"
        },
        "item": {
          "id": "f44a2e1d-a810-424f-8d79-e8ae111665aa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6bb262d8-f16d-479d-a8ef-44de4bfa1da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8f3d3f-d7cb-40cd-801c-471fad5a276c",
        "cursor": {
          "ref": "958c9215-d698-4936-90fb-def1c43cbd17",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7363c6ef-d3b5-4305-9603-c4ca90f7ee3a"
        },
        "item": {
          "id": "aa8f3d3f-d7cb-40cd-801c-471fad5a276c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e4f03974-6cc1-40bf-ab37-3c8f7426c508",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66399259-6290-415f-b13b-012c2782fb52",
        "cursor": {
          "ref": "c0ec68ab-1996-4603-b75e-d331b68a737e",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7b6ff407-c431-46da-909a-cbad90da62f8"
        },
        "item": {
          "id": "66399259-6290-415f-b13b-012c2782fb52",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1918dba7-a925-4f2a-8b1d-dbada63b8632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d549242e-b51f-4ed3-90eb-bb7abaea1822",
        "cursor": {
          "ref": "57ee00ff-d2ef-4666-89b4-b1224d809704",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "bc827cbb-bb0f-4165-a048-5cd9f4b7ea21"
        },
        "item": {
          "id": "d549242e-b51f-4ed3-90eb-bb7abaea1822",
          "name": "credentials_verify"
        },
        "response": {
          "id": "58648572-0daf-4841-a549-eac960b92f40",
          "status": "OK",
          "code": 200,
          "responseTime": 1140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ed61ff-8c06-400c-b64a-20ee2605844b",
        "cursor": {
          "ref": "3dbc5875-a217-450d-8782-b5030d0062ab",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "149c32f2-485f-4878-be7e-4a07f879c8be"
        },
        "item": {
          "id": "f7ed61ff-8c06-400c-b64a-20ee2605844b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2e718800-7f40-4c0d-850a-a6a5515504d5",
          "status": "OK",
          "code": 200,
          "responseTime": 1181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f9fba7-913f-4d0d-b2b4-d8303ead7cc6",
        "cursor": {
          "ref": "4fc79902-79da-4635-b7a2-0b246de719eb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de494ba7-c6da-4de8-a92b-b018231a37c8"
        },
        "item": {
          "id": "c9f9fba7-913f-4d0d-b2b4-d8303ead7cc6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ded070c-0158-4226-86af-b910bd3e9067",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f9fba7-913f-4d0d-b2b4-d8303ead7cc6",
        "cursor": {
          "ref": "4fc79902-79da-4635-b7a2-0b246de719eb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de494ba7-c6da-4de8-a92b-b018231a37c8"
        },
        "item": {
          "id": "c9f9fba7-913f-4d0d-b2b4-d8303ead7cc6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ded070c-0158-4226-86af-b910bd3e9067",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131b11f8-cb14-4357-a7f2-0d461bfcac98",
        "cursor": {
          "ref": "b614323d-f838-4c09-b43d-5efe08ddd966",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "551c9a0d-3c5b-4dd7-920c-6299a1658dc6"
        },
        "item": {
          "id": "131b11f8-cb14-4357-a7f2-0d461bfcac98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0845dff5-035d-47f9-8983-fad00343732e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8de957-10f4-4ae9-b20a-b9efd5bf86b5",
        "cursor": {
          "ref": "9c8c1372-8357-4e77-ac4c-c80bd97de602",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "597a2270-114c-4aaa-b45b-9c712220a0d1"
        },
        "item": {
          "id": "9b8de957-10f4-4ae9-b20a-b9efd5bf86b5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "af199097-1e33-45e8-8d35-95eff9a4b85f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}