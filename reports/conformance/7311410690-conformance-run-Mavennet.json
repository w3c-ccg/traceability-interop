{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f372add6-9a37-48b9-a663-8231613fd8f7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c08c1b3a-7aa9-42e5-a9bc-b964d2deb126",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "278ad75e-d43b-4ab4-afb5-e3623e852134",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "11199a7c-14ec-4c5f-ad74-fadffe8a7dab"
                }
              }
            ]
          },
          {
            "id": "23528192-3521-4966-8948-0ac78a3a34d5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7369e319-84f8-4472-bad1-49c619bb03c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9fe7cb16-38df-4534-98c4-bd8755edbb4f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8ead0985-584a-495a-b1e2-f666418d6a1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1dc8441e-c9f8-4224-bdd7-71e8f65487ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "584eac20-7cef-4901-8c34-a2d57df6a42f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9499c12f-d444-4518-890d-346a9f28aaca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b30b6e88-2b2d-4674-ab29-62f1906357a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b328e725-39ac-4380-9d17-e783cd3de657",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5b95419-cf2d-4d78-bb19-14a601e8f23a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86125d02-c6c2-430e-a03e-606b3d25000c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1af620a0-1c2d-44d0-80d8-cfe477090b27"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4ed2c81-06a2-417d-8645-eb93c4c953db",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e7e9faf9-737b-4f15-a092-b5e2cc956733"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7585d627-7c5e-4fd0-94e2-fa24d1aec673",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e143a5e-5434-43dd-a2fc-321c95e462ec"
            }
          }
        ]
      },
      {
        "id": "b1d4a380-281d-421e-b043-5b99b2016e7d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e6e12229-f12a-411b-a812-bc75c6df7227",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99f653fb-547b-45ad-b35e-259abc71fa57",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b47a6ed7-3f4a-40b4-8f7b-80ea25f541de",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1773fafd-1618-4459-b1a5-89aa3afa6d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9dd5cb1-3dfd-4fb9-bdb5-c8ce20dc99c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c240877-ab69-4590-886f-4d8136f88946",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5138372b-e3a0-468c-a7f6-a06949248d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6734d7f8-2fda-412b-9e3b-f43a7683ab7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaa000d-0462-4df5-bb56-8408ba2acb29",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7076a029-affd-415e-9eb9-d22b988188c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c560ed36-1f70-4629-a132-30b138d82a91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb4591d3-fbba-4bfe-a209-e2d903fc895c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2f3a511-b8fb-4011-bee9-15a084e002d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ef8701-9f0c-4f07-b844-d846cb0ddbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62c63ced-56fa-4e74-b324-3666b3755b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99aba5bd-4725-4cfc-af47-917c08908677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e552ad7-1cc1-4734-8f3c-8195334d007f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "76b5da45-9c1d-4b0e-adcc-d33b03dda526",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d5313ba5-a892-4c84-b282-10336f8ca23c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bbe8c37-05ba-4f05-862d-b2e14f51fde8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "36579ee1-5cf4-46c4-a23d-144984d78a70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf314eb3-91c8-49e6-99d5-29bc28f8eba4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "dab550f1-a9f2-4095-8bf2-b09cc5ce1eed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0f58e5b-6340-4f14-b0fe-5fa2a2db3026",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62bf1f39-70d2-44b2-a27a-85fd8d7c6e38"
            }
          }
        ]
      },
      {
        "id": "5a824dd6-0178-4d8a-abaf-7f34e3df8f28",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d7502219-c61d-437a-b04d-d781247e671b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "418f8568-c3dc-4a8e-9a3d-5034c1ed7ca7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5ad88265-1c8e-4383-909e-106cd9ee0e79",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f566e1c5-dc91-44ec-b80d-2c09bfb96391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe65f65-1984-4b9f-8f03-46fe12ab8ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20c7e52-0f53-49ee-a9cb-60c5f570ded8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32a49718-c9a9-4f21-b730-997f8c5dc848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bee58a6-9da5-4a16-a8e2-00a917d7f432",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5caab1b-f9ad-415b-88ee-67c5ccc0ea5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b765c3-d421-45a4-90b2-a3807fbe4ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9a76ad-3b95-4445-91ef-718de4a052e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "745851e9-0de9-4c58-a2a0-df6b29041e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373d3f4f-9c33-49c3-8af6-16f5d52924d7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1378fe81-b686-41d0-9189-6617606b953c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380b880d-fe04-4e8d-91e0-0cbdae13ad65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a2f6f9-60d9-4f5b-bc44-8fd44b914def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ad2c714-f720-4485-9002-0b88686c9099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3730ba1-6c41-41dc-be21-2e49a6573e22",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b9d004-2d72-4be4-a7b6-5b832ac2a162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df98f92-e8a2-4e8b-b817-47dea8380fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0180fc15-6e64-4dc1-b014-1b0586db97be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "947b31a7-7ad7-4b97-a851-757ef620803c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11046976-45bc-4029-9d65-0f9590ef2fe7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c906a4cb-25fc-4758-b6da-59b5500fe38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6fb496-7cf0-46d2-921a-075282b537f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed56d6df-e475-4f4b-8fd2-89903db59a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2061167-fdee-4983-a831-b979f0336837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ceddd72-3362-46ee-a3d0-cd170b74411d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a9bb2a-4809-40e1-ae2e-c6d8cdf02bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98341ba1-d5ca-48b2-abe9-a4fdfd4853f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078cb637-1c5b-488f-9ab0-e23aea655c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f6c53f3-0e3d-453b-b5bd-6e55e804900d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac47be33-b802-420f-b9a1-269475fb0550",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00963092-6aee-4fd7-b39f-90e578d328f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e85d2c-facb-499b-8a50-68e19320272b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e83ab33-4322-46b1-ae75-479826a1a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "803ced59-285d-4022-ab0f-6180cd6ff263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8637df94-58e2-42ff-b166-e5355976c788",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b8101c-2dd4-4d6b-8397-6acfbab93aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c771e6-e5ff-45cd-955c-774fe858bdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6448d2e7-ec25-4169-9d03-d5fde5470e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62882802-a775-4570-a762-d849729fd910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e3c2ed-a5ea-4dcc-b5ae-0fc4e42a069f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4997454-e39e-453a-a109-56cbc649c4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ea197e-b878-48cf-9f9d-a3f1cdf86575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e52f486-eb94-4948-bf76-99b8dba9d192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b8078d4-1506-43f7-838d-8621c5f9c82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8047e6dc-0850-47a0-9984-f791602cc1c7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f71fa12-1994-421e-8afa-28e33d935097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12c407a-0dd5-4ce8-9e23-5602693a3f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271dc117-d1a3-4704-885c-ce6ec0514895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a7bbab5-6b14-4f0a-828e-af102af2873d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efdd31f-0e73-441e-8a85-400f13e46f94",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a888a8c1-6ddf-4453-a3bc-b1e6f303a67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837ac8f1-3155-418f-88fd-19493e3c1243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb79bb11-4f90-4751-9b4e-eae49063608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e6a8cb3-cb96-414d-a055-21169b70fd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7896395f-1f5b-48a6-99eb-bf48580a2f2e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60395ede-5a9f-4fa1-9e02-c3c695de5fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284b9b80-bc16-4204-95c4-168dc2c4f817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac6680d-4ead-4f09-8c80-2bb638dd5bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12e26eac-2652-4453-b124-83900d7059aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de77b1be-ec4c-4049-97c2-231989a5b64c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063cf970-6440-45a1-a9d4-0f8e2f775a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14a5bf1-5110-4d6b-a160-ef517a66fb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6647e947-1639-4033-96e2-a8a9d1ec2613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19a4a6d1-c78c-4c65-807d-9c77a3dad959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b86d04-6513-446c-b799-648bf83b3005",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d27ca48-6a00-4370-9592-5ef71e1430b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ca8459-ef27-437a-a72d-2bd1d01e581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dfa7c5-6655-4b03-aa19-ab37c7ef2e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7693159-0442-4aa1-9102-6a6940f9bc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6849d8e-e6f3-4a71-90c0-67e068f21229",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786fa32a-b956-4ad3-8cb5-a244137ba9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab5108c-7ea3-4d1f-a61a-a9f4189d1be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefc0e28-0780-49d2-9d85-b362c3361049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56593fc7-73dd-4c4e-9087-a75740c3a334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7c14d8-ab1b-4631-833c-de153e05c660",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227891f1-b815-4c10-8a8e-287046989521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85fb3d3-da20-421b-8b57-6c47d4daf5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd2df14-be0c-4894-9f37-fbc51f3056d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce370a7b-b645-423a-abfd-3dabf5f2f247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8030481-8ce5-4789-ac3c-c04572486121",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4232f6bc-dc90-4ab6-933d-5b72c6870124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b5fd92-def6-4cc2-8043-feeee6c9a318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468959ca-34e8-4745-a813-ee3e5a99531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "137e3917-f0ed-400a-9bf6-4f87b675484b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3503718-37c4-4800-9ef7-03a0dcc1974c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac60a45-8320-44a3-b0a1-2eb988b4c1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ae86fb-a292-4c95-8ad0-f9613da348d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1612f9d-e857-49d8-88ea-d2f8afb1c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5fb7de-524c-40a2-82d3-e4916a1bc0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808f9485-5237-4fd7-bf73-0dacc9f208fc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7acaef-3573-4818-9b41-bee0375d1b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2103b73-367a-45f2-ac65-b028bc247694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f52790-1f1f-423f-b9a2-53da4caeef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca890a9-8b5f-413b-9921-396dd989cdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aee9dcc-c1cd-43fd-b011-c7ce32674c67",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb410719-f488-4826-ab2d-0a54839a8ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8895ea-0106-4261-8a57-25530930eb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4382591-ac9a-49b9-9e66-679ab403dbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e465666-51b6-4021-ae51-408693b954a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad7d94a-5364-4e7d-b197-62835f0f3631",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a109c1-ba53-456e-8071-682cffd20100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767f5e9d-6b92-43d5-b395-524d96c61606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2477e60-6c78-4964-bb1f-64a36ba51eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1fa0b3-226c-4344-a9f0-176e8028e589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f8fc55-5b98-44ff-bce9-f96be87a4c3a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8994a7c-645f-4995-9dca-91db03acbce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99032f97-bc59-4d21-87d5-a08a4740eb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ceeab3-90f9-4984-ae8a-5efac9d74f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04839f20-d3ae-43fc-8dfc-1d79cc11ebee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7763335-6084-44ad-b8d2-1e90213a1f34",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adba949b-562e-4d23-9243-aa0d68e99a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4405b582-bf96-499d-9f8d-572f6b44911e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea4edfc-b357-4851-afb0-d0d19bbfd6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "845baefd-c4dd-4dbd-8a70-0c78207dc895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425dedd0-8cf4-41fc-bb8f-73e2d4bae5ca",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5e647e-7d27-47d2-9add-f77cc7b7e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d597630-9eec-4af4-bc44-90897aab5e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28640574-b508-465b-9fc1-6ecca8bbd79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a8be94-8b78-40fc-9ced-d6983d1d8b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70918260-3092-422e-92ea-0056f40e7e76",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d12029e-854e-417f-b78f-9ecdbbbea2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365a1a52-3861-451e-ab0e-05db3aeb8145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0974443-7e85-4c40-83e5-c2a576116681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "569db6f3-dd66-4d34-bd33-36b99a96a5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6b8581-3d45-434f-8c9f-0479c0d39fd6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d1ebfe-dae7-4daf-9f85-a915d523b044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16211b78-1bda-44b3-9592-6748d9533c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba40b872-a3af-4231-b6e0-475f6373df2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d143dc56-e82b-4bb1-bf1d-3c0e30e8a38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e70ec3b-2656-40d4-a6bd-3dc684952886",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a8412d-61f8-4fe0-961e-f0a7593e1a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b01861c-d26c-45b5-a7b6-b65f8726aa79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ad5bb4-5b5c-4aa1-9a10-7c2b0fca036e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "864fdd7b-9bab-48a6-80b9-bbe05fdb8a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340131c6-4f1d-46f5-adbb-9ee5f7ca61ec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c17da1-052c-405d-b81b-f095768b91c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60cd77b4-e9dc-43c9-affe-7f1d9ada73e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5565d420-d92d-4084-b194-224a98934b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3882e420-1cc0-403a-a6ed-f2b7695b4908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bfc2cc-83b1-4632-8b6e-a4786636a6a7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757a3200-4147-4ea8-8fe2-53465709caf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ed998d-7bf6-453a-a47d-939dc6dcbbe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f0aee-3692-4c96-9695-428bb8e976fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4933db-e42a-4626-88fa-6c2095424fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8dc2fe-05f8-4b64-af21-d9af0d0655b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176b3589-a9f4-4712-acfe-682513ebede5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5bd529-6cda-455e-a7da-45c4ce892f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41026de1-ed91-4418-a6ff-9c8b7f18299f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bafd304-7b61-48c0-bc42-d9d86693bbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9518f511-37a0-4ade-951f-900ae0a0b8ed",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2844f1-4cc9-435e-a98f-3cab65be0bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01428c23-010e-4de0-8433-92859c6295f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deba1206-9b33-4854-9f9f-9e47fa3d1083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "24d9c11e-83be-48de-b2ca-2f98f88821d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247fb584-9999-407a-adb2-9097c893d02c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437ddd10-515e-4af6-a0af-e163c6d6ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7979d4-7f7c-4cc0-bd05-0ec54b7125a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927cb080-da23-41c0-8380-7bb5e6399eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb292df9-e2c6-4803-9d6a-fd66219e9119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf5b477-a833-4e98-9af0-1366955176a7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de54a683-84ed-4e96-90fb-baa2a38138ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578a1039-131c-46c7-9835-02b7d30d05d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef97fef-10d2-4842-b3bd-7ba2f5910319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e59b370-6cac-422a-a874-1b0567aceaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df185f5-deca-4952-9464-52d6e721a7f0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fcf21e-c8d1-4710-92cd-c98d09f50be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4036d3-3df2-4f9f-b35f-48e14f46d041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773be57e-b18e-46c0-8246-2016e41925b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb23c5bd-3910-49fa-97ac-4e5f5ef0bc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdda711-0957-491b-8ff4-3a99c5eaa9df",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd98634a-7ad4-4de9-a59a-9e6105ae5f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6500ff61-356c-41e6-8aa8-20642548f727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df210678-563e-4253-bb25-d531637be623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d0d596-2207-42e2-ab27-0bf83e686b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc307d2-a2ff-4fa4-9362-bdabb54a65ba",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f51cdf-c86d-425f-abaa-2561007f8aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f520234f-0960-494a-9e88-4671dd06c856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d47bc2-ba7a-4504-ab15-c29f9df15180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51ddf3c5-140e-45d0-be27-a0668cef9474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a097379-b7f0-49ed-b707-2a5c3d2c7ff1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8c9191-b76b-4b5d-9d6f-7438e9bcf1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4ac1a3-42e7-4caa-9172-d2b176fcedbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5b5045-2c42-48ed-b166-582c14982b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df01db24-d435-4966-afc6-eeb224aeb9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de76062-6a03-4968-a4bb-f85c3d614389",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97573bf7-792d-459d-bda5-cafbcd2101b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbbe87a-21b8-4cbb-a14f-ce266adb7e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1252c8-bde7-4a79-b061-77a93ccfcaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "af96ec50-ffad-4d4a-93da-b41288c16621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c725593-2b19-4e5b-b4c8-125683ae7cb4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38f853a-442a-472c-a217-0c3d264419e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a736c1d-fbbc-4d87-b066-b6090b7efb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63465843-984d-4598-8084-3c3ee4db06f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a61e9f8-c0a8-423e-8485-dae625fcdba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5a4a79-790d-418b-b9b0-81efd3ecca4f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bceff55d-5499-41ca-92f4-0bb1233657ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1fc35c-2386-4509-93d5-ddc1a59571d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb57376-8e39-4c2a-9c26-91b577584871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec931631-8f3a-4c21-8455-418663e50362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f447c46-0cf7-46c3-8ca5-293036d52fd5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781993ca-2434-4f2b-bf7e-39106c265503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84cb7f8-a05e-46f0-9ff8-f53b6ab691f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59a4b3a-ded7-4a9f-a071-33c7fb7e2aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d61cf985-0508-4cb4-b3ca-cf7b1fa39b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10aede58-3f41-45f8-89f7-7a90b760b9c4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6871d101-26f4-4926-9f3f-88f5b5f1e118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ca6c28-f2e8-4ff4-bde6-ac5782bf3aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68398d00-adf1-4c5b-9041-ff1a031d0247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "acf491fe-3a4a-40fb-99ff-1d62f0c64c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e55d8b7-3a2d-42e4-b5d6-58e5c3ac3697",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d736e32-08bd-4b95-99cd-7f9fd27b8079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ae0930-b445-418e-a3a6-0bbd078a5163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b249939f-a1f6-4bd2-890b-cc0697750b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "64226de0-00f5-4190-8fff-2a50628db272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95315a8c-9138-41ad-90fb-33f7aa0c733e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccb141e-dc82-4767-add1-5b0f47428790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e7bd74-0eb8-4b17-89b8-9f24c7252e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e05d4cb-0116-4733-b210-339fb332ebb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "890e449e-1dfa-4373-9ce5-74abec397bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033b689e-403c-4040-9700-79485be4271f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf4a554-d8d5-47dd-9699-4662ce2af0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383015a0-624c-433e-8b0b-614b58cd0575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0936fa38-4054-4b58-b273-a27ae6239550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3631b4c-6688-4297-a86e-fd13d03015c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82b471a-a73a-4429-91f7-11f312b8075a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3d4637-99c1-4f0b-93cd-e1f5c9a62230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ba11ef-0613-457f-953e-c1d62aba471a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c8d0f6-360f-4933-b068-56eea368f08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32c6361d-7500-4f9a-8317-6df7d31fd82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66b86ee-4a37-4741-a0ce-aaa03196c287",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bd5556-3949-42dd-bd2b-58034b8dc8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687b49af-6aee-4343-ad96-3b557c54bace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c89423e-963d-4142-b921-ecc4dbf0ff44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ebce876-d2f2-4e12-b89d-c9623c13e85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a75486b-5ecc-44eb-ab90-7ee11ec43753",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc28823-f949-46b9-a71a-ef078730518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda0c23d-d9a5-49d1-8d37-e59dc5488dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d180eb3-5301-4d49-af46-1ea1ae48d217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9100b01f-0ba1-4173-8548-5cb2b1c975fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143e22c2-52e5-4eee-8a8c-9d9b5a2b3e10",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18375de4-cf09-4a14-8ac8-7a8c660fa63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3843a6cf-70e3-4a57-9a83-f46b51663f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18fd401-d640-47e6-b4f6-195d721125a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a131407-f8e8-4e1c-881c-affc0f325033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398208e1-92ff-451b-b84b-99f7408a31ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587c4120-acbd-4f7b-9be2-0c8ee81cbf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c4d1d9-f57c-49bc-8395-c10cfa1892b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282c4e4a-ead8-4538-97c6-15c311e1472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4501e0c-8c58-40a9-bd08-afec830571a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaf0853-d212-409a-a8b0-bd885df1585d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c55325-2145-43b4-8680-d67462bdca56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e793b5-0cdc-402d-bae6-4c067c75933c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076da7ed-5b04-45db-92ce-bc4ebd731ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "697f3506-3d65-4dbf-b1d8-62f9a631542d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb611a48-8f6e-4511-ac7b-902612df39db",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2bbb0a-cbf4-4b75-ac7a-1fa286709297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70aef2f-38f7-46cf-bd2b-08b50eb6a49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60b15a3-0ec3-41aa-a0a5-58082f73093b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ae3428-959b-403e-a5c6-db345754decb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22c1d99-c0f7-43c8-9a69-68d56ebca64b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd754da-7022-452a-9a35-d8e07b70431c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec497947-2a0d-4d50-be0b-e83c47245fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e2f698-9e41-48ae-a8ae-577e342a7f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82310776-dfcf-4557-9e49-7953e4af7c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf2bcee-ff94-415d-b73f-ceb63eb4a3b9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9f04f4-b912-4f3d-9e1f-204d10aae9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92d6a3f-f9e3-4229-a4ea-d44ef596ef61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaff1f7-0e57-4f29-abc2-fc8d6d161263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a010caea-7227-4fb2-a386-5eb7936aeea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa225ef-5186-4bab-9129-70bcd76a31b5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d0db63-4b5c-4be0-bc3e-157c5591736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ec2d3d-b630-4562-97dc-8129309b3b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f8580-6458-4c46-9e96-9f246335ec3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e9e9e1-eada-4521-9646-875924f8ec50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a0d9e5-37eb-479d-b614-8d365ef008ed",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca084c30-eb04-4170-bba0-b85c85ad5081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a1bbb3-16be-4897-a142-947c3c850afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa7aa8c-2c26-4f43-a54f-c659c1434f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "79d56635-f28d-4559-aadd-dee9f3c2e2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38db8ba5-24d3-494f-8a9b-d2a8fc918649",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4a12e4-f286-4d69-88cf-fe965cac1b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ef7c57-4a34-4be1-90be-05ab0fc5078b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37eac019-e6f8-41e7-a6c0-6ee902ceac91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9663dff9-6768-46ce-997a-cce178525567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b26761-95af-41aa-ace5-3adfc7aa7765",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fa0486-be0e-4429-85ae-0ca2a9cbdaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c081265d-ac64-4964-a18d-6e091ca15c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db39dda-ba4c-4af1-bfcd-e6a1456ca1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0468d019-5be5-4e65-ada6-af8f3857916e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb5f11d-3387-451b-aa7f-27bd7c8169af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f6a198-11fc-47d6-8422-ab02447895bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf26b26-d1a0-4037-9b67-440ba904ba67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7db44b-3e32-471b-a6d1-019de749859f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "73f19a1e-f2af-4aa9-85d4-a848740f00c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e706be-8915-4832-9518-c72db68d37aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2332a3c4-da12-4593-bc2b-98487aea44e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50f0f71-9d68-46fb-9e7a-729429c839d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1a9c6e-07fe-492c-9ffa-8c03065a67c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4521466-3f48-4a66-9d2e-55e070117883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfe93f6-809d-4b02-91c1-3f68eb82211d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b78f28-eca3-4a9f-af9a-6ac51edcaef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126c810a-6719-4e9f-8cf0-3bb0714633fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b10f74-0136-4b5e-ace9-a6bb4504bbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a385b8cb-fe57-452e-9b04-b111dc6b2518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc255b55-47f0-4a37-8998-98fd874812b6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950977db-3e21-4fdc-930b-c763087cfe7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce33ba12-be67-4617-a0f9-dce487216a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3356d6-329c-4e36-97fe-1d0065ebf85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc00ebb-3dcd-46cb-839c-db19a94f1748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dd6a6f-7a21-4c57-9d4e-be897cc62d98",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dc1f91-7727-4f4f-b543-c1ada3feb485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e1a6ce-ad0f-468e-ba71-78c9750bd8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf36cc6-d4da-4eb4-bae3-70d7e6eeeffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ebb7e2-1170-4372-88af-95c608150e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4efc5d-251e-4a32-9bcc-f44d4ef87075",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec5dc08-2566-4eb2-92de-4b843bfbc4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2747b1f-d1e3-425d-89bf-d1dca266cb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2c79a7-8826-419e-b1bc-2e40508bba4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b223251c-c084-49e1-a1a4-12bd9dfb4467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed513358-9dac-4a3a-82d4-94e9d89de33d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd93df10-bd37-49dd-98be-629e61cc1397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e81612-d448-4e70-b562-b71ca5ee331f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07875641-7746-43ec-b3bc-76ed22af98c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9d75b8-bbb3-4997-bf94-61643edc9e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7917a6da-12e2-49b1-b837-dc955db76d85",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7363377-72a7-4bcf-b1ac-73c7f6b7bb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afc2c18-1a80-49c0-8606-494a1045a83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59738284-6337-4f2c-a211-d96624c742be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00d7e4f4-593f-42d7-98bc-975b84f727db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2e3a34-f9e8-4e5e-b72e-ea10b7b13ead",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1296336b-0c18-4876-8475-2331024c4b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b728c796-cab3-4e23-ae75-b530bce77411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358eabdd-bfac-4d3d-b101-e40c70400718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "440e2e9e-7ec7-425d-b6c8-5c7dde750515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8573d5b6-34c6-404c-be5d-9c18ae5a9082",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0451a7f-3c74-41dd-984a-d531548d6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed19e6fb-8f10-40e1-b261-fa266fa9abef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f5d4b2-06c0-4f74-98de-f79172fdd91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f76ff2d-c222-43a0-a440-9bc757a7ce4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845d6f98-083d-49a6-8104-92a24037468a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdbaaa4-2c7d-453c-b051-f4b5293ad022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62eb284e-b602-42bb-abba-acb23e0042c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d0bcdc-618d-4623-98a7-f024df464c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93bafb3-7eb6-4a87-9a08-480984adde0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eea8d76-6cee-4d10-91f9-9ddac452795b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6010606-fb58-4982-9266-44f4181fb942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bf172c-33fe-4a14-bf2d-6bb7a222d031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18b1f05-9c76-4870-9093-264ecb6b4dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de7601a1-ac69-4686-b050-da93b0d2b472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9456d6ac-681f-4079-873a-268acfbf1723",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70363e29-5a27-4bdf-ab00-7541a4eccd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e6c96e-fe22-48bd-985a-d3c7a71b6092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f674fb2-e68a-49bd-8d89-066c2dd30ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f30ef978-52b2-420d-b148-195d5225525d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cf4569-7238-4f33-a7b6-e2ea8f48ed6f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193b88f2-761b-486b-9c73-e5e7314dcbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e14d96-e033-4f4b-8c6d-b16b89cfc951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df90b7b-99f5-48f8-a21b-142a51e85854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f33ee91-f49f-4df6-9d0a-504d93d4d875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbf4035-bd78-4a96-bf14-173728d0b012",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdea561a-3a2d-46ae-8f06-a95c1744783f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55c614c-35b3-458e-bd5c-576ec49dc86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab8cc7d-dcb5-485d-bb63-58fe069c7354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "196142a0-006e-4fdb-bae6-2d8b24f73624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e825f61a-8300-4ac6-a329-b563be6d9124",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2317b5a1-cc91-426f-8cf5-b0287818b0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbbcb97-47ed-4f5e-bfa4-fe6e4461b3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107027d8-a00d-4c46-a462-9fd96e6d971e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14630fd4-f551-4633-98f3-47ae0d7ace49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc9b939-6dba-4579-99fc-f3920edeaa5a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b788e37d-a372-48bb-b333-7308e6f771f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b522371-c27b-4e99-a844-e413ec2653db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cd5b3a-7194-4ca8-9b7c-b70312283f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67fee8d-df7f-4bbb-b2aa-b2879c3d8965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18df08a-a124-4847-b472-eac4d2fe6fdd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519d4945-dfb5-475d-9706-09cf929b21bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9baca232-2105-435e-b173-4e669043bb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f2a4ba-e0a5-4f00-b992-86d9dcff20f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee4a960-6deb-45c4-8747-96652334bb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6b58c9-102d-44e1-b089-1e2af27c2325",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f96bd79-1f36-4d73-ab14-c6d9442b5b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3745926-9bdb-41ca-8785-89d4dcd23e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9793cb5-02f4-4e45-a640-7a2ed9f4f320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a81e23-78f8-4b0c-80be-e04c5bf2514a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32118ce3-73d0-4882-bd45-521cb99fc3af",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b349e9-36eb-4bc8-aaaf-9d310d2f0493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486955b2-2560-46bc-a0a7-0f763a8f2772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bc8644-e436-4d95-9c95-054dc4fb6e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21c6dc6d-c25a-4953-89a6-96af777ec0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0938ce-5829-4774-8649-b561b4b816e4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b770a297-8814-4cce-938e-c456112d656e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5804b89d-0b86-45ab-98fa-1ca36b073c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f724c573-429f-49f8-9965-8b0d926e28ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "729f100e-672c-4e87-beb0-0a0f13d53201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cae117-5657-4100-aab5-630a100742fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03948525-add7-4893-92f8-c31af04364a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10362758-e7f9-439b-9083-c77b7e6b2310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d908c33-4d8c-44f3-966e-c77e3ccd56c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03b66ec7-fe37-450f-84e1-159af3eced59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedb93e0-94c7-4631-9026-84e4ad7e1993",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c3d88e-b75d-4031-be1f-2fea0bfce00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8275d5ed-a3bd-453a-a330-20a1fd357653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb2a25b-c859-4a5a-8228-30f5a4e599ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8cd278-b078-486f-a2d3-3752e6b12f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbb1f03-bb06-475f-b641-b469ef31fe47",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb026499-b52e-4c85-acda-c23b5c455fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3604dfb-3910-438f-835f-25319c0b381f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70b81bd-f2d3-456a-95c4-0612bda6e3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31926048-70e4-4e17-a56b-a9735af28538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07435889-2ab4-4199-8098-c234a3aab688",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3bcda7-d05d-4da1-af7b-fdb2be602945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfbf387-d4d8-4703-9cb0-e6076f63deff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cf8700-6a21-48ec-aa30-189d508f20bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c63d093-1037-44ff-bb06-78cb44629bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cf4c34-81a6-4885-95ab-8158f4879026",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822659b9-5a23-43e6-8789-78914e6bf358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee5accc-6ec9-42bb-8cc4-14bcb4834b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499ca930-3ff1-422a-89eb-d933afe03d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74259b08-19c0-4e89-8129-30b38c00b894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaae0fd-da87-4779-865f-273057e0323d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425002c1-aa51-4290-a9fc-42c0c59e1a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c686a1ce-67ed-446e-affc-b39b5e09d999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc830f-adbb-46f7-9db7-ccf37cfc360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e306bb6-43f5-40cf-827a-043fdd7bd6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5510b8a1-ac2f-427a-be5d-b0902b27cfbe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f2a57b-5cc1-42f6-a2ee-97a54f8dd2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699d6ea8-0900-42db-8ac3-0105772de934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485c7367-5dcd-4d92-999b-776888780d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d62018b1-d308-4e45-aa38-68256973a1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be75713-a2de-4064-8ad1-50aedd3ec3b3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe3f2c4-5218-4e22-8bcb-ca26cd6578a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57171c91-b7b3-4ce8-8d1d-4cab1823c30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f96766-fc97-43de-8c70-77f92d2df937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a920510d-7819-4408-b81c-37a2a467b735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c07c4ee-bb80-4609-9257-0ea771cde237",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bff81f6-1ec1-4242-a264-6f381fed187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c5e556-44eb-4409-a928-0ad039de4bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8145d650-a63a-4297-b329-2081b83c4a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d940e54-3f8a-4828-a75f-c9477fe938b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872667da-6758-4014-ad10-4b74a95aa65a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1e1d92-6f3a-4190-ad22-e34836907dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9525c9ce-8030-40ef-8670-68529bc66773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659378a2-bb8a-421f-99a5-118bd7ac7f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "481045a3-7f0e-40bb-be80-bf184e0fbe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db00b3bf-08c5-4c34-a145-b387d6ccca3a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5951b1d7-54bf-4916-9b4a-8f010a979bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b632b9-a693-4930-a7d6-cd31112629af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26593154-c7d9-4c58-bcca-68e42def3a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e026c56-0b13-4142-ba73-844463568ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55add203-a7e4-4ec7-bc80-cbcd538b4285",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94779396-7ed9-432a-b407-226e75a1d01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ce18f9-57d4-426d-a239-ecdc38269555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac16e4a-db84-4192-b70a-90f34572114f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6770ddc6-e6bc-4422-9206-6b73f337e9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714761ec-64ef-4837-9954-029a6054201f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331283e4-822f-4ab4-a9bf-9085928d95ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ced4e706-934b-419a-adb5-793527c13f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15570b1-a9fd-4efd-90f1-9ea98e85fc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3842ffd-9a68-43b1-998a-df297d99d977"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebebe131-650f-43c4-be40-894aa1087ee0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2fd3adb-4092-4ed6-bc87-8388219ea083",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc941e96-3e2c-48c5-b5b2-728f74b31270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89e4492d-c2c3-47ae-bebd-b705285951e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8f85e9-c868-43c3-8047-daf56e27a9af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a945eac6-aacd-4285-b74a-29b4754e3702"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98e4ecc6-7a16-4e69-9f5e-7c5bcf7a6d59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d1d4c3f-b8ff-40f3-bd23-4281259b8d6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67c79e63-a188-4a15-b818-79d49db846bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "691b9d7c-00b8-40a4-93d0-62418b2ff668"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4873ea3-6357-4aaf-a8be-e4d1e5a4cc9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "605149ec-c26e-4502-ac77-a6e8df02ac73"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "19f33d5a-015a-432f-8363-19531d9b0ee8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c71b4972-f913-430b-846f-ad0f355ab3d4"
                }
              }
            ]
          },
          {
            "id": "9079a9a3-900c-4884-b837-0c79fc23f97c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b75416f2-28e2-4cad-acc5-08388d11ea79",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "09051100-c8d9-401b-8bae-f1b52ad54e86",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9e8664-5791-4f1d-bd11-3c3c51ed5e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c4cbd27c-5ecc-4ddf-8c1f-a6ffa43b125d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2877ed2c-5d8f-481b-92f4-3efead8ee768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee58cbd-a4de-4a92-ad2c-ed20a36fa3d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a769e71-80bb-46de-afe8-fd7d91a26d1e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfde428f-a601-4d12-af2f-e017a2e9a2a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5d40b97-f9da-4558-aa98-0c33a3a9b8bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "872e5973-4bd7-4527-aa96-5472bee6b5e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19e98958-7314-423c-8f4a-709772e66c99"
                    }
                  }
                ]
              },
              {
                "id": "35c2b43a-81a6-44b5-bdfa-0d6234a3a622",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0beccb19-d195-45a5-bfc9-e1fa503fb442",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c44edbd9-5bfc-4408-ab3f-919f033966e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eff92e24-bcce-4465-adaa-5a02e2114f6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "43c75120-f7bc-4711-b473-93ddd55f81dd"
                    }
                  }
                ]
              },
              {
                "id": "599138b4-1ae7-4199-93d6-7bad0fb6dec6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c2b1feb-27ec-4acd-9fac-2c49c2f40626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "637bcbb8-159c-4b0f-9cba-c7b5508d2e48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62683d66-8f10-4bd3-9070-d635431bfddb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53687fda-7ddd-4942-8e07-a0120fb0d6e9"
                    }
                  }
                ]
              },
              {
                "id": "38195f54-ec17-4fb2-9481-a93da5f81eb8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55290935-9dc4-414d-8e6f-ff0dec93e563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb0095db-075c-46d0-b911-e687aef8a91b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4dca59d-7b36-415c-bcf2-7adc8310c7ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "313bb87c-81ce-496e-b7fc-5bf253f97ef5"
                    }
                  }
                ]
              },
              {
                "id": "c30d8354-8912-403f-9186-967f6d3a8e75",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fb48aa0-189e-4f73-9b7d-21567fc9936f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53a31ae8-4eca-48a3-8683-55715067f34b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5d150c7-b744-4f83-baaf-b459b9563308",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "36ba85e7-dd9c-4ed1-93dc-8145cdfe4744"
                    }
                  }
                ]
              },
              {
                "id": "ac9f9054-191a-4263-90af-45a8e8f6bb59",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71bc86b3-9012-4470-a330-4de858cc82be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29e66e9d-64be-4d5c-bf72-dae6a900e03a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd1d7b0e-853c-4fc7-aba4-5aa6fcf5604c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11b831d4-b5f8-42dd-8418-92f8df3120a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9a6b0a2-210c-41e4-be16-b96b83b0b28f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "616fcb04-ab10-49af-845c-45fc467b7bff"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09a6fc51-6335-491d-adf1-cec282789aa1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f69cfaac-de74-4d31-819c-48f81840ab57"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da0ad77f-5c0f-4613-b00a-782b57cbfee2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "96c99fa9-3b6a-4838-a4bf-47a28b4a1a01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7c9f45d-e9be-4d92-8d41-63527ca3192d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7418d4a1-f0c6-4e23-8019-0e60eea91e21"
            }
          }
        ]
      },
      {
        "id": "3d2ba68d-ac03-4dee-a85b-e70ef0bcb7b4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4d757aeb-fc28-4d39-95b2-a62918df60e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0dde489-b7e1-4d4b-a8ef-b41f8696d602",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39bd25ab-bb5f-4251-8314-84b900ecca52",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1b5f73-0263-455e-b29c-9c154de8a6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d83c09-8f54-4466-a979-aa15e08f606f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76388b1f-7874-4e90-a4fc-8ff8a31fe9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2010294b-cbd3-4fb4-aadd-b4028b9a012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65461923-e7cb-483e-a5e0-2153800b7767",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8f6baf-b5a2-4209-a9e0-2c6f54cc9efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b577031-994a-4bfe-b589-2fcdc960953e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03d5fc4-8b9e-4429-b27e-3fe732d1c038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba5c852-7a33-4db9-a816-79557d533ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bec1330-d297-4da2-95a4-5bcbb1b6cdd5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc059a1-57ea-4886-afd3-a1ee675787ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe324071-f952-40cc-bbe8-cbbb2ba50a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d38fa39-b88a-4482-bde7-20ef807e54ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f790f8a-b4aa-43b4-a67e-6c8797b550e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15df71b-a4fe-4f0b-afbe-10cfd9e91957",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57269334-c5df-45d7-9443-861aa1d83db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca00f032-d504-48ef-ba3e-93fa0205d7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c407623-e2c7-4407-80c9-40ae039aed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d67c3d8b-8c16-4dca-b408-245f3fb9841b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962a31da-539a-45f2-bdd7-b9d773ce9fe8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4195b2-3119-4656-b599-b881fef9f4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271e8333-0d81-4868-a3db-e24545e73607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0e8800-3478-4c1c-b0df-2b88176cb740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36bacbc5-f2a1-4fa9-98f0-6b7b74d1e4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893cd8d7-b65c-4f44-a962-03d888362d85",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71289ec4-dcc4-4304-b7a3-d11d444773e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d9a931-84c5-45e6-8ec1-17ca193ddcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bb0a01-40f3-4b83-bca1-fd512298c477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7681dc6-e7a9-449a-9ca0-f9c1454e2328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e40c558-2e40-43a7-a27c-87212d19d300",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e05816-964b-4e6b-a0d5-273b44c8a83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29235151-a790-41bc-b776-a9d06617ad58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d1fff5-924f-44af-be4f-d0ddc6b5c55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e085b809-8608-4f39-9195-9bdfe5067ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ec852e-524b-4b69-ac01-25c2b6ee37fa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a6879c-96d6-4013-b925-9f7401e9c96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94937e1f-3b1d-4f51-8239-d1dfc05a47e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfd179e-d510-4b46-b35c-d75a7d706fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b10ff00-08f1-4491-bb03-d41ff1e1f7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf5374-b9e3-457b-9078-5929b3902691",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f0a78b-19b2-4f0c-b7d0-d66d54328ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4de3c84-ba5f-4b3b-964e-1db8c5052086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db17aff-ba26-4b13-9010-34b854edbc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7a7a19-b9b8-4239-9dbf-1cdc637627ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f4abe2-5ead-4572-9a70-3b61cd30ceb6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0909ca79-b5c4-4537-a14f-cf784afe5394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621a24e3-311f-4ccf-92cb-9ffe5d4941b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189871b9-c87c-461c-8854-5b27539b7d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdf7be7-c019-4b2a-a7a7-4a1f20070efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1887d6ef-976c-4895-b3b5-7a01b06e45ab",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58246a6b-23df-4253-909a-e5abd62e8db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd21ed1-b674-45b6-ab6f-be7002275940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62994906-74af-4521-a66f-559ec744d9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "09e5a5bb-2b26-471a-8c56-028e503cd7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7113d7-5149-45d5-bfc0-b9c775f0ce9b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0742ea2f-01ac-4a46-b52d-7b07ffd7fb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc08f20d-7978-499a-85ca-893ecda5bd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a950ddc-1075-44d5-9c61-d6c57052907d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e95a3abf-06c1-4e95-aa8f-6184158b29cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04724671-2b90-4c15-bb86-40311c97aaf4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646afe6c-28fc-4369-89bd-d4a458435909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547be763-37ad-4d09-b47d-78b286bc13d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae175f9-1e88-4e5b-9050-c3603bde1c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b84738c-43f6-4a5c-952a-2ac405cb4658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45eb781-884e-4239-bd43-9cb4622df768",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1277f0-ab65-4c92-ba60-63347131ca3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8335888c-3cf2-493a-9529-731c00c9ab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c29758-2290-4ae6-afd4-db4fb424582b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce14429-3d85-457b-95c3-644c114a1376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debc77f1-03e4-4fae-b7d6-938f794b45fa",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98da41d1-afa9-489a-98b7-3021c6ccc463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07aa1f58-37da-4cbc-b778-3322c8ee5c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c08f7b7-ed29-4328-99dd-a31fc6de1534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "487de428-95d3-4e3f-aff3-28e74cc675a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b146ea-d8be-470d-9e3f-98e5c86430ff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8585b3b-be27-42b0-8a1d-47c4b1972e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1608eb-eae1-45da-a575-38a7829c926f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd68927-70ad-40e7-8ca1-9949dbe7ff1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e038fd69-03d3-455f-9013-245b65e4434a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb4f68a-d3bc-45b8-8d08-e091a614a007",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e625ff-0a13-466a-b0e8-a8b0574ff7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5416f58-daaf-4d70-86be-6d995934248e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f1eb80-352b-46b2-973b-506bf3d28ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb414a0-8fcc-4e92-afaf-56276e9fc5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedf9008-3292-4892-b2b1-e97cfb0980a9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e7d17f-5c2e-4418-af29-46a12a7d1f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00369fc3-8ed0-4c1a-8170-b8639e438002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda87efc-b2d7-41d0-99b1-a6a4f7d82ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8336bcd0-f67a-449e-a389-cd67ae3f80d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f65210-9cbf-4d0a-9a97-ac760bf395db",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e93264c-7fba-49d0-8e93-bbb91ec66588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743f8bf9-2df6-43fa-bfd0-62c28ffaedfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb46497-1ff8-4305-ba55-ab5c6dad37e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52376c4c-e113-49e8-bcc8-72334ecb9404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c866563-ba17-44e8-ba80-a929c94b2697",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3f0455-c39c-4c69-986c-50ac6dcc41a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2694077c-f0f9-4fa3-9d8b-9f2bd796f91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e5b710-9e1e-4660-94f9-b56f986d8b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d27ff1b7-9b25-4e86-87af-f72a5845eee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85729e52-8c62-4914-8a43-2838aedbb4b0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a0a928-c6f6-45bf-87c4-44ef3030a98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fc269d-015a-441e-8f0c-f884712a8318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d2ac3c-cac8-4004-8b7d-1291f24436f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e47787-40a4-43e8-b973-b96b2ac9cdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f828051f-6ace-4cc3-9f15-e27776754a6b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b47e615-6e5f-4e36-8e1f-7b0c22237244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ee2a27-9c71-49cb-8033-c6081505ada2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b69bead-d10c-4738-9bb5-7bbc29f5f58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b96ead-c9ef-42e2-8e5b-3e328a80c09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca074eff-8dc5-4a65-900a-afa882c04816",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511bc2c0-3989-4b9b-bfc4-88aacf0775b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70906534-db66-4733-a472-0d659f8774ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ef83f4-5ec6-48c8-aefa-ca9fd7a8df40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7948aa5-fec8-4282-a041-0063ed1c0285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d88344-7dd5-4d91-a4b8-f4c849423fa6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819f57cd-6851-481a-be7a-d748340b1dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ad51e0-891a-4db1-a278-94f9f4d70571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d137839e-ca64-46cc-87d2-485062137a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6a5ad5-c7b3-4011-abfc-8ffb2c5c7bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccb55bf-536f-4d89-82c3-873d0403068c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337c3fed-4c5e-4d91-8e89-205e69d5a2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd794e8b-b2e4-4382-a0e7-e2f6d1c3349c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a022abc-cc85-4291-85c2-4ebde0c008ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "463be2d5-cde4-4dd9-9399-d8949a735584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140bb038-b4c7-4d90-9da8-955c869f93b1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8b67a3-255b-4cd5-a97a-3f62a25cfd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fb9eec-8d3b-4cda-8dd1-6047fcebd103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c121bb8f-c0ba-4e5e-8514-cd61d3cf515b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f72dc2-40a4-4596-8d6e-6aaf784f4eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80ee6ef-128f-44c2-abca-f51fb94bb21a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aee326d-889b-4bc7-a362-ea7210034b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c88a0ec-0694-402c-b9ff-84fdf21af285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b38cce0-87ec-4f0e-ba46-e8329b112e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aff08363-239a-402a-8a5f-73db93d9af6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb714ec-8ed6-4fd0-8c65-720a3e6503a4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954cd7df-459a-4850-a57c-38e656756fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9412df34-269b-4d10-b139-fa755a534b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0194c585-388f-482b-9f5e-df1c4bd79bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae4b29a-6e0b-434e-ac44-94afa3353984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7533d4-3ee9-457c-9142-d0f9a03a90d3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44067ab5-8e72-40ce-a72d-143c749b0fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a551d76-b706-41c0-9ed7-5cdfbbdb07d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a50ee3b-22d8-4545-8926-67deb0c9c7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f24d55f-c333-4964-918a-60963cc47625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d01cc4-c6c7-41b5-9109-f940f543d158",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e262f-03df-4f4c-a7a3-f68e0b10df65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79784c3-c3d7-4e52-a417-00cbe4a434f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afbde5b-8e77-49f9-b917-81e6a03fac7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb97ac7-a67e-4b79-8de5-dd40125edae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7375c5-c65f-4a23-9180-daeaf1aacf86",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf6ee47-05a8-4b8b-bb90-48fa83037334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c383b0-9b47-4bd0-b3fe-73dd3a8ea2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23f8a3a-ec47-4956-9591-7be6291f4d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0faff192-60ca-4b3d-baa5-5c9c25e04e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b35c022-b43e-40c8-b8d2-46a1b5fdffe6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abcff54-d028-4ba1-8ae5-152683c968bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b411eea-93fd-487c-a1de-6cd58b5a1871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31091790-1ccc-402a-9aa3-b9c4cdb2b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "930884d5-2858-4501-b441-b5c2a4a68c14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42e1ec8e-114f-4f1d-a2d9-a9e109936ac1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "adfb448e-5683-469b-b681-458f6e97f430",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b25a770-49ef-4715-b530-6c2817aeeb39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "59eeee41-047e-4d08-8512-181c97714ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6424c414-f2c7-4e4c-aade-ef90290a4629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dea182b4-5beb-4f79-92d8-166f4889e2ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e35a016-1c41-4fc8-85f9-a1935aa94edf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "592918f8-4305-4dd0-87e5-85154dc27c9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed38e8ff-6d97-44b2-921b-6b8dce2f5d32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cba4c057-44bf-4486-8343-017c3a035779"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58650bc9-2323-4542-944b-67e2ea0aa193",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "862e6120-d4c1-42de-89b8-31317ca500ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d909bff-9a61-4ee0-a03b-f0eab85f7090",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32e0d0a8-bf55-4afd-89c4-0551237376e4"
            }
          }
        ]
      },
      {
        "id": "227bef06-4c4e-47d3-933e-ec6f6ad58c9c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "96fbb030-6784-437b-8fef-13b60d8a785f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7ea1794-4af0-4dd4-ac69-909ad748acee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2a9b4a7-fd7a-4e89-b278-ec6b591f874e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5871edc0-cb25-4e37-9f5c-0996f6b628c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4529b79a-163a-44d9-97d9-766760b30272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bba89b-a7a3-4497-bb68-3720e6bd6e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c6654e-e241-4354-9bdc-af055ed172ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3af437-f250-4ea8-89ba-ebc961b2ab33",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caed059f-10e8-46d9-ad22-17442bd5a796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7c7076-dbab-4f9c-bf08-d32fd16b7e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a19899-c28d-4a67-b109-8750d88b31ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "370b5ffd-124b-4515-aac6-c46643fa6af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a07b17-5712-467d-81cb-7ca9d5764481",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c65b119-f674-4f70-adf9-23d758a356ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2b4f5b-bd7c-4976-93c1-368af1b3e4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c977dd75-35ef-4ebb-820b-0eeb5f021484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "331e2228-2605-4075-b0e3-a7d0a6d95229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c67b470-d592-48a7-a595-2ad851ce4691",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25b7a7a-3440-49e0-a914-6b21da8e0263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2497e4b6-9683-4198-94a0-6ee08ee183b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c161558-f95f-4e50-9fd2-699d9e1e3abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc34b50-0248-44e0-84ca-b36688fdbddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a099c0-f121-476f-8b1e-e033fb4d3db7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1f0327-e796-4c7d-a9e8-bde430cb8463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd31947a-eb78-4372-a235-4d98990de21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7277f80-dd64-4acf-a9a3-8c173999333f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3482a37-17f7-434b-a9dc-b39e7c81e2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628b9e7d-77c7-49ab-a93e-7b260ea607dc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925140b9-83f0-46f6-8289-9f7a37a19bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f534dc87-c9d7-4128-b6b9-583329818222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2032c88b-1f0f-4df8-b0b9-baa561688015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1912118d-2749-4c52-a69d-95af3ba868e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e82063-2188-4c77-9558-f05dbadd7646",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4facf020-8ee9-4b54-88a5-cb0d3faf1049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47faa82-bebc-479c-b497-84a7606404be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31e0a7d-da87-4498-8c79-780ab7d72902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b10c2057-da6d-4824-a6c3-48c686a6a549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e0fb7b-7fc0-4f3e-b360-bcb26bb2a335",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7288d5c8-cb9c-4d52-9d6c-124b7261d010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19814e4-c7a9-47ca-9820-9ee4096d7dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfb7066-6979-4b15-b61d-5f26a6481f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae649f6e-6cc7-41dd-9066-3b610ef48b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca5fd1f-e68c-4a9e-9bbf-c3ca1d419299",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b538f8f-3e30-42ff-af15-208468aa8701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d9e559-f2b5-4fc5-b06e-d8ce38d83594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80fe9b9-0725-4d12-a6fd-182872a0b456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "672407a5-c908-4461-958c-3b01f583c5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66f00bb-03e8-4b83-9742-992efbefb413",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3c0b7f-5c61-45d3-bb2a-8998d107a14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef540a13-e37a-4e56-a6bd-6a7afeb3e056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0df8cd-54a3-4b21-8ae5-b07ecc784e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a2b684-b472-4e4f-8220-209b9ae6047a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555ba615-f449-406e-9be4-f625836e642c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272c567c-9deb-4d19-bf0f-59b89329f029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426b676a-056c-4d81-9237-651629043ecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af346145-58e3-4a98-987e-edba83f3784b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4281bd04-e181-4fe2-8c0f-79af6a26313b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3e390d-9f05-4d2c-b620-a665296f3474",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73437e83-7f3a-4daa-9218-4220ad22ab4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac744e50-c6bc-41e2-86cf-ce549fb06c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde04a70-4cf6-4bf3-a422-e4747e3eb4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a581947-fb06-4387-92c9-ebd70eb3baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0394a8-4995-4469-a9ba-022d3b108199",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b144e4-e5a7-4314-b9cb-5320829584d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e63d3c6-ad75-49d0-b7f4-bebef667d2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83c9950-ce92-40d4-b221-bdfceb472536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a6c0c1-e3c6-4bc8-8220-7de1bdd4ec73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0156c4-1f9c-4297-a183-58a1d037b5c5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eeb2b9-f4fb-4958-80c3-e3f926e4bce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607e05de-644f-4cd5-ac9b-6a2fda2c8b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74224a6b-e155-481e-9755-41289dcaf7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dacec095-219b-4750-8979-055f09540c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ef5784-c234-4db8-a72c-12a6e92e04f3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea1b485-ad97-4acb-ba4c-5c9149db4b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2674271d-0322-493b-b041-c2a705c9f71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0b3ecd-2426-48af-9341-db4ef2a3dcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb491f4-9711-4473-995a-6376c7e520d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bd1e74-c9b8-4cb0-8287-8e566930ce61",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34cc5d1-4d94-48ac-b11f-87bf6d3f55ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d79722-d526-43fc-aff9-e9f4e42e73c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bf29fa-641a-4d07-8537-3ba530ec5abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41cc1ce-27fe-4560-a310-26469102f162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8291a6-a6fb-4a54-9fc4-093875eb88b9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4c0a44-39cb-4a6c-a070-92098fbef60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a329a3d-79f3-4684-a1f4-b90c8ab51593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f631b95-cb07-4e23-9246-194d45df3497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad33e16-f721-4d45-9fa4-4a3556609129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb1e095-e4a4-49bf-a509-2a8bf7c6ba7c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accd4acb-97e0-4760-9f52-cc3b1bfbbfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cd0bd1-8bbf-487a-a96c-a29a100b21af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc467d1-9d2d-47a9-b557-64636bf08875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c948807f-94ab-4057-905a-befe97f85447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e555890-a1cf-4b5a-9f88-8de82989c8f4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0144b1a6-1c36-4076-9e59-1169a83890fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8748592a-f66a-419b-b398-7c9db837ee49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83723a6a-871f-4f07-b78c-22ab4772be51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a03e50e-d609-4cd7-be59-c7495a2f2446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2131012-1372-4c8b-87e6-2f3986e283e1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122fa718-38ab-42a6-99ec-13ff4bd0c3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff5cb4d-17f0-4702-adfa-db20f821bdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d5f672-e5f5-480d-b2c2-80d601756df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba0ebe7-0ee8-4782-ba98-1e72df19b858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b02fba-387f-4f34-be5e-fb531ad2e40b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcbc9fe-f3af-458f-8aec-6d5bea0f0cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdafa89-02ad-4690-b1b0-08adb9b197fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63377432-96d8-4180-a0b7-a3d4add1c859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53097228-c50e-4e96-8996-05d9c3d05d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303f9e58-9a82-4e23-9d70-a95bd1639e86",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee07196-f9b7-40d6-a351-a2ec3c36f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a32f5e4-c762-429f-9d5c-a23bb2f618fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0de8939-c379-4299-8d6f-5d51ea41f326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce841393-5cbe-4d17-8f59-9e585f6f361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642b4774-64a3-4e88-9043-3b3d5467ad87",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67491b1d-7ba9-4b4c-ac7e-7d8f7a8cb695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d508a70-db01-4fe7-9932-f8bf8666871a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75f6efa-f58e-4b0e-8634-2df179edb0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c76c294a-63a5-4eca-b467-b38a277c7d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6551b2-49a0-49d5-9a9c-c565fff99859",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7434bf-580a-4339-9962-706f0f8fa1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498d9e9f-6c56-48db-89a0-7be93301d280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909a6438-31e1-4247-9e4b-1464fe093a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d2c1e3-9f3e-4cac-a79b-595733a5bebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560e4de0-f98a-4669-af54-e6de3f1beb43",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d90ace-7d52-4899-b354-5edaf6df4abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf33748-2d5f-4340-856f-303967960231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb347327-bd47-4d1c-ae0d-7f6489c8b2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4b5cba-78fe-4336-bf7a-ce962406b2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca6a315-de27-4336-8a5f-553d3aed34e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30f00d7-c673-4e7b-b450-3352a1a6a959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad101d16-56d0-45d8-8079-66510729d8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a90f381-1df4-490e-a817-bc3933c9fe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65a0980c-b721-4fec-8bd0-4350d027cb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b48b567-5e3d-4db0-a33c-e6b50ce43d33",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389dbe13-683c-4c91-832b-84c2820861b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0496c7ca-6f08-4e73-be0e-1f2bb931e27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d92d33-e1f0-4177-840e-82396c8b7726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a36127-a54b-48b7-8304-26664640b462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736e9e63-7b2a-43c2-9e2e-bac8429a30c8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1779d52-3e95-46ac-b8fd-134828db6f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f707334-f3c5-4179-937b-5d7704060537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978bd054-ef66-4e6b-965a-31dff7f596fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b5353a-92f2-4d39-88a5-4d7986112348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0558f3c3-5e5c-4ed7-ab95-a2420778056b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f1bfc9-f301-4a34-a7ae-07c9b8851a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5b1d6b-6592-4825-b281-6385a4f92cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d7252-06f1-4411-9cae-a9136c3f7447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fcafdf9-9c0a-44ed-9076-999d9fee29d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d32a4f1-811b-4ca3-b0d9-4d13f4a4ad9e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33529dd5-133b-485b-930b-6251ca0bf7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b531ced1-f653-4aa3-98c3-5f2fe73182bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff64825-8912-4d04-9ca3-4ae8b43b083a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08838baf-3703-4da6-b8cc-41e48ca0cf7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72197b13-042a-41e0-aa11-1aabb51e202d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaedb2b-0513-4e20-88af-fd219193a4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf0b2f4-b5a0-4dcb-b976-b6797e701da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6603353a-ff06-4830-a352-05a9edc6a341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3b50dd-85b1-499a-be94-167220da7897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5bc171-eb1c-4855-bed8-3f73e0c03dcc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd203118-096d-43a9-adce-1cc68d3782a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5929e5c3-97c0-492a-bea1-5c90e11263b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b310f95-b1bd-40fa-aa95-d3f9ef146bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90c9ff4d-bd67-468f-b54e-fd7325b793fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71414386-fa9b-4bb2-ab5a-1b94024bb338",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32618ca-7bd1-499c-bc97-03efe01c692a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea462206-40de-405a-a9c0-761b0250b8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a9d0ce-6a21-457a-a0c0-a547e5f4eacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70b5b43f-2945-45f9-a413-20f373883866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae59c2c1-49fc-49f7-aa4f-84bc19b11cd0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f40cd6-b806-4194-861a-ae6253f0ad3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad6c25b-513c-4173-acbd-5556955df425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772962f8-8851-4893-9181-34f5d1fd9caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9198fe1a-ce38-46fb-b930-6342ab3df7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e1e403-e108-4a9b-b405-24eadeb6fd21",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ca1ff6-f84a-4352-a880-09787f565553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c26a6e-01e4-4498-a5fd-e5bb2396bb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570af108-4c03-4189-9706-84be8859c70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "065ac43b-c54c-40ae-9a8c-3c093663c79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204d0557-3288-4af6-a6c4-f95bf59294ed",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617b9e3c-5a5a-4e88-92e5-a079b9dcfff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e655ee5b-175e-45fe-b213-9b78dcdac6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf55ef2-c7b8-4818-a01a-45ab1de16169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3ef5b0-43bb-4f9b-8b6c-375314b06c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4440e8-aca9-4ee2-9e26-6bb9b5106230",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59907f1e-924f-45be-bcfb-da1f20339581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253bcc35-baf1-4aa4-b880-aa4822e25f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4829911-af08-4cf7-a572-5f8d5e3f15e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4cffb0a-5796-4184-8e22-2786fedbba57"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ea525fb-bd89-4a70-be6d-5a79a2b4d3d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95c972ed-e229-4015-8f0f-665dc89898a3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d50e521-2814-4f3b-b52b-0d8a05ad3046",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b08523a7-1b6c-4e80-a3a2-24479736376a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c009747-ab76-4cf7-ab96-43b76b18003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bafceea5-8dba-48d5-824e-7543f8803517"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13b92c84-6c1b-44db-8c96-5af632fd6e42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4e8a359-bc80-4b17-a7c4-9c9daf9ccba7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aee0f48-fb15-484f-aa83-84d989d55835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a970812-5357-412f-be38-b7e4c1d69fbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61bd8d9a-1c1d-4e7a-aaef-64b31088a332",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c3a56d06-c732-4b85-9863-3e5d05867106"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "700c87e1-941b-4a83-8132-a3aced0bba9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0e19934-dfae-4724-85c7-b8507beb5108"
            }
          }
        ]
      },
      {
        "id": "4619d98a-075d-4399-9eb0-b21fdfcd4348",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "51549032-7156-47cc-a718-dc5c059abf46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89e4a154-6855-4e3c-90af-b4a568dc9916",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c67ceb4b-0a2e-4594-bf54-3b9656d94bb7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2e8046-c753-4638-be0b-75b2940860c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b147301-76e7-4cf5-a795-47e0c22dc91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08add31-cf93-48fa-8566-20ccd95d7af2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06116577-a480-410a-b3a8-1815f938a7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4b60b7-fa10-48a7-b1cd-e567c2893b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42e2ca8-98c8-44ad-bb0a-954f74ad3b92",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a3bd74-caa5-4a62-9a12-923d1e50d2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b8ae19-f4dc-42d1-9bfb-2754a5de412d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae1ad07-38ef-4f1e-886d-764f3de16522",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1411992-c916-462e-819b-4b42f7e53006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba366e0-b1b7-46df-9181-cbe36c7abb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660c8c5e-bfd7-4a1d-9f05-6d68f113f13b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5f8dfa-48df-4019-9a30-bd0783bcfec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fabea00e-ab9a-4238-8de9-3bff539e38b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22162d44-a4a8-4776-8e30-fb76b6e8d1dd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce1b574-a74d-4588-be6e-e5913730c457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb6737d-dfad-42b1-a788-c3b505862517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24ad71f-6135-4f01-a204-88845b48c4e1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48a9dd1-2a03-4846-bf2e-c5b4fe4ed106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499986eb-05e2-4002-b712-0a7adb5de591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b387295-7d49-4386-a947-7e3b27fa3f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54192c9-aa7c-4852-8023-1b9383ddd9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183fe739-6ca2-4711-b414-414f78739175",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469f69d8-d85a-463e-8a0f-b48e63276b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50d44a05-00df-444c-b62f-213539437baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b86c41-f1eb-44c1-a8fa-a5747ed31f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e6133c-cde2-4588-be8a-781d2563fe7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2031309b-f94c-4c1e-85cc-60bbe027e09b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96edb17-020c-41be-ab2f-4371cb8a58ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84eb033d-5bf3-44f7-84f7-87d0d12ee063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f98a65-04d4-4f1a-b3d6-7a5580dfa5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17487724-00ea-4e77-9e53-b1aea887fb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d17944-78fe-48d9-8ae9-4ad4c21dfa86",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcfd1ae-4540-4655-a1d4-8189e1e04e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243d2fb4-a331-419a-8efe-95d58591ad02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4eccef3-4f1a-4294-b867-cca6a6dffe9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d73af3d-c4ce-4261-8c1d-1f4f753d9b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed00f1e-d76d-487a-8255-ee34ecf15eea",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291bdb30-a0fa-41b5-8d4e-75eefe951168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d233b3-1bfd-4068-b1fe-b1a473421019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a079bca-8a91-4726-8a8c-306f511987b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1bd25a-dd39-4388-bff4-bfe8baf92068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144f7b40-1a68-41c8-b384-488ead987758",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0272178f-7cf4-47d1-ab3a-14590ef4413b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dd3b99-b772-45d4-88ac-a8ce8fcd56db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c671d8e-097f-441d-9c38-b83343972905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5476d41-023f-42d6-b2c1-049402ed4d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391ba244-6442-4252-86ce-fd3ac780f737",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5376fc-3090-4442-b7b1-76b7417a64ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd0cd2d9-31a5-4ea6-84e3-57b6ab592fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f7f329-96cb-4bf5-b953-e476ed6abb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44669dd6-25d7-4d81-914e-4d0593d81a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657ee31b-7d81-40a9-8d4a-c96d8f02cbd1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6615bd-43e6-448a-8e6c-36baa990a8da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d783f5-9f15-4f7b-a13f-b11bb4c5a41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9859b4b2-de73-40a2-89b5-3bd3e16fa60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af35f75-c28e-4643-b0a6-eed9bb695a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22037738-27ed-4336-8b89-680fe3d327f2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf458d7-af6d-4b1b-90e5-3591864968b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5908baa4-e5b8-4987-a31f-62ed5837d8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63db631d-2dce-4f20-bf8b-871459bf347c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fe5143-e154-4c3a-b830-437978c808ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9d9390-6f86-4e0d-adac-32f0506cbf7f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7252e125-e6aa-4772-b126-fc143ed2271e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf396bb9-ef5d-4911-a533-7529ae984643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37662c72-a8b5-45aa-bd20-547923f7b9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935b90b0-5c9b-48f0-9232-c0f479055b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d9e159-51b3-46af-b3f7-fb56b29bc40b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3beed4b-cfce-41d8-a1ef-833da434e77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0a153d-d049-43dc-90bd-bc54806272a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2eb294-fbbf-4a19-978b-9dcc6542dabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f234034a-b575-4319-9322-fe799c816342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9f5420-0057-4813-9db7-e30ec0903b4e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75c92c3-e180-4cab-abb1-8c9e75729c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f3b96d-1ffa-46e1-8535-cc66c8f0e4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42355ce2-75dc-4e76-9aca-adf78d19c247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623efd39-3929-4364-8a82-907a656f8783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81856399-0c48-4245-b308-e3d21b439334",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5e8e71-8bf9-44af-b487-33aaaeae075a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82f9060-de6b-420d-b24a-fee4ddeacf61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69704fae-ad95-4802-8d7b-bbf7f2584004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94170d4a-6768-4eea-9b4a-543eb6a6cbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c9be75-1512-4559-9eae-90474193183a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ac1989-291b-429a-b68c-a9acf27fe285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd43e23d-31b5-4472-8b53-1002609629a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff322db7-17ec-44cd-9ec9-2fe9808ba1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05077f6-68f8-4f55-a36f-7ec2f4518b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbd9be6-0b97-4073-bac8-d64ecbb5e9f9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a60626-fed6-4dfa-b25c-42bdbbf10397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af8d32d-857e-4355-9b93-66e2ef3b00ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512ab764-5913-4c78-9487-d59340cc2e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf6f4b2-6cfb-4f47-9d12-de2e78c00e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09711ad7-7c30-44fc-a317-c4b705dd8d8a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a78bbf1-01cc-449d-8de8-1a996eb49335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd15efab-3cba-4699-9ef9-9ff5b546b267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f32377-ebe5-4f4b-8365-d9fd68e8680a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b987d783-ceb1-4b13-9342-1e8ba3ae3fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15078f9f-afdb-40da-bc29-f1d6c5ab8194",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71af8fa2-ad90-418a-aac9-33f4075a1e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b070c647-ab74-4069-b038-4e2d61b0f547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5928ce4b-ad97-4434-9b86-49283ae509b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd0cbd6-d99b-490b-b34b-e427fe6c3409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d8da5b-113d-4d82-aae1-c03718feccc7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd52c516-c5c1-4eb0-8c21-3e31f5f564ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ddadd07-7be7-4598-86a7-c93414203de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829e2535-8970-4e6a-b587-35f3ab07bbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04812d06-fadc-4f2c-89aa-4b859f30b906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a938e82-5ac5-401c-8a5e-9cec4e14598c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81988eb-7ba8-4733-90bf-87de68cf26d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce422b58-1b20-4357-9f71-a4e20c18b25d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794c7ed1-fcdc-4282-b8bb-d40b58fff538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d147db4-168e-468a-a1b8-7ed6a6d519d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a26446d-2d9f-45e5-8ff3-2d7fd8988dd1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24f4825-a81e-4b49-ac5e-7c9c440111d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23d31f2-9966-4ba7-a7a6-82a5c7dde7ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522a7918-f1a5-43fb-a443-681e2a02c8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3614f7f-192e-48b4-9cdd-8b3c7bba630e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6e093f-d238-4177-b1f4-6edcb22b5261",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6657b1dc-04f5-4efc-a81b-88e5bbe3335f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "720a8f09-d686-4ee5-9df5-d050d0a97c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c5e491-4939-417f-bd49-0ed603434206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad384c5-944b-4c2a-b48b-a03ca8fb531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833331a4-462c-4864-9c64-837c15947e93",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403cd745-f231-4f63-a7aa-f234751e3e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80875917-2510-48c2-84ac-e2211203d660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6a93ba-c654-4f4b-9d24-c3da58cc4ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945c5b2a-2b80-43b1-bfe3-14bc447973e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0461c719-caca-4db1-93e7-8bd63d594b53",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8784a2b2-bce7-4897-814e-b5a2a0fe1010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbfd37c-d283-492e-8cc4-683fab423705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33d84e1-1d4e-4236-ae67-a4b71febe2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35c93b6-0c5b-4485-8739-912e33304706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8921d0f8-b642-4dc8-af3b-3034a9f1b0a1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6ba8d9-dfd9-47a5-a2e1-96b00921c816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab5f323-11f2-400b-a491-059f4be147d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d734b7a5-4da5-4d67-9cd9-3c304fffb6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac26e2ae-4c91-4c20-96e7-d071418aafd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0545e87-6e79-46c4-83fa-44934f117f10",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846d8e27-efe7-41e3-8e76-9f2e98c93dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f749b9-e04d-4661-8b68-da576f2cb345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b287d07-057a-4376-95cd-459cc0cb4980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c505f4d-6434-4499-81af-c792bde8386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9300e39a-42f7-42ea-beec-1d075ff543ae",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fce1d8-550d-4208-b0a6-8cc2a01857a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9d6d36-11a2-4369-8f67-ba056f85e1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5995e54-3587-43e6-aaa2-60b73b8f98b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8287cfd5-09fa-4080-bd28-51a371f4051f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e7c2a4-07f6-4b89-b172-0e9467ecbbea",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7273250-cb90-4ac7-bfd9-96ddc0392e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292a4e1f-d0bb-4078-9c6e-d7dd41f405a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebea2453-0c06-43a7-92ee-e699ce9e1086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2623bad2-38a0-4f6d-a556-819d7b4930da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc6d5ae-40e3-49ce-81d3-a3fda8992341",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bbe8aa-7410-4927-b026-d05e7b7c67bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef2cf313-3b3d-4f30-9acd-c155e7f363d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0db1bd-d6cf-48fb-ad7b-c9128a1ae800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8316fe-14b4-4919-844b-bf0cff45f12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3881dbf2-5e3d-4e57-ab0a-04f76817f853",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e350d0b0-b39d-4fa1-827d-d11bbdd557a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79728f08-3d15-4b82-860f-28ceb42ec157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12098b7e-7839-4007-bb10-8ddf73fd0727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad94472f-5d2a-4c25-8f84-45ddc35907ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52713444-3726-48a0-be24-445798961ff1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe61d336-904d-42d5-a96d-36aecb16d6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627dfc69-d52b-473e-aceb-bedcd4773889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886f9b9d-1d41-4e74-856c-97c0ee9dff55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5819eed5-ed94-48ec-8a74-b10b3d09c007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0ef903-d210-407c-885e-3afd46f7bc98",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2644bec-6323-4d7a-860c-fbf7514a2fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5492da6b-dcd3-4ea3-9e91-102c3273546e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d8d39f-dcd4-45dc-a02d-0715356e3f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5e874e-85ca-431e-bcdc-61c366d1a6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f329fe-c5a5-45f9-8d31-c5831bc246c0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddf9f39-9900-4cf3-86ca-b4f2ef76c6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78209c4c-8864-4d26-a38c-47f202b715df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc27257-e5e2-4c79-8038-679964c1648b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74b4ebf-9e0f-4c5e-b8a8-ad0e58290cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ae67df-5a78-4642-8d70-d54165543af3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c2ca06-c80c-4cb0-befd-360412458748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0d6bd0-670b-4d91-830d-dcc88a5c795a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a4a049-9898-415e-b032-f9ed524c05ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d221a46d-13c6-4338-8684-00739ec77ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1099df18-0fde-4853-9c23-6fac48c63548",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701f95c-e023-4c4a-a3c5-1ce78ad3afc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bc2c8a-97e6-473f-87e8-b1c35d07a459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17ef5b1-754d-463c-b0a6-341bf2be380f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dad56fc-e3e4-46f1-aade-3d2e51bbf9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c9eb76-dec2-4542-998f-2f14b1f319c5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5a8dbe-ca9a-48ae-b1bd-7e7942b5c7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2e2d52-eb3d-4220-8ca3-fd8a9fb20dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8957ac11-fcc9-4cf6-8dea-bae05e651a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ab8243-d4ef-4ed8-a43b-190752c4917e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8638a34c-5f2f-4175-bf84-a99fe85bc10c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7092d2-2783-4fea-ab74-abbe962849be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a9a3af-5780-4a99-838b-08c6b4bd9ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda19bfb-ed6a-4e1d-b3ac-6e038a54eb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176c3107-2087-419d-909d-541fc25a3d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0feda2-3350-4acb-b8ef-00fc2b1ce0d0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d82cfb1-98f0-41f3-8d04-67577f3429e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f58cabb-89fe-4922-af65-9061c3f30aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcea749-a8cd-4d05-826a-2c48204b7db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b700c44-3bd9-4bbd-8453-4b3900fc75f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fa5e8c-65b2-4be3-8020-d8f3b06bc671",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a1b6c6-2456-4c3c-9258-1f76f072897c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d378d1f2-2e84-46f3-860a-14155e01bdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fdb421-73e4-451b-b23c-0bee567c7655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6dcf53-60f1-41fe-8453-80d13f5896fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b3298-202d-4ad5-8d0c-c5d1cf9bfab6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbdc347-c150-4835-a33d-839022c822f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f682c939-650e-41d3-951b-24b21becb783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f2de04-75ce-40f8-831a-a94ece5710b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6930f4c-88b5-4a7c-a923-226744e458c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c040d30f-d634-4503-9868-da08be05883c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d6564a-6bf4-4451-83ca-2141027de88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e872c8d-bde2-4b4c-91bc-c74df60bdeb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf8b31-184c-464f-b357-a573eef2e366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25c9e75-7c10-4a42-8d8b-6a933b3bfdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffc2e9a-9e07-4320-9e82-8496afa73586",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46ce720-78e1-4f9f-96ac-45e5ab4e4c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e772214-bcc8-47e7-a569-2ca6bd884e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622f1f27-4536-4271-987a-27f50e5ac025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f01cbe2-1a9b-4768-9fd3-4f40252a4efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb139d60-2ffc-43cd-a1f3-0cd9fbb593fe",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb7cb16-1b0f-4deb-8537-0f4d911c97aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b589943-4407-4899-8d1a-fe309f8bd95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085cd7be-25f5-4f5a-a602-f2705339ce2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bed5d3-5c61-4e0c-8827-2cb6bfb926ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5c2357-f38f-4a87-bad2-9de0f0b6de7b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fa4a87-cc0f-4da5-bde5-2726da752f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feea5c77-eafc-4433-a508-3a0402fbf7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77898f97-105b-4b5b-a7ef-992d53dc2479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d497be9-f34e-408a-be5b-1a86a666d99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8887ca6-64a4-4907-813d-a87c428093a4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ab7b6e-fb76-4bdf-8a95-c918f730ec60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6f10d8-06bf-4850-9e56-c24d66a64fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a97aa84-5623-4c23-afaa-27b01c8339d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cef74a-35f2-4fd5-a76e-5050b5e51cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884340a8-2704-4ad5-8232-64e6038f30f6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c3888-8cdc-4ea9-9f45-855971dc5c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205e552a-3269-447a-818f-f5798d198be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9d6834-1949-4474-ac28-0aa235e51c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb65e9f9-e9bb-4d46-915a-ccbcb1287676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd71e7-2af2-4105-a2e3-9a3f7394e1a9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1880c1-8720-4ea8-b334-7cdf73824ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a33c71e-9d0c-480a-92d9-b01fc002b80b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c29102-6248-424f-94f1-c3de454175c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772aeca5-8e42-4a22-8972-777f8a979091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c22b675-d147-43fd-9ef7-9021ad9e8a8a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fbe361-4fb1-4d3b-9f54-fdcb8f7adce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aaab597-3ed0-41f7-994b-73a88c08a63a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59139d3c-ce1d-4d97-9f26-942ac6f218c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cea2884-35c0-4537-926d-486faabcfe03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91a2090-bde8-4f6c-943c-a8c1093414df",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e665a442-d609-4122-bfa1-59f33b303e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb73103b-35d8-4580-8278-f8eda00873ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a947ce4-87dc-48a8-96e2-7aee0c687935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b006c39d-2d6d-4064-a162-ec893459c1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4996571-25a6-4d47-9371-2251947c02d7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e53736e-90da-494e-9d90-3a877a43a901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219ccf7c-9f5d-4b2a-9399-125d04830ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b49bac6-6380-4a09-970c-0d1605c726e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc39276-9a4e-4474-9d18-82f70f8d8512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2587b443-b09c-485b-bc7e-378588b9eb97",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9492ac0-b39e-4a44-bed0-2758bea99ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98a60c3-6c69-4750-9acc-84391371f717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21432590-9950-4fa7-9dd2-e25ebcbff402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09303379-68c1-4610-99e3-aac424371a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fb2528-3e91-49d8-aa80-ee3866869972",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3679454-669a-421b-93ea-1a0bcbf7e41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe252f5-cc29-4107-adf7-b4a7ffce78e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a968d1-3db9-41da-9257-915402bd7ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea461f8-a818-4fa5-ab98-3d4b928d3c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945eb475-368f-4285-a630-09e2d08efc9e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058ac666-2ab4-4369-9457-640ba17eaa51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65e1e20-5a93-41f7-bf11-7a27d330b5f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43b669a-d35f-43f2-bf16-8c98c12b554d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5607fb-2893-4eeb-bc38-fd82e459f29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d416f5f7-f2ff-4c5e-8081-5c7d494b0ced",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e27e664-9f24-491e-aed8-b073d690f584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25a453c-7ac1-4084-aaeb-749a5a9b2ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e344da4-0603-4018-9007-3354c15a4a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2b1b81-5d41-451c-9fe9-905fa5ebbaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d303eb90-62f2-4297-ab4a-4d67faba6acf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6432c314-c540-45c4-a9c0-312d3f1c1551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca99941-5318-470e-bddf-f897ad653778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee955c66-3067-41e3-8eb3-78cd4cb677aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34deb998-b23e-4977-8c11-81b4b41579b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42353e75-7ce2-4731-900a-f4c25063f6f4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a6ec8-26a4-495f-b70b-dbf497c78c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d73b3f1-c6c7-401b-b017-dddd13345505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726261a1-8ec1-4aa4-9ff3-76ec163d31a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e9dc6f-e12b-4e0a-bd83-3a62bb217717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fbcbac-4f3c-4acf-bd4f-9fa8afc314bf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e68d68e-ca1e-419c-b34b-671bb865326d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2982572-6a16-4d8d-a1bf-3da1bf68df89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78599a5d-9a05-4330-a3d5-2ad5113eabdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbd8758-4758-4474-b523-ae9370d8cc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161af6db-3dbc-4384-99b9-97cdd15d5ab2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b31fb5-b1ee-4c33-b2e5-8458b6c4c2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a693f1-5ce2-4f5b-90c6-4d2e9a24a0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc69d25-c3ff-4f6a-9ef1-b7179b889fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0713e1-aa7d-463b-beff-a2e1797cbac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67175e06-10a4-42f9-83c7-4f99eb43d669",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455a5ecd-322e-478c-8d00-582c6c3d3075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411becdf-df6c-442f-ac00-650b1def900e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7895f23-39f3-48de-b99b-99de0c641168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27f387a-3184-4ba2-adb7-634f0932e2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5cf58c-0faf-4720-b864-6c8752c0c610",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a94a2a-27b1-41a2-8fcb-94cedb45344a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083e2320-508f-4260-bd6a-aa914c23d776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcccc35-2df9-4319-96b0-10452aa7fb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116ae605-5b8a-4b59-af7b-82ab33186bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e00a6f-f1b4-4fa9-b9d8-71653781620b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e49465-2052-44cd-ad55-921364f4d0fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "952829ec-a90b-489e-b738-2b56a78bd67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba3854d-b8b0-454b-940a-3136c548342d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc426c0a-3225-421c-ae81-e901097aa254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0769de-ca00-482c-81f3-1c5e0846e487",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7d13f6-706e-47bf-a201-d54e5caa5066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ee45f5-707d-459d-9f30-de2e457b71df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02723a58-8adf-4402-b80b-0a2d86e1670a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200eb5a2-dc67-458d-bb60-d202d936fb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831b19f9-a378-4ed3-a84c-14e90aff9406",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea64188-34aa-465f-a426-81256ef9bd0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2002fb8a-8184-4386-b6f3-dc276690da58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfb0841-d4e8-43b8-859d-922066120ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff9d1b0-6ba2-48a5-b6b0-34f891c37fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9e9816-b33d-4381-8f84-23d257a98fa6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bc8e1f-9cd3-48d9-b759-93436fc940b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52670ed-c1f3-4df6-84f3-04c52211ed35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7005fd-b0a0-46a5-a63a-b8005160fe41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b220610d-77f4-486a-bbde-dd50fffddf05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492a3e5a-cd1f-48bd-9df3-eb01f3b61335",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704a43a6-4db1-4d0c-a6f5-bd40d7904459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c05bac6a-40d1-414d-a12d-c7e5d26087ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b810830-4427-4e93-be2c-c5ca86446b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39aaaed3-64f4-41e9-b1e1-b376781b825b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6b1c11-05f4-413f-996b-fc33f5fe554f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e667f25b-b0d1-406f-ae1f-5f73b154cf0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6996581d-dacf-4863-bafc-da328d35be76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75f930a-e8df-414c-afd9-5e7171cdef49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d9d4a1-405b-4779-900b-53b14abb2382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c60c378-e9a1-4277-aee9-c683f53e02da",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca92d4f-f09f-4316-a99e-efcac6f353db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6637e6a-5364-4ca5-a514-5ef5bdb7216d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddeb25e-0fed-47f9-bc4c-657388a0a3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3409bd6b-334a-4794-a3cf-cae2e4da67a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7c725d-9055-4d41-aa1e-9465e148a72f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48888c8-f5ea-4ca5-b015-0189204ba92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f075f0-2c8b-48f0-8d03-d2f85b9cedd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e423778c-d606-473e-9512-731627a3fb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d3b9fa-458d-42af-9bfa-11b7196258c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f6c28-75c1-414d-9bcd-1980c5eaf9a1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef258252-21cb-4541-aaf1-7e9e5c6acb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3c958a-e1bb-45bd-81da-2e6236d117ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0088a3b-92fc-4d32-99c4-45139c1b48e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3648df04-b473-4a41-b8a0-090f36efeae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff78e8f-9c75-4d1e-9e7e-f451f60c2b99",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ed139e-3fe4-4e53-b13f-b99b2209c7fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5356c430-be0e-4bed-95f7-1ecee4f1038b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eac5cc-6c53-4e45-810e-f2837ceda966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad965d6a-74f3-47d3-8fa4-0792e269ca65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaaac0d-8bd9-46c7-a6af-6929138371df",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6210cbc5-3700-4caa-b003-b7813be2e0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb208d52-33a7-48d2-9408-ec26be69a455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a67ee9-2249-44ef-871b-10681c547405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26068171-cbcb-4063-b19f-b4993748dd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f59f6dc-2520-47c6-8b60-755cc079cccb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcaeec8-6ccd-4796-a918-a457fe846b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4750fa9f-be4a-427e-aff5-57d039f4a029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d18ad0-2ff9-4ab3-9858-bdaae9e9f9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e98d6f8-4388-403c-90bc-f400e6bacd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4d2be3-df01-47cd-aad3-b336b9246614",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00ad3d4-c594-423c-af50-5ef888f3efac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b6f48d-66c8-4394-af9e-ee1a102ce530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46aa013d-3cff-4e87-bbb9-a6dbc3a8b40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42724aca-b930-46ea-aee9-b02fd0ce23b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecb6a43-6ed4-491c-a684-d7e3a06326b0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a5b2f8-94aa-40ff-9d1a-ec7a260eebd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1aacee0-65d1-475a-b2f4-c52aeb0df30e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a585d2c-9441-4bff-b179-56b79bdaae8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ca0c32-4b24-4de5-a961-7fe0d9f6299b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade098c2-df50-4f90-96f3-cdcf512b2aa0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d038758-2016-451b-a0f0-720c489029e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bedbf8ca-830c-428b-b08c-9f804dfac08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0c7d90-f122-4864-9af6-f389394bb2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb077b3-3704-4c0f-8946-a4a0488c2056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0154de3-e52e-465b-b97e-17ad0a8b4ebb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6508861f-2e16-4446-b196-c73552ac68a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed36be6c-e173-4799-b1f0-97f623d13d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee76b405-28bd-41dd-95c6-ea44295498bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72025ce8-b322-48c4-83ac-58d3e79d6a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081fa781-2e73-418d-af16-b93b9de9aad9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628ecc33-69e1-49b8-9c2d-3e9d741071ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "defbe1f3-8415-485a-b7c6-25f3c4bd2d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4c6138-f8cc-482f-a7f9-42b601c1143c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767c3dc1-623d-4929-a6a0-4d898b417c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c3600e-0f9b-4134-a2fc-b9ba0acbd896",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbfd4fb-7952-455d-a9ff-dbaed6ad3177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f0f32a9-1d04-4cb9-a4e5-c4533e61cf32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77187d24-a8ce-4fea-8c93-e5b2e3d7befa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8be0a70-2c32-4f8b-8d82-a5ceb233dca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a754c96d-bc1b-4821-a065-c5988a9f6ae1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da3096f-5212-446b-b0f3-908de631738f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51b0559-eb1f-4328-8143-aafe5d39e859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b42a0c-e73b-4f4e-aad4-5219283401b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4610b7a-cd5f-4493-bc6a-e0e894cc4383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650abd9b-65c5-43c0-b7c2-05e5c5a3d888",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d48239-bbc8-43ba-b045-3aa06f3ba045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc09fd39-6959-4a51-962c-923e7f13edc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be978dc-af66-474d-96c6-08755305e225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5cde9f-2e7c-41b0-b62f-183a09daaaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd37ba86-ac59-47f4-b3de-e78c08a2c226",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ca6bab-52fa-4d33-91f9-21715250f4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36cfc42d-7bdf-4fd0-8d51-576faf9fa79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da34adb-b2b7-4197-a77a-7d751a789cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872294c1-6e17-4fc4-966c-7f7efd98f190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b806093-8111-4d6f-b5d7-3abe5021af25",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3854dd48-5cd1-4c77-b9e7-3346c0a14429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e76210f-0bcd-483e-b035-4f9e4a8dbf21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae094fe-51ab-4277-9158-8aa6ba7a55d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219e382a-dd43-454a-b193-17f1cc854675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e8c760-6562-4d6b-a089-3c6129a23170",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7164a55f-8e77-466f-9c92-789c062502be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c7d8a0a-d027-4d8a-b755-0e7d96e3835d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619c9145-3e88-45ea-ba70-4bc70e5130ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7f4d34-c4aa-4e0e-b8a2-89c2e9d00b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a238d212-0fa7-4d25-802b-baf1a1ff13c5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b8ab3f-9398-4bce-93fb-0b38ce9acae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0974f8a-332d-4d29-b562-3357411e21b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d65cd55-5943-4824-8e80-6109e7b52965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0081edd0-25d8-4ca2-abfe-191c33f7b263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ea7924-348c-43c5-9c4f-481c6085d6ea",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05a1b0e-e407-4f79-b568-b285d55d9430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a639e8-4b11-4be7-b2cd-d10579f0a8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bef9e5a-7acf-4fa5-8231-2494affe3946",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe281cb9-974d-4d22-912a-f4914ad583ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251efa99-8412-4f14-ac9c-8bb3ec319040",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873627da-5e97-465e-8375-96382987bb74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cbd7160-d5f5-4e99-b5dd-2524e81afbfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2aa223b-ea20-49dc-8b9e-58ea1d0e34ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0184a1-cc7b-4eca-b778-efe1c51300c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892f902a-5cc8-4f80-9b09-ac52aeb4ba49",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d198b8bf-9a66-4842-95c2-c14a0e8aa1ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2831e6da-ba5c-493f-a993-d02518932c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635c8472-4edd-4d91-b5e7-a4a7865e1b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e7d7a2-c607-4d48-8ce1-309b4e4c5075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d647a7a4-9517-4461-975f-1284510e5e20",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f379a1ad-fb07-4a1a-a9e5-c494afec7c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b97e06-eb61-4e8f-9f5c-bd0b2df91ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830802a1-1a3a-4ec5-9236-3cfe4e538d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e28946-5f49-46f6-b756-daa38c9f0075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a79f99e-4be6-49ca-8e90-9c99327f3fb7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8a1d63-1269-4cfe-9eda-8bdcdfe31714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c608424-a3da-4c18-8bc9-d232dc70cd35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea71241-5449-460e-a04a-229593b17054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d046b040-8f5f-4377-8615-23b303c39a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c178f4-cab6-45c3-b564-a2cf30fe98fb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bc9a8c-c85c-4095-9122-6831da8ad39f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5cc2da6-3229-47ec-b162-fd0bd73e4988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb011b1-367b-4ccf-aeec-154ac1caf934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6779013-78e3-4c7c-a71c-e126b916ee90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6831e19b-45c3-45bf-8703-1aa85bb7f154",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b550b0-5180-4a65-9ae0-df1d53ff20c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "303d5928-e4a6-46c3-89d4-2607141e01a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c1ca01-86ef-4212-bc6f-d7fc95502c1e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b062718e-f6fe-4d8d-9c7d-bd4fd0d6bbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d379194c-b8e5-4ff4-ba63-03b8ddf12f6a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9d5530-816f-4685-95a2-979d7c5ddfc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "310f46b5-b8b1-47b7-b224-8c1bef12bf8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8031f0d4-ea96-4487-8c3a-3e2c3b83230a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad74fe6-f23e-42ee-8eb0-262179a603c2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96bbbcc2-9745-464a-a01c-2f59afbc1e98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50df60c5-3801-4153-b75a-f48656e1f200"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1479282a-75fc-4fab-a53d-f2aacd9d1efa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94a3c4b2-9c3c-4eee-80c1-11e1412e3ca9"
                    }
                  }
                ]
              },
              {
                "id": "b57ed69b-9129-41c7-9640-af41aa244182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d44e4e99-f030-460d-9797-aa593c4cb141",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a936a31d-a885-469d-9910-bafcb0cd3b48",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ab751358-f5fe-4d94-bfba-775559a32953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a65d6f2-003d-468a-bdb7-daf62f6c425d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbef4658-369f-4dab-b06e-a52041cf7ca1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06006446-2e22-4690-a65d-d3a2556c823f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3dfcd8ca-fd49-4856-bf23-af326f22e608"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdf51e33-4979-48cd-9514-4838854966ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "feae2b10-153b-4791-a18f-205e6bf26df6"
                    }
                  }
                ]
              },
              {
                "id": "a88909e2-d37f-401d-bdb7-3f698d0a82b3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "15a11416-129d-4ed4-886a-98ab1058c98c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003375e0-52d4-4c3b-9db0-9a5148018e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "85e0639a-6f24-4323-879c-8c807a9476ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6d73a4-317b-49a9-bc67-e6c0bfd4eab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9026d0f2-3012-4dca-a556-8e58c0cc346c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fe944154-2b14-40a1-b6b4-834292686d9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "891d606c-6aad-4b81-88d7-80a688ad5608",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efc3e6d7-2b78-4b78-971c-27897a87c635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b106eced-6620-4f3b-bf3c-a9a59cad8d29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f51c5f56-6712-4cc9-9a07-65d2d8808c0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5283f477-9c29-4798-8707-c6c2a5eb38bd"
                    }
                  }
                ]
              },
              {
                "id": "a8494057-d528-45c6-9911-e64b9cd7b4d7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d592a01c-2efb-4845-9308-5e495512ef7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "547d5e07-0c1e-4e08-99e3-6a0c91321bb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0598426-7c13-482b-a847-6acaa3ef32ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b0f91a1-1a3a-4b45-baab-5a51033e82dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a62ead5-a6c7-4965-95d8-d99541c83cdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fa64c984-26c2-4483-860d-cd0b66c17a66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66d9f318-ca1b-4c06-9c24-64d0164cc310",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fd6c96b-daa0-46c0-ab99-978dde62ab0f"
            }
          }
        ]
      },
      {
        "id": "174e553f-c7f3-4d68-af95-5aef9173269d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6352adb3-f3a8-41aa-9e9f-ed567de06626",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c39eb3b8-753c-4810-b437-2487f73372b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a318fdaa-0e82-4706-9b67-9b3f07efbdf3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75108b70-e570-430e-9dd6-41ca34e3a039",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3bbb1fda-56b2-4f13-9252-ef083e755108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6f8b19-88f0-4f52-b40c-7a6837431a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db883551-4ab8-4728-91f1-13dc92444e4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9324a816-d6d2-4474-b7b6-76f75c4d4b2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c1e15f3-8061-4011-908f-3da9c2ef8886"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f033c9e-8919-496a-8779-18b58483e557",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bb07617-3ac1-4380-83bf-9baf73d40347"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2b69fb0-7752-4ca3-bf65-69578fd1af61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f03ad93f-2612-47a2-93e8-9ba62b6ca8e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e11a486-675b-4ffa-941e-2ea2d994c8e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfa292d0-5c6d-41bb-9bbc-b34b88a9b78d"
            }
          }
        ]
      },
      {
        "id": "ae4a684e-2262-4a3c-a952-f93e04b299ed",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "13f20fff-9be4-40c2-a64c-b09c96db69a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "928c4e14-86b8-4e8c-8b6f-996f19660cc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88999db5-1e7a-4c17-b447-0c62084ba364",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1498227-63e7-45b4-9164-08c5d01ee9f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ed02ce7-c7bb-42a0-8560-a1550bd3413a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb13cf0-75c5-41fe-adb1-6f2dcf8a80ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6ccbd87-bb2f-42d5-bdd5-508b4e062136"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6932d5aa-5f61-46df-b54f-8812b3dab074",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b5b3259-a07b-40de-b1d2-c6c94a00c9f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a4a7a0f-0df2-4f81-b4ce-0b77d8108908",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40b4d057-3c1b-4d17-b879-0e05d72b47f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bab6140-5822-489e-9622-969ecd779141",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "362bf03c-ac5a-49d0-a7fc-7e9941beb802"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14d830a0-9e3e-47a5-a3fd-b4a5755c8e0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0de8c0a0-771b-4912-88a4-557df1ddd12e"
            }
          }
        ]
      },
      {
        "id": "5d28c6f5-56d1-46e8-a934-e254b44246da",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3a923e6e-70b7-4cc8-8da4-fad05717c3c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "235a4174-45ec-415a-9310-b361812164ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce88a2a7-ad01-4f16-ad5e-32bd56e55b64",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c35e30a-544c-4e13-bc73-3009dc0f90c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54fea5dd-ac23-4396-9c57-f65258e21e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14248ef-7368-41dc-a5f3-89bf685eaa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca9f98d5-a1e7-4589-8a5a-fab87e25adf3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42d62f8b-4ab4-46aa-92a8-6671372e200b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7b9961f-9558-4385-a1da-b21f2910c056"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "652e9c91-e1a5-49d1-a3ad-413d577f1638",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8afa5dce-241a-40b4-ad8c-a6a27cffd63d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d10cc23f-c48d-45c8-9f54-e11791d3cd8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f865b5a0-7767-4ffd-814b-3d8099f71576"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b146a040-14c0-412e-80fe-bb5d93c6e8f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9d3a083-1362-4982-8582-f104191d96bf"
            }
          }
        ]
      },
      {
        "id": "d512c639-aee0-4d0c-83b1-0707a7889046",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d642e930-2a06-4ab2-8bc4-0f334b56d3bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9af0b97d-6089-4efe-8e07-36ca2bbeb36a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f7b0df8d-4baa-40af-8a3d-a67bd2f39b18",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b232b2b-231f-4eb1-8793-bc26d15ab22f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8aa1905-a19e-42e5-9f4a-09f22831f2c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.30526315789472,
      "responseMin": 9,
      "responseMax": 590,
      "responseSd": 66.79459065463487,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703378277631,
      "completed": 1703378304639
    },
    "executions": [
      {
        "id": "c08c1b3a-7aa9-42e5-a9bc-b964d2deb126",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bda0476b-d4eb-4ca9-bb9b-982b9512048c",
          "httpRequestId": "e516a3e0-de84-40f4-bfec-5d64226f7e8a"
        },
        "item": {
          "id": "c08c1b3a-7aa9-42e5-a9bc-b964d2deb126",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b327941-ef46-4245-8361-5aebed449dc4",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "23528192-3521-4966-8948-0ac78a3a34d5",
        "cursor": {
          "ref": "a7a9f072-cb5c-4ce4-86ef-9f5a04ef2057",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1e540380-04a6-41f0-9c98-b7e89a7683c1"
        },
        "item": {
          "id": "23528192-3521-4966-8948-0ac78a3a34d5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2534661d-144f-453e-ac7e-cca30e3986ab",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "584eac20-7cef-4901-8c34-a2d57df6a42f",
        "cursor": {
          "ref": "13b18bd7-c6e9-4368-95d9-659c60947697",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "612fd3f3-6ca8-478e-9e3f-27e8bf360813"
        },
        "item": {
          "id": "584eac20-7cef-4901-8c34-a2d57df6a42f",
          "name": "did_json"
        },
        "response": {
          "id": "557520b6-4ba8-4134-af5d-b2c633346177",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47a6ed7-3f4a-40b4-8f7b-80ea25f541de",
        "cursor": {
          "ref": "90be9a31-e1e1-4843-8472-f57932e21376",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3761e0be-d4e2-4f99-8ecb-22e97c39b74b"
        },
        "item": {
          "id": "b47a6ed7-3f4a-40b4-8f7b-80ea25f541de",
          "name": "did:invalid"
        },
        "response": {
          "id": "1b9f358b-478d-49ca-a02e-4992068b4f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47a6ed7-3f4a-40b4-8f7b-80ea25f541de",
        "cursor": {
          "ref": "90be9a31-e1e1-4843-8472-f57932e21376",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3761e0be-d4e2-4f99-8ecb-22e97c39b74b"
        },
        "item": {
          "id": "b47a6ed7-3f4a-40b4-8f7b-80ea25f541de",
          "name": "did:invalid"
        },
        "response": {
          "id": "1b9f358b-478d-49ca-a02e-4992068b4f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c240877-ab69-4590-886f-4d8136f88946",
        "cursor": {
          "ref": "a244d683-0b7a-4f0a-b9e1-bfc40aa5499f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0484927b-5a12-470f-9f32-e0ac17128b8a"
        },
        "item": {
          "id": "0c240877-ab69-4590-886f-4d8136f88946",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "67c2e7ee-7347-43b5-be45-55d87a9faef5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaa000d-0462-4df5-bb56-8408ba2acb29",
        "cursor": {
          "ref": "08cc06d8-e21d-41fb-b5c1-43ad07a495fb",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "535f0f8a-af36-46d4-bcdc-5795eaa64ce7"
        },
        "item": {
          "id": "4eaa000d-0462-4df5-bb56-8408ba2acb29",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d56b28de-af25-44ab-a36d-4e79359bf7c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f3a511-b8fb-4011-bee9-15a084e002d0",
        "cursor": {
          "ref": "c7bcdacb-56df-40cf-9dee-c70fa769b6c0",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "edf8de9d-9623-441a-b3af-522ee5a20524"
        },
        "item": {
          "id": "e2f3a511-b8fb-4011-bee9-15a084e002d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "30e8e21a-215d-40b9-8c17-f6f9bd611147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5313ba5-a892-4c84-b282-10336f8ca23c",
        "cursor": {
          "ref": "8bff81e2-5072-45d1-ba4e-70e6e4d939d9",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "673652d5-423f-46ce-8f48-c01845a1201f"
        },
        "item": {
          "id": "d5313ba5-a892-4c84-b282-10336f8ca23c",
          "name": "identifiers"
        },
        "response": {
          "id": "cdc68699-5bc0-4e11-82b0-80f46f454cf8",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad88265-1c8e-4383-909e-106cd9ee0e79",
        "cursor": {
          "ref": "d16ba82a-0ff7-438a-8ed7-ca051bb5058e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "13c628da-b7f3-4aca-b699-aae6f24ccec5"
        },
        "item": {
          "id": "5ad88265-1c8e-4383-909e-106cd9ee0e79",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "36590a8f-3f89-4026-bcfb-bd8888fdf263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bee58a6-9da5-4a16-a8e2-00a917d7f432",
        "cursor": {
          "ref": "b30508f6-e82a-4126-91d9-a2c957b89e40",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d55221c9-6ea4-4fc9-9a40-8c0748c3612c"
        },
        "item": {
          "id": "3bee58a6-9da5-4a16-a8e2-00a917d7f432",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9551e3e3-af26-4716-947e-904a21a429fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373d3f4f-9c33-49c3-8af6-16f5d52924d7",
        "cursor": {
          "ref": "158b0402-ab99-443e-a7a3-a901aa02d7ac",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a03d630c-785b-4a42-ba0a-9ae0167b8bf0"
        },
        "item": {
          "id": "373d3f4f-9c33-49c3-8af6-16f5d52924d7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8c65c6f4-b204-479d-90bd-1f06b69b635d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3730ba1-6c41-41dc-be21-2e49a6573e22",
        "cursor": {
          "ref": "09dfd5e7-2c7a-4f8d-88df-b6d390233ff2",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b395ed33-529d-4848-997b-085f102cbf84"
        },
        "item": {
          "id": "f3730ba1-6c41-41dc-be21-2e49a6573e22",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e2331f7d-748f-4061-a4c6-0f7f9851e20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11046976-45bc-4029-9d65-0f9590ef2fe7",
        "cursor": {
          "ref": "81c83ed5-31ac-4aea-ba36-d19a3bf69d34",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6d051893-cb5f-4030-9eb7-9201642eadb8"
        },
        "item": {
          "id": "11046976-45bc-4029-9d65-0f9590ef2fe7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "60216696-871c-4b77-9560-8293c320122e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ceddd72-3362-46ee-a3d0-cd170b74411d",
        "cursor": {
          "ref": "5f78cb2c-74c6-4356-b98a-0fc82b82910c",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "76fff6cb-94e3-46d2-82fd-b49707654bb7"
        },
        "item": {
          "id": "9ceddd72-3362-46ee-a3d0-cd170b74411d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "21d8847a-d0d7-4c78-886e-1277e0a630d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac47be33-b802-420f-b9a1-269475fb0550",
        "cursor": {
          "ref": "2343cfee-4f43-498b-81ee-7ebd95c19690",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "12627f71-b217-4974-a87b-41a28bba24bf"
        },
        "item": {
          "id": "ac47be33-b802-420f-b9a1-269475fb0550",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2a078ad5-c45c-416b-b79f-9db651856c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8637df94-58e2-42ff-b166-e5355976c788",
        "cursor": {
          "ref": "7ba38f7e-53c0-496d-9c08-e45d7fedf609",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bf909d25-052d-4953-b5d2-f432670146ba"
        },
        "item": {
          "id": "8637df94-58e2-42ff-b166-e5355976c788",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b5b59c6b-ecd2-485a-9f5f-dae08a46f8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e3c2ed-a5ea-4dcc-b5ae-0fc4e42a069f",
        "cursor": {
          "ref": "402066da-f631-4cad-b5d8-b2ea0f42da82",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "06a13875-7e11-4da5-978b-0d21d910eddb"
        },
        "item": {
          "id": "40e3c2ed-a5ea-4dcc-b5ae-0fc4e42a069f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "01eb99ae-b61d-4cd6-b273-6b9bcb3746ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8047e6dc-0850-47a0-9984-f791602cc1c7",
        "cursor": {
          "ref": "52b1beaa-2825-4eff-bd6f-f5cf45a20c5a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b198b390-9d46-4a8e-b81b-091125e4fb4c"
        },
        "item": {
          "id": "8047e6dc-0850-47a0-9984-f791602cc1c7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "95e5ef92-a528-41a2-98c4-97035e3a5ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efdd31f-0e73-441e-8a85-400f13e46f94",
        "cursor": {
          "ref": "9555fbcf-a83b-4d31-bbe0-2c492a41f0d5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1f2906f5-7e95-49e5-9122-c3696d039197"
        },
        "item": {
          "id": "3efdd31f-0e73-441e-8a85-400f13e46f94",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "014cfa69-88a9-4b1a-8389-a1f0f5c60edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7896395f-1f5b-48a6-99eb-bf48580a2f2e",
        "cursor": {
          "ref": "6282d1b0-8cd5-4d9b-8e10-9db2b8013d48",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ee820465-74a4-4008-8012-fe3cc618388f"
        },
        "item": {
          "id": "7896395f-1f5b-48a6-99eb-bf48580a2f2e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "35bd0033-ea8c-453a-bbe9-2262869f157b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de77b1be-ec4c-4049-97c2-231989a5b64c",
        "cursor": {
          "ref": "460e003b-145c-4c5c-8a41-36a8ae291fbb",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a606875c-07ce-44a0-bb25-297d43ba7289"
        },
        "item": {
          "id": "de77b1be-ec4c-4049-97c2-231989a5b64c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4742bbcc-1cf6-42b8-91b7-7c5681766d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b86d04-6513-446c-b799-648bf83b3005",
        "cursor": {
          "ref": "b882d174-1c14-412c-adcc-6744ed97bac2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6f799be6-a9ad-4b65-b03e-1773f0c69afb"
        },
        "item": {
          "id": "15b86d04-6513-446c-b799-648bf83b3005",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bbfe4bae-c5c8-49e2-a042-d665f1e2d749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6849d8e-e6f3-4a71-90c0-67e068f21229",
        "cursor": {
          "ref": "2957e663-d518-444a-8a2b-2f787900520c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "904914ed-cb0e-436b-9fee-8834769e484c"
        },
        "item": {
          "id": "b6849d8e-e6f3-4a71-90c0-67e068f21229",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "816f0de3-7751-4a08-a5d3-867884fb0f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7c14d8-ab1b-4631-833c-de153e05c660",
        "cursor": {
          "ref": "42e38cf6-3481-4e6e-b6fd-2ca05b107104",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c978e678-688e-412a-af50-e75901b2c633"
        },
        "item": {
          "id": "ec7c14d8-ab1b-4631-833c-de153e05c660",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ead4fbfc-e3cd-4d7d-92d9-d48039753282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8030481-8ce5-4789-ac3c-c04572486121",
        "cursor": {
          "ref": "66a75640-a684-4984-a7b6-d4fce611552d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d9eaf270-6ff9-4918-bb71-fc5029330aa0"
        },
        "item": {
          "id": "d8030481-8ce5-4789-ac3c-c04572486121",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "94c3d5c0-017e-4ba1-bf27-d118d2cd59d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3503718-37c4-4800-9ef7-03a0dcc1974c",
        "cursor": {
          "ref": "695e17da-bff8-47d0-8ead-831589460d24",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f0e8a93a-f1a1-42e5-90f6-6341c841c93b"
        },
        "item": {
          "id": "f3503718-37c4-4800-9ef7-03a0dcc1974c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a83f1b9d-7200-4c5a-b9be-c04ba25eeab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808f9485-5237-4fd7-bf73-0dacc9f208fc",
        "cursor": {
          "ref": "2747568c-874d-43a8-a3e8-07e6e274adb8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d402c10e-609c-4f9f-bb98-8fb65b024673"
        },
        "item": {
          "id": "808f9485-5237-4fd7-bf73-0dacc9f208fc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b8a65b29-802f-4a46-b86d-4a52b82c211d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aee9dcc-c1cd-43fd-b011-c7ce32674c67",
        "cursor": {
          "ref": "f006404b-c97d-49c5-aece-a43ed88afc4e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c107bc00-70e5-499d-912c-06fb91db7440"
        },
        "item": {
          "id": "6aee9dcc-c1cd-43fd-b011-c7ce32674c67",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "05804fe5-04d0-4830-998d-ab34f1f0e4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad7d94a-5364-4e7d-b197-62835f0f3631",
        "cursor": {
          "ref": "4d1e79da-30f2-4c29-9e34-04f007b33106",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3ea2d2fa-7be3-487f-95a8-e686f9a5094b"
        },
        "item": {
          "id": "bad7d94a-5364-4e7d-b197-62835f0f3631",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "36bac640-4aef-4828-9590-61538d7438d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8fc55-5b98-44ff-bce9-f96be87a4c3a",
        "cursor": {
          "ref": "dd336b08-5689-41e3-bd6a-c48cdf14329f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65d2b564-68c7-4d62-8137-2ef4a19dbf07"
        },
        "item": {
          "id": "78f8fc55-5b98-44ff-bce9-f96be87a4c3a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0c1bec4c-f88b-4d27-9d8d-ee56546d6bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7763335-6084-44ad-b8d2-1e90213a1f34",
        "cursor": {
          "ref": "f0229a1f-fd70-4beb-8404-50d2033d632a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da4e5c70-f64a-41e6-b660-9ea4606ba873"
        },
        "item": {
          "id": "a7763335-6084-44ad-b8d2-1e90213a1f34",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "12c834e0-9e4f-48fa-9a3c-8ab2e6928e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425dedd0-8cf4-41fc-bb8f-73e2d4bae5ca",
        "cursor": {
          "ref": "914c242c-0e56-439e-a7a0-ba6986c03e14",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f772bf3a-e4a9-4b47-89b5-17c5835e8acf"
        },
        "item": {
          "id": "425dedd0-8cf4-41fc-bb8f-73e2d4bae5ca",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cd9171de-6c7d-4672-80c9-a77cadbcb844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70918260-3092-422e-92ea-0056f40e7e76",
        "cursor": {
          "ref": "e9e0fd15-7174-4a28-8b40-25535ca40462",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2e5e0b50-64c4-4cb9-95f0-40eeda11cc60"
        },
        "item": {
          "id": "70918260-3092-422e-92ea-0056f40e7e76",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "60926825-44de-423b-98e7-7272e6a212d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6b8581-3d45-434f-8c9f-0479c0d39fd6",
        "cursor": {
          "ref": "844ec980-c2e2-43ba-aa95-dfefd27c5b05",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a801dfb8-a062-4cd3-b270-014d474f5a1c"
        },
        "item": {
          "id": "8c6b8581-3d45-434f-8c9f-0479c0d39fd6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1647b351-6f44-4d97-b93e-9f952447b246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e70ec3b-2656-40d4-a6bd-3dc684952886",
        "cursor": {
          "ref": "cee37996-9474-45a8-b1a3-7a02d59ea5ab",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f1f7a6b8-a9ef-4eef-ab4e-ee3b0f8c76f8"
        },
        "item": {
          "id": "5e70ec3b-2656-40d4-a6bd-3dc684952886",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "04ba1a60-5716-4e03-80f1-7d26d6672ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340131c6-4f1d-46f5-adbb-9ee5f7ca61ec",
        "cursor": {
          "ref": "f3b50f12-c942-4b2b-806a-3489c9ece4ec",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dbadf254-2344-4ce4-ae24-b1e4a385813d"
        },
        "item": {
          "id": "340131c6-4f1d-46f5-adbb-9ee5f7ca61ec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "12d102e7-239f-4e7e-987b-c2c9128c506e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bfc2cc-83b1-4632-8b6e-a4786636a6a7",
        "cursor": {
          "ref": "23ffbae9-557c-4ad2-851c-d32df8bc7aeb",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1abf60fa-2e25-4c99-9cd0-8a10a6f135ed"
        },
        "item": {
          "id": "b5bfc2cc-83b1-4632-8b6e-a4786636a6a7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "24227b69-0bce-419a-93f8-4913c55db8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8dc2fe-05f8-4b64-af21-d9af0d0655b5",
        "cursor": {
          "ref": "6eeff74b-b521-4036-af4b-aaadab4bac1c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "907c9b51-81b2-4119-a6f6-efcfab168a0f"
        },
        "item": {
          "id": "2b8dc2fe-05f8-4b64-af21-d9af0d0655b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ffdc907d-fbb9-4686-b6a9-589dfd2ed825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9518f511-37a0-4ade-951f-900ae0a0b8ed",
        "cursor": {
          "ref": "37f57177-d1a6-48e6-9a80-2e48eb7b7b9a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "178062a7-29b0-4863-9ce0-b3f580d16e64"
        },
        "item": {
          "id": "9518f511-37a0-4ade-951f-900ae0a0b8ed",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "524503b7-ba48-424d-9401-05f13e895150",
          "status": "Created",
          "code": 201,
          "responseTime": 590,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "247fb584-9999-407a-adb2-9097c893d02c",
        "cursor": {
          "ref": "32728c9e-d9af-4faa-ae0f-ff211c5fe761",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cb48a37d-8956-4c92-bdd1-1d8477edbedd"
        },
        "item": {
          "id": "247fb584-9999-407a-adb2-9097c893d02c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ca94a5c1-c77c-4822-afc7-7ec2079367c0",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ebf5b477-a833-4e98-9af0-1366955176a7",
        "cursor": {
          "ref": "d0e515cb-51a0-4b1b-83d9-f51102b5e200",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "29ee4f03-ab4c-4e8c-93c0-6cdbc99f61c1"
        },
        "item": {
          "id": "ebf5b477-a833-4e98-9af0-1366955176a7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d3fece2e-bb44-4f70-afd2-92fe1eb51539",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9df185f5-deca-4952-9464-52d6e721a7f0",
        "cursor": {
          "ref": "8d1603e3-0897-4591-bdb6-167c7aeac29e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "91f9d875-c5a1-4d1b-8db9-f3fdc400b051"
        },
        "item": {
          "id": "9df185f5-deca-4952-9464-52d6e721a7f0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "556b5592-c86d-44c7-8a6b-24bf46a39d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdda711-0957-491b-8ff4-3a99c5eaa9df",
        "cursor": {
          "ref": "db4616dd-0666-4b59-8843-36f628e4832b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e92b1ff4-5cf8-4c58-af4c-74046a039c63"
        },
        "item": {
          "id": "9bdda711-0957-491b-8ff4-3a99c5eaa9df",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3791132e-84d0-4bdf-8407-b66e3889c5f0",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9dc307d2-a2ff-4fa4-9362-bdabb54a65ba",
        "cursor": {
          "ref": "481edbea-7ab6-4bbc-9654-8b366c0ceaae",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5e0877be-1182-4606-ba96-dadc5ba37979"
        },
        "item": {
          "id": "9dc307d2-a2ff-4fa4-9362-bdabb54a65ba",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "aa88bb78-19cf-4976-b91e-23fe24ff0e7b",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9a097379-b7f0-49ed-b707-2a5c3d2c7ff1",
        "cursor": {
          "ref": "f6e73700-bdb0-428d-b371-b59b0d3bfe6b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c1dd6bb6-59b9-4e22-ab20-ab086f9b3e71"
        },
        "item": {
          "id": "9a097379-b7f0-49ed-b707-2a5c3d2c7ff1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8200fcd5-81d5-45b1-817e-3e34c9cf23b7",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3de76062-6a03-4968-a4bb-f85c3d614389",
        "cursor": {
          "ref": "319108ec-59c0-4ca6-8eba-d2079c7d8421",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb0b9c07-3c31-4cd3-9efc-2011be9e9021"
        },
        "item": {
          "id": "3de76062-6a03-4968-a4bb-f85c3d614389",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f9d6ad1-36d1-40b6-a171-af654af2b34a",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4c725593-2b19-4e5b-b4c8-125683ae7cb4",
        "cursor": {
          "ref": "d8139b7a-e3a7-4e13-8b95-b80a454acc97",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bc891a83-6841-4f1c-9660-dc959145959f"
        },
        "item": {
          "id": "4c725593-2b19-4e5b-b4c8-125683ae7cb4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "41267b2f-bce7-4d8b-a43b-7073d7ea2bbb",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "aa5a4a79-790d-418b-b9b0-81efd3ecca4f",
        "cursor": {
          "ref": "78d913c8-f54d-450d-8a3a-9965cca59bd6",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f597ba2c-0b00-42c6-91bb-29951aaa315b"
        },
        "item": {
          "id": "aa5a4a79-790d-418b-b9b0-81efd3ecca4f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "44ca33ed-0c3d-456c-8247-c5aaf4c5f215",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9f447c46-0cf7-46c3-8ca5-293036d52fd5",
        "cursor": {
          "ref": "e29b371d-b3f1-4f6f-a7a3-9217640e4062",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ed525c3c-9292-404b-8006-0fd3354b8d03"
        },
        "item": {
          "id": "9f447c46-0cf7-46c3-8ca5-293036d52fd5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8e116141-7caf-480f-9080-8b1d0f375821",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "10aede58-3f41-45f8-89f7-7a90b760b9c4",
        "cursor": {
          "ref": "28d3a132-3c23-4433-ad8a-3eab0e1e6f34",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "011b3f89-1693-4452-ad8f-1cfaeffdd4eb"
        },
        "item": {
          "id": "10aede58-3f41-45f8-89f7-7a90b760b9c4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "19134092-1b9e-45e9-b95f-ed1b5cec5e85",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0e55d8b7-3a2d-42e4-b5d6-58e5c3ac3697",
        "cursor": {
          "ref": "d715f974-28ff-4359-b7bb-6164a188f254",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b6cb79b8-a7d7-45aa-b83c-aec31a82b32f"
        },
        "item": {
          "id": "0e55d8b7-3a2d-42e4-b5d6-58e5c3ac3697",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cbf6ccef-21c4-4087-a06b-b3515e01a026",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "95315a8c-9138-41ad-90fb-33f7aa0c733e",
        "cursor": {
          "ref": "27a86114-06c3-489f-970b-19c99931ee67",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9b85760e-2940-4780-a555-364085bb8a3f"
        },
        "item": {
          "id": "95315a8c-9138-41ad-90fb-33f7aa0c733e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fe1c4de6-23fc-407a-aecb-02339c513a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033b689e-403c-4040-9700-79485be4271f",
        "cursor": {
          "ref": "aecde9df-6015-48bf-9980-aab9f760edc1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "25603673-803f-41a5-933a-15017946db75"
        },
        "item": {
          "id": "033b689e-403c-4040-9700-79485be4271f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4514d41e-0c39-4c4c-8f9c-02996a261add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82b471a-a73a-4429-91f7-11f312b8075a",
        "cursor": {
          "ref": "a339ada8-ca9f-4e1c-812e-185353859a40",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f5592c4f-d500-4123-a16c-e2a1c444de41"
        },
        "item": {
          "id": "d82b471a-a73a-4429-91f7-11f312b8075a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e0ec4f8b-a2a6-4791-9dce-692630b5a08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66b86ee-4a37-4741-a0ce-aaa03196c287",
        "cursor": {
          "ref": "6a914b74-d074-4518-ab52-1b34c9a8d546",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "78cc3508-7f53-463a-b695-5605000a758e"
        },
        "item": {
          "id": "c66b86ee-4a37-4741-a0ce-aaa03196c287",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "83e967a2-84dd-40df-9405-01b49e73da07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a75486b-5ecc-44eb-ab90-7ee11ec43753",
        "cursor": {
          "ref": "ca9065b1-1333-4a95-b2e7-0a0e12affe09",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0ed2c7a4-6936-4890-b5b6-421976b9a9e9"
        },
        "item": {
          "id": "8a75486b-5ecc-44eb-ab90-7ee11ec43753",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d7bd86eb-9b99-4cf8-9d1e-634182585866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143e22c2-52e5-4eee-8a8c-9d9b5a2b3e10",
        "cursor": {
          "ref": "2764afaa-fc75-4f32-9223-3b85bcb89300",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ce63cc88-c2ab-4a3d-8a1f-755bf97c2ec1"
        },
        "item": {
          "id": "143e22c2-52e5-4eee-8a8c-9d9b5a2b3e10",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1761d29b-da10-4110-af80-a7dc7a813f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398208e1-92ff-451b-b84b-99f7408a31ae",
        "cursor": {
          "ref": "40cecbf1-86ce-42d5-96c7-1a1fe7eb1b53",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2cd2435c-8c0d-4b3d-91da-a0b042a5cfbf"
        },
        "item": {
          "id": "398208e1-92ff-451b-b84b-99f7408a31ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "436d6a58-4af3-4851-b4bb-a55772c02b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaf0853-d212-409a-a8b0-bd885df1585d",
        "cursor": {
          "ref": "d718b817-9804-4adf-9ca3-637790049cf8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b610d26b-e2b8-403e-9f20-fdb0ab3e5ec9"
        },
        "item": {
          "id": "fcaf0853-d212-409a-a8b0-bd885df1585d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9f709a84-be70-43c3-9f06-673ac84bee6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb611a48-8f6e-4511-ac7b-902612df39db",
        "cursor": {
          "ref": "8e8e7722-75fc-4a2a-9c53-94872767d34b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "895e35ae-b626-4ae6-8137-ce04a82d28b9"
        },
        "item": {
          "id": "cb611a48-8f6e-4511-ac7b-902612df39db",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2326f8a3-f690-43f9-a23b-b73d6b4547e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22c1d99-c0f7-43c8-9a69-68d56ebca64b",
        "cursor": {
          "ref": "cd4e11e4-f9e4-4566-abe1-3b8d331c65dd",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "eca70af6-d913-4ff9-b7c3-0a4f2980c4cc"
        },
        "item": {
          "id": "b22c1d99-c0f7-43c8-9a69-68d56ebca64b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6ab5660-39b7-4814-ba75-6658677df1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf2bcee-ff94-415d-b73f-ceb63eb4a3b9",
        "cursor": {
          "ref": "3a8d68d0-13df-4bb1-b9f3-e158e7a6b7a2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0c68ee79-90b0-4e2a-8055-fe180ec05f56"
        },
        "item": {
          "id": "4bf2bcee-ff94-415d-b73f-ceb63eb4a3b9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c1a777a4-4453-486b-ad21-5ed35ce40b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa225ef-5186-4bab-9129-70bcd76a31b5",
        "cursor": {
          "ref": "764e1824-56f1-4d0e-a9ca-8b711d559bc6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d897865f-60a5-4dda-a6a1-ab8c040ac719"
        },
        "item": {
          "id": "1fa225ef-5186-4bab-9129-70bcd76a31b5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d8506451-5e05-4bed-9bb3-e106d49bfb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a0d9e5-37eb-479d-b614-8d365ef008ed",
        "cursor": {
          "ref": "4437cb7c-949a-4715-b5c6-0a4d8033a08d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fe8ef1c8-0a1d-47c7-b788-b8c2ffa8a169"
        },
        "item": {
          "id": "f0a0d9e5-37eb-479d-b614-8d365ef008ed",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "358e7470-dac5-4459-862f-b5833de4c8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38db8ba5-24d3-494f-8a9b-d2a8fc918649",
        "cursor": {
          "ref": "ed31a8bc-fcc0-49d1-8608-107d3be1d953",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3d74ac9d-6615-45c2-bb04-418d53b71ce1"
        },
        "item": {
          "id": "38db8ba5-24d3-494f-8a9b-d2a8fc918649",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "62edf775-600a-4cf7-a98a-7f904fb9a835",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "97b26761-95af-41aa-ace5-3adfc7aa7765",
        "cursor": {
          "ref": "6adc7203-71f9-469a-b82e-2f8eefe49464",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ec7ba0a1-043f-4791-83a5-5d465ca8dad0"
        },
        "item": {
          "id": "97b26761-95af-41aa-ace5-3adfc7aa7765",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fabd6757-8fd6-4988-ae85-e3e62c45b9cb",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4bb5f11d-3387-451b-aa7f-27bd7c8169af",
        "cursor": {
          "ref": "5227d22b-b55b-42fa-b665-4f3e03f8915f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "56050313-9be8-4e5c-a17a-acb585840d12"
        },
        "item": {
          "id": "4bb5f11d-3387-451b-aa7f-27bd7c8169af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a81ce26e-a7d7-4d49-a812-05fe8b5ea498",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "53e706be-8915-4832-9518-c72db68d37aa",
        "cursor": {
          "ref": "5c559c1c-7d9f-4de2-8703-bc0beb026337",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "32fe6d67-7f99-4105-b238-caab60586c46"
        },
        "item": {
          "id": "53e706be-8915-4832-9518-c72db68d37aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7c387984-8666-470e-8f3b-d6944fb4308d",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4bfe93f6-809d-4b02-91c1-3f68eb82211d",
        "cursor": {
          "ref": "20ba0f55-f503-423a-ae4f-9b4d1894cc17",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "97618c75-9609-49b3-b1b9-bc8be6b367d5"
        },
        "item": {
          "id": "4bfe93f6-809d-4b02-91c1-3f68eb82211d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e77184b1-7b58-484c-8a66-e7b744dd6b4f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fc255b55-47f0-4a37-8998-98fd874812b6",
        "cursor": {
          "ref": "7df307bb-1807-498e-9169-8115b1fe41eb",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d4464747-c773-4ea4-aef2-1db90e7dfd7e"
        },
        "item": {
          "id": "fc255b55-47f0-4a37-8998-98fd874812b6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2207d664-cad7-4dff-941f-34b740078571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2dd6a6f-7a21-4c57-9d4e-be897cc62d98",
        "cursor": {
          "ref": "439fd71c-4f7b-477e-a679-138ab96dd736",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aba76cf9-4996-426e-9d34-4ac9cf6c16bf"
        },
        "item": {
          "id": "f2dd6a6f-7a21-4c57-9d4e-be897cc62d98",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0627ef12-44a7-48f9-b92c-8919fa9da505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4efc5d-251e-4a32-9bcc-f44d4ef87075",
        "cursor": {
          "ref": "10a63eb1-1c05-4c80-b629-3b7e43d3f14c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b27ea5b4-aa1a-4937-825e-4e0d1c0527ae"
        },
        "item": {
          "id": "1c4efc5d-251e-4a32-9bcc-f44d4ef87075",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "507eef41-6e42-40c5-92f6-f0775a4d4e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed513358-9dac-4a3a-82d4-94e9d89de33d",
        "cursor": {
          "ref": "eb3a0f8e-e194-4648-bf91-b107f98f6b4f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c8f23754-2ee2-497c-8190-43788c16d55f"
        },
        "item": {
          "id": "ed513358-9dac-4a3a-82d4-94e9d89de33d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4fd5eab5-f84c-4131-87a3-608d425184e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7917a6da-12e2-49b1-b837-dc955db76d85",
        "cursor": {
          "ref": "e465a8fa-549c-4092-8872-0607c7d1f88f",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2c3952c5-7aff-4575-a991-2d76164c905e"
        },
        "item": {
          "id": "7917a6da-12e2-49b1-b837-dc955db76d85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "72b9c1cd-91ca-479a-a160-62f4ee5aa686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2e3a34-f9e8-4e5e-b72e-ea10b7b13ead",
        "cursor": {
          "ref": "3bd527ec-8c1b-44bb-8da2-3d7e011c73b7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "02ebc045-b572-4690-b310-1d495ad3f2b0"
        },
        "item": {
          "id": "af2e3a34-f9e8-4e5e-b72e-ea10b7b13ead",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "940c214a-3fe4-42cc-9581-58e4cce6591a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8573d5b6-34c6-404c-be5d-9c18ae5a9082",
        "cursor": {
          "ref": "3569babd-7682-479f-83e5-73d21847234c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e2668520-2ce4-4ab3-babe-c6ddd5210ed6"
        },
        "item": {
          "id": "8573d5b6-34c6-404c-be5d-9c18ae5a9082",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "17773012-3b3c-40d2-b458-b8a0960b72e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845d6f98-083d-49a6-8104-92a24037468a",
        "cursor": {
          "ref": "c88d3803-6cd1-4a26-abc8-7d26a521395f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bf52f239-ad8b-4f32-8fe4-6f7350dad76b"
        },
        "item": {
          "id": "845d6f98-083d-49a6-8104-92a24037468a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "74aa385c-7a9f-4c6e-8d8b-79349163d088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eea8d76-6cee-4d10-91f9-9ddac452795b",
        "cursor": {
          "ref": "3f381faf-77f7-48fe-b506-a0ffae2a282c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8238517a-21be-4cd7-bae7-7289c3b22d68"
        },
        "item": {
          "id": "4eea8d76-6cee-4d10-91f9-9ddac452795b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e84b130e-5d40-4612-8e5d-b87d9c3ca876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9456d6ac-681f-4079-873a-268acfbf1723",
        "cursor": {
          "ref": "ab57c593-ae75-4d27-97b8-5bf376690dfe",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d6b33fae-6940-426c-be43-d597f8e70490"
        },
        "item": {
          "id": "9456d6ac-681f-4079-873a-268acfbf1723",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "323bad35-c5db-42d4-914d-31ec34555981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cf4569-7238-4f33-a7b6-e2ea8f48ed6f",
        "cursor": {
          "ref": "b987bf70-e3af-4dd1-aaf9-7132a5780d08",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7da828ae-fb5f-47c0-bcf9-3086edee0baa"
        },
        "item": {
          "id": "46cf4569-7238-4f33-a7b6-e2ea8f48ed6f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8012c333-8543-45af-bdf7-c9700e6d2528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbf4035-bd78-4a96-bf14-173728d0b012",
        "cursor": {
          "ref": "01fb88ae-f1ce-42f7-9888-70f3037c0993",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ee7fc67a-ba87-43ec-b817-32e44f909820"
        },
        "item": {
          "id": "3cbf4035-bd78-4a96-bf14-173728d0b012",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "30f558b5-4a54-47dd-8d43-d852ac506676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e825f61a-8300-4ac6-a329-b563be6d9124",
        "cursor": {
          "ref": "13f47bbf-4541-4516-b2d4-e75d5eb0b97a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d76a5b14-d069-4b0d-9a14-44b498e12e60"
        },
        "item": {
          "id": "e825f61a-8300-4ac6-a329-b563be6d9124",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4ea6723d-c7a3-4a2a-bc5b-73e9bcb04691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc9b939-6dba-4579-99fc-f3920edeaa5a",
        "cursor": {
          "ref": "6faa0599-69fa-40a9-a9fe-9831be2ddbf3",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fe0d5abb-088a-4baf-9477-39bb4ee5980a"
        },
        "item": {
          "id": "ccc9b939-6dba-4579-99fc-f3920edeaa5a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2bd23125-bd11-4fec-83b6-fe6f5a6be714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18df08a-a124-4847-b472-eac4d2fe6fdd",
        "cursor": {
          "ref": "cfc8c090-1295-49cd-8a69-f04fa9f8e6ac",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8a924ddb-a032-4c7c-b827-8d97a5323304"
        },
        "item": {
          "id": "b18df08a-a124-4847-b472-eac4d2fe6fdd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "97d31819-7b07-462b-9e78-d4c11ec32a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6b58c9-102d-44e1-b089-1e2af27c2325",
        "cursor": {
          "ref": "3ed046d8-d544-4b2b-9884-30d3679dbf94",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "180feb49-da79-4400-915f-409fc11f20b1"
        },
        "item": {
          "id": "6b6b58c9-102d-44e1-b089-1e2af27c2325",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "111b1eeb-aa6b-4551-bc85-3ccbbb1d5a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32118ce3-73d0-4882-bd45-521cb99fc3af",
        "cursor": {
          "ref": "b7e908e4-48b8-43e7-a857-4ab433b139ea",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4a47da52-e858-420a-a0b6-94d86817fd0b"
        },
        "item": {
          "id": "32118ce3-73d0-4882-bd45-521cb99fc3af",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a4d659a1-585e-4750-9b48-69d86ad24999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0938ce-5829-4774-8649-b561b4b816e4",
        "cursor": {
          "ref": "19686dbe-fc39-4644-a2f4-7e669d6798fc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "10e8ae33-2b45-4baf-afd4-06d815bf5036"
        },
        "item": {
          "id": "1b0938ce-5829-4774-8649-b561b4b816e4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "50694560-fbc5-4ed9-b8d1-52082e2b452d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cae117-5657-4100-aab5-630a100742fb",
        "cursor": {
          "ref": "364debe8-5473-4952-a8a6-839676e837ca",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d4232190-4a67-4e9c-b51b-e1714d82b07a"
        },
        "item": {
          "id": "b0cae117-5657-4100-aab5-630a100742fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "883b61d6-cd10-4b9b-9647-f36d4778fe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedb93e0-94c7-4631-9026-84e4ad7e1993",
        "cursor": {
          "ref": "8622ed95-0777-45a5-aa8c-ed1dbae06564",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "17e13f4a-73ce-44b9-abf8-431ac7667763"
        },
        "item": {
          "id": "aedb93e0-94c7-4631-9026-84e4ad7e1993",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "78d7b75f-1d99-49e5-9b2a-f3855b79973b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbb1f03-bb06-475f-b641-b469ef31fe47",
        "cursor": {
          "ref": "57f1a1aa-2932-4589-81b6-816ede0fee4e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2dbbf83a-4341-45bc-bf11-fe215def275c"
        },
        "item": {
          "id": "9bbb1f03-bb06-475f-b641-b469ef31fe47",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dc25a11f-4c58-40b1-86eb-d31ef4152ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07435889-2ab4-4199-8098-c234a3aab688",
        "cursor": {
          "ref": "f55b98ca-f015-4755-94f5-88fcbaf977b6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7e9caea0-ca12-48df-9a66-6e4eea1a42e5"
        },
        "item": {
          "id": "07435889-2ab4-4199-8098-c234a3aab688",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c81ae289-0f29-4fa9-bf5f-2362a9e42f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cf4c34-81a6-4885-95ab-8158f4879026",
        "cursor": {
          "ref": "9c75cda0-5360-4861-a7a9-42fa789443e4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "eed7f9b5-d267-42dd-ac75-44d180ad9c55"
        },
        "item": {
          "id": "c8cf4c34-81a6-4885-95ab-8158f4879026",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "48a78ca5-2a95-4dc3-9322-5bb68bfb2d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaae0fd-da87-4779-865f-273057e0323d",
        "cursor": {
          "ref": "18e6be5d-c824-4f90-9fc7-0551fa61a2d1",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b898cacf-702b-4c33-92c6-0e1780abbfc7"
        },
        "item": {
          "id": "7aaae0fd-da87-4779-865f-273057e0323d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0a2ea416-e0cf-4be9-aa56-cd9d30420a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5510b8a1-ac2f-427a-be5d-b0902b27cfbe",
        "cursor": {
          "ref": "a746dd2a-58c8-4a66-b76f-62ee796bf9c9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "be26d3da-de9e-4673-81ba-540ff8dc3ae8"
        },
        "item": {
          "id": "5510b8a1-ac2f-427a-be5d-b0902b27cfbe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f4d0908f-dbe1-43a5-bc4d-85bb4407aa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be75713-a2de-4064-8ad1-50aedd3ec3b3",
        "cursor": {
          "ref": "1b2b43e3-df5b-45de-8b03-8d14b9ca4b35",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c8ca4585-1284-4ada-a3c1-76ec50798c8a"
        },
        "item": {
          "id": "1be75713-a2de-4064-8ad1-50aedd3ec3b3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6878f5a6-4f1b-42f1-970a-99eea1f0537f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c07c4ee-bb80-4609-9257-0ea771cde237",
        "cursor": {
          "ref": "0f948eb1-29a9-49f0-93ca-a14441a75b71",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0dfb9c60-302d-4a15-9c68-c128c839ed5f"
        },
        "item": {
          "id": "2c07c4ee-bb80-4609-9257-0ea771cde237",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45ce7e7a-7928-4269-92db-a01b00485864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872667da-6758-4014-ad10-4b74a95aa65a",
        "cursor": {
          "ref": "b3127fbf-2ba0-45db-a41c-cc06971a4e96",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4ca6999b-6385-4a1f-842e-579e1fad3ee3"
        },
        "item": {
          "id": "872667da-6758-4014-ad10-4b74a95aa65a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f6d8eef6-f8d5-483c-b4ef-33a66baab7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db00b3bf-08c5-4c34-a145-b387d6ccca3a",
        "cursor": {
          "ref": "d1a64b2f-1c94-4ba0-be48-6361b3533baf",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a2ecb18d-dbad-4612-9395-f5f62566a6ec"
        },
        "item": {
          "id": "db00b3bf-08c5-4c34-a145-b387d6ccca3a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fce928a8-dd27-49b2-8239-a31a0241fcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55add203-a7e4-4ec7-bc80-cbcd538b4285",
        "cursor": {
          "ref": "48b31e69-df03-49ae-a988-34d33c383403",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4fbc91fa-0db6-49a3-993b-0d20ffa2391b"
        },
        "item": {
          "id": "55add203-a7e4-4ec7-bc80-cbcd538b4285",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f5e984a6-8d5c-4dcd-8520-2f9f33df1496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714761ec-64ef-4837-9954-029a6054201f",
        "cursor": {
          "ref": "d9d1d441-a2f4-423c-91bd-c89b43bbdf96",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fd5984c9-b284-40f1-85b5-7665901658e3"
        },
        "item": {
          "id": "714761ec-64ef-4837-9954-029a6054201f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d51ccd67-b916-46a3-a411-3c1b9d910fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fd3adb-4092-4ed6-bc87-8388219ea083",
        "cursor": {
          "ref": "098d3368-27af-488a-a8d9-0de267bc4154",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cc0c2bbd-9e54-4451-8e55-39b65fc32ae4"
        },
        "item": {
          "id": "e2fd3adb-4092-4ed6-bc87-8388219ea083",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e1ac9f15-db6b-44e3-b11f-1b6c1ed92786",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09051100-c8d9-401b-8bae-f1b52ad54e86",
        "cursor": {
          "ref": "9392f396-5a15-49e2-967f-37adb79e4325",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1dadb417-7f1b-4d46-8fc8-3d62004679df"
        },
        "item": {
          "id": "09051100-c8d9-401b-8bae-f1b52ad54e86",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f22fcdc1-dfae-41c9-8b6e-9a9dcb136963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0a769e71-80bb-46de-afe8-fd7d91a26d1e",
        "cursor": {
          "ref": "3436c6b5-7359-45db-81ab-33944347cda1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dd44f7ae-61e2-44de-8578-717a4e55a957"
        },
        "item": {
          "id": "0a769e71-80bb-46de-afe8-fd7d91a26d1e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7cabec5c-4d90-4efd-ab64-8de60946675d",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c2b43a-81a6-44b5-bdfa-0d6234a3a622",
        "cursor": {
          "ref": "213b8c8e-5206-48e2-8cd7-f42d02e6ab3f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ce21fdf5-a186-4b99-8e83-b14e82db4923"
        },
        "item": {
          "id": "35c2b43a-81a6-44b5-bdfa-0d6234a3a622",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "81b37a0b-7802-47e8-b619-4b42b6d0e4da",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "599138b4-1ae7-4199-93d6-7bad0fb6dec6",
        "cursor": {
          "ref": "760ab9a7-b064-420c-b167-de255d3aa835",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4552b0ea-d85d-42c7-80b9-5cb808a15e5d"
        },
        "item": {
          "id": "599138b4-1ae7-4199-93d6-7bad0fb6dec6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ffb7d1b2-0f6b-45ef-ae00-29081ce8aac7",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38195f54-ec17-4fb2-9481-a93da5f81eb8",
        "cursor": {
          "ref": "aec4dd3c-8e3e-4245-88fc-a0c2b853a6f0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1a7e9e2d-79a9-47ec-9345-31855ebe9c9e"
        },
        "item": {
          "id": "38195f54-ec17-4fb2-9481-a93da5f81eb8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6d7eb5c2-cba4-4189-850e-af7f52af8240",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30d8354-8912-403f-9186-967f6d3a8e75",
        "cursor": {
          "ref": "b75b45b9-7761-466a-915d-20446fb65a47",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d154a1b4-db91-4f89-b471-6d3f2536e9bb"
        },
        "item": {
          "id": "c30d8354-8912-403f-9186-967f6d3a8e75",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d11e39ae-e3ca-4f62-b69a-2eded0ea7bbb",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-24T00:38:10.932Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-24T00:38:10.932Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ac9f9054-191a-4263-90af-45a8e8f6bb59",
        "cursor": {
          "ref": "e0baa4b6-3baf-4745-a2bd-8f9a6252b9c9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1f9ee3b4-7b22-40d8-b00b-ec346dfafd1d"
        },
        "item": {
          "id": "ac9f9054-191a-4263-90af-45a8e8f6bb59",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "67764b9f-3130-4667-9164-e50193066f26",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bd25ab-bb5f-4251-8314-84b900ecca52",
        "cursor": {
          "ref": "49460141-d405-4ca2-a462-ea1a0b9b6c24",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "74048104-62ea-4239-8b08-d084c9e1aa46"
        },
        "item": {
          "id": "39bd25ab-bb5f-4251-8314-84b900ecca52",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "137d968a-fa68-42f2-bfe5-01e1eccba333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65461923-e7cb-483e-a5e0-2153800b7767",
        "cursor": {
          "ref": "fc4ea4b3-0709-417f-91fd-83c1c056bc1a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f7317288-b945-4984-88eb-f82f5683de2e"
        },
        "item": {
          "id": "65461923-e7cb-483e-a5e0-2153800b7767",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d97e1b79-a2fb-4b81-a1ae-e5bb8cac3486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bec1330-d297-4da2-95a4-5bcbb1b6cdd5",
        "cursor": {
          "ref": "d0e31001-e281-49d7-a25f-594d2844837f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "28ea3ead-b956-4564-a967-80917832385d"
        },
        "item": {
          "id": "5bec1330-d297-4da2-95a4-5bcbb1b6cdd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9e41a8a8-1732-4180-9c48-66e1d9c627e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15df71b-a4fe-4f0b-afbe-10cfd9e91957",
        "cursor": {
          "ref": "56748a44-c82f-44a9-b656-5111e89565ff",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "82b13ef2-9c55-48ae-88cf-6135db8c09f3"
        },
        "item": {
          "id": "b15df71b-a4fe-4f0b-afbe-10cfd9e91957",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "52d8b0b6-5f77-445d-9dd0-eddb93781b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962a31da-539a-45f2-bdd7-b9d773ce9fe8",
        "cursor": {
          "ref": "d34e6a80-b34f-4119-988b-9838fbb10c99",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "595dd876-871c-44e0-be1f-8918ef6eaa3f"
        },
        "item": {
          "id": "962a31da-539a-45f2-bdd7-b9d773ce9fe8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "47f9b87a-a49f-4158-bef9-15d2f761e144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893cd8d7-b65c-4f44-a962-03d888362d85",
        "cursor": {
          "ref": "78124db4-e7d4-4547-9058-9f596f0724e0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fd2f2e2d-7962-49be-a47f-dac409f8c3ca"
        },
        "item": {
          "id": "893cd8d7-b65c-4f44-a962-03d888362d85",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0831c23f-9b1c-45fd-b13c-51966f9a2ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e40c558-2e40-43a7-a27c-87212d19d300",
        "cursor": {
          "ref": "2b8eebb3-aa85-411c-92c5-614deb15c789",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "34a880c6-f342-4724-a64a-1570c23ec9c6"
        },
        "item": {
          "id": "4e40c558-2e40-43a7-a27c-87212d19d300",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "378877dd-f153-4404-af58-2d002627a189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ec852e-524b-4b69-ac01-25c2b6ee37fa",
        "cursor": {
          "ref": "3722bec2-9d67-41d3-b45b-3935f3de6ec5",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4dd5e41c-6c2a-4ba6-85ea-8a02d30b1bb6"
        },
        "item": {
          "id": "97ec852e-524b-4b69-ac01-25c2b6ee37fa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b59b0cde-a490-47e9-90af-deaaed1e1979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbf5374-b9e3-457b-9078-5929b3902691",
        "cursor": {
          "ref": "2f2de004-c770-4f84-ae0d-1c3ef121d2d1",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "43b7181d-ff6f-463e-95fb-469d812c1022"
        },
        "item": {
          "id": "ecbf5374-b9e3-457b-9078-5929b3902691",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d8a360b7-a9fa-490e-811b-f4d4080646a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f4abe2-5ead-4572-9a70-3b61cd30ceb6",
        "cursor": {
          "ref": "b803350e-faae-45f7-9ce0-53f90d2a95d2",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "849328c4-8a67-471d-a25d-cbe42e2bd2dc"
        },
        "item": {
          "id": "c4f4abe2-5ead-4572-9a70-3b61cd30ceb6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "43b99196-1551-4f4f-9e14-7050bc2daa99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1887d6ef-976c-4895-b3b5-7a01b06e45ab",
        "cursor": {
          "ref": "d1f6857d-f226-404c-90e4-8ac18aea6d74",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f6a9c557-6ef6-4925-8856-64794a28d91a"
        },
        "item": {
          "id": "1887d6ef-976c-4895-b3b5-7a01b06e45ab",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "13208961-26f9-45c9-a4cb-882f4aa00e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7113d7-5149-45d5-bfc0-b9c775f0ce9b",
        "cursor": {
          "ref": "19289aba-251d-4dcb-95b3-2ea80bedc809",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a87282c2-ebf3-4c2a-8074-8875bae79752"
        },
        "item": {
          "id": "dc7113d7-5149-45d5-bfc0-b9c775f0ce9b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "be9b036e-4e02-4054-8d7b-a7edd8a48c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04724671-2b90-4c15-bb86-40311c97aaf4",
        "cursor": {
          "ref": "7050ec18-dde4-4278-8532-87e8ed9ecba4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a3b4974d-2f76-4251-a6ea-c86fd6588152"
        },
        "item": {
          "id": "04724671-2b90-4c15-bb86-40311c97aaf4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f6f821d2-e63d-4963-a46c-f55c9da31719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45eb781-884e-4239-bd43-9cb4622df768",
        "cursor": {
          "ref": "92d1cece-b5e4-4881-94d4-351f19dc413d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ccb33ea5-4636-4aea-bf87-711db7aba99d"
        },
        "item": {
          "id": "c45eb781-884e-4239-bd43-9cb4622df768",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5204ca59-08a3-495c-a84f-037000018cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debc77f1-03e4-4fae-b7d6-938f794b45fa",
        "cursor": {
          "ref": "61339c06-bf6a-421d-ad62-6531cd1484c6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b47a7fd6-8084-42bb-aceb-ebbc27844620"
        },
        "item": {
          "id": "debc77f1-03e4-4fae-b7d6-938f794b45fa",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "56489852-0a52-4a88-adae-13fb4a7773f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b146ea-d8be-470d-9e3f-98e5c86430ff",
        "cursor": {
          "ref": "41980afe-d2cd-4b59-bc8e-42485231971b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8bd4fd00-a04c-449f-8749-a9b4aa8d2edd"
        },
        "item": {
          "id": "d3b146ea-d8be-470d-9e3f-98e5c86430ff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dcbb8c8e-c95f-4a74-97df-8ab0605d2745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb4f68a-d3bc-45b8-8d08-e091a614a007",
        "cursor": {
          "ref": "b6314c6e-96f7-446f-933c-1471f9b170f6",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "94097e65-b68c-49af-8068-0e06acdfe205"
        },
        "item": {
          "id": "dcb4f68a-d3bc-45b8-8d08-e091a614a007",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bfc2b033-1e1a-4e7f-ac7e-ffafddc3022f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedf9008-3292-4892-b2b1-e97cfb0980a9",
        "cursor": {
          "ref": "b098e366-dd7b-45c1-915d-f7109e61318b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6a1bede3-bfe6-4a04-8214-d39f8cdc9189"
        },
        "item": {
          "id": "aedf9008-3292-4892-b2b1-e97cfb0980a9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb8efafa-f7c9-4258-ab16-fd3f3a53cd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f65210-9cbf-4d0a-9a97-ac760bf395db",
        "cursor": {
          "ref": "5802f87a-6282-440b-9f31-cdc8e398b974",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "97f61a6c-a3ee-4475-ba4a-0680bee40c69"
        },
        "item": {
          "id": "66f65210-9cbf-4d0a-9a97-ac760bf395db",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "535447ae-a952-4063-87ca-0850ee1ca4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c866563-ba17-44e8-ba80-a929c94b2697",
        "cursor": {
          "ref": "1654c10b-cc13-4c85-9ddd-33cbfb437b69",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "35928d6e-c446-42e7-89c7-f4c565b79eb6"
        },
        "item": {
          "id": "5c866563-ba17-44e8-ba80-a929c94b2697",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "972afd6c-33f5-4410-9a40-7af72480fa15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85729e52-8c62-4914-8a43-2838aedbb4b0",
        "cursor": {
          "ref": "b9b1464a-4813-4bda-bf36-0289551fba1a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9ddbd6d6-a056-4e52-a64d-280c9ba98e1a"
        },
        "item": {
          "id": "85729e52-8c62-4914-8a43-2838aedbb4b0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d2cb956b-5ee4-413c-a99b-c957bb272e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f828051f-6ace-4cc3-9f15-e27776754a6b",
        "cursor": {
          "ref": "2443d9e0-56ee-48f8-8a7b-fec8208fb7c3",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7c6dcc45-459f-4252-bb44-462572684b09"
        },
        "item": {
          "id": "f828051f-6ace-4cc3-9f15-e27776754a6b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5c2e37d8-6013-43a4-b42c-719ca1ce68ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca074eff-8dc5-4a65-900a-afa882c04816",
        "cursor": {
          "ref": "36dc6ae0-a87a-44f1-bb9f-d4f66336b068",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "14a1d437-7fdc-4b51-a2dc-cd25c26965dd"
        },
        "item": {
          "id": "ca074eff-8dc5-4a65-900a-afa882c04816",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3bcdfe6d-f38a-455c-8d7d-cca20d4c26c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d88344-7dd5-4d91-a4b8-f4c849423fa6",
        "cursor": {
          "ref": "f4caae53-8eb3-456d-89d9-40e421bcd25a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5a526d70-a019-456c-a924-8854914efc72"
        },
        "item": {
          "id": "80d88344-7dd5-4d91-a4b8-f4c849423fa6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "088c1abb-eee8-4aef-9e99-46fc0c3d18a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccb55bf-536f-4d89-82c3-873d0403068c",
        "cursor": {
          "ref": "dfdda3ee-2317-40b7-8b77-667f402c5511",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1fd85c52-2542-4ffd-babe-13eaca15c15c"
        },
        "item": {
          "id": "4ccb55bf-536f-4d89-82c3-873d0403068c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "48f65f05-4520-445d-8365-1e87de623c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140bb038-b4c7-4d90-9da8-955c869f93b1",
        "cursor": {
          "ref": "e9eb507d-8440-4796-b483-15e7c15c8790",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7d66f585-f02a-46db-84c1-451e3687aebd"
        },
        "item": {
          "id": "140bb038-b4c7-4d90-9da8-955c869f93b1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5a9eb498-bd56-47df-97cf-e37681e14c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80ee6ef-128f-44c2-abca-f51fb94bb21a",
        "cursor": {
          "ref": "457df82e-bec7-433b-8f02-2aff761b05c3",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "255d975f-2351-4c3d-a77b-58ad58fd817f"
        },
        "item": {
          "id": "a80ee6ef-128f-44c2-abca-f51fb94bb21a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "84edd6f5-9a05-4d94-b399-002ee6e3b4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb714ec-8ed6-4fd0-8c65-720a3e6503a4",
        "cursor": {
          "ref": "a4d64e13-6746-4551-a0fe-6493b72ecf74",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c3e4b6ec-ef18-4de7-8aee-c41599b54b8f"
        },
        "item": {
          "id": "4eb714ec-8ed6-4fd0-8c65-720a3e6503a4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "04d34cae-5cde-47dc-bd25-d8a430dab399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7533d4-3ee9-457c-9142-d0f9a03a90d3",
        "cursor": {
          "ref": "519893b9-892b-418d-8c74-a4d38f6f837d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "13ef890d-cfc9-4eda-b711-2079b722eda7"
        },
        "item": {
          "id": "8f7533d4-3ee9-457c-9142-d0f9a03a90d3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3252d237-1d76-4d76-9a70-e86a6b104b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d01cc4-c6c7-41b5-9109-f940f543d158",
        "cursor": {
          "ref": "b8cab5d1-dfc0-45f8-b90c-9b931f096ae7",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "690607be-be9a-496d-8581-feb0f73af4b1"
        },
        "item": {
          "id": "f4d01cc4-c6c7-41b5-9109-f940f543d158",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57884bfd-88fd-481e-81b7-922f89ae92f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7375c5-c65f-4a23-9180-daeaf1aacf86",
        "cursor": {
          "ref": "7a8c5776-3326-41da-b284-18077d9dc708",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fdff1a77-c98b-46ba-bc54-7c4416bef917"
        },
        "item": {
          "id": "dd7375c5-c65f-4a23-9180-daeaf1aacf86",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a5980c86-af77-4093-8cc3-5b674e7ce0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b35c022-b43e-40c8-b8d2-46a1b5fdffe6",
        "cursor": {
          "ref": "b3a87e84-3d41-40a8-a6cd-ce17995f2258",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "02325c01-e91b-48a4-94b5-701f5b083fb5"
        },
        "item": {
          "id": "6b35c022-b43e-40c8-b8d2-46a1b5fdffe6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "938c9f9a-0f64-4928-8db6-ba28f9d99790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfb448e-5683-469b-b681-458f6e97f430",
        "cursor": {
          "ref": "88e2fc37-3330-4ea6-b9d0-08897ebd4ee0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ca61dc87-cb65-4b08-8348-59a94b514417"
        },
        "item": {
          "id": "adfb448e-5683-469b-b681-458f6e97f430",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6a14dea4-5800-40dc-882c-fa4bdccf99e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a9b4a7-fd7a-4e89-b278-ec6b591f874e",
        "cursor": {
          "ref": "9729e1aa-e6d9-4062-82ef-ee19db0da4c9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "19780c8e-ac40-4424-ab0e-3a7ab2ca2b71"
        },
        "item": {
          "id": "f2a9b4a7-fd7a-4e89-b278-ec6b591f874e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "01a0fb2a-759f-4013-b4d1-8f08e651af37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3af437-f250-4ea8-89ba-ebc961b2ab33",
        "cursor": {
          "ref": "b7e3828d-03d5-4cf4-9c34-7b3b0fd20bf2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f1fe6008-4c42-4ab8-9b5c-87baf3bc751c"
        },
        "item": {
          "id": "7a3af437-f250-4ea8-89ba-ebc961b2ab33",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "389da8cd-168f-40fe-8f23-e6a34fbbcd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a07b17-5712-467d-81cb-7ca9d5764481",
        "cursor": {
          "ref": "6fa91f6b-3816-44d3-aaa8-321a167aeac3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "92ffb0b5-1815-42f2-8807-83bb6e7fce70"
        },
        "item": {
          "id": "46a07b17-5712-467d-81cb-7ca9d5764481",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "867501ad-c2a2-4eb6-8acf-572e9a5a795c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c67b470-d592-48a7-a595-2ad851ce4691",
        "cursor": {
          "ref": "965193bc-4ec4-4b14-abe6-2671f3c444eb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "809f71fb-526c-4cd0-b53d-012ae83165c0"
        },
        "item": {
          "id": "8c67b470-d592-48a7-a595-2ad851ce4691",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e010ac7-90f0-4a85-9c79-957ef97ae629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a099c0-f121-476f-8b1e-e033fb4d3db7",
        "cursor": {
          "ref": "bb4331ce-640b-47cf-8e85-79dcb72412ba",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "67c622e4-8383-4eaf-bd18-c8d52fc5fd7e"
        },
        "item": {
          "id": "94a099c0-f121-476f-8b1e-e033fb4d3db7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "49010e09-d1c3-4b8c-958a-74c303784c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628b9e7d-77c7-49ab-a93e-7b260ea607dc",
        "cursor": {
          "ref": "36afac14-639f-4741-9800-4dddd39c2563",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2567fed9-7c1b-42ea-b5cb-0d49a676224e"
        },
        "item": {
          "id": "628b9e7d-77c7-49ab-a93e-7b260ea607dc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bcdbe111-041b-44c1-91d7-5607099727a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e82063-2188-4c77-9558-f05dbadd7646",
        "cursor": {
          "ref": "ad607919-3205-45c9-85e6-aa1bfb767c4c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6644d37c-34f7-4ae5-b0d2-c0dfc6c90efa"
        },
        "item": {
          "id": "62e82063-2188-4c77-9558-f05dbadd7646",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f20e016b-a76d-4a94-a001-f1818381f537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e0fb7b-7fc0-4f3e-b360-bcb26bb2a335",
        "cursor": {
          "ref": "55e3b791-460b-44ea-af2a-d91b7d4e8b0b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "57c42bf9-9bdf-4bce-b2a9-fadaf8351029"
        },
        "item": {
          "id": "30e0fb7b-7fc0-4f3e-b360-bcb26bb2a335",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fae37eaa-b84f-4d50-a98f-659377126586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca5fd1f-e68c-4a9e-9bbf-c3ca1d419299",
        "cursor": {
          "ref": "46e091b3-e178-4575-ae7c-bec41a292f77",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9384eef6-4d7d-4fb5-8811-f6331a81a8f3"
        },
        "item": {
          "id": "2ca5fd1f-e68c-4a9e-9bbf-c3ca1d419299",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "89bb6079-0c40-4da7-ab97-106fb6e23f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66f00bb-03e8-4b83-9742-992efbefb413",
        "cursor": {
          "ref": "c5b97751-50de-41ec-a8d2-3330c0909b48",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bb214b9e-b08b-48e4-96e5-8a8cc5a186bc"
        },
        "item": {
          "id": "c66f00bb-03e8-4b83-9742-992efbefb413",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7cd20fa8-0b49-4863-a5d6-1e7918012409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555ba615-f449-406e-9be4-f625836e642c",
        "cursor": {
          "ref": "362aaac8-310c-46dd-ae9d-cbbb601de2ec",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "50997ae9-ed05-4c07-acf3-9b01ea5763d9"
        },
        "item": {
          "id": "555ba615-f449-406e-9be4-f625836e642c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "50445b6e-6ae5-4068-90dd-9ade3bfc96a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3e390d-9f05-4d2c-b620-a665296f3474",
        "cursor": {
          "ref": "0513a989-30b8-4a14-b847-fe1cf4df7b50",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c99e70ca-965e-4bd3-9eb3-09b652204244"
        },
        "item": {
          "id": "cd3e390d-9f05-4d2c-b620-a665296f3474",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3eda62f2-e901-4dbb-ba4d-ebd98b74c12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0394a8-4995-4469-a9ba-022d3b108199",
        "cursor": {
          "ref": "59fcf2bc-4a2c-43ff-9dae-a4b8569b04bd",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ba339867-de76-4b48-9e7c-ae1987a429c9"
        },
        "item": {
          "id": "6d0394a8-4995-4469-a9ba-022d3b108199",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64df9bf2-d3ec-4ade-8740-2421b6928cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0156c4-1f9c-4297-a183-58a1d037b5c5",
        "cursor": {
          "ref": "a437ad91-a7ae-4ff5-8866-d264223de9ee",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a72a38b1-551b-43d8-8dd9-d41863b5b5c2"
        },
        "item": {
          "id": "db0156c4-1f9c-4297-a183-58a1d037b5c5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "edd0ef1b-f1c1-4d8b-b618-50e1e5f57e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef5784-c234-4db8-a72c-12a6e92e04f3",
        "cursor": {
          "ref": "7efe75de-4425-4475-aab8-898b257808f9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "63454acb-09b2-499c-8983-b2eceac95dec"
        },
        "item": {
          "id": "50ef5784-c234-4db8-a72c-12a6e92e04f3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9ab70e40-9865-4be1-8ce8-3859ea3e64b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bd1e74-c9b8-4cb0-8287-8e566930ce61",
        "cursor": {
          "ref": "f07329d3-3875-4744-b6f5-69bc18ef5652",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c1e57499-8c4c-42df-be20-9148e8c0851a"
        },
        "item": {
          "id": "d3bd1e74-c9b8-4cb0-8287-8e566930ce61",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "df90f13b-3478-4bfd-92ed-dd67b950537a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8291a6-a6fb-4a54-9fc4-093875eb88b9",
        "cursor": {
          "ref": "6a078705-f9d0-424b-ad72-e819fc8711ea",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1a6a8384-3627-4722-a6d2-93c4770256d0"
        },
        "item": {
          "id": "0a8291a6-a6fb-4a54-9fc4-093875eb88b9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c2022d6e-1a77-4d59-8e73-8556924b689c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb1e095-e4a4-49bf-a509-2a8bf7c6ba7c",
        "cursor": {
          "ref": "ff78488e-232f-460a-9cfe-7b9ffd52791a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a606c32a-7e02-4b70-9eb3-ab0d4cefabac"
        },
        "item": {
          "id": "8cb1e095-e4a4-49bf-a509-2a8bf7c6ba7c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3b54fc20-efcb-4abf-9565-ed0027b1a355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e555890-a1cf-4b5a-9f88-8de82989c8f4",
        "cursor": {
          "ref": "bde2ffe1-b761-434f-b9fd-5b1d20a1ab02",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3ae9f193-ed00-4c14-ba9c-7697a72ca119"
        },
        "item": {
          "id": "8e555890-a1cf-4b5a-9f88-8de82989c8f4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bfa52419-62a2-4b23-935b-6921ffcadb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2131012-1372-4c8b-87e6-2f3986e283e1",
        "cursor": {
          "ref": "d77a02fe-bc68-4e54-8b5a-1791d80e4e1b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ae1df3db-fc5b-4750-99eb-1e6f2b5d2cec"
        },
        "item": {
          "id": "f2131012-1372-4c8b-87e6-2f3986e283e1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8a254795-01fa-4198-870c-fe2a18221bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b02fba-387f-4f34-be5e-fb531ad2e40b",
        "cursor": {
          "ref": "565f2a0c-6a39-4385-bfa3-ce793cc186c3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f564b0d8-97b7-4dd3-aef1-e7083bb79ffb"
        },
        "item": {
          "id": "b2b02fba-387f-4f34-be5e-fb531ad2e40b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ed084d8e-7f5f-49bf-b6f9-a1ae52c2b7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303f9e58-9a82-4e23-9d70-a95bd1639e86",
        "cursor": {
          "ref": "f3dbd3de-5bd1-4765-b5f3-00a4808b1645",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "313f7c04-8a09-41a2-a97c-2d6174e3447c"
        },
        "item": {
          "id": "303f9e58-9a82-4e23-9d70-a95bd1639e86",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "34c8a61b-3528-421c-9037-2817ab019bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642b4774-64a3-4e88-9043-3b3d5467ad87",
        "cursor": {
          "ref": "0207bf67-15d5-4db2-837a-3bc54f38e5f5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "840e614f-a0c4-495e-9962-eec3d3037425"
        },
        "item": {
          "id": "642b4774-64a3-4e88-9043-3b3d5467ad87",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7e5afbc1-f07c-49ad-bbcf-95c47a2710ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6551b2-49a0-49d5-9a9c-c565fff99859",
        "cursor": {
          "ref": "9572289a-44e3-4f73-a292-2bbdc4ab2a03",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fb19197b-2ea1-4731-97d2-c7c258b7bb6d"
        },
        "item": {
          "id": "3d6551b2-49a0-49d5-9a9c-c565fff99859",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cf8b192b-5ad1-46d6-aa0f-39950b0766a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560e4de0-f98a-4669-af54-e6de3f1beb43",
        "cursor": {
          "ref": "ae38240b-87ed-41ee-be13-c4c60297fa04",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4684363f-2d93-47c4-83c2-7ebf0b1b8db5"
        },
        "item": {
          "id": "560e4de0-f98a-4669-af54-e6de3f1beb43",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "beac68f6-e400-4cd8-be54-094197741c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca6a315-de27-4336-8a5f-553d3aed34e5",
        "cursor": {
          "ref": "7f734c30-0061-4a0f-9135-4e48f74af1ff",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0e184279-c193-4e76-a1ed-820f3987f424"
        },
        "item": {
          "id": "8ca6a315-de27-4336-8a5f-553d3aed34e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "609f1a89-b1d5-4cc1-9db0-392967856a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b48b567-5e3d-4db0-a33c-e6b50ce43d33",
        "cursor": {
          "ref": "a180d40d-1c97-45b3-8949-c168179c1b70",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a097d2bb-6d7c-408e-b2df-826451249f8b"
        },
        "item": {
          "id": "9b48b567-5e3d-4db0-a33c-e6b50ce43d33",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e6395dab-1851-47e1-b84a-78f0fcfc9eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736e9e63-7b2a-43c2-9e2e-bac8429a30c8",
        "cursor": {
          "ref": "8d0aab1f-2274-40ac-b662-ed50a59d8c60",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5e4ee599-ccd9-478a-9514-a3ee8664f9de"
        },
        "item": {
          "id": "736e9e63-7b2a-43c2-9e2e-bac8429a30c8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6b07cad1-4871-4580-b004-2660ddc0a268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0558f3c3-5e5c-4ed7-ab95-a2420778056b",
        "cursor": {
          "ref": "0e4bbf00-24c1-40d7-b807-410791f125fb",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e9838c4-70be-42a3-af31-f074ade44959"
        },
        "item": {
          "id": "0558f3c3-5e5c-4ed7-ab95-a2420778056b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "af6c770b-b67b-4d74-b644-ad2aeebdbe69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d32a4f1-811b-4ca3-b0d9-4d13f4a4ad9e",
        "cursor": {
          "ref": "6a09ca58-c192-4818-8a8e-cdec4a3f7826",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e64f41cf-c367-4fea-9870-b8bee352d3c8"
        },
        "item": {
          "id": "5d32a4f1-811b-4ca3-b0d9-4d13f4a4ad9e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "95d62e0e-4064-4a51-81f3-19b899b241ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72197b13-042a-41e0-aa11-1aabb51e202d",
        "cursor": {
          "ref": "5446d19d-9daf-49bc-89f9-ccd0c6b1757d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1d46bd4e-0542-43a8-bd55-cd1519da3e4d"
        },
        "item": {
          "id": "72197b13-042a-41e0-aa11-1aabb51e202d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a3974370-0fc1-4a74-ab8d-20813336c551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5bc171-eb1c-4855-bed8-3f73e0c03dcc",
        "cursor": {
          "ref": "a07a09e2-a38d-4768-adc1-2a5c1c995f98",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0bad5b09-85bd-4cef-922a-9bb76369e9e8"
        },
        "item": {
          "id": "be5bc171-eb1c-4855-bed8-3f73e0c03dcc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3f1ebd62-a39b-45c9-84d1-71f46c5b5775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71414386-fa9b-4bb2-ab5a-1b94024bb338",
        "cursor": {
          "ref": "9f2308f8-ef4d-4925-aaca-29a9cb9d136e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "12e4e295-8027-40b4-9520-d70cbe613b6c"
        },
        "item": {
          "id": "71414386-fa9b-4bb2-ab5a-1b94024bb338",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a4584114-fadf-4df8-9cf8-348cee1f3b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae59c2c1-49fc-49f7-aa4f-84bc19b11cd0",
        "cursor": {
          "ref": "9d8c76e0-878a-4362-ae17-e302bdd16662",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fed28962-165f-4325-8d54-3986a66c280f"
        },
        "item": {
          "id": "ae59c2c1-49fc-49f7-aa4f-84bc19b11cd0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9be3dd5a-12eb-487f-913a-681cdc0c62a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e1e403-e108-4a9b-b405-24eadeb6fd21",
        "cursor": {
          "ref": "d3223d16-25aa-4768-8717-5efb453d1506",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a0157fa5-3685-4ce1-96d6-0c8be5e41624"
        },
        "item": {
          "id": "c8e1e403-e108-4a9b-b405-24eadeb6fd21",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "73c24544-3db6-4cec-a2b1-602c4808c15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204d0557-3288-4af6-a6c4-f95bf59294ed",
        "cursor": {
          "ref": "64949ed9-b88c-4910-bc65-723b446b159b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fbb772a6-79c1-4a69-9e65-2922cfb72442"
        },
        "item": {
          "id": "204d0557-3288-4af6-a6c4-f95bf59294ed",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "90eb64be-8340-4993-8cca-08b7fe6f62bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4440e8-aca9-4ee2-9e26-6bb9b5106230",
        "cursor": {
          "ref": "ba2ce8f9-6462-426d-b729-135f6dba5cb8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7f1f9a6f-8bc6-4cea-8e5e-f6593394fe10"
        },
        "item": {
          "id": "5b4440e8-aca9-4ee2-9e26-6bb9b5106230",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d080eb17-f0da-45bf-97ab-34400664e871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c972ed-e229-4015-8f0f-665dc89898a3",
        "cursor": {
          "ref": "7363cc09-32b8-4280-9374-790d4167f12f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "661d85be-3f01-4cab-a17a-1817d4ea2cf6"
        },
        "item": {
          "id": "95c972ed-e229-4015-8f0f-665dc89898a3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "003d070e-c094-4267-8ed0-3edeeaf0959b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67ceb4b-0a2e-4594-bf54-3b9656d94bb7",
        "cursor": {
          "ref": "0141df7f-0276-4fcf-90a5-12f468077a84",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5aff668e-88fa-4f73-9a0d-68d803b3a6ba"
        },
        "item": {
          "id": "c67ceb4b-0a2e-4594-bf54-3b9656d94bb7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ea731c2-e24d-4153-9c0c-39cd7f8f5ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08add31-cf93-48fa-8566-20ccd95d7af2",
        "cursor": {
          "ref": "f7a5089c-4518-4aaa-943d-99337e17171e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6583d0ae-f9e9-4a28-98be-f2c3e1c6f38e"
        },
        "item": {
          "id": "e08add31-cf93-48fa-8566-20ccd95d7af2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3af6c7a5-ac1c-43a3-8d06-33a98df9fe03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42e2ca8-98c8-44ad-bb0a-954f74ad3b92",
        "cursor": {
          "ref": "a94fb5a1-9412-45ea-bc31-897352c56cd1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2e655867-5737-4c8a-ade1-373474f4132f"
        },
        "item": {
          "id": "d42e2ca8-98c8-44ad-bb0a-954f74ad3b92",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a76f4666-1640-449c-942c-6d59872bbd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae1ad07-38ef-4f1e-886d-764f3de16522",
        "cursor": {
          "ref": "5ad060d8-1ccd-4369-9b6d-b54646c24ff6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5ff6f12e-c9e2-472c-846e-a30c6cc5f1da"
        },
        "item": {
          "id": "9ae1ad07-38ef-4f1e-886d-764f3de16522",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8d4f333e-2740-4c39-80cb-7522be547b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660c8c5e-bfd7-4a1d-9f05-6d68f113f13b",
        "cursor": {
          "ref": "fd986f26-b508-410f-9d9a-0b170daa8ec3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4904903b-c531-4a2c-b3e2-f1b014441189"
        },
        "item": {
          "id": "660c8c5e-bfd7-4a1d-9f05-6d68f113f13b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "20897476-58d1-49be-b33d-cf2b8ca31e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22162d44-a4a8-4776-8e30-fb76b6e8d1dd",
        "cursor": {
          "ref": "89db8551-5690-4c47-932b-3d58c7a2a47c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7edf36dd-1961-4014-a71b-05438d0c8463"
        },
        "item": {
          "id": "22162d44-a4a8-4776-8e30-fb76b6e8d1dd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3837572c-de24-4742-b2d6-b2077a72cdbf",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e24ad71f-6135-4f01-a204-88845b48c4e1",
        "cursor": {
          "ref": "fe78133d-d95b-41d3-a1a9-fcde1f5c051e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "72861ee6-d1ff-4d2d-bffa-b5a04a9e2ddb"
        },
        "item": {
          "id": "e24ad71f-6135-4f01-a204-88845b48c4e1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "09dcef77-153b-47e0-bbdb-0dcc1ee02e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183fe739-6ca2-4711-b414-414f78739175",
        "cursor": {
          "ref": "d1f6dd71-807c-4995-a7c6-099f395c397c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "27e2bd30-cb4b-46c6-8c95-8331e94907c3"
        },
        "item": {
          "id": "183fe739-6ca2-4711-b414-414f78739175",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "aba2dcc5-25af-4215-8561-bb53a6166aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2031309b-f94c-4c1e-85cc-60bbe027e09b",
        "cursor": {
          "ref": "af337336-ab7f-4df9-9317-3a1de5d2d89b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d0a7ab5d-ecff-44c6-9181-4ccb1efe8672"
        },
        "item": {
          "id": "2031309b-f94c-4c1e-85cc-60bbe027e09b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0330a4a2-bce4-4073-9e14-494d1c8ba1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d17944-78fe-48d9-8ae9-4ad4c21dfa86",
        "cursor": {
          "ref": "87f6bcff-f531-4f2a-8508-877547956f43",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bf6dbacc-c945-4983-9827-1bbf3b1473ed"
        },
        "item": {
          "id": "d0d17944-78fe-48d9-8ae9-4ad4c21dfa86",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "840887c4-ecef-45e5-af3e-f1f159bd1cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed00f1e-d76d-487a-8255-ee34ecf15eea",
        "cursor": {
          "ref": "f19e6702-00ab-4ab7-9a02-a8c5f3a57829",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "436a0a47-3634-4267-b755-e5e4722af01f"
        },
        "item": {
          "id": "9ed00f1e-d76d-487a-8255-ee34ecf15eea",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8adb2125-c3ef-4007-813d-d680e0de750e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144f7b40-1a68-41c8-b384-488ead987758",
        "cursor": {
          "ref": "d019a933-f4fd-4107-b0db-46e51bf4667b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "09c726dc-0920-41a3-a77b-0f7ac3a33a47"
        },
        "item": {
          "id": "144f7b40-1a68-41c8-b384-488ead987758",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "62698971-224a-4c5c-9f20-c629c2b2a198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391ba244-6442-4252-86ce-fd3ac780f737",
        "cursor": {
          "ref": "717b6ad5-5680-4b32-aa42-ffe322c6a454",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2e8cd9ae-997d-4f0a-bdc6-a5dc897eb92f"
        },
        "item": {
          "id": "391ba244-6442-4252-86ce-fd3ac780f737",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6f2a72bc-4347-4761-9a4c-2533df0bf81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657ee31b-7d81-40a9-8d4a-c96d8f02cbd1",
        "cursor": {
          "ref": "1d2d16cd-618e-42a5-b867-abfdbffebaf3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f4e569e8-b0f8-4d96-81d5-b87c46866d46"
        },
        "item": {
          "id": "657ee31b-7d81-40a9-8d4a-c96d8f02cbd1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a1dd0e33-2203-42c1-838b-b8806f536117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22037738-27ed-4336-8b89-680fe3d327f2",
        "cursor": {
          "ref": "2dfe95cd-8651-4415-8592-c281727d4e5d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "88fe5e4e-39e0-4b83-9ba4-e3e51ff07119"
        },
        "item": {
          "id": "22037738-27ed-4336-8b89-680fe3d327f2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b3fdafcb-b163-44d0-94fd-199e9dcfe264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9d9390-6f86-4e0d-adac-32f0506cbf7f",
        "cursor": {
          "ref": "b52211e4-0305-468f-86dd-be78ba27ba42",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9f0eb058-cf76-4c09-837a-0fb39e693670"
        },
        "item": {
          "id": "5d9d9390-6f86-4e0d-adac-32f0506cbf7f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b2eeee26-a6f0-4aa5-a5de-d5cce9ea7e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d9e159-51b3-46af-b3f7-fb56b29bc40b",
        "cursor": {
          "ref": "fe0349db-b2f2-44aa-8021-1c126f30331a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "99a0f78a-97e0-41d7-81a9-aafd7eb1fa02"
        },
        "item": {
          "id": "92d9e159-51b3-46af-b3f7-fb56b29bc40b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "66c9bb30-9e29-46df-a2c0-a6c318916637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9f5420-0057-4813-9db7-e30ec0903b4e",
        "cursor": {
          "ref": "1f2844d0-f5b8-4d76-9419-89b67821adc4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "522fb7ca-b883-4480-949f-0bfbe3d4cfef"
        },
        "item": {
          "id": "de9f5420-0057-4813-9db7-e30ec0903b4e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a49cb140-a314-42bd-b5f1-1bd609e2770f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81856399-0c48-4245-b308-e3d21b439334",
        "cursor": {
          "ref": "8f21fe9b-b4b2-4fae-9446-dc910d6d06da",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f2b4f0db-ca07-46bf-8981-b8581ed42ed5"
        },
        "item": {
          "id": "81856399-0c48-4245-b308-e3d21b439334",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bcac0175-d17b-49a6-a543-0c6743c7b31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c9be75-1512-4559-9eae-90474193183a",
        "cursor": {
          "ref": "eaa69901-ac9b-415a-b46a-eb72a730c684",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5d4b2bef-094d-4cb2-a8cf-8171af0d8d5f"
        },
        "item": {
          "id": "99c9be75-1512-4559-9eae-90474193183a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e5a4ee58-19dd-4161-abd6-f1cd7030a4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbd9be6-0b97-4073-bac8-d64ecbb5e9f9",
        "cursor": {
          "ref": "9165aa31-69d4-44a8-aa3d-3a35393356d0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "004148d4-0722-4428-8348-ea041276cea5"
        },
        "item": {
          "id": "9bbd9be6-0b97-4073-bac8-d64ecbb5e9f9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5d651db3-a73a-484f-bbc2-91b1d62e3002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09711ad7-7c30-44fc-a317-c4b705dd8d8a",
        "cursor": {
          "ref": "1112ad8b-270a-4e65-b081-96eb85477e47",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "96ea10d4-e129-4007-a394-c6017bbf6796"
        },
        "item": {
          "id": "09711ad7-7c30-44fc-a317-c4b705dd8d8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e7febda0-0c73-4f17-8630-13301ced96a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15078f9f-afdb-40da-bc29-f1d6c5ab8194",
        "cursor": {
          "ref": "c767740a-a561-42ef-bb3e-254ed3055ad5",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "af69c09e-7e59-4185-9500-3d07f3c49087"
        },
        "item": {
          "id": "15078f9f-afdb-40da-bc29-f1d6c5ab8194",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d7a43a0f-de8e-4755-9a35-6afd36e64c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d8da5b-113d-4d82-aae1-c03718feccc7",
        "cursor": {
          "ref": "c5504f06-b25c-4f4d-ad2a-010c5c082b2f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0107d106-2a06-429d-89d4-16886ff1d332"
        },
        "item": {
          "id": "b7d8da5b-113d-4d82-aae1-c03718feccc7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4c461df4-ee12-4ca9-a549-af3c728c8684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a938e82-5ac5-401c-8a5e-9cec4e14598c",
        "cursor": {
          "ref": "3aff00e7-957a-482b-a3de-667f802a8354",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "eda1a8a2-3b04-4713-9ea2-5fa5d535bb2c"
        },
        "item": {
          "id": "2a938e82-5ac5-401c-8a5e-9cec4e14598c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0fd7cdf1-7448-4397-8ebe-8d447971714a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a26446d-2d9f-45e5-8ff3-2d7fd8988dd1",
        "cursor": {
          "ref": "0d8bc1f1-f87a-42de-9a35-c632a6bee677",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a6e7fdee-559d-4711-8b98-7bc568c1d883"
        },
        "item": {
          "id": "9a26446d-2d9f-45e5-8ff3-2d7fd8988dd1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b98b1eb9-8c9b-4aff-ae90-72bd5bb153d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6e093f-d238-4177-b1f4-6edcb22b5261",
        "cursor": {
          "ref": "e11abc53-6bad-4bda-959e-2a8a6c7fe0f2",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fe43dd26-3d0d-427d-9d2e-5b84a06fbfd5"
        },
        "item": {
          "id": "fb6e093f-d238-4177-b1f4-6edcb22b5261",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bf15fd51-9b4e-48a1-9073-f58a2c3b43f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833331a4-462c-4864-9c64-837c15947e93",
        "cursor": {
          "ref": "301458df-c10f-46eb-8f7b-2639d369ba33",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1b64096a-7e1b-4b49-aa72-6d92458d3dad"
        },
        "item": {
          "id": "833331a4-462c-4864-9c64-837c15947e93",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "51fc010e-164c-4cf6-a6e7-91f6343d6bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0461c719-caca-4db1-93e7-8bd63d594b53",
        "cursor": {
          "ref": "8e965e2f-46aa-4c89-bb9f-ae5fb79fb2be",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4b68afa0-7ed9-442a-aa72-733291f28e47"
        },
        "item": {
          "id": "0461c719-caca-4db1-93e7-8bd63d594b53",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d6a3d124-c207-4287-8d4c-c0f0b32a7313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8921d0f8-b642-4dc8-af3b-3034a9f1b0a1",
        "cursor": {
          "ref": "063338ee-1513-44b4-9d49-4ea69812172a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dfb823e6-3239-4bd8-8296-ad8ea55b9172"
        },
        "item": {
          "id": "8921d0f8-b642-4dc8-af3b-3034a9f1b0a1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4b17d7a3-14d8-478b-b449-02409c34aadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0545e87-6e79-46c4-83fa-44934f117f10",
        "cursor": {
          "ref": "9ae5660c-3db2-4d74-a2e1-0b5524d12ca9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d2eddca0-c948-45e8-8501-c8cccfad0734"
        },
        "item": {
          "id": "d0545e87-6e79-46c4-83fa-44934f117f10",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7763194d-d537-4264-8c2d-47c44e56a2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9300e39a-42f7-42ea-beec-1d075ff543ae",
        "cursor": {
          "ref": "90246978-c089-45ca-b157-2e69eb114e45",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e60e792f-793c-43cc-aafe-2e4049da4a79"
        },
        "item": {
          "id": "9300e39a-42f7-42ea-beec-1d075ff543ae",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "aa6b6697-8249-4a69-9fe6-ee4fe0e6d991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e7c2a4-07f6-4b89-b172-0e9467ecbbea",
        "cursor": {
          "ref": "96bbe3e7-7a13-42e8-a52d-c51c56e884ff",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "dbebbc00-9b3b-4a5d-a990-56c993d9fa74"
        },
        "item": {
          "id": "a6e7c2a4-07f6-4b89-b172-0e9467ecbbea",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7750c14d-5e85-48d7-a91b-a211091a722d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc6d5ae-40e3-49ce-81d3-a3fda8992341",
        "cursor": {
          "ref": "dd9cc5fd-3b06-410a-8924-d5f5050aa780",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2b6681c5-0b0e-4339-9fea-aa17cdf1e2e5"
        },
        "item": {
          "id": "ecc6d5ae-40e3-49ce-81d3-a3fda8992341",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "34e01573-fa61-43ef-8b30-55ae1888a4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3881dbf2-5e3d-4e57-ab0a-04f76817f853",
        "cursor": {
          "ref": "bc2898fd-f81b-4569-a962-c7c4eef86977",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7208f6b9-7ff1-4447-a137-5169b859781b"
        },
        "item": {
          "id": "3881dbf2-5e3d-4e57-ab0a-04f76817f853",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "37e55149-857a-4d80-98e4-980aa632fe1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52713444-3726-48a0-be24-445798961ff1",
        "cursor": {
          "ref": "924a1150-b476-4c51-9a6e-daef42de166f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d39b26f5-002b-45ee-bc4c-f6c028a349ce"
        },
        "item": {
          "id": "52713444-3726-48a0-be24-445798961ff1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "57a301d9-c055-4259-a804-0e3ecef3f180",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3f0ef903-d210-407c-885e-3afd46f7bc98",
        "cursor": {
          "ref": "b804d3e7-c54f-42fa-a458-b7628c567f84",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "740d31d2-2fc3-4118-9d67-b8116b71d503"
        },
        "item": {
          "id": "3f0ef903-d210-407c-885e-3afd46f7bc98",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dc59b8fd-7778-4772-a13a-fa2ed7df0b6a",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "41f329fe-c5a5-45f9-8d31-c5831bc246c0",
        "cursor": {
          "ref": "d46d1be4-4812-4e96-8729-2b30c9a8a679",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "41ef4f41-b8b7-4394-b199-d94dbe601efa"
        },
        "item": {
          "id": "41f329fe-c5a5-45f9-8d31-c5831bc246c0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b2b2b073-fc6d-42b3-aeb8-7342b5b4ddd4",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "21ae67df-5a78-4642-8d70-d54165543af3",
        "cursor": {
          "ref": "a5385587-fdca-498f-af0d-cb97c4e58753",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0d42f666-8508-4067-8c9b-1d5961bc6183"
        },
        "item": {
          "id": "21ae67df-5a78-4642-8d70-d54165543af3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2fa500f9-a93e-41cf-b970-fdba18c84f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1099df18-0fde-4853-9c23-6fac48c63548",
        "cursor": {
          "ref": "9a6753bb-aa17-4f36-b1cf-b90d9290acf6",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "541d81c9-93c6-44d8-bc1d-d43559c2f026"
        },
        "item": {
          "id": "1099df18-0fde-4853-9c23-6fac48c63548",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a05e3bca-5dc4-4fe5-bede-074c6548adef",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b7c9eb76-dec2-4542-998f-2f14b1f319c5",
        "cursor": {
          "ref": "9bad9777-c7fb-433e-a3b7-c8db64cd3228",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "42f0ea0d-3e22-4535-8128-3bf34f61bccf"
        },
        "item": {
          "id": "b7c9eb76-dec2-4542-998f-2f14b1f319c5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eb4f3863-4a2f-4975-886a-dd0c20f61189",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8638a34c-5f2f-4175-bf84-a99fe85bc10c",
        "cursor": {
          "ref": "dd9b6a1d-1676-4811-9909-3fbbbad57d23",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "77dfd25f-ce8c-4262-9728-6913f02c6f89"
        },
        "item": {
          "id": "8638a34c-5f2f-4175-bf84-a99fe85bc10c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cf56a529-cba9-44da-8723-3b71201b8a15",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1e0feda2-3350-4acb-b8ef-00fc2b1ce0d0",
        "cursor": {
          "ref": "ce4675e1-3531-41dd-8b0b-06ed6b39702c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0b2f46de-57ae-4653-a36c-93a5309bed38"
        },
        "item": {
          "id": "1e0feda2-3350-4acb-b8ef-00fc2b1ce0d0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "849738a8-bd1b-4bd0-9268-6dd37d048a27",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c2fa5e8c-65b2-4be3-8020-d8f3b06bc671",
        "cursor": {
          "ref": "edeaaccc-1531-4f00-9ea4-63359b8dfe17",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4c5e3480-2aa8-4685-85a6-8e509711ed69"
        },
        "item": {
          "id": "c2fa5e8c-65b2-4be3-8020-d8f3b06bc671",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "019843b1-8edf-43b9-bdd4-fa9ede3e8445",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "621b3298-202d-4ad5-8d0c-c5d1cf9bfab6",
        "cursor": {
          "ref": "3f669581-50c8-4903-92e2-66eb2d31d1ac",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "721f8e4c-a741-4568-89e5-6b501a3cc9bc"
        },
        "item": {
          "id": "621b3298-202d-4ad5-8d0c-c5d1cf9bfab6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c964043d-4f8e-4171-9ea1-abce7a5ac727",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c040d30f-d634-4503-9868-da08be05883c",
        "cursor": {
          "ref": "1ac78c7a-9dae-4149-99f2-bbb2a2cc39bd",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8fb33c9d-b69b-460f-8af9-7c9ad525be91"
        },
        "item": {
          "id": "c040d30f-d634-4503-9868-da08be05883c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dac56699-1829-4777-a63a-95f4bba48546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffc2e9a-9e07-4320-9e82-8496afa73586",
        "cursor": {
          "ref": "ec8fa4c5-ad48-4592-84e8-7464912e6e9a",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d894b043-ad7e-445c-a394-c906afc34e4e"
        },
        "item": {
          "id": "7ffc2e9a-9e07-4320-9e82-8496afa73586",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dadc7374-dec8-42d3-bc50-2625e520421a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb139d60-2ffc-43cd-a1f3-0cd9fbb593fe",
        "cursor": {
          "ref": "a768bc8a-c2d2-4e31-9d69-25aec9068999",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a0562b16-380c-4a85-935e-bc9e4884d7a6"
        },
        "item": {
          "id": "eb139d60-2ffc-43cd-a1f3-0cd9fbb593fe",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "00dd2d13-796b-44f8-aebd-bb0a036950ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5c2357-f38f-4a87-bad2-9de0f0b6de7b",
        "cursor": {
          "ref": "73724279-9d6b-45da-9b18-74ed25c95b96",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b87e4420-3ca0-43f7-b4cc-f2d2a550e93d"
        },
        "item": {
          "id": "8d5c2357-f38f-4a87-bad2-9de0f0b6de7b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7db4f3b7-05c9-4fd3-8c2e-935b24afc097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8887ca6-64a4-4907-813d-a87c428093a4",
        "cursor": {
          "ref": "9333b88f-ece1-4213-a119-c38baae3e9d1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e6232b70-2f89-45d4-a5ba-53eda9486b68"
        },
        "item": {
          "id": "f8887ca6-64a4-4907-813d-a87c428093a4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3a2986b9-8216-4b3c-816d-038cfe3cb3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884340a8-2704-4ad5-8232-64e6038f30f6",
        "cursor": {
          "ref": "cbfa218e-0e7d-4469-aea4-dc6fb3a65ce9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5877d031-921d-4d4b-8c21-b5f3f2f4b9be"
        },
        "item": {
          "id": "884340a8-2704-4ad5-8232-64e6038f30f6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "038d220c-3d6e-4335-915b-8d184e987ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcd71e7-2af2-4105-a2e3-9a3f7394e1a9",
        "cursor": {
          "ref": "6a65ebd2-7305-4260-95f3-04abb4df1741",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8c555986-9eb4-4a2d-87d2-42e7b80a02bb"
        },
        "item": {
          "id": "dbcd71e7-2af2-4105-a2e3-9a3f7394e1a9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "42487ebf-5717-4855-ab09-e31b50e0ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c22b675-d147-43fd-9ef7-9021ad9e8a8a",
        "cursor": {
          "ref": "d5d95758-b2a8-422a-9272-0a06dede0c16",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "81f6897e-3fa0-4ed1-8fdb-774df682bc1e"
        },
        "item": {
          "id": "4c22b675-d147-43fd-9ef7-9021ad9e8a8a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4e997aab-71e4-4a30-98d9-681bba8b2b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91a2090-bde8-4f6c-943c-a8c1093414df",
        "cursor": {
          "ref": "d046af79-61e1-4ee9-95b7-4b560d974904",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e12f697a-5f2d-4633-95cf-c9d97b4383e5"
        },
        "item": {
          "id": "e91a2090-bde8-4f6c-943c-a8c1093414df",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a255c7ad-b8cc-48c9-a08c-85e0176dea4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4996571-25a6-4d47-9371-2251947c02d7",
        "cursor": {
          "ref": "6c0602a5-6595-4fd5-b26f-fc1282b57c66",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "398cbae7-71d2-4391-8e50-47f46f1d921a"
        },
        "item": {
          "id": "c4996571-25a6-4d47-9371-2251947c02d7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9e671aae-804d-44b7-a5a9-c7fda9bb95ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2587b443-b09c-485b-bc7e-378588b9eb97",
        "cursor": {
          "ref": "e2c16802-0c2d-4229-866f-8b2aaed86e1f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "25ad6f37-4707-4f6c-b446-bf16735359ac"
        },
        "item": {
          "id": "2587b443-b09c-485b-bc7e-378588b9eb97",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "acda5246-d911-4131-9d32-29b393366405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fb2528-3e91-49d8-aa80-ee3866869972",
        "cursor": {
          "ref": "fd9727fc-63a3-4823-87c1-1138529cfb9c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "325717fb-5178-46d9-8e1d-1f5d78bdaeed"
        },
        "item": {
          "id": "68fb2528-3e91-49d8-aa80-ee3866869972",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "622ec3f5-6108-414a-a61d-14b23251c562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945eb475-368f-4285-a630-09e2d08efc9e",
        "cursor": {
          "ref": "43de4949-6f41-4aae-9b16-869dcb85b94b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7ce1aa5a-fcc0-46a1-a71a-24289e81f463"
        },
        "item": {
          "id": "945eb475-368f-4285-a630-09e2d08efc9e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ab881f45-0090-4ffb-959f-ab511bf2451f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d416f5f7-f2ff-4c5e-8081-5c7d494b0ced",
        "cursor": {
          "ref": "e21ba79d-6514-49db-aa1a-8eeda4dfc29c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "187c4196-a790-41e7-b4ff-1f4d0aadf20e"
        },
        "item": {
          "id": "d416f5f7-f2ff-4c5e-8081-5c7d494b0ced",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "46ac0329-12ab-4f42-9972-0d2ebaa650c1",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d303eb90-62f2-4297-ab4a-4d67faba6acf",
        "cursor": {
          "ref": "08bd964c-6641-44eb-a531-a265ea09e3b3",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d397e61d-0537-45f0-a874-bd5a58d6b115"
        },
        "item": {
          "id": "d303eb90-62f2-4297-ab4a-4d67faba6acf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1876c489-8aac-4ea2-b8a8-c4da1c6aff76",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "42353e75-7ce2-4731-900a-f4c25063f6f4",
        "cursor": {
          "ref": "6ddfa65b-6221-4cde-8e90-8728f8061eb8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "43e51768-e028-4208-9130-11474911f353"
        },
        "item": {
          "id": "42353e75-7ce2-4731-900a-f4c25063f6f4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "de9a64be-5d78-465d-b934-e1b94862ae70",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "73fbcbac-4f3c-4acf-bd4f-9fa8afc314bf",
        "cursor": {
          "ref": "4b49b850-0c1b-4104-a2f2-1996ea6cd05e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "41c6fb0e-933a-4e0a-a69c-752c7dea5c23"
        },
        "item": {
          "id": "73fbcbac-4f3c-4acf-bd4f-9fa8afc314bf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c26992ff-70fe-42c9-a18f-bd7cc6ba535e",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "161af6db-3dbc-4384-99b9-97cdd15d5ab2",
        "cursor": {
          "ref": "5b1528c9-5d91-40c1-85bf-60e9aa486e48",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ee9aa299-f59e-4caa-8ca2-bddc8ae10ea6"
        },
        "item": {
          "id": "161af6db-3dbc-4384-99b9-97cdd15d5ab2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8b560d7d-0e01-4c10-b5fe-7128bc1ad1c6",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "67175e06-10a4-42f9-83c7-4f99eb43d669",
        "cursor": {
          "ref": "e25deb4e-a0f5-4ff5-ac48-4f7606adac74",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "798c4f07-cf82-483b-b223-7253f5749845"
        },
        "item": {
          "id": "67175e06-10a4-42f9-83c7-4f99eb43d669",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "00dfa94c-ca1f-4798-8b4d-ec1a043063fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5cf58c-0faf-4720-b864-6c8752c0c610",
        "cursor": {
          "ref": "e6bcf0cb-1e47-441b-bf93-ff514fd8d7db",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8f375aa0-4a37-42e2-a9ba-56ef67e3d5c8"
        },
        "item": {
          "id": "4d5cf58c-0faf-4720-b864-6c8752c0c610",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "557eaeb3-d360-4e0e-92a8-ad165fab28f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e00a6f-f1b4-4fa9-b9d8-71653781620b",
        "cursor": {
          "ref": "9e61b944-c3be-45bb-9689-55580efbd2f9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d246fe46-48f0-4bb8-89eb-fcf52f592f88"
        },
        "item": {
          "id": "20e00a6f-f1b4-4fa9-b9d8-71653781620b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "21b022da-b223-4f11-aba3-0d6546108229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0769de-ca00-482c-81f3-1c5e0846e487",
        "cursor": {
          "ref": "7da61d3f-776b-4eca-ada0-fcff1536ba8f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ceb29ed6-289e-43ee-abfa-786fa670e14c"
        },
        "item": {
          "id": "3c0769de-ca00-482c-81f3-1c5e0846e487",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "24879e8d-fd55-4965-b6eb-4aa43d0737d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831b19f9-a378-4ed3-a84c-14e90aff9406",
        "cursor": {
          "ref": "0831e0f6-2dce-4052-84c6-d344d84df878",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "07f9ad64-1c9a-42cf-801a-1183bf1699f8"
        },
        "item": {
          "id": "831b19f9-a378-4ed3-a84c-14e90aff9406",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2f9ec34e-081a-4610-84eb-cd3530f09a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9e9816-b33d-4381-8f84-23d257a98fa6",
        "cursor": {
          "ref": "bfdfec73-e7fc-458f-b59e-6720462ed171",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3d1ef248-0717-4f55-ab2f-a889cfca2bd2"
        },
        "item": {
          "id": "ef9e9816-b33d-4381-8f84-23d257a98fa6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cef01e4d-c663-453e-832f-e33880ba6b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492a3e5a-cd1f-48bd-9df3-eb01f3b61335",
        "cursor": {
          "ref": "34ae7597-3dbc-43bc-b942-a54c820a6dcc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b6ff3f61-e873-4d7b-b56d-2545e5129307"
        },
        "item": {
          "id": "492a3e5a-cd1f-48bd-9df3-eb01f3b61335",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ccb2eee7-7856-48fa-8f4f-63e75894ac7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6b1c11-05f4-413f-996b-fc33f5fe554f",
        "cursor": {
          "ref": "288b0e72-6d32-4a40-a2e8-4c23e779623b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3f2b6162-31c3-479b-a459-aee19162ff1a"
        },
        "item": {
          "id": "9c6b1c11-05f4-413f-996b-fc33f5fe554f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "193d100b-089c-4b8f-bce6-74265f67c48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c60c378-e9a1-4277-aee9-c683f53e02da",
        "cursor": {
          "ref": "1e51ae7d-fdb2-4227-a8f4-5387c613d832",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "96017398-0082-4d40-8f36-74e4e2b9fc5c"
        },
        "item": {
          "id": "5c60c378-e9a1-4277-aee9-c683f53e02da",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7965d3ea-d451-4baa-ad19-f64dc66cb3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7c725d-9055-4d41-aa1e-9465e148a72f",
        "cursor": {
          "ref": "bc60c5f1-9935-409b-93ad-07bdad6c4e4a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "60e9d572-0610-4ce8-be11-677c6bee94c8"
        },
        "item": {
          "id": "cb7c725d-9055-4d41-aa1e-9465e148a72f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "03900b30-ae3f-467b-b45d-dc27d2dfceab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90f6c28-75c1-414d-9bcd-1980c5eaf9a1",
        "cursor": {
          "ref": "a8623c23-d3c7-4c41-880a-fcdbb6dcd451",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "02d75ea8-f2f0-437c-aacb-67df3948a40c"
        },
        "item": {
          "id": "f90f6c28-75c1-414d-9bcd-1980c5eaf9a1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "84e2ae14-adc0-4819-9b87-1d590b12e2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff78e8f-9c75-4d1e-9e7e-f451f60c2b99",
        "cursor": {
          "ref": "0b2eefdc-5581-4370-8252-f2c022b63481",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7c437349-3aae-40c9-b2e6-77b8e7d2be7e"
        },
        "item": {
          "id": "0ff78e8f-9c75-4d1e-9e7e-f451f60c2b99",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9cedff67-46bd-4fe1-96cd-c8fb97b6b8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaaac0d-8bd9-46c7-a6af-6929138371df",
        "cursor": {
          "ref": "f1f17e1f-63d4-464b-94c3-be6d9da3c429",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ca7eed80-72cf-439f-8ca8-3c1990f31f0b"
        },
        "item": {
          "id": "7aaaac0d-8bd9-46c7-a6af-6929138371df",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e19fbe6c-8963-416e-b29c-5ae535a2a02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f59f6dc-2520-47c6-8b60-755cc079cccb",
        "cursor": {
          "ref": "c4903811-6881-4fdd-aa07-75cd70942424",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e9315a8b-4548-45c5-bd38-ea1d731a3272"
        },
        "item": {
          "id": "6f59f6dc-2520-47c6-8b60-755cc079cccb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d5d6968a-7034-4989-b31c-df1a60fe736f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4d2be3-df01-47cd-aad3-b336b9246614",
        "cursor": {
          "ref": "246bdeb7-01e3-435d-a42a-c2f4ea35e6e4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bef8c871-bc60-4986-bdba-fd069a4953b5"
        },
        "item": {
          "id": "ae4d2be3-df01-47cd-aad3-b336b9246614",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c58c6bf0-b92c-4250-95bf-ffcede972651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecb6a43-6ed4-491c-a684-d7e3a06326b0",
        "cursor": {
          "ref": "fbff1b3a-941c-49f8-be0d-85c68f33a1f6",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f2cd2f5d-759a-43a9-9140-cb5a0e1b255d"
        },
        "item": {
          "id": "5ecb6a43-6ed4-491c-a684-d7e3a06326b0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7f6c4b9e-2c31-4568-8e3d-3349e1b90e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade098c2-df50-4f90-96f3-cdcf512b2aa0",
        "cursor": {
          "ref": "d83cb240-bf14-4d63-856f-f5930c591793",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d5ca5149-dbe7-4961-a8f6-aaca27d5fc49"
        },
        "item": {
          "id": "ade098c2-df50-4f90-96f3-cdcf512b2aa0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e632bf83-21a0-47a9-8141-bf18ef068a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0154de3-e52e-465b-b97e-17ad0a8b4ebb",
        "cursor": {
          "ref": "ac46a77f-4f29-4ae3-952c-25d654dfaec9",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a47ed173-986b-4cdb-b3fb-67ab67af22da"
        },
        "item": {
          "id": "c0154de3-e52e-465b-b97e-17ad0a8b4ebb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "22c92cd0-6bc3-421e-bef8-c3609ff19362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081fa781-2e73-418d-af16-b93b9de9aad9",
        "cursor": {
          "ref": "c36ff28f-69e7-4d1c-9c3a-505944c6cc3f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d22b0651-fc46-4ae7-b0da-ea3e75c1c32b"
        },
        "item": {
          "id": "081fa781-2e73-418d-af16-b93b9de9aad9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3a1327d7-6bf0-4b09-ac98-0d3c68946192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c3600e-0f9b-4134-a2fc-b9ba0acbd896",
        "cursor": {
          "ref": "2b3787bc-1a56-4835-ac8f-eba934b67526",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "31a47551-a721-43ad-ab85-67214958d615"
        },
        "item": {
          "id": "36c3600e-0f9b-4134-a2fc-b9ba0acbd896",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fa6d5977-8766-4827-a3d6-36bf14bac5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a754c96d-bc1b-4821-a065-c5988a9f6ae1",
        "cursor": {
          "ref": "d8b55b8b-1a51-4127-b86a-70f7e721f2ad",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4642dbb6-eff4-4923-b2c1-6d243373c737"
        },
        "item": {
          "id": "a754c96d-bc1b-4821-a065-c5988a9f6ae1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "569b4578-ef27-4a5f-9975-8ce1f7acc155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650abd9b-65c5-43c0-b7c2-05e5c5a3d888",
        "cursor": {
          "ref": "20f7ac93-8811-4311-8ed7-d762998a2ccc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "883d993c-3afa-4835-8fd4-33521d565513"
        },
        "item": {
          "id": "650abd9b-65c5-43c0-b7c2-05e5c5a3d888",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "58786b19-b059-40c6-a0ea-58cb093e2927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd37ba86-ac59-47f4-b3de-e78c08a2c226",
        "cursor": {
          "ref": "4e301165-a04f-431a-b415-356f4ad74506",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a5d71b33-7338-4bd6-bcf9-6ac47e7a8121"
        },
        "item": {
          "id": "cd37ba86-ac59-47f4-b3de-e78c08a2c226",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "18a95ce3-26ae-4e88-8aac-7d876d100b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b806093-8111-4d6f-b5d7-3abe5021af25",
        "cursor": {
          "ref": "9a13846d-dcef-4bb7-b88c-806cb51ce7f1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b9011e95-488f-493f-a482-4a62cf65dd11"
        },
        "item": {
          "id": "3b806093-8111-4d6f-b5d7-3abe5021af25",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fea2743d-316a-450c-97a5-8946c9c0c509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e8c760-6562-4d6b-a089-3c6129a23170",
        "cursor": {
          "ref": "d27bb87b-7596-4742-bbac-56637b95b749",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f6441a9d-918e-4d69-a504-738309712ac3"
        },
        "item": {
          "id": "74e8c760-6562-4d6b-a089-3c6129a23170",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4bc1f5b5-e3ce-4f99-800d-899cd6fe430c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a238d212-0fa7-4d25-802b-baf1a1ff13c5",
        "cursor": {
          "ref": "8c8ef1b1-c9b0-4a9f-b7a5-aa4e8080d5dc",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "62020bca-b57d-4f07-99d0-d52579f9ee18"
        },
        "item": {
          "id": "a238d212-0fa7-4d25-802b-baf1a1ff13c5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "95c2e3a7-fe3c-4002-a550-070cf8c50ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ea7924-348c-43c5-9c4f-481c6085d6ea",
        "cursor": {
          "ref": "96060422-c518-4674-b970-6c384281ce77",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3a11c45e-1e2d-4229-90c9-f84a46b66c95"
        },
        "item": {
          "id": "67ea7924-348c-43c5-9c4f-481c6085d6ea",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b54f3657-730d-4ac7-9148-49fd3990dee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251efa99-8412-4f14-ac9c-8bb3ec319040",
        "cursor": {
          "ref": "0ae5891e-e596-4b7e-b71c-76449349e264",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3031dd30-f90b-455d-b744-5875e580c78d"
        },
        "item": {
          "id": "251efa99-8412-4f14-ac9c-8bb3ec319040",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "02d7b87d-103e-42ba-a013-b88da672392a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892f902a-5cc8-4f80-9b09-ac52aeb4ba49",
        "cursor": {
          "ref": "3802113c-d04f-43b9-ba2f-ae3de909ca01",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb91b485-756b-4b0e-94be-c9f1d7dba7e7"
        },
        "item": {
          "id": "892f902a-5cc8-4f80-9b09-ac52aeb4ba49",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d25fc764-4eed-4437-8969-5bea40ec4f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d647a7a4-9517-4461-975f-1284510e5e20",
        "cursor": {
          "ref": "c3c1cc7f-66a4-42c2-9026-778b7d6393ca",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4107d148-c3ef-4525-9f75-7ce012d7fa47"
        },
        "item": {
          "id": "d647a7a4-9517-4461-975f-1284510e5e20",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "564806f5-a6d9-496c-be2b-58388bdd04c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a79f99e-4be6-49ca-8e90-9c99327f3fb7",
        "cursor": {
          "ref": "54ada49e-748a-49ea-aca4-d8ceaf1a14e0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2e99f204-71c4-4d7f-b6b5-c13b92b184de"
        },
        "item": {
          "id": "7a79f99e-4be6-49ca-8e90-9c99327f3fb7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8435bf2c-dbf1-4807-aff8-15235cc48305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c178f4-cab6-45c3-b564-a2cf30fe98fb",
        "cursor": {
          "ref": "2f7b0241-793d-4494-b84a-c1298b733c46",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d9184ee6-9ee3-4f7d-b26a-3e66591988a4"
        },
        "item": {
          "id": "87c178f4-cab6-45c3-b564-a2cf30fe98fb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "18426271-d083-42bc-83a6-1b52ed86c809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6831e19b-45c3-45bf-8703-1aa85bb7f154",
        "cursor": {
          "ref": "3a72a0bd-db19-4cb3-817a-15942a33ff71",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "73135a75-f997-40a6-9c0d-bf48fc708061"
        },
        "item": {
          "id": "6831e19b-45c3-45bf-8703-1aa85bb7f154",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "68af80a9-aa9b-4601-8ebd-343b74c6c937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d379194c-b8e5-4ff4-ba63-03b8ddf12f6a",
        "cursor": {
          "ref": "c5952076-2e97-42af-8b0c-1d3879b5a91d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b6affc11-5bab-46cd-8b02-f0a85a00989e"
        },
        "item": {
          "id": "d379194c-b8e5-4ff4-ba63-03b8ddf12f6a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d5e50230-de2a-4c17-a943-78652708d964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e4e99-f030-460d-9797-aa593c4cb141",
        "cursor": {
          "ref": "e6e2860d-72ec-4730-a732-930ce1f7d3e0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6ee7efb3-0574-4886-84ce-59ced48e3860"
        },
        "item": {
          "id": "d44e4e99-f030-460d-9797-aa593c4cb141",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "60b56d1c-4f03-43b3-a988-d104b77f1e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a11416-129d-4ed4-886a-98ab1058c98c",
        "cursor": {
          "ref": "21235457-a416-4734-bd16-4f76c4aca32b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4d595c44-3741-4320-8265-9a085f59ead4"
        },
        "item": {
          "id": "15a11416-129d-4ed4-886a-98ab1058c98c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e68a84e4-4bc1-4364-a914-e355353ed0c7",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "891d606c-6aad-4b81-88d7-80a688ad5608",
        "cursor": {
          "ref": "6c268eb6-fd75-495e-8a35-79bc902e10f2",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fcf16504-f731-410d-8029-32efdb2d2fc4"
        },
        "item": {
          "id": "891d606c-6aad-4b81-88d7-80a688ad5608",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4e71b9d3-3f20-4da9-980b-c72b5c223587",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8494057-d528-45c6-9911-e64b9cd7b4d7",
        "cursor": {
          "ref": "3d17762d-b9a4-4d71-bc4e-f7485d21e89f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b51839e6-e999-4b43-b21f-882fe35fc4d8"
        },
        "item": {
          "id": "a8494057-d528-45c6-9911-e64b9cd7b4d7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ee6ea5f8-3fdb-4568-a7c1-4fec4570ab8c",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a318fdaa-0e82-4706-9b67-9b3f07efbdf3",
        "cursor": {
          "ref": "ce14b2ec-a10b-4673-bb50-a284901374e6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf522ab2-0754-4ff8-a453-dcb593491fb0"
        },
        "item": {
          "id": "a318fdaa-0e82-4706-9b67-9b3f07efbdf3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d63e86a3-ba23-4e20-bc88-c9ea234c6e50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a318fdaa-0e82-4706-9b67-9b3f07efbdf3",
        "cursor": {
          "ref": "ce14b2ec-a10b-4673-bb50-a284901374e6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf522ab2-0754-4ff8-a453-dcb593491fb0"
        },
        "item": {
          "id": "a318fdaa-0e82-4706-9b67-9b3f07efbdf3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d63e86a3-ba23-4e20-bc88-c9ea234c6e50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88999db5-1e7a-4c17-b447-0c62084ba364",
        "cursor": {
          "ref": "96352e77-2bdf-48c2-b1d7-357f527d7c0b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "686b3d5a-6eca-44b8-8bf9-f9c8b24b3037"
        },
        "item": {
          "id": "88999db5-1e7a-4c17-b447-0c62084ba364",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d721ab25-7756-423e-a33d-4c38adb45718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce88a2a7-ad01-4f16-ad5e-32bd56e55b64",
        "cursor": {
          "ref": "fa4204b2-9f9e-4b7b-adb8-f79c0dd2cfd8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e24b10a5-45bf-4540-9b28-38ac6063daaa"
        },
        "item": {
          "id": "ce88a2a7-ad01-4f16-ad5e-32bd56e55b64",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d9a3dd8f-0ac9-45c3-a82c-3f9e53025f51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}