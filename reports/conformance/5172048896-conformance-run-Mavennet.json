{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4c8329bf-4a50-49a4-9d84-ddc5a68127b7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b8e87aff-6199-42a8-8cf3-0e9d25f04939",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24c6ff10-5a8d-413d-80a6-3171531ef10c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ebab92d5-d0eb-42e2-8623-813e2cc9fac0"
                }
              }
            ]
          },
          {
            "id": "b8e2f7d3-84dd-4552-98d5-f25a4042392f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a7e7375-a897-4a34-8b50-627cbfe133cb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0ebbff3d-bd8d-46af-bad5-7759aea4f63c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c4bf338b-3a3c-49c9-aded-4a9e12a3f977",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "717eef2e-d8ec-41ae-adab-68f55f7c0c08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fbf10c4-8e4e-44e6-9f58-0952e7bfc423",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c18f05f-b6e2-413e-9b04-f4362df22a1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c6e7f70-d7aa-4acd-8080-7da80723ecf0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96628c12-a80e-4893-8b4f-5b59ea98b687",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "577cc48c-2b39-4da5-a2d5-40da63c8222d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e199950-53ba-42d2-b812-35d5eb10490b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f1289ec-9354-43b3-9207-2d46fa727432"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f8dcfd9-70ab-4f9d-b61b-1a2fba1419dd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "349f2f5c-35a2-4e01-9e68-a504a8b791ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81f60bc0-9874-4103-aff9-5fb27c2a1f5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5c64e53-01cd-43f8-94ca-a15ab911db76"
            }
          }
        ]
      },
      {
        "id": "d1dc85b1-9d30-459f-9ddd-9b0d59f601da",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6d9ba80a-b220-44ba-adb1-95dcae746755",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db42d0f9-446e-4101-a9fa-bae55f7b61b8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ae99972-0b85-4fad-8863-72fa843c8666",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04c6853-bbd0-446d-b603-2de795e83c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "725d3bcc-cceb-43b3-ad9c-f262bec2b2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f00d951-df34-464f-818c-6ab59ae10e95",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e80c4b-68cc-4dfd-80e2-30cc6480832b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00225ff1-f527-4c87-9ab0-fb37723e340b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c18787-1031-4581-af54-841c46092713",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6efd67-a756-465b-8914-6d0cd65c9c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc6a40f4-daf7-4bbd-bb94-231c93b2f8c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78a17da1-9ceb-492b-b0f4-3df8a137bed4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74639af8-0b64-4bb4-b5a2-fa86f3fe72bf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e23a73b-1384-458a-b830-2a73b36e32f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "991b58bf-7de2-4d35-98e1-5cf36f8c47ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f136e7-003b-497c-87c1-1762211d5f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47c62bf-5e0e-4b6e-abef-bfa8f48101f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "364302ca-0999-4d82-9b31-a4fc20df56a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9fba4229-53fb-4825-92bd-805aa33a5a97",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d120baaa-9cfe-4898-aa51-4d32867aaa49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0a2a5c45-3582-4bab-8537-fbcb34f9bedb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "246a3704-66fd-4ff6-80b1-edd5fc7edaf2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c86aae3d-083a-4023-8973-11df1521c571"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9028fbb-39fc-415f-ab9e-dd76a9ce653d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a08ff4d-15a3-4b32-9b45-2aac26f000fd"
            }
          }
        ]
      },
      {
        "id": "41d80726-8dd5-430f-8bc6-43675e1c264b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "95528ae3-c46b-4e6f-af43-96f77d6e9923",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33d2d3c5-4338-43a4-b446-9807ff58891e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0ffe10b7-2549-414e-95db-dfbe30ab48fa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc59622f-e4b1-413b-bb2e-7ea8c47726e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c74385-3b61-4653-aab1-cf708c08691e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec691fef-f700-4ed8-8bc8-47760d4590b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50020ebc-6697-44f6-b1d9-d51f8695f725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d085ce0-5a86-4d8d-9309-ba412a582537",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c690917-3db7-4226-b2db-44800fc17cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6303f56-5cdb-4baf-b252-25e4bd939e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759efbcd-a47f-40ad-a4b6-0c8a3fd4ddaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3db26efe-b16e-4ab9-957f-6d24f7cbda65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec7883a-4eb3-4c25-85ce-55961dc31762",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669e89d3-0b8d-41b2-8b8e-3cb066e1e564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a0bcb1-b04c-4ffe-ba7f-d261a6b2ab93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5183a6-bd0b-44fb-a212-01a1be19b9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f46fc8ec-bba8-47ad-8b3d-ec19240663a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55073fe3-54d4-44bb-8d54-dc2b81f4d00d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6838258b-e118-4030-a532-1d29c5337685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a10d1c-a315-4031-a352-7713c083a6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1a4410-ed48-43f1-875f-2f834ae582ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9047d2cd-7653-4cf0-a86d-0c7022859300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1eca37-05b9-4dc2-ab09-7c8ab74edc45",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7da6fb2-a2a9-4fc5-86b0-64a8569a7233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916adda2-5853-42ac-8393-cf4f2e2c9fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638ad164-007d-455e-b2c2-86ceae79f8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88699b50-af2b-4bd6-804a-ad69d3c51c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42926fe6-5f86-43e6-9a7d-03e98dc0b7f7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e4698b-c0db-4162-92af-1bb0bc722df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c976e41a-04e8-438e-99d2-b2f0ab454244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24641fed-405b-4d9f-98e2-8bef4c61f540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7da368c-bcaf-42ff-a977-5b8f49711048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d602e9-0b4c-484f-87e1-e6c785a1ff00",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed63186b-c29d-408f-a8ec-04ae5fe7cb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9220fcd4-cdd9-47d3-9221-5487f19e6029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60511e49-63d2-4e3c-89ae-22f03a3bc68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "330b812d-a332-434a-bc4c-4bb5546acae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee75975-80b9-4cd9-914f-4a7f64c7ef59",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cb41a6-e4a8-4ca1-a277-11b1fe4a9cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61156791-9b97-4a92-bebe-316f97875b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09e0a73-367c-47dd-bfd0-911d803ceaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84d5e72a-65c6-4bdd-9642-c72b35beb24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707ba914-69fc-4ccc-8f9e-1ecf8786aaf7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e846ee-ae5c-4b31-bac3-a0e5d079d7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82262473-2924-4782-82f6-c9890e440954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65509fae-4839-4b50-a749-83e0ae78e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "507fcbca-67e5-4cac-97bf-f8e4798dbe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70197d6-89d9-4dd5-b84d-6014972e1434",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94708efb-49f5-421a-8a26-512a105d2ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2d8879-bd8c-46f7-9ce4-1d7fa7beb1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5a38db-79ea-4622-b45f-cbe8bc682fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3595bd4-5155-4940-a2f4-9c7df72c565f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cb9424-a7f4-4c04-8124-a56cde828613",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bff18f-d032-47db-a940-5a0d5461ff84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30839723-8d4e-4f79-a4ef-5df3eeb39d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805f9b98-d130-4a95-88d9-276c6b709e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3e1d0a6-b91d-4c29-883b-5735e4d86d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dfece3-9d2f-43b6-959a-f514ffb9f001",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b60ca7-150f-44d4-ba80-3810737e196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb35fe8e-b7ee-4839-a535-e628fb6087d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1195bf6b-a855-4d1b-9a32-aebab2d0c8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92e6b198-4216-4bf9-be4b-256949c74003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877a946b-d15a-4834-a05d-94f5cfeac375",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db11a01-cadf-4b82-819c-baebbc3a96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0596ee-dd6a-4bf5-b57e-c47e38f0f7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24627341-2df4-4e27-b40e-826edfe4c7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ced72a1-e982-4b3f-a718-c50de8561333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a96c41-1c8e-44d9-a024-2d3aa1fee8d5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3094a77-4ef2-442f-93ce-861b81f00751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbec4b5a-eb49-405f-b28b-499d74e5902d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05b29ef-feda-4361-a685-a49dc6a56269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f04ab74-657b-469b-8dcb-4166e1ed8cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb52471e-e124-4e34-837d-b18be7ac0558",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea9d60f-6eb5-4f6b-9804-cfa7169ec907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c34eb6-71bb-4305-bf9f-855372b65fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228c1e67-46d5-496c-aa95-f153fcbf70bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38803a5e-d4a2-4127-accd-b1bb84566818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9d232e-3cc7-4a7b-b5ae-e363b6914990",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b716c5c9-d36d-4bdf-94dc-988aed2e1ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05a16a0-3b7a-4f08-8588-b83907a5ba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a066ad-a32f-4586-b49a-4ec44944728d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41fb72f2-242b-426e-b883-8eae5567c13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdea26aa-fa4c-4ae0-b08d-821c5133fa37",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98d73b2-33e0-4bd4-be42-4f473e813cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7950e511-1c5e-4031-a466-5c62976d29c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5360798c-910f-4762-b650-8a1c860320b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fd65ae5-eeeb-4267-995e-5711e510a3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b9774f-aca4-49fa-a725-7e4dd8c4ec4e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295d75cb-14dc-468d-b997-f5de199779bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4850fbd6-1ce4-4db1-98c1-39437eaf9fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62c86c0-9dab-447e-897f-1d361d543bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1c1ad2-f982-4589-b7dc-af6156f7715a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43bd89f-7f74-45b1-88e8-9ae400b7483d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1237a7-e83f-4489-ab95-36efe116f584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0784fc-5700-4eeb-816c-01058f8ac81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc301c3-c38a-452c-bcc6-ad6867b1a525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9af5167-a1b9-476a-806e-dbbd58870b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bb4306-6fdb-4e0d-ac14-d392c9d69300",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1613cdb-7bdd-44ee-bdfc-888cf1d9937a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cc87d3-6bff-4e87-942a-d750c28c423c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f6dc7c-773e-414d-a5f6-70aacf97f365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07b79f83-b179-47e6-9f99-ed528a863915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a963a7fe-c76e-4528-95c4-fdba1c1f1459",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737d78b8-4be0-4de5-ba22-fe74ebde2c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a6b77b7-0e3b-49de-83d5-b9fa47dc3902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1076426-c8eb-4b91-b0e2-9f032d1921b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33dd7ab-7a45-480d-ac74-d8a5ff4d2a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430915c2-8ca1-4153-a593-1ec7a627749f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170c8760-5701-4464-98ed-2aa223d35b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e1ad1d-72d9-49fd-a766-a7a5d94b57f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633811d3-032b-4b95-96a1-bd8e3f342b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77f73ba6-f9e6-48c2-984b-c3ba9099e8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b8f739-2183-4d71-8cfd-db1cdf3a2e8c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0525ab6a-4ee9-43fc-bbe9-47976c4e72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c73fd8-cc77-4996-8711-52e2e65a087b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc539422-781d-4325-b7a5-4aed7f0c92d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66505552-bcbe-4201-a6b4-4d81c84525f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2376410b-ce37-4804-aee9-6cdec4fa5a68",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47fae0c-d2ae-4495-8820-29db13a25159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4ed72b-029d-42d7-8207-34e9d6e6865d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19442c2-5075-420c-ac5f-c2d883bbd727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d939946-592c-4050-a2c4-14bb43dc6ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c7d532-fe31-47e9-8cd9-605c61a5829c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dfb759-b4be-41d5-a916-805f1eb3cef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3575b735-9527-4455-b8a9-340290f1c63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5d12d1-9c52-4610-a928-c02421fc6ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abecf7e-88a6-4865-97bf-86a4d3c65ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65154747-ffd9-4bbd-b8bc-9baf2c0fefb3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c14c4d-d4e1-4734-88c5-4ffbc3813a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285bc7c3-fa97-4026-9760-4e6f3c5c13eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc656e9a-d34a-4202-8b0c-0189124a80a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "214cabcb-7536-4458-ba38-e6a5c0d7e885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3765799e-6bcc-4ebe-a96f-da9d3a3fb2c2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273f2ff7-cf85-4186-801c-9f25580463bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b228758-21e8-4e70-a9ea-2f53024811a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f5d996-633b-4729-b9e2-ec6f1405fb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd1e627-9c38-4ebe-9d97-c6459f4db377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe281756-7c6b-40ff-af74-ccdf7a7d12c8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766fd6eb-e6e3-401b-88b0-49746bbfaa76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc454f42-51df-4e9a-a4ac-ddb183fdb302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c5bb73-cc62-4d24-a712-d898ec467bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6cbb2ac-328f-41f4-a92f-88286b09a094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9531d2-cbf3-4604-8c69-b25bbca642a8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2757a5f-934c-4bca-aa2e-4e92afddea1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb40e1a-0923-4205-bee2-553d6d858dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28503386-b5cd-468a-83f9-a4e8f94ae4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21d77b3-feb9-4845-98ef-839bff044a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a042f8-ff31-45f1-b1a3-f59fdb2fa8e0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd687f6e-6956-497b-95f6-3f9fb973fd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a845d027-7de6-407e-bc7d-0f8ce02892f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e664eac8-17ee-4866-bea5-9a6a036c39b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5338b0-15dd-4dc7-ba87-1036a9b604eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f6b0df-32ed-4a02-bebd-66aff55a1357",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eea3ab-8318-45e6-a421-6905410b636d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24057824-1904-4e24-ada7-fabb646d6d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5e1753-af69-4ec1-9300-81865fe94cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e87668-1278-4f6d-b7f4-de0d90e5dde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b234310-8727-4880-aa48-87eae5ec96fb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63d65a8-7d6f-40c6-a5c1-aa269af302b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45231d38-d912-4d8f-96fc-4ea554554ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7788ad38-27b3-4db4-90ab-1b8b825ec1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab3e653-5576-4f01-90c6-34b581484025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7325285a-cfc1-4d31-9c08-ef081860bd6e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68161b62-be1e-485b-818f-95979afa480f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1563818-e1a8-4c62-b6f6-26aaf261c7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263ca491-91f4-4d78-b6bd-f44b27844857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd46badb-193f-4d19-8ea6-781d462e403e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644423d7-bd61-430d-a5d9-210d0e994b1d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cc4768-571b-449d-8c54-4edfe7d12b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40786311-b219-4450-8ff1-ce1ecb02e697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190288f5-ed4e-4f96-930e-0ef2ebf37e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cddd84d-19a0-470f-a029-a2b1c82428f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9395a7-a414-4e31-9bde-70b707cf528f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a60e2b3-7ff3-46cf-9877-90daa080835b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685669ce-b6f8-41c5-928d-8083d9cabdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09943e62-f47d-475f-8a5d-443f43c32f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d47486fb-e8bc-425d-9c91-8448097dca82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0978f189-97c6-4264-bbaf-562c37d808ee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d057f87-3dd9-4424-acec-843363dd2e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99f9e602-f625-42bc-9d45-d32f2273fc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b25b21-e58e-4e51-9f2d-74a5c81482a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c513260e-6360-469e-895d-79dd354fccb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327fc3e7-fa52-437e-b4d1-d8914a3da931",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dd9c15-c428-406b-8f25-4b0b1df29af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3b040f-a013-4235-a6e9-464f4f6fc6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1645bb92-d573-47fa-93d5-3153682086b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "874b93ed-f4a2-42b8-a9ff-7a81fe27af05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d0ea1-3232-484d-8118-ef4a565d2583",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170a8c3b-3a89-4eda-b998-742a52359e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bcf785-8ecb-40b6-a52d-7c64cb382635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e713577c-45c6-4c80-b033-ae6e4d758d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8f0b94-fcb8-4955-a93b-b87a8026bac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe90dc72-dacf-4a1c-87b0-e03987d799b0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aff005-201c-488a-a0c6-c062be656c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e33110-87de-49fe-b8e1-cc84643c96cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a62d981-45e1-4c44-981e-462b8d4dc797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9de39a23-ccf6-4c17-9e70-d64376170f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76854db-d203-4552-a1a9-97433bf82ef9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59fd358-30bf-4477-8814-388c4d3524fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d5f003-923b-4ad7-a6af-c102ff7b4e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554163a8-c7bc-4712-bfea-38d00bd8427d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f738f437-b5bb-4989-8bf0-9a462016f4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a8ca29-1c6d-43bf-882a-452767766585",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04741a62-dd12-43f5-ac88-02b859bd877a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6c3662-559a-4a91-a0b7-07f54fb74e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c4f233-8ef0-4c75-a27b-66af308570f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c39c63-73b1-488a-a6c6-cb19ef301d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095cd0a0-f8da-4422-a13f-e9fa64be36b7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42326617-8386-474a-b7cf-2f30b67d8100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9334aeb7-47a6-4e20-977e-023f0f49cdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aedeb9-788e-4a8a-ae48-3a08b7249b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f921b518-d7f2-4d98-8432-61821d13c231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9e21da-a3b1-4162-9618-8b9bb2b4f00a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac0f2ad-55e2-43a0-a553-c1f25ef0d7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf56d88e-7bbd-4bf1-af1f-5c99814ac329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65884df8-c82f-46ef-bc41-5592d97a6f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa5b8b0-67a5-4da9-9659-063e406281cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044e2a81-8c5d-4937-891c-0c39babeb130",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c81a77-849c-4cc6-b7e9-9a381ca7da2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf93368-d414-4d72-b691-c69d89a710f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061fb71f-2d34-49c5-8b69-c322698a92f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "865cc70a-e21f-4c14-b2f6-9432927293e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9db7c73-1dfd-4124-93ef-9302d37927c8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996d90a5-0ec6-45f0-8a6b-89e7932dccd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48560e14-5154-44f6-98ff-6cb16acacbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6909bc95-2502-4ad4-aa50-2575f8be3f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6156a0-eee1-447a-91a0-969cab409686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faacb5be-d338-4580-aec0-24a66af548c9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33090039-5c38-434b-8cbd-8e302e07606b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8cde6e-ee9b-4881-a911-d93d3af5b4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e6311c-c4b9-49a9-8801-4cac2e427511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9472fa-bd58-4ebc-a5b8-14f6db85ac58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94da9c9b-d66b-43b6-8286-b0e8aa9cf607",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1124d21c-342f-45b4-9270-536970116c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f4be28-e213-419d-8b92-b9b95d005fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c92951-bf9a-407c-b7bb-7006c87a1218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "affcf3c8-6d0b-47b1-85c3-a75c90499b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f6561e-8051-4725-9f8c-5a520b227902",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b644a674-b01d-4e6f-bfeb-aa85fc98be38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ec591b-4f79-4078-9561-989f764b3b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f22bf2b-5b8b-4494-85b3-bf14b8bd6a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b10f36-a06b-4cdb-9089-34fe0db96fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf2dcce-1a98-47bf-8452-bbb13a83adf3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f252900-a689-422e-80ac-f34e49a25813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e78d53-dbb7-4a99-93c6-91217df43d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec67bb2-00e8-4141-950e-c25378b2cd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b981940-9975-429d-a514-c4a369bad764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b676e8e3-7164-44b0-bee0-38006cc2a335",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6457eff9-5da9-4a3e-9420-f6061591d41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517316f8-db9c-4b5a-932b-0d2dee0a4ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce87cd4-518c-4ab4-94a1-41d20d5d4d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a59dfa0-987a-456a-aa28-27dd3c6dd03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6901ad09-1689-4020-9d65-2cef41fea889",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bac31c5-86dd-400b-9085-47b921f7dc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966b0f75-965f-4d15-8d52-197db2d66fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2644e8d-6fc0-4204-818b-d485fb2234b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4742b24-844a-4159-b55d-85e93babecd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5a33bf-7ccc-4f2e-9537-a88c26c6df1f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba76f3d1-1feb-48b6-a1ab-d2dd92484821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1862a0bf-8731-41e3-9a96-85f64a4b01cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a30d052-78b4-4008-baad-ec5c4af6c586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf62bfe-37c8-4ef2-ae5c-811f3fdce8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb232fc-bd82-49ff-b04b-360e3d23531f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d633df6f-8572-4909-acc7-667e6d51e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41496668-0ec1-4ba1-b19a-6676f7f19749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236b0c82-d672-4988-92a6-24dd44727463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "deb1938f-31fa-4eba-939a-1c43ec96d6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a94f7d0-3e3d-4179-8d6e-caa176ff3e7a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853261a0-a0d9-4b71-be10-216686fb808a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62812b1-e0c7-469e-9d31-9047bee037bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf05051-2b66-416a-9282-0161dd633972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23379976-beb5-4414-b25f-3fd36cc5a5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e23a1b4-0c99-4a1c-840a-2e77f8af954c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eec2d9e-f67f-48d3-bcbd-0c23121ab6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce495dd8-5f02-4919-9f1e-fedf13e80775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2410f84-1815-4881-90c7-d9dc49f83d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2f0a76-490f-4409-bdd8-480a6b94a7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c8342e-342b-4cb5-a704-da5e885617d8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a60771-a49d-4df6-a58c-fc9afb631160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e280636-4a75-469a-bee2-89498bd540b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8817aca6-6b2a-47bb-a25c-25b31da39443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ba161403-3733-40c0-b530-16dd3773676b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cb5aca-7d10-4f3a-95f0-6deffd32b69f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a1cb6d-d4b0-4c39-b660-45db73d38a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687d8b31-63ba-4167-905a-ecc298b33066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e4d481-76e5-4dba-96c4-9a7cfef1edc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4395d88-3abf-4a5c-b921-8ac51578720d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38c4c78-d5dc-4e7d-9401-b16e61646829",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c748197-313e-43c9-8717-e082b39dc027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e075d3-95c2-4412-8110-30f6ac834a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c4a96e-bde5-4fff-8d82-3b548373bbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "329d32c5-b144-4f32-8dba-14cbfdcb9151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df319615-230f-456d-be0e-077dfae6cd9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddcb9e9-5ac4-48dd-a7ee-343d474be1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bf02c3-333c-40bc-bac3-d497517b7375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fb7011-031b-412c-a60e-b0388bc4081f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "80d8698c-db2c-4615-86db-cc7854c3d7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d9900f-8e9d-4e42-9047-a1769d13df86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da45ff-29eb-43e2-9376-3980450e541b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd613c2-090b-43ed-8329-bb3e95ba6820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf41af3-148c-496c-a81d-6efb8e04464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0ebaba-02e4-47fb-ae2a-54138a3c7f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de93aca9-fbf9-4d21-bd33-555d9fda1e69",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64a669b-8e03-481f-8915-90f076590c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97470ad7-4e94-4c1c-ba27-bd1b0e57dc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ce24eb-c2d3-40cc-8388-d9507fc3de96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "29ae9623-51fa-4f62-8a9d-d1315be8e4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fdcf49-326b-49c4-ba77-7e74b7d07018",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180f9b23-fe03-40c6-9a23-3571f6f8caf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65b92f4-36e1-4d0e-9702-b32d6d9eee48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff45dc6-1129-4fbb-ade7-fd5011a93cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "45902379-0a02-4b9c-9023-265b2514c01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633ec78e-cdea-463c-933e-e4c084fc9b29",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7fa8ef-3531-46b0-b52f-2926379f45da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728f22a9-484c-4c23-adc0-b1c1e52da8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d43f29-9204-41c5-b03e-38807fbe5805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e22e1a5b-f9ba-4c12-8c26-9dec93a0bb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7153f47-26de-4b00-ab87-4e23e82d9380",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caaaacc-0e2d-4b00-a59b-7f65181d9dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5e01a3-7b02-453c-9899-67594f055e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d6306f-0ead-4bdc-8188-01c4fc948598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0dc7dc-2f84-4717-b5fa-5e1be2c6a6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97437663-e0cf-47c2-88f5-5cfb670bd8d1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc1b7c6-1784-4ac9-8369-b53779a2d800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2d29e2-6ac7-41c7-a8e9-02c4f24528aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718bf7f6-f63d-4581-9a4d-5e617411a547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af4bafa-7130-4d1d-870c-67893e17c7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426a41f2-1781-4135-abfa-7f67d6b65ff0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b94004-8542-48fb-8f61-c1dd3d9ca307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9896bd04-9918-420f-8c25-e52e67ca45ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e51228-ae0b-482d-bb7c-4ecec466577c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "698f7555-9651-4ec7-aded-5db0431aa26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5d9b67-f90a-4be7-b96a-0c4406c67b63",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f13038-eea4-44a5-9fd5-82f31cb27163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f98b58f-54b8-4289-a948-865c1961d85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a1cc00-8331-461e-93f4-c311c41eb56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56833f6a-f23d-41ce-8288-5bac46d7425f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c358482-77a5-4fbe-8ac6-0a5561d38a21",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8678e49-6ce1-48bb-8324-f993dffeaba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db700680-69dd-45c7-b09a-276fee8f37f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f2c56e-f1b1-4ba9-beae-8a2ee3ff128f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "60a88995-5777-4023-afda-e84ddd6eb390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180a3fe9-68ce-4095-b628-21d10b3113bd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b45e4a2-3eec-41ff-92ce-0d0b89637ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a340a13-fcef-48d6-afee-a058cf9fb418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e432f5b-3bde-4728-9e9d-486ed4d0dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f48b0c5-898b-4782-a63d-cff5771568da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a886ea-f0c2-4fe0-9e2d-15119ae9b7d0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d08383b-c448-4ef2-9c91-b1ecccedcee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b1f823-af3f-4b3f-8f9d-739b10d42d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3d4352-17e9-485c-8710-8433fad924ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf663de-28a6-4900-ade6-443716d10ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b24cdc2-5a71-4d05-846f-6a37b9c0d2cf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3776f3f5-ea86-47de-8da6-880aab847af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9c98a7-7ddc-4650-b3df-26b5ab627597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4c4643-e458-4909-a85c-12f6e49bfb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1a3e12-d73f-49c2-874a-cd8ab9e60a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc257f4c-338a-4872-a60b-29858dded737",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f5e274-e5b3-437d-8f1a-b433aa0587a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20002fcd-5385-4039-8993-b9918fcf9bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45cbfe5-058c-4741-af6e-022a3b7666dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a009f76-e30e-42fc-9122-9ed4442cab9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30173e4c-708b-4166-b88e-90a982f07cc4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199c7fcf-ceb9-4173-96b4-565c1f77b394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7f4d6d-c2db-4ef0-b6e8-9981c315fcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116970c2-9e65-4561-a7a2-752fbc492e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3711f5-f3da-479a-b1a6-db568e749632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd343723-8aa2-470c-9efd-32e1025dc4d0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899df4a3-8904-41be-9b81-525a4ffa1b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1761247d-d037-4e49-9a92-f05e94a9cb10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f330bdc9-41d5-4cac-9fb1-3796dff35b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e163452-7f4b-4132-bed3-85d9b3877e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc900a1b-1ed0-4234-8f31-77c6ae7f7825",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae2b790-6654-43df-bb07-e3b43b51ff3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2168748-b7ff-4db2-a9d6-ba0281e5d543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1908e841-a353-4c6b-bda9-bee8bcdf8fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4892ace-b1f8-4dcd-9df3-d9afc6a92e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec25b58b-8dbd-44e8-a4ce-863a22822c40",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf064a2-cc48-4afa-aac4-9c7edff9d2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fb96c3-09ce-4736-95db-47af4071e2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282e72a6-a110-44bc-bc6e-8e83c9969b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e0532d-7fdf-4141-9e14-d88c6b9bd9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0f65d3-908b-4cc2-bba2-a85bee823101",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa0900b-442f-46b5-8f6c-db94c7c7c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2b97ad-5cc0-4a21-b78e-e2dd727e6815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733e4999-3048-4e88-adc9-656c11608897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "430d983c-21a1-4a4f-8ac5-6145761b3782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5665d499-89fe-4dae-82a7-4a968d14f41a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594b8015-b36d-4462-9406-5b833a0606a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cb7b40-68f3-4721-8d9d-073673a071e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a7509d-af39-48e2-a80d-45bb702f14df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ce8250-e0ee-47da-93a7-3320784b61cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15de79d-f656-40be-a0f6-6f2a97bfda03",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece6714a-ff93-43a4-a4e4-9ea415649e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a4afef-63e2-451c-a364-a6bd7528d30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6915380e-05d5-43f6-8b9a-6ee0b37989be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a49bb153-cd5a-408f-beaa-3dbbe7432078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9b0669-545f-4a64-b530-72834d32f48d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2e50e1-5847-4f0d-89a4-24db22c1d0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98bd6f02-bd57-45f0-9295-f68d9f0a803e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92f30f8-88d5-49c5-85f7-0b3a4a2aacd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d588fe-a0eb-462a-9a23-634f16780f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc604ece-5a2e-40ea-b0e9-78443f5c09e4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e40c126-4708-4f31-9cdf-3b6467163508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12508b81-2431-4334-91ce-b15c5b59896b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0415d53-ab71-43a0-b75a-e729d163aedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5084dd-cd42-4b7c-8b3f-da2d1c674a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd26017a-9353-4ca7-a624-3ca502683ab3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d85b13-9564-4c8b-a6af-5ae7b4182fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c583b0d-c6f9-4816-a7d7-532c8359a3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990ad37c-8685-4dea-841a-5b4c3cfe6559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04f6c5da-baed-41fe-b289-5b8097d101c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0977fbe1-c34a-49eb-9bf1-e46907f7ed82",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20bd78b-803a-41cf-9081-55d67c260b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e80e436-53f5-4f01-ab64-3975ce130433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e67755-90ab-4839-9d89-5ef8cfb406b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2535f04-bdba-40ee-a61b-bfc21520378a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab175d8-ed8c-4bcd-bdcb-5c5201ab4c05",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ec8350-fcae-40a6-a86e-5e007150f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5abb65-daba-4e41-89bf-3784cf70d40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6911f451-e5d8-4975-807a-4e4ec6343840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d523032b-2a2d-484c-b384-e40c7915f165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b97c064-06f8-45bc-8fe5-de9823689411",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da4e921-feb6-46f6-93f7-2657fafb7ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da965f1-4262-4522-a02f-5a3de2f39288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbe3c33-989a-4bd9-9473-b6dfa7054497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9da27d-bf24-422c-9f76-4cc207db5959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71a22ba-6b0d-4d81-bd96-1d9842a0444f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4498f899-d31b-4c79-b04b-af8bc4f3ca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7d8970-4475-4fae-acea-0ed2b124b49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7e93f9-dbb9-4286-9c88-efc8950e5aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad39863-b9a3-4815-8229-a054c6196c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b9e0b6-ef62-4174-bc0b-f77c7ac5318c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f43e528-fe72-4f8b-a7de-d692c6d27612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e48282-12c7-40b2-a5ca-d5e71a072b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783193f2-79b0-410c-9b91-6dc325dde9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a13a842a-92a0-4ea1-a033-7c047d58d8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c08b2de-33c9-4ca5-a40d-1df5f118d3d2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856cdb2e-4889-42c9-a726-1721f4a04a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c0dee5-feae-4cf8-bd34-0322bbf7360d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c511a1-1063-45a9-965f-45d8b1b4800c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f254df4f-4a0d-446f-b2d5-935eee50c178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a399bd34-36fb-4d59-8234-78f8637625ff",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f999d0-4801-4de1-adff-a9eb11808428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482b2eac-26aa-496f-a6f6-c224a582ffe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed2ed56-f67b-40c4-9e86-bcff1e33888a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "25c60170-e8aa-46b8-8e8d-5e6ac60fc747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16df0b2-e3da-4251-b8f4-fe3e4234305c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf328b9-47b3-43ca-825f-74f60e7ed491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7678636a-25aa-4200-93d0-8b45af4f308b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d185a893-4d33-4bf4-acc5-a9cb73fa2271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3015fcd9-8cb5-41ce-bb13-6b830af1d3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0e7b68-6eb4-4df1-9559-404878a5e013",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21255c45-e13a-4855-8d0d-b030ce0ad606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df74481d-cc2d-484e-8f85-9b4b71a956da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92ded92-ecfe-4c2f-848f-1f0d1257dd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9118f9-d970-4fc3-a2d9-c32ca39a7ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64d30b6-799b-44ed-8b58-d9ee8675b640",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade8f147-dea7-429e-ab76-26c19d74ae1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ad16ee7c-521a-4612-b775-0c90af302254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b4fd90-c068-4c8f-8b0f-fb19f5b41d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85419a37-452c-4784-a3c0-ca957a49247c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a22c78f-ac39-4393-b349-1b6d8792e939",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c95edd54-30de-4ace-8df7-2849155bee75",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56149359-736e-4452-aa91-03fd65662e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fa595be-5279-49f1-bcbe-97e855d1ad80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19492ad3-f8f5-4687-bb3c-533f536200fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee608b54-4e72-405e-a655-7a3d027d08cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2b4f4e8-0d1b-4932-bd40-d812a9604c1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2aa4bf7d-6c13-4960-b963-0e5d2b1d08e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "026b8d2a-ef70-43cd-ab39-c85acc703104",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7dc41274-8ba9-426a-8c8e-d0169cdc31a4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c3bf232-72dc-45a2-9b05-2c5f4a6764bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3595500c-5aff-42cd-9877-52ae88a4fd71"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db48aa49-8ed9-48e6-a589-84bdd3567aab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "872d4746-6f85-4371-9c0a-fac400c779e5"
                }
              }
            ]
          },
          {
            "id": "8e306ffe-9121-4a3d-8bb2-6672e9b3b910",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1163d4d7-d3c4-47ba-b290-cd05debd1621",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ead47437-baf9-4082-9ae9-b5d4209a6339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cb44a51-f10d-445b-bae4-80f74835cf5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da7d9c71-a9c9-48fa-8a78-96ce9f3096a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "60ec2309-2b1b-498e-8eda-3385cba4e8e4"
                    }
                  }
                ]
              },
              {
                "id": "0ee94c53-d4a1-4277-860b-6dfeff63ce8c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "decedc36-41a4-4c31-b1c3-74760b43b831",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbe64204-5712-4046-aeb7-10863ebd0214"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2e9dc0b-3f7a-4318-9f0a-611b243add67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dac50f4f-5b41-42be-b26f-af96d909a68a"
                    }
                  }
                ]
              },
              {
                "id": "f67c6079-9171-4a1e-a284-bb6a70f6026c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03c32c81-8c23-4b2d-a263-ffa2bcf37cd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5914597-da25-4acd-92fb-9608cbd53a60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26bcbccb-d606-41cd-bf63-4263cce81b51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "63aa972e-358a-4773-8699-fb59ef95e45b"
                    }
                  }
                ]
              },
              {
                "id": "631a350b-305e-4acf-a543-fbec76d63849",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "666bc350-24e8-49b4-a3ae-ca7f23d6a588",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e387dfe-b3d7-4e24-9f93-adcfba68bc6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0124324-3897-412c-a95c-164eb72dd5e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7142e06e-50c2-42dd-b374-049feae132c8"
                    }
                  }
                ]
              },
              {
                "id": "0f9eb97c-4006-4ff7-95a1-761c57ca6216",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd876d7d-f4c5-4b89-a803-e8e9aa25737d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16c04421-2126-4956-8991-490edf967ba0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f7432cb-11bc-4733-b560-a520478b9966",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6bd6f609-9155-4f32-932b-ca7e6ec1f367"
                    }
                  }
                ]
              },
              {
                "id": "c55087f5-20eb-4b4f-92c8-f32b962db653",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1676aaa6-e616-4829-8bfa-4df21731dd03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8aa9aa50-d3ac-4c0e-aa80-3f309a0ccc9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "257fdd51-18e9-4933-b858-649a7b240cbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ac4e347-4aee-40d8-992b-6c92992c1104"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8392acc5-3fed-49bb-8931-420b8981a11e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b4ea0c7-57df-4196-ab8d-94c448a1f4d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfe37afb-4504-4852-9e8c-10882596a7a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3846ea1-24a9-40a8-a612-8a8eaad893c9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f6f6d21-0a57-4f27-b19d-cdf3e47d112f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "88c884fb-a24f-4cd3-9ddf-0c5aaf95dd0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c148ce92-34a9-4e11-b365-4b0a666b6fcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "537b0ed7-15f8-411e-87cb-46c34e576c27"
            }
          }
        ]
      },
      {
        "id": "d412b1e5-20a1-4753-a0bc-e64bbfe69494",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "365d3bac-be41-4c98-a183-b27e3ac781d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de40f468-cf7e-4b85-ba5c-2bf93bc373ca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bbcf1d27-9496-4937-b165-0f0efae4a0e5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa0a08b-f47b-4ff3-ba0f-4caf46240554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be5fbcb-f8e4-447c-a79a-9eb294cab6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361c30a9-a1ed-49e5-bc52-eb65b69095e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e821a296-29c7-44cf-af5d-62cb540f886e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6720576-0ca9-4808-8074-14befd62bcbd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55cb792-23fc-46ea-a3d6-d25ddcddf769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3998188-28df-4609-926c-c71944c6c83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247772d9-a7fd-41d9-a468-d7f95059e8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd107326-7f5e-4256-a1a0-d30b1dc66e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2b570e-3915-4782-bc80-d8f1b45a9e83",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc721fb-5c78-4dc0-a546-18cbd6254d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a004458-684e-4a5e-986c-5e36d7a804d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8583709-e954-4460-8d37-ebf4877711d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d5758c-7a1b-4aa9-8b13-d9db67e76001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6bfb20-8bca-4a86-9712-55afa150a4eb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a58089-9781-46d3-a59f-76a7ae2b8d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0353bca2-1658-42e6-a871-a5931d4cb2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272ef2da-76d4-4933-9513-08453f9c49b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdecf1ef-41a1-478d-bcbf-ddabf961e39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae93447-f53e-4de6-8d62-403f303fd4ad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57419385-5fe2-49b7-a452-7efdbb90d0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9662e526-1807-4215-9988-3b6e42d8bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4ce15c-cb99-422c-9bb7-492c619f054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f631c8-c249-441c-b3e9-beb5831f16f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d760652b-23dc-4aed-bdfe-32041c1108ec",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c781208-f162-4f74-9a26-7a6244df626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185c256c-5c39-4418-87c6-ffdc00158f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa683628-dd19-48cf-9d8e-45fc47c65697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82d855e0-a0f7-4219-a927-f58ffad91883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c500f83-e7eb-4158-a851-b7f53d771fc4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7ceea3-d183-4c50-8a48-d8de668044ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da953138-ae30-49cd-b2d8-a31daca8b65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74e74e8-c5f9-40a1-acd5-a5ff4378efaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d4db00-7957-48fc-ba34-b4b0ca2c9ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e7d39a-22e1-4a2f-82b3-4446f61237da",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb89305-18ec-4968-aac1-2678d14658b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7fd89a-2894-4dbc-a02d-162c5b9aa27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f97693-9dfd-4d5a-b1ea-3219db5746b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f19a9143-3c60-4042-a913-04f112b5c1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb8156e-bd9b-4886-ad6d-17a3da4f6bd4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0f7a0c-1664-45db-8e97-054ca7fba13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd4ceb2-9e49-4baf-933f-3f94e04eef75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4433b29-70a4-47e1-b156-ed7d8295f068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1beb1948-3805-4372-812b-ba4bf96f6195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af43a26-0950-4760-b798-2ce04398923f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0046c269-f3e0-48b1-ad5a-a4b1c4a9f949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdc30f2-5a15-4353-9960-80c243a00cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0f1ad5-63ed-4a45-861f-8722792412df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b609c213-4101-4908-b7bd-34bee7ff23ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3de443-477f-42ec-82d9-861ffc121c07",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9b87d5-ef4e-4d19-822e-8cffde7713ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac8eb1f-0802-4eab-8f5a-24799bf545ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6806a5-9209-4bd9-8b01-3337ec074c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bca2a659-6199-480a-bfe0-f3277860371a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a088f8-df13-4cca-a740-288d36c782f3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cdad4a-95ce-4f29-a610-d2799b739057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159cf7ea-7b21-4912-8677-6def2ef5b7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694485f3-ac12-4a0b-a495-9494bfc884ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56f6ac05-384f-473e-aff4-ec59c29286a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29ccd15-1a19-42ea-bc31-a98b7a5acddf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d966baf2-17dc-44bf-ac0e-290a7c7bb97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43773ea7-1a7f-458f-a205-be0517732fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52e547a-0809-4961-bbf9-27d21497d705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b12ec96-4125-41cc-9eb0-46addb074f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b47d21-b7ac-4acc-b455-a9b0456afcec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b813bfef-e5d4-43dd-9cd6-0f26f54d99dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42084b9c-e392-46a2-8b2f-f961d1410d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3cbe3b-8529-41dc-96e2-3a9e886ebdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "84b181a5-7143-49b6-84ed-e06ccfbd1fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382a9652-694b-4b81-80f9-e0f312a45516",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782deec2-8138-4b74-8ff0-801dc7ce1d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9697ad66-d49f-45ec-91ce-bb08be65c2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc599f83-dc0c-4672-bf31-6d7c835b99d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f386851b-fe11-49db-87f0-de6e10139f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a057b4-060b-48d6-8a9c-83f33229838a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a226b0-f9dc-4289-b113-81506a6e106a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1f6319-999a-4dc7-9982-ae426cb7e5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4ac5a5-41df-4d9c-95d9-24a23a715e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "df44ba5d-3817-4366-a964-37e3658c4fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a0f8e1-c2a8-4e78-ad8c-34b2aced9513",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb73b4a-21d9-4e04-9764-611d308033a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f22cec5-d87a-4499-8c4d-2080e0266342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df4d616-aa07-4cc1-8cfb-cd407b5cdbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3bd1cc-3392-4a34-ae58-82c53eef6a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7478abcc-b0fd-46bc-8f37-b857439ecc8d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96b0f48-e715-4f5d-a264-0bd1031acc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bf100d-42df-46cb-8fdf-dedb19acc3b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8abcbf6-8928-4067-85a2-8951a516be60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3ee135-befb-4edc-9828-8346c29ae855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1637014-6030-42b6-a411-254bfd3bb749",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6321b21-7acc-4848-b2cb-70258b03d72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16ef7c5-633a-4ee8-a070-95511afb97de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8543c9-6b44-4014-bc4c-43137d3e097f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1d0f8b-8de0-43cf-b116-78cede99546c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df31656c-804b-4a68-a2aa-91206ddc10a3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a92e87-3e8f-48f4-b09a-95c0a7aab272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bb0698-8d58-4d83-9207-b51d4454289f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358d56aa-f0cb-4e76-a358-f1c47ef5161f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b9e674-7d06-49fb-a9a6-31ce01a880ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d1102a-8338-48d9-96f4-a9d40c3349bd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29eeba09-97b1-4f1c-a657-ca86e4d765e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d15ba1c-99b3-4979-9beb-6ce4bf235302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9806b2-d7c4-44c3-996f-23c2d72cdd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed27360f-f3a9-407d-9577-3b3ef7124d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055bbd12-b135-4d9f-9eec-bb07e4d9f867",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693bed1e-1c5a-4d23-88b1-846d862d4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61a1dc8-c8f6-409e-ac40-44d21b3b2da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b6e321-c77e-481d-83fd-6ab63def884c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11949a5f-e78e-49f8-b138-31873ec4d480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc3d047-7653-4810-bba4-fcb2a3edddbd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd102cf-63c1-40c9-ad0f-0f90716f4b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d9313a-0267-4130-a777-2ffd91bf8d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff45726e-4d1d-49de-be77-c7a7d19aec2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f444b331-b74e-4f4f-ae1c-1f0762de2245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f94320-f9af-44fe-a105-a1626e68658e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb3902d-2931-4dc2-b869-26e5a015cac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6755e07-1a94-4cf4-89a4-65ce6c09b9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387c62ce-7aad-4c79-8f70-3e62e448d658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05544686-4c0f-4a11-a430-5d0a8f5d8ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbe9344-55b8-4d72-80cc-aa8650280619",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57e7aac-adef-4e3b-8be5-37af6e52771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ce94d2-146a-458a-8c5e-a0984bb37d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c43811e-b27e-4582-9227-05199a632134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a359d741-2b36-4287-9840-924d2862e872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5225be9a-8e41-4f73-a3db-dc6e5f113392",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7071342-6818-4027-a35f-39965e52d1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1716ca7-c277-4e47-902e-82f79303eb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32796f0c-e63d-4358-8a6b-e6c8579c0050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "964b12c3-5278-4587-80b3-8730e8be63c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4a4a1a-24ff-4d43-9d1b-4a4e7c007bba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7160b7-0d54-420c-a286-87b4e0ba9120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ee5b60-324b-4a0a-8e1d-b49ed8336683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27db2f41-3647-4e7f-97b3-657b5666cfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1427d7df-30dc-4fdb-bec9-aac0cd87fd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bf8f1d-c6cd-4880-a004-55392fb2b4b4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eff6972-188b-412a-8cfd-3f20ad721b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedea346-ae14-49aa-b545-d52606f15199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc2f697-5ecd-4284-916c-bbb47429ec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b5cb43-e239-461a-a4c2-d13e4dba2ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa69406e-dfb9-431c-9ed7-7d5efcbacac6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1e02cd-7313-4399-b513-7967fef429e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189b74e9-008b-409f-b422-f704bd3fa2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c16f96-6ef5-4066-9b86-eb8c315b6283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "079d3fba-60e6-4ac6-86b6-ea3e0255cda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1fb4ae-d44d-46c1-85fd-13ee67bce1de",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc348984-7540-41d3-9bf7-9017573bd13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7e14c8-578d-429a-8351-1a92cc852df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aac460e-4e30-4337-8555-b37f5194f7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33b2d50-deaf-48a1-b229-58e457b9ada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57af79a-d85c-4bf8-a80b-9784e180ea90",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a345056-9395-4df4-ab28-b4b28cbd2f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9874cd55-78ba-4d01-af11-0072873fc9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad26ee6-39f4-4792-b5e1-14798b21ae97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fda80ec7-6af7-4ee8-8c31-b2107a62a41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ed476a-18db-4233-8216-8f2d935a3c6d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08581f85-fe8e-45de-b039-43d887c93923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a73ebe5-470d-4167-9ebf-715ac1b2c6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04376545-d577-416c-987e-33668da7d4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c137eb-bbfa-43d0-b83e-ff93a3aed252"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61b0d869-0772-4c4c-9ff0-b60d5d5387c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d70615a7-6ac4-4992-a040-74262a949211",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581d8d57-832e-435f-a431-0b4f320120b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cd43e637-ca01-43ae-9466-7356e4dbea21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19632090-294b-4b2c-a67c-ec2b3b4effad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "646190f9-79f3-4f73-b221-41afc1738a4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75b3cebf-a127-49a9-bee3-1c96233cbe67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "704824b4-3cf8-4d4c-bd6f-be5472fee077"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb35de58-bc0b-43c1-90e0-bc0894e6c247",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79d75d9f-7a6d-4135-844e-1110c690fa6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88fe8dfc-f669-416e-9e8f-68b1f23a4b6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aef9505a-a43a-454c-b4ea-593e1e2988c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9405c96-34da-42ee-b307-ba89a93ed690",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d25f996e-fa7f-45dd-b007-1035f3b2e9ed"
            }
          }
        ]
      },
      {
        "id": "a77e4300-52bb-480a-ba13-603caabafc20",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0b0c767f-e17b-4223-bcca-252611a8456f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76f1fb72-737b-4a6b-b493-3f8effe72669",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3da640c-1011-40b5-8135-bec9696a7fed",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c29df5-b72c-4dcd-8237-158fb016645d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6179b61f-a506-4ed9-ae8e-e114084c54e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8375ad4c-c570-413b-9366-40d8c9f050d4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd5ee84-74f4-4290-be3c-d0e290532ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f054d80e-4c5e-41a0-8193-003770c0317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50700e46-a5ce-4706-9827-e587d0f74b48",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b77a3d-25f7-4b3c-b9df-ab3c2beec49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af29ba9b-6954-43cb-bed1-3b2ed9a42f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e787257d-eede-45e6-8a25-b6194a71e2cf",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36acbe08-39d5-4810-a83d-e15e759d1993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec288830-95a8-46f7-8a18-530205f00e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bb3d15-c22d-4f7a-aef1-0b607047cd33",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59a9bb2-9080-42ae-b9db-a87661d072ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d30f0b-9744-42de-b0a9-39342e394727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe6cb7d-297a-42e5-b82c-9cfca8a8383f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adee8cbc-f8b6-4084-873c-ac1ea0ea2dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1c01b4-3f93-4fb8-8b0e-b2e3c5be0df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63322a80-53ce-430a-b942-06c3850fb866",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78970c3d-193f-4871-9b88-7e61fe0cf4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b797cd-1d44-4d02-bdcf-a537d02ea551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1512bab-c726-4143-9d2e-ea04e325e505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8730178-e9d1-47d5-81d7-1ac86d604f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abbda99-b8a4-4341-831d-164fe4701160",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c440f89-785f-4201-9be6-891e074322ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d45aa36-c7c0-4689-bc2a-20663fa0d4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cbd0e7-5f68-4ba7-8310-8162ce947f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2282cf03-4365-4908-b4d8-f231f91bdb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deff662f-afc9-4e75-9a1c-5f6125d1bc7a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1cca70-30cc-446d-be2d-dfac91a66896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbda7df9-811a-46fb-bfe9-193697c7ee88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32deda3b-47e7-4cdc-8626-1ed76349af30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c610b2-5d1f-42dc-99e5-fb4ca31c2b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a219f496-a741-4cad-870e-a31a77983648",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be74a9c4-e3b9-4a13-a307-90af7b0c1b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db0c4ade-8e30-484b-80ad-c967299e887b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a63a54-c620-4ec7-9b73-5426271d2c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabdf7c4-92c2-4f44-aca6-470ee065a345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f20b48-cba6-4161-adea-9c6ad30a179e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b87ecc-6094-409b-bf41-832ef956a489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5213992c-d8af-48cc-9f02-831054b04075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871d5641-b115-4391-90c7-ef1ea0984700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3846efa1-7727-49d8-b495-36782dd7383b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafb2806-d4d1-4a2f-92d6-b6cd83293039",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13246a5-e548-4b3b-aaeb-386ef3d08a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7c2265-ffb6-4e0d-bf6e-86509c74caa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db3a8a3-8955-4654-bfa8-e839fca79fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7764ffcd-d601-4c3e-a934-38a2499adab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eef42d5-148d-4c18-8431-aa60adc89a8c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26017164-32b8-401b-bd7d-63512ab32eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ae6a00-4639-4b71-80fc-73d5769291cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c761338-35fe-4905-99e6-a6ec43a3e4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f86010-523f-4bc8-a88d-03b5a154bb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071f6b86-9eb2-4bd3-88fa-7404844a2024",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf6ad3-20eb-4df7-ab0b-94cd593e65d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b8bc1f-3d1d-47b6-b2d4-fce404472bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fa02b0-e3d4-4e01-bc98-7b0c8aa97ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed945a0f-5247-4c13-9a26-0d0623bf694e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dfd886-3f3e-4b66-93cb-a82abbef5513",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4cf4a3-77ce-4380-ad3b-51ce9de7dc4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56970a26-dabe-4bde-aa73-202d71670ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3d9925-165a-48e3-9f6c-d3fa2663660a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c85218-4b0f-4db6-857b-14f0c85d0973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6756c58b-912d-492b-b640-79989b002092",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c70265c-cee8-4152-9d3c-913c7608542d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601b24eb-f053-4326-83bc-28690366c03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c783a069-a551-4f28-bdd9-5045e34042dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4fc826-d7a2-4cfa-8e39-6b2be51f8b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e0a1fe-73de-4d83-88df-e8d17cd695e9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e461178-f1d2-413e-8b29-a9a7a21b51fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74d1474-0f67-43d9-9ef6-3c78fade0a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5e035a-9490-44ad-b238-b119a016a9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4b1be7-3e55-4f46-866b-893b4576e63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b47c275-cae0-4e5f-b5a5-849846b8a8aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909f6db9-63ea-429b-b850-be93005514e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33032a4e-76fc-479d-a0ab-99be826d6726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636ebcbd-285d-4b91-8fa8-ad52b1781b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bdbaf6-ec2a-4228-a7af-d0a571fc7497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2acdf0-9ede-4a64-9918-6666a5136745",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eac04ef-87b0-44fe-aa81-a768bd9ed9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc00f65-ef4d-4f35-9930-9e401ad43211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99739802-7603-4978-be72-31d665ad4c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da8f683-e3fd-486c-8c3b-6f8287e9a35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6717d1db-c782-4e62-b83f-1b66f6ea9b71",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb48f26-bb81-4e26-aaed-fc8094595dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f6cdb5-04f0-4d13-a2b6-9f249458f96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a51f78-8bd8-48ae-909d-ee7ece86b2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e904f834-d92f-4fda-b3dc-9589891a8ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7bb5dd-d50a-4373-937b-623808db44b1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a0d277-efd9-4cca-a2dd-992128361442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31ad2d9-43c2-4593-98d8-cf9ecc705efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e46c1b-3b23-47dc-b4a8-c3b5f7cabbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3366e489-4af4-4c3c-8c38-c24012669bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c4850b-cd98-45ee-a5c4-cff0d5c50dc6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90546e2c-ff05-46af-b057-4229fa091242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2459844f-e392-4a64-ac86-fee8018fe305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26df497a-c086-4b64-9481-885b07ea1cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65739ea2-d78b-4538-a2ac-a86999a64f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea97bff2-9d2b-44b3-aab5-d09c62a386e3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d890aaf3-88cd-4e8d-ba78-70a189ab1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa18eec0-5913-4c74-932a-73edb5083a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92acbd3a-4704-408a-af2a-a23f235d0510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dbb091-7ea5-4856-aa64-9d40bdd0be91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fe26c3-8b19-436e-8a39-027e13490852",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b082f54-93fb-4ed5-b9bf-a8284fc08fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c3abc5c-7960-41fd-aee5-37cc14c9d184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8446a37-ca50-49ae-a0b5-c8f0d943332f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9183d4-770c-46bc-b22e-da77740659d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23a2d03-82a0-422c-8e61-cee91343125e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce89f2de-3d4f-498a-8198-d9038cda3dc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17fcba49-84b9-44b5-afe4-7775cbd82c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26f97be-dda6-444c-bdec-f8d92c27890d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e06ed5a-3716-466e-819a-731d122eec5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0412a91-26e2-493a-ad2f-17139a062c93",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96050945-028f-454e-adea-077df628beb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf0ab31-ba42-40a5-933d-460443ee5324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a387a-7972-49d3-9694-65b83c75d9ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55d493c-e622-456b-a7c0-d2617d1d0962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d5b136-cf7a-4ec1-8a1f-a1a42a6a8186",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c8ead3-f26f-4f60-a0bf-8155b1efcbd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4217f573-6187-458d-aae2-fe8607d5f837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "482a1c23-097d-46fc-9791-1c9bfc119d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296e186d-91e4-4855-a0fd-c6fda47966d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eede8c09-8a22-4133-891e-a3bb9e9c4191",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58a658b-85c2-4f30-968f-11245900ea86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2715ae-2553-49ae-aaa7-0e9b3a183d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4843da-06bd-4d9f-b0b3-bd924d998472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd89d9d9-e62c-498b-8768-2aa089031cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d70de45-5bfb-420e-815c-d9d15a237013",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b9716b-e90b-4fc3-ba21-bc849ca27654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6125766f-c87b-463b-b981-15fbaaf63acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0796abe4-bf76-4bc3-9d92-7861a094a11b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b378e1-dbfb-4992-b030-446650c849fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f135dc-be6a-4ed6-a359-6ab325bae0f7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7436b5c3-0d29-4eee-b9ae-33de2bc5e7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f29cbfc-47cc-458e-95af-bef9ff59b69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94797f2-fe3d-4bad-91cc-4c4a346a9168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc3076f-eeeb-4b47-a814-f701cf310cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d96205-a0e6-43d5-85c5-50d87aecf554",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68c3b2e-bcdc-4013-8043-124635c86b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ffef81b-7cc4-4556-90de-3daa980ae635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b0339f-ecb5-4908-94e7-579db0041c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac23cbc-5277-4783-95fc-4d1ddfd91064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dce446b-257d-4f34-b2d5-6990b5c9146e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835693ad-cc21-42ad-88e1-4975ff972e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bfacb60-5997-4772-9428-15029a2de295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffca7dc-5fe8-4635-8fed-023b700aa6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49deda1e-f1ab-4e8d-a14b-63707dd11f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9aaa6da-0594-4aa2-95a8-926b0c32f441",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6791dce1-42b3-46aa-a6ec-5c0d837fcb60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d3394a-da2c-4181-b213-6f73903185d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c16d17-90d8-4483-bdd3-0b4db5aa5928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc98dffc-e8c0-454b-9f43-a29a9cce320f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503b6f2a-cfb2-41e7-ba1b-bea6680d2b2e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875cc849-140e-49af-a751-fd3cb13bfe03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f567867e-b195-4bc4-8805-a1ed94629220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec69a22-c275-4067-8532-69742d17219f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4101fda-d245-49e5-9c96-646f7ea5cef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e967c9a7-ad40-43e4-a7b0-11beb3b1d98f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e93179f-6d88-4db2-a37b-8a2b2aab8245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4860ae18-89ef-400b-a226-946b0e85c85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181b9d41-22bf-42a8-bdad-d71b1d4f2908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c56e9d0-b37a-4dca-905b-2baa07c81675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b3c259-a304-4313-b787-4138a8976a67",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b70dce9-f5f4-4f27-8c5f-6a0361ebf5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870e5620-a10e-4465-add7-934540bd9b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a50ffe9-c20f-4a27-a4ef-8788a55a453f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d889fc-ee2d-4394-88d0-c759774eb981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb51256d-dde6-4bbe-87d2-a5f5fd6403e8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733936e2-1195-4b49-bc51-2c4806714523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0a4bfb-dace-4240-ac1d-51a15106c229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e496fb20-8f1b-4b75-a852-1df77cf1594f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d32b976-70ca-4836-ba2c-d850e78d1ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a3d552-e259-43b2-b32d-362fe5931b18",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3490e6c6-cce9-4f61-84e5-a1feefbac5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a354df7-593d-4511-a9a7-c9db7b7a2962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f550145-4aaf-4036-a70f-eaffe1d8720a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7979b95a-86a5-4a65-9a8e-b83df943b0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3ca662-ef9a-4bec-964d-5baa94d4ed87",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87824048-e8a6-421d-b936-bf2684b84e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804b1d69-ac69-4fe0-b70f-8dceae8f1108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2167cad-e739-46f2-aaa5-edd386a4e0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a62cf18-876b-4831-991d-ed93bcc3dbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22da415-cdd1-440b-92d6-b0d32defbea3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af92df06-460f-40a7-b7c3-3481affa5936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c14fe5-0583-4d11-9e8a-a9182796c047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a12b65-7b44-4a2f-88a5-f84fa872feb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9681114c-f9d9-4b69-ba30-7dba5098af8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0144328d-2c03-4ba0-87e2-5c804b67522a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b4bd3f-041d-4412-be2f-24e8694813c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5823a9-47e4-4895-8757-8e769899a605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df4cdd8-3766-4969-ae2a-fcf7ebdd8de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e864252-f791-47be-8174-1e315cf5525a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a6187b-eb01-4ccd-929a-5535ceb720e5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cb91aa-2330-4abe-b200-af197b1742fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94964c6-9614-49c3-99d7-1fc11b2aa58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf33881-0073-4985-9267-bfd3e0db7f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3182712-16d3-43ae-8f24-9c230e319ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45097c45-102f-42ca-a484-27673c33267d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f2742a-69ba-432c-904f-17d7829f1ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14b3656-39f5-4878-895c-6f20fe612238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce637c7-e832-4cd2-8aed-6c84ecc16882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f49561-d9fa-407f-844a-b5648429a8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e86950-425d-4c15-b909-e980650a64e3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c3d299-67d2-4cf9-be93-8adac8dbf1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df72d2a3-883a-4d98-9a1d-c2de9ad36e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf39905-3878-4e1c-a835-a87cb61d3faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afaff00-e75d-48b0-abe5-0bf1dbc1796e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209b4b44-3ffe-4735-99ab-93eb11f23262",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cebbd94-1177-43af-96e8-4bc9ee0c378e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7c57ae-b352-4dc4-acc3-00c72d188b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbf1eea-4bb1-424e-a478-c76ea46487f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45449f8a-b3da-4bdb-8e74-324c7f45ad13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31af0b12-27a3-437e-9ecf-611ff643b3f4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ba58d6-8621-490e-bcae-4fe2a760faf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba26a108-49b1-497c-80bc-ced025c9e3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924db81f-5bc1-43fe-93d8-65809ae0ff84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f335fc96-08be-4c79-b471-fd4bbe0eb414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60b49ba-57a8-43dc-a97c-9cd0edb52760",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088a3a0a-f8e1-4063-b09d-5ebab412865a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ec4a27-dc73-48d8-93b1-74ff920a3715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d950d1ae-db56-4fa8-8e4a-f68fe0a15d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52107a44-5513-4ed0-ae0b-08ded8095b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810c0eea-4eda-4ebb-b1a4-485e290eb0c1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8431597a-c236-4fab-9bae-404e92f44c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ca9baf-da5b-4964-9d75-36e450175362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e80703e-ebcc-4146-bb8b-abca1cab2649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f26fff9-f77b-4b2e-b757-5c1d455cb3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19dda00-697b-4dbd-9ce7-e8226d9ad185",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20504173-ba96-4617-8120-36f06f4538a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70462c9-dff8-49f8-ab3d-429c5ae17d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee99dd3-fd9e-47e3-b19d-287b5e7bb75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6990a54-dab4-452f-a03a-c2d66c17a4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9f3455-7625-458b-93b1-9f1607616860",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f83ee8-c639-470f-b27c-960b94148d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6500a1-7295-4646-a3b4-412cf34d78df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eafcf5-5fa7-4a81-afa8-22a05df8f6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c5cf3c-ada5-41c7-b8b1-5d98e29b7f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f89d75a-ce21-4b0c-b3a8-2edecab254c2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac423558-1f09-4b70-afaf-096448f49737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05226353-d0a6-450b-a790-7cf3a74029d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b759d-1bb4-44bd-9425-dc9b11afabb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e0b62f-c005-4c49-82b4-c502454caec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1b1e76-1794-45ef-ab03-f20b308e3ab1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276bb2cb-266c-4e2b-b2b9-939c76adc729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5692f0a5-ba58-4c0c-88f3-7d8c41011a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8eff79-ee1e-4593-a1cc-3974b74bfcc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccf9b0f-1cbe-452d-8e10-4dcc8d8a36ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63533821-2f9b-4144-abdd-2bae9972d80f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca07ea6-0488-4973-9310-e8cbbf45b89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453bd9d0-b646-43cb-9c01-b70f7f718743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3edc2b3-fce1-4dd7-95f8-e429def08c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71b0c5a-0372-43b7-b30c-701907be8295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aacc734-5621-41d6-84e2-4303247b277c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66be16d-7906-4fdd-acd7-6546266577f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fe843e-a122-432b-b5f1-a3b131dbc801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334979d6-95d3-44c0-a035-9f4708792327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa025a1-c674-45c3-ad24-cc3c06d55915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4f62a0-5713-4187-8e44-c74151f8ed3e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e7fe36-2b9e-4ee6-ba1b-806f2e7eda0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714ec612-8962-4a9f-aa19-9f38ed7b66db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de50e76b-322c-47d2-ba9f-4a73b4f9e5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41f414d-2209-40e0-9f16-f14d9da5de44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6bdd9d-785f-49a7-aef1-678e52f04213",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622b7e85-4fe6-458a-883d-e32663d8a653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b20ba6-52b5-4a60-9926-97bfaa4721af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63292da-40b2-4655-a621-38e52bda1c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb88141-709f-44f7-8e4d-7ccc7c5c649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabdd173-d3cd-422e-8aff-c41de48765cf",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13745e45-1ffd-4699-9886-6a55f15deab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4334dd89-f2fc-47a9-9b27-3f290cc11dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d8ec97-fe6d-4ebd-be4e-54d2d49c60c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e218fe6d-b0c1-4612-b91c-c7cd65ff1945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb997650-1ebc-4868-a5c5-5bbaa984e69a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18dfb39-6743-4a4c-9f77-f6fa09435900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4500c2ca-82bf-49f7-9bce-f182f5f741c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f077950f-4065-496e-b494-dde82991d3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dd4dd7-c0d1-425e-b331-df21d97937d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cfb06f-0958-4e40-a1ab-05fb3faecfdc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c8fcac-846f-42e1-a864-8c59673b97f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aae08f9-9d9e-4f3e-a6ad-3d4157d6e47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ba18da-61cb-41b4-beb5-9225f618c664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3242628e-bb50-4055-b19f-f1fa2c117321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35efb831-6d79-48d7-b4f5-dec285e9798e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb2d910-7f09-4926-8128-c8787dbccb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b4919a-5ff5-442f-8155-8fc4742f20d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34254f10-0597-4916-8b50-96d065362720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728f00a3-bf30-4d79-8eae-b68eed8b7024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f52870-f8e7-4b4f-94d7-329053db2741",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982abf5f-b140-4bee-a940-006818f5e769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a686eba1-c6d0-4793-a377-f9e640ad7528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f414173-bf17-456b-9bc8-9589d071cc11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182f415d-30fb-4e5c-a82e-928260393452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa075c7b-e206-406d-aeb7-37a6a48e2872",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53011b27-f2a3-4fca-8ef1-61a9c2eaab2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271c6990-2c97-4fe9-8ae3-757c0459dd28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fe3f2c-cc3a-4514-a52b-806f4417c752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95b4bc3-50cf-4e5c-8a5c-8371d1e8bc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea45bdf0-529e-4f72-aace-b60919f67887",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027a2dcb-eb8a-45eb-acbf-56a0af3a9422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e582f050-9630-4dd9-a093-99193feca48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd159100-7fdf-47d7-9c36-d619e09f7dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d967b5a-95a1-4a9f-8b43-deef9be6f5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c621c2bf-2cf8-42d2-868a-aa870a9a723b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e948b69-e0f4-440d-87d2-e3e3de34d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3fbe13-38f4-4a06-b4fa-693745e1883c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2296136b-6b81-47ff-9a42-b240acec3c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86eab6bd-9919-42c9-8472-c858ee168be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f9b131-400b-4073-a5a6-e800769e7d42",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbdcaf6-5d02-47af-bd65-b3a1a62cda76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e106dbd-697e-48f1-a0f5-44660bd068ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b7b9b0-ad9f-4117-bcf4-1b31c685172e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489f04b7-6e86-4332-af53-3b976f6cc3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64622e7-218b-44eb-910e-766b4b0d22e7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43cbc77-fb4e-4e2c-9e28-a10c8dada64f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e50b67b-7595-4470-a266-36a7f342d661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc5cfb1-7c3a-4645-8b53-cbee4d081848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5e997f-33a2-42ee-9615-94ffe2b03c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f028137-0de3-434d-9bc1-a82b7eafd6a3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43366dc4-5dc0-4374-bbd7-fb8d810243fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78891f9b-f3ae-4d25-bf94-8b7259b3bb20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8730fd-1a34-40bd-bfd2-3dbfce3ead80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabc83e8-24b7-4868-bfac-b4f67fd2abac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05840b3e-667b-4e59-b5da-a35365d20702",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18848b2-b5e4-4374-add2-bc4d733680fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ea9ec22-654e-4a5f-a930-f343021ad15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ea91de-10b3-45dd-b204-ba7ba7952d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5f2dad-8228-41d6-a8f1-eb7c9cbcd472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29af0c6e-3b46-426b-a492-c44bb90cb4d5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85be2e80-f6b2-446b-9a2d-5961dc08e4a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "596f46a4-6875-49dd-a32e-a2c44df1461a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c7d161-f92f-4657-b613-ed6090d39893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934d3ce3-1039-455c-8a59-923e0538f447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b58cce-388b-472d-af91-27c044ab2c95",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e82a6c-8cae-45de-b8b6-a58d52552018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea3654e-4faf-4715-87f6-0476ada917aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4620b399-6278-4ab8-b535-c1c3a218e3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b1238b-91e6-47a6-9e6c-7846609e6143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a18fc9-ca02-40b2-a18d-0141b66b5e50",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a18901-bc34-417d-82c7-cc0c526b4a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d185fd89-581f-4df8-a908-069446c3740f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc742f9f-f429-491e-aead-2f8def4f65c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b37bcd5-d754-4bc1-b9a4-4467ef96e6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e0bbaa-cae2-44b3-91fc-d1d632fad885",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f5a19f-c471-482f-ba99-765978f58c8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6c43bb-4cb0-43a5-be7c-caa1e64092b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f85d4c-65ff-4e68-b87f-334871885fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05702855-43e1-40c3-aa7d-8e4bc58dd82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddef859-57de-4046-9069-f15aa82c3856",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4931d6-6ce0-4893-9f88-28b78b59f94e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e030b9f-048b-4302-a7e6-d34d054a3c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911c2b0e-6223-4adf-b681-dcc9355fd1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930f58e3-5a72-4894-aa75-530fc7d50049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227f5c7d-1f19-43f6-8508-20141e865a2d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0c48ee-d328-400c-80d6-9df74daa8ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a1f82df-fc29-4e11-a1c4-1a4d6c946fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51afa03a-75bd-4b8c-9163-1afd5f570756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1f11d6-8edd-4da0-b13c-9d9a09b0191f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d484f42e-8a54-41dd-a496-40395fca5f8b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f64a3d4-c43f-4c21-a09b-2725ab053f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afec4d7-297e-443a-9e44-0bcc57314f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5ecb3c-013a-4a2d-b710-995a81cf3400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dea4e6-93b7-48d2-a20a-2d594b7dc2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2243e75-1d66-4ff0-9bb3-04e942bc3f1a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c5943f-f71e-45e2-a43c-868bfff5b528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07bf237a-e456-4b99-bdd2-cfea887e57f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2393a81-477a-4c59-bee9-af1fea3d0d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd776c4-94c5-405c-b609-e12c34f2abfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21220074-7f21-4377-bba5-3c8ed52d934e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0892c99-305b-4e09-8f8e-d7eab81156ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29dcd203-5ab0-4783-9fb5-9127758b1ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e25f08-dc81-48cc-b2dd-3c783c52b1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1687f123-a2a6-497f-a736-e29912e61c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d68c179-6b77-49a9-80eb-97ba9d83ef0c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c3b411-3bca-4a28-a81d-c89ee53000c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8bf596-2966-465f-895b-0dc420e9a789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b816b0b7-350a-439f-8156-f8827bf4ac4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a572af2-de97-4255-8fea-f8a9882cefaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ceb118-7442-4657-a2a2-019da8e5197d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57048e58-e00f-4cb6-8ad2-d5ccb2f853c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b5b01a-7bd5-4f14-9da6-348830955b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b7586-9fa7-48ee-8e78-44f2feb1506d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1068f9-51b0-438b-b208-031743d024d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2670c2fd-7ae5-4fbe-95f4-d790adf84ffe",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cad78b-f69b-47dd-990b-fc5002157144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8173d40-dbea-48c1-9ff9-128387de7ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba52fa39-c441-45f2-bd1b-d70459267538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a525f6-57a5-434a-aaef-6e14ebf598f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f24337-7708-4f19-a335-46f233e68e3c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc50565-e1d0-48e6-a501-3eb2514a6892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b0a580-79df-4c92-acc0-403045454dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c7d074-de82-4b5e-b50e-c48f5c7bf63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6739d42-70ed-4e4a-97b3-fc0b22ac3fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61908dd9-8258-47e9-abc5-fd330159f4fe",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5de472-7a2a-4fee-a7ef-47c27fce7583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb35ff47-33d9-47fe-9521-c3390e7bfc40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1d229f-0eed-4da6-b557-480a90cfb30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ce0d4c-96f2-4ba7-91aa-3b3393bf6883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f388d850-53c2-492f-bd70-e41c6276699c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0295b486-f800-4a01-91c7-35bc19609321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7feac625-f0b4-4eb2-b0c5-2ddbb8f6dfcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3e2a27-d885-4b65-bc41-059e63ee8619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdb9c88-3d4e-46a6-b78d-4500ce629212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627ccb54-832b-4379-b44d-3e196c04175c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9854a687-9ac2-4fcd-b55c-a7b103c3e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e8612d-e58e-48ec-b0e5-e4d85b7a1379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9154164b-f65e-40de-aef3-0dea62b3b9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc38c271-8a5e-4c0c-9c8b-383828bf7d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba9a9d2-a4f8-47eb-beb9-b2458d54c7cc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64cd5c7-ee00-4073-bda4-9d1c873ac623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d7ad3d-3b9d-4bf3-8239-2d6d9710d289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621ee327-d2e6-4d3a-81ed-641d571eff93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fc504c-66f3-4057-8ede-a72cbd954e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e6a235-08df-4581-8708-d57f56b8df2d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c09934-7117-4bba-bdac-2bd6189c00c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db6b83f8-cd80-45d8-9ab6-756f0a092d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecde83d-61cc-43c9-9228-9bfd595d27db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a214d1d5-176b-41a1-b41e-319807659e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c41c56f-31a1-4985-8fb0-193cfe8767f2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025100c3-5c5c-4134-aeb5-04e8df44bb18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea3cf65-f70e-43c5-8430-60dfead52cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624aaafe-666d-4f73-bc55-5de8df81dedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cb2e8d-73dc-4f51-85d0-9aef39646824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155e7b8-2358-4bd0-8701-9d395da7a8b2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14cd08c-4dba-4d70-978b-4e6a2773c1e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd4185f-4300-4f06-b1a2-576073903ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bdc68f-8613-4ebc-897b-ad9e1d5aa054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd57a64-6618-4dec-aa1b-0a67604c1268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c69fa39-47cd-45c9-80b4-2308aaa47043",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaac1e7-3376-4dd0-bdb6-8b7a0e163bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1483f594-69d4-461f-b2c4-f0dba62a4d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfbecdd-1e7a-44d3-804e-381700375a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd44478-c5c7-4952-a831-8f122c7f90d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4c9e03-d812-4838-90f9-1395c089f95b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c6cf23-987a-40b9-8c3e-243b6f1963eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a27b5b0-9305-4ac9-a3db-ecd5cfa49bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5349be-aceb-4484-9ff4-be68dc9c6075",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad75c13c-d150-4903-89fb-86b81157ae69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef48bb9a-2f38-4fe8-9090-8b4ce1adf3f2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7306df-f038-4986-bdc8-f03f7e4a5044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ea9de7-2ffc-4a65-a427-f8b0a365280b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faac52e-7936-4450-b832-662eed3c6c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bd66b2-13bc-4074-8122-f450a23fa241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375e864-c651-4a29-a1e0-124159be9708",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84daaae6-f278-45b7-a015-ad0f63d67331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346be21e-8d3e-4c5f-bb15-19e5599bef86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8005bd-b153-4811-97a7-83e5a1cc7697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538b4aba-d1c3-4b23-b186-cd5a5510ef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c70fac6-2c8d-423b-b004-efdfbab77939",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf8e236-780b-4c3e-a155-91422675da62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a710118-01b1-44de-9380-86ae730e16b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ade607e-820a-4832-bf07-63b10c4ea747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fe9469-c1ab-48cf-965e-542d2c94c00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317a1ef4-af46-42f5-940e-f2c2e444ce28",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289588b9-bc02-4953-b02e-82da6a782d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e172e0a-8a56-4e99-9ee2-dd72b9c6252d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89487e1d-d3ea-4806-94ad-832515d2e690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019556cd-9a67-49f9-8e5c-8821e40e1c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9fbfc2-22f9-4636-8ff9-8c8b675ea613",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be41a409-d3f6-4bcb-865e-9d2ff040cd30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ea622b-9641-469f-91e4-3d716859a1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f54504-f304-498a-8535-298a489d65fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb12a33-25fd-4634-80ea-4437ec56705e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1904ab-8ac6-4754-87e1-86a5d8549670",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd3aab6-0836-4345-9059-1e83eb8d1e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25c44bdd-4584-49ce-bf3c-4fed2f151ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a0980-677a-404a-9546-b630ec57ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b6eca7-f196-4833-ad68-1e9c3d8f67a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cc0a7d-8682-4169-80a2-230f14d92d14",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0512b18a-01f4-477f-bf8e-ec45bee800b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae5da6b-14db-48ed-9055-96f5ce1cb36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74beb97f-68d0-4d4d-aadb-8ecd1b9f9346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373e654d-cfbd-4e15-8fee-5711501fd73f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "099cad10-5685-404f-9a0d-d5497a3462bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6c3caae-187a-4706-84d7-f951ea822b17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02e65051-7de7-46ff-92af-69b201e51825",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f12467de-7d60-499f-9b5d-fd74ac2144bd"
                    }
                  }
                ]
              },
              {
                "id": "0914e398-3059-4cf4-aba3-23578e546d47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1e55493-3742-4621-b5ca-4948b2875baa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a27157-a79d-4fd4-8bdc-23e02a1b87fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b154a0e-5a78-4ca0-ab2d-e6e371cbcd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b4659a-2e2e-437b-a2a7-778c7f376903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e60c935-9178-4b35-8025-57e650d7b793"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2dcf3e5d-d0c8-4734-873a-011e0bcca449",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61e209a4-4e30-4126-9a09-691189d00912"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "458546bd-21db-4876-a5a6-5623ab1c47d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aba4261e-f6d7-4259-ae89-5ddd6d417c5d"
                    }
                  }
                ]
              },
              {
                "id": "27c74333-335d-4727-a8e9-f86ba2e26ce6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dc3b8d76-9e92-4602-aa08-592ab6879c1b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a95b85b-5c2e-43db-9834-e14b692694da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7f81a746-f740-401b-b4a5-c12b515220f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abe5a8c-717c-4bf5-bb34-9d2da7241850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9830c8-c171-497e-8032-ea176077f208"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2cd95731-8dd9-4f4d-beb0-de12f9021a52",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5884f0b7-3f1c-43ed-8c63-88f0553b645f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e3ec95-f9ca-4034-8c0b-fd0a93ed71dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "be6097a3-cc98-4118-9171-d086f565f385"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c587dc31-3981-4d28-bdb1-5a0b8811bb97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fd39056-7629-4d63-bf9f-8aede9cad729"
                    }
                  }
                ]
              },
              {
                "id": "64d3d8c4-577d-4f51-8d9d-bfc4a1831fe6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f7f1438-834d-41c3-bfc4-1a3542cc7652",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b6532500-d0ed-40e6-b090-5d3402bf0a01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4dd7f4e-b0ea-49ff-9d7d-29bc0c368c04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57c6d9ae-753a-4c59-9f82-c0454389515c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "748f3540-129a-48be-a866-9b8557eb36e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "727c4d85-4f48-453b-868c-d6d788a6430f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ac9ee33-ba87-47bc-a558-9f6fecd4eb67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "350d14dd-84a2-4eb9-a109-0d2801d6b5d5"
            }
          }
        ]
      },
      {
        "id": "ce09ad5e-74a5-497f-9022-7720e9b5ea14",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8d9e9f2d-62ea-41bc-8b30-4450c6e240bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1477d559-0b68-4d83-a192-3503fd809666",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b26ef88-b5a0-42c3-b655-3720e885ffe0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1482fad-eb92-495e-8fbd-2e4af84a5e34",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "099491ef-4061-426d-aeac-0fe3f3ff1338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5be1ef-f62f-4c54-a329-521a17a4a4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51e3fa13-92ad-46ba-b732-ae109d224000"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8292d167-31c3-45d9-a00d-f768defbb576",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "024dcc83-c164-456c-84d5-3036f045a038"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6ba999c-0040-43fe-b4b1-ba7ad4484b41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "806592a4-d779-415d-b707-d57232da533d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cbf2701-cfdc-430d-8d05-624607ca9505",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8edead7a-2972-4439-b936-4fa0d6472d36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4366236-5cef-434e-b744-751144761f65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ced22fc-3daa-4e0c-993b-4e73d983ab97"
            }
          }
        ]
      },
      {
        "id": "d26189c3-ec4c-48f4-99f8-269d7979aa40",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1e9b927b-2b77-4dba-b4f2-bcb52ea776c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "743a1881-620e-4fcf-bbb7-2e266f4c2d8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08ab8831-6575-425b-9e38-278eca3ee968",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f056343-22c8-4bb0-8ad6-6be37ddd0a7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2de5569-7968-4653-9e3f-607b4d1358b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eff1ef5-2de5-429f-9aa2-0637aa242113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5561be5e-231e-4bb1-95cc-c2442e8800cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f23bb371-09f8-4ecb-9199-7c4a3df3a876",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44bd76e4-c670-40dd-add9-9c0d1e77d13c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f53855ea-35f1-4a8e-a03d-5b1d14aeb9f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56df9cda-cc6b-41f7-a3be-4d7a13dc4675"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4983c5c-3a03-4ef9-b007-df56db93e30d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be288c03-b94a-446c-b0ef-9ac5299581ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7ca5d58-43be-4f9d-b5cd-2992664ddad5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffc3060d-870c-4aed-ae81-a9430dcbe921"
            }
          }
        ]
      },
      {
        "id": "bc2e25d0-ec2f-4147-a899-72adb056c131",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6be2e03f-604d-488d-8372-92c0de0a6abb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5d2c0f8-dcb8-4e6c-880b-f411c13cb6c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9512836a-bd67-4471-afca-72c1baa71714",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b9ec8-64c9-46f3-ad10-c08ec40839b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2734a3c-66e6-4fe3-99d0-8e49f9c984a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01dbf58-ac04-41ef-80d3-7415505aff46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3f828a1-1bba-437b-a6bb-4cc4f9a8db3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92ef944a-1e11-4e94-a988-61933f41984a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "776a8bf7-7060-4059-84c0-dc021056195e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00f6ca72-9f9c-40c9-ad0e-b161c27b0639",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2744c88-5ecd-4ca5-9a5f-3d2b9b418fbd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3808a9b1-59fd-43e7-86bc-0d6b699e8e85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7a440f9-db73-4b3c-9e3e-ca5305674d83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "867458b6-74f2-4a11-912c-82b8a4e3bd7b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cf5fcca-37aa-4051-9df8-8b3ca722996e"
            }
          }
        ]
      },
      {
        "id": "6e62512e-8c8d-4dc0-846f-39f762994520",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fc20ce8-d046-4c7a-a7b9-a1940da9f5bb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "732e542a-607f-46f0-9cf7-2e788e433792",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e1f1fc2a-ad05-4c15-881d-547f2414d2d6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53359dd3-40db-4aea-8a31-4f0f38f000d8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d18adda-4994-4f65-9f3d-4b793626b779",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 286
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 93.6463414634146,
      "responseMin": 8,
      "responseMax": 1719,
      "responseSd": 108.12293950679815,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685925763424,
      "completed": 1685925799400
    },
    "executions": [
      {
        "id": "b8e87aff-6199-42a8-8cf3-0e9d25f04939",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e4caa4a7-ad40-4d00-ac2e-788ff979cb02",
          "httpRequestId": "0111ad6d-062b-4259-aea7-478724f17705"
        },
        "item": {
          "id": "b8e87aff-6199-42a8-8cf3-0e9d25f04939",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a0ec4667-bf8e-4aa1-8521-062e1f9c7be4",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "b8e2f7d3-84dd-4552-98d5-f25a4042392f",
        "cursor": {
          "ref": "f739c1c3-f058-4a5a-8566-dba6f397a390",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f85d16d-9dfe-4d4e-8cfe-126d5b41ecf1"
        },
        "item": {
          "id": "b8e2f7d3-84dd-4552-98d5-f25a4042392f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f7af1a17-fdd3-4f5b-9c61-59180f486fde",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "4fbf10c4-8e4e-44e6-9f58-0952e7bfc423",
        "cursor": {
          "ref": "4d8b7ada-3c9c-4565-8de5-55699fb7a3e9",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "de1fbe10-c590-4665-a604-b41f6bcc67b8"
        },
        "item": {
          "id": "4fbf10c4-8e4e-44e6-9f58-0952e7bfc423",
          "name": "did_json"
        },
        "response": {
          "id": "0cbc03c1-5d59-4151-825f-d66b629016ac",
          "status": "OK",
          "code": 200,
          "responseTime": 407,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae99972-0b85-4fad-8863-72fa843c8666",
        "cursor": {
          "ref": "92c28740-7f0b-4794-8fb6-05333aa77657",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fd0489dc-962f-4e17-9b03-347d5ceeabbf"
        },
        "item": {
          "id": "7ae99972-0b85-4fad-8863-72fa843c8666",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac0ff012-ce5c-4370-91b3-986f10f5334d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae99972-0b85-4fad-8863-72fa843c8666",
        "cursor": {
          "ref": "92c28740-7f0b-4794-8fb6-05333aa77657",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fd0489dc-962f-4e17-9b03-347d5ceeabbf"
        },
        "item": {
          "id": "7ae99972-0b85-4fad-8863-72fa843c8666",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac0ff012-ce5c-4370-91b3-986f10f5334d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f00d951-df34-464f-818c-6ab59ae10e95",
        "cursor": {
          "ref": "fc5e5e7f-b117-4325-a6a6-a57f275219a0",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab84a5ee-f670-431a-9b6e-aa38db80b6b0"
        },
        "item": {
          "id": "4f00d951-df34-464f-818c-6ab59ae10e95",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8ccb9e28-6f8a-461a-b1d2-242e16b4795d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 341,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "10c18787-1031-4581-af54-841c46092713",
        "cursor": {
          "ref": "5871828f-9c17-42bf-971a-6cb57220e6cf",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "86c926e9-0e17-41da-96eb-af5f94a61179"
        },
        "item": {
          "id": "10c18787-1031-4581-af54-841c46092713",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "378adf41-70b1-4ca9-ac46-c4cbab4a61ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "74639af8-0b64-4bb4-b5a2-fa86f3fe72bf",
        "cursor": {
          "ref": "067aa8da-02ce-483e-b81f-d09f72b920f8",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4afad371-c485-4dd3-8eac-77ec327ead87"
        },
        "item": {
          "id": "74639af8-0b64-4bb4-b5a2-fa86f3fe72bf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7a2580b0-555b-41bf-8cf3-f7bbb4a256d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9fba4229-53fb-4825-92bd-805aa33a5a97",
        "cursor": {
          "ref": "92be13c4-67d8-4a02-851a-97658be47fc3",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "38a82ad6-f91b-431e-8be6-f41139c4ec74"
        },
        "item": {
          "id": "9fba4229-53fb-4825-92bd-805aa33a5a97",
          "name": "identifiers"
        },
        "response": {
          "id": "bd3a1a73-394a-430e-8431-99c829fdb5fb",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0ffe10b7-2549-414e-95db-dfbe30ab48fa",
        "cursor": {
          "ref": "1fcd0e28-b64f-43d0-9e43-ee4c2811962d",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "75a1ec60-1886-490b-9665-40713199b515"
        },
        "item": {
          "id": "0ffe10b7-2549-414e-95db-dfbe30ab48fa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c47a6827-4d6e-4d89-85ea-82f1c84ef06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "0d085ce0-5a86-4d8d-9309-ba412a582537",
        "cursor": {
          "ref": "8e36fed8-5885-4d30-8a28-1fb494f639bc",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "024d7edc-b929-4af4-ab47-dd2a006f1f1e"
        },
        "item": {
          "id": "0d085ce0-5a86-4d8d-9309-ba412a582537",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3fe402c2-72e0-40bf-9e09-32c8b2e5d717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4ec7883a-4eb3-4c25-85ce-55961dc31762",
        "cursor": {
          "ref": "32e2b5a7-07c8-4534-95e9-03c90207802d",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2271dfdd-bd48-4711-91ac-a3b11ba60c8e"
        },
        "item": {
          "id": "4ec7883a-4eb3-4c25-85ce-55961dc31762",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "73399ed1-4a69-425f-8f38-3eddd97ed24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "55073fe3-54d4-44bb-8d54-dc2b81f4d00d",
        "cursor": {
          "ref": "5c9e7acb-2ed3-47ca-8eec-78979789573d",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0f21a2a5-9e02-4052-9677-8a5854c53254"
        },
        "item": {
          "id": "55073fe3-54d4-44bb-8d54-dc2b81f4d00d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a6d450eb-b634-4e9b-82f6-9daa612a4195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6f1eca37-05b9-4dc2-ab09-7c8ab74edc45",
        "cursor": {
          "ref": "9e513425-e6d8-42b0-9acb-cc15edad00b8",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1def433e-09f7-4e28-adaf-e04e964ab448"
        },
        "item": {
          "id": "6f1eca37-05b9-4dc2-ab09-7c8ab74edc45",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "06a3731c-2a44-4661-bef4-40bea8680b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "42926fe6-5f86-43e6-9a7d-03e98dc0b7f7",
        "cursor": {
          "ref": "c7c7000b-13a8-41cf-8430-d9aaa6f1fa2b",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "450cc656-e775-484e-916d-2fd7568fcbb8"
        },
        "item": {
          "id": "42926fe6-5f86-43e6-9a7d-03e98dc0b7f7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9f2b7cc9-46bb-4c2b-b277-2da3fb3c3a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c6d602e9-0b4c-484f-87e1-e6c785a1ff00",
        "cursor": {
          "ref": "94327455-94a6-4d47-aa87-7e26f4a0beb1",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f6206a68-8f47-43af-b096-5ee24e977651"
        },
        "item": {
          "id": "c6d602e9-0b4c-484f-87e1-e6c785a1ff00",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8fff8852-c9bc-427d-828d-92130ae7dc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6ee75975-80b9-4cd9-914f-4a7f64c7ef59",
        "cursor": {
          "ref": "2dd3aacb-9039-49aa-b555-c1a7e4799404",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3a359c5a-0eaf-4986-badb-3283f7a74b03"
        },
        "item": {
          "id": "6ee75975-80b9-4cd9-914f-4a7f64c7ef59",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d83beed2-2bc2-4994-9430-c51d93a3d129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "707ba914-69fc-4ccc-8f9e-1ecf8786aaf7",
        "cursor": {
          "ref": "f49cd75c-f940-45dd-a965-cfdf86e00237",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "555e8c57-967a-4645-8ab5-6e8b9449314f"
        },
        "item": {
          "id": "707ba914-69fc-4ccc-8f9e-1ecf8786aaf7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2f78dd9a-9fd2-4a64-8d2d-b241bf465630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f70197d6-89d9-4dd5-b84d-6014972e1434",
        "cursor": {
          "ref": "e07a2f6c-faad-4ba4-bf3e-308a9acbd62a",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "163797d5-2038-4e2b-a14c-2a0a652493a2"
        },
        "item": {
          "id": "f70197d6-89d9-4dd5-b84d-6014972e1434",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5eb489a4-0720-4b80-ac39-d46efac39c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "67cb9424-a7f4-4c04-8124-a56cde828613",
        "cursor": {
          "ref": "bc8b428b-70a2-4c7e-81b8-0c8e6b2bee4f",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1ccd4862-e04a-4d0d-b129-9b6c31fe81fb"
        },
        "item": {
          "id": "67cb9424-a7f4-4c04-8124-a56cde828613",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e823048-37bd-4ad5-b374-219d953c1926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c7dfece3-9d2f-43b6-959a-f514ffb9f001",
        "cursor": {
          "ref": "bb512525-e2b3-452f-8dd6-a156c721645a",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "930e059d-6fc3-45cf-b44a-4bfb6688c7aa"
        },
        "item": {
          "id": "c7dfece3-9d2f-43b6-959a-f514ffb9f001",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bcafd895-c38f-432c-89b9-d6f1674001f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "877a946b-d15a-4834-a05d-94f5cfeac375",
        "cursor": {
          "ref": "3af7facf-a77e-4f70-89e6-e562cdc2940e",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ca353dab-de82-4570-8609-bb8436b77967"
        },
        "item": {
          "id": "877a946b-d15a-4834-a05d-94f5cfeac375",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9a0eae91-45d3-4d76-9017-871b7c7ba2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d7a96c41-1c8e-44d9-a024-2d3aa1fee8d5",
        "cursor": {
          "ref": "b9fe1e83-b46f-4505-9631-70fd4b8182ef",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b7902d09-8757-4a25-bd08-4d9af8889957"
        },
        "item": {
          "id": "d7a96c41-1c8e-44d9-a024-2d3aa1fee8d5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "991f36ea-4fe7-4d89-b479-bb1f1577ee7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bb52471e-e124-4e34-837d-b18be7ac0558",
        "cursor": {
          "ref": "bc2b2b0c-13b7-4319-9af4-a696e174a8f4",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f20bac12-9b6c-4d01-9ac1-3ed35e81277b"
        },
        "item": {
          "id": "bb52471e-e124-4e34-837d-b18be7ac0558",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9c090394-274a-4e3d-8bff-1e74f0b19c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1d9d232e-3cc7-4a7b-b5ae-e363b6914990",
        "cursor": {
          "ref": "45325d97-17e7-40ed-992a-9755e4b31daf",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9bbb5f68-a0aa-486c-a18f-9d92510faafc"
        },
        "item": {
          "id": "1d9d232e-3cc7-4a7b-b5ae-e363b6914990",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3b8b10d7-f4cf-477b-b1c6-c6bd910decc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "cdea26aa-fa4c-4ae0-b08d-821c5133fa37",
        "cursor": {
          "ref": "a6aa4618-9aef-4975-b2ff-8a461820b004",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f8616618-2c7f-4543-888e-dbd29ba5f736"
        },
        "item": {
          "id": "cdea26aa-fa4c-4ae0-b08d-821c5133fa37",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dd88eab3-49a4-449d-ace9-c3e13cf400a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a9b9774f-aca4-49fa-a725-7e4dd8c4ec4e",
        "cursor": {
          "ref": "1262499a-f573-4855-8b19-2f5a7405e869",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ea3e0fd0-7e54-4e89-b12a-5b7576970149"
        },
        "item": {
          "id": "a9b9774f-aca4-49fa-a725-7e4dd8c4ec4e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f24a93dc-8c52-40bf-953d-e0c2be5239fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "a43bd89f-7f74-45b1-88e8-9ae400b7483d",
        "cursor": {
          "ref": "45d66f05-0c0f-410d-8feb-f6558269ccf1",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "16882464-cb8e-4967-a95a-18906350c7bc"
        },
        "item": {
          "id": "a43bd89f-7f74-45b1-88e8-9ae400b7483d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "330bb404-5844-4888-a959-e00c306e5041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "46bb4306-6fdb-4e0d-ac14-d392c9d69300",
        "cursor": {
          "ref": "cdd57956-b73e-465c-b68a-b66f2d45a2a6",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5b944c48-8b82-4411-9d2d-d9ac62683634"
        },
        "item": {
          "id": "46bb4306-6fdb-4e0d-ac14-d392c9d69300",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d6a70fd1-2eb9-4278-8722-fb166042d6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a963a7fe-c76e-4528-95c4-fdba1c1f1459",
        "cursor": {
          "ref": "a4a8d1f0-1e98-475b-a177-d7e755c7165a",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d0ef6eb6-a410-48f7-be21-72a112eb0ae9"
        },
        "item": {
          "id": "a963a7fe-c76e-4528-95c4-fdba1c1f1459",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "55c3cf5b-2254-4447-bf59-d95fc09780f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "430915c2-8ca1-4153-a593-1ec7a627749f",
        "cursor": {
          "ref": "150d25b3-e9e1-4417-9ec6-bf403774ab0a",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "25204b70-e472-46df-adb3-ac6a57b30354"
        },
        "item": {
          "id": "430915c2-8ca1-4153-a593-1ec7a627749f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "253f8044-4cf8-4db0-876c-5093d82331e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "19b8f739-2183-4d71-8cfd-db1cdf3a2e8c",
        "cursor": {
          "ref": "6c68eb71-f7dc-4e54-831a-abb873b2c3cd",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "59829774-0933-4864-b80b-907b9b1880b9"
        },
        "item": {
          "id": "19b8f739-2183-4d71-8cfd-db1cdf3a2e8c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9afc1bc6-9e59-4455-b792-aa784d1f9e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "2376410b-ce37-4804-aee9-6cdec4fa5a68",
        "cursor": {
          "ref": "7f90192f-2c95-4b6c-8249-5e9e1b438de0",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ad514cf5-10e1-4167-9dbd-57a01e8fcb96"
        },
        "item": {
          "id": "2376410b-ce37-4804-aee9-6cdec4fa5a68",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e47f3495-7c95-4581-b44e-1a5f73423660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "04c7d532-fe31-47e9-8cd9-605c61a5829c",
        "cursor": {
          "ref": "9296f916-9218-4353-b4ad-cee477918b22",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "460e4130-fdf2-426a-89a8-bfe1af1964b7"
        },
        "item": {
          "id": "04c7d532-fe31-47e9-8cd9-605c61a5829c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "944f9482-8331-4d1a-866a-aa07cddf9a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "65154747-ffd9-4bbd-b8bc-9baf2c0fefb3",
        "cursor": {
          "ref": "f3341587-328f-492b-9ab5-c85d07ba2890",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4b27cc21-6d48-413c-8437-0ed996f78723"
        },
        "item": {
          "id": "65154747-ffd9-4bbd-b8bc-9baf2c0fefb3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5fa2273b-fa83-4c85-b59c-0c368cc9282c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3765799e-6bcc-4ebe-a96f-da9d3a3fb2c2",
        "cursor": {
          "ref": "f6bc96ed-580a-451c-b1c2-06a386fd3e75",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "92b79b60-316e-4f8e-8134-2894d56c063c"
        },
        "item": {
          "id": "3765799e-6bcc-4ebe-a96f-da9d3a3fb2c2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8d9a04d2-05a9-4930-a409-19970fe088a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fe281756-7c6b-40ff-af74-ccdf7a7d12c8",
        "cursor": {
          "ref": "3262428a-ebab-4467-9798-5776f0c3a5df",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "28082dc7-9fe5-407e-a92d-fa2a5ac426b4"
        },
        "item": {
          "id": "fe281756-7c6b-40ff-af74-ccdf7a7d12c8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ee447d78-bdc0-4a3f-b0e2-d315ac73ad47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "8f9531d2-cbf3-4604-8c69-b25bbca642a8",
        "cursor": {
          "ref": "a52d0b62-935b-47db-a023-e9fc5238d34f",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "74f7c267-d9e1-416c-b0fa-63d90029994a"
        },
        "item": {
          "id": "8f9531d2-cbf3-4604-8c69-b25bbca642a8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "307d3aa4-80cb-4b2a-af5a-ad6380669d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "57a042f8-ff31-45f1-b1a3-f59fdb2fa8e0",
        "cursor": {
          "ref": "0c7a56a6-ada3-4865-bdea-8adc919eaaf8",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f90c83b6-663e-4439-9e04-3595b40bacbe"
        },
        "item": {
          "id": "57a042f8-ff31-45f1-b1a3-f59fdb2fa8e0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0c7732f5-7f76-43d7-acd4-7a65ca77f75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "64f6b0df-32ed-4a02-bebd-66aff55a1357",
        "cursor": {
          "ref": "b1a16da0-c0f8-4bb3-bcd4-4d61b4fa5228",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bdbe07e3-bf7f-44bc-b565-264ae3df96fa"
        },
        "item": {
          "id": "64f6b0df-32ed-4a02-bebd-66aff55a1357",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "41173337-67cc-4eab-a1ce-59a78ff56987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9b234310-8727-4880-aa48-87eae5ec96fb",
        "cursor": {
          "ref": "c6353b92-1d28-46ff-af27-6a0da5bbaa12",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58c36160-74dd-4573-bf24-31d136d11a5c"
        },
        "item": {
          "id": "9b234310-8727-4880-aa48-87eae5ec96fb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "90cb2402-f377-4d4a-b343-537fa7e81598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7325285a-cfc1-4d31-9c08-ef081860bd6e",
        "cursor": {
          "ref": "c34bab5c-7763-4f68-82ba-7649f72c7107",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a13a2b47-704e-447d-bf8d-f02ff2816633"
        },
        "item": {
          "id": "7325285a-cfc1-4d31-9c08-ef081860bd6e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a111e8bd-3759-46df-aeb5-7a93751ef13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "644423d7-bd61-430d-a5d9-210d0e994b1d",
        "cursor": {
          "ref": "f7bd647e-7ad9-4961-b34a-cee77df1c03d",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a9a511b6-3864-4de1-ad57-cd882744d8df"
        },
        "item": {
          "id": "644423d7-bd61-430d-a5d9-210d0e994b1d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f5fe5f7-a0ad-46a7-8e30-3987cf46a48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "0b9395a7-a414-4e31-9bde-70b707cf528f",
        "cursor": {
          "ref": "f79a657f-ba2c-4074-aa8a-9eef32012579",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3c510f8a-1cf3-45cb-89d6-bc2b4a1eb505"
        },
        "item": {
          "id": "0b9395a7-a414-4e31-9bde-70b707cf528f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "028b89af-a5e0-4aec-9a80-973af66db9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0978f189-97c6-4264-bbaf-562c37d808ee",
        "cursor": {
          "ref": "49c091b7-aaba-42e7-a1eb-299f2884921a",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8963142d-6988-455d-92bc-8f9c8769c841"
        },
        "item": {
          "id": "0978f189-97c6-4264-bbaf-562c37d808ee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a2a26a0d-f098-4864-957e-b051af23086e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "327fc3e7-fa52-437e-b4d1-d8914a3da931",
        "cursor": {
          "ref": "d761c596-c0c8-4974-8e12-8ea3634b5708",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a0e05a2-e6dc-4ac5-995b-663c0afab279"
        },
        "item": {
          "id": "327fc3e7-fa52-437e-b4d1-d8914a3da931",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1f6dc7e8-d186-44fe-8051-95570cc56116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "717d0ea1-3232-484d-8118-ef4a565d2583",
        "cursor": {
          "ref": "59f8f433-0239-42fa-ae93-ae664d0e5e4f",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "65790d66-8163-44dd-b270-052d810efe91"
        },
        "item": {
          "id": "717d0ea1-3232-484d-8118-ef4a565d2583",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "149e4680-28a5-4ac8-a060-8179061bf3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fe90dc72-dacf-4a1c-87b0-e03987d799b0",
        "cursor": {
          "ref": "bcfc1abb-1671-4eab-be55-256ddef64271",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61474e96-b452-4d16-9994-dc17568dbbe3"
        },
        "item": {
          "id": "fe90dc72-dacf-4a1c-87b0-e03987d799b0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "41094948-f6f1-473e-9b0e-ee27321b69cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f76854db-d203-4552-a1a9-97433bf82ef9",
        "cursor": {
          "ref": "8bc0ad38-c659-44cf-ac0d-b7d6c37d379b",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "150f2dd6-be4d-474b-8dd9-d9195c5af293"
        },
        "item": {
          "id": "f76854db-d203-4552-a1a9-97433bf82ef9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f6dd1f3e-a41c-417c-9083-bce21bbc5664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "87a8ca29-1c6d-43bf-882a-452767766585",
        "cursor": {
          "ref": "f936f2a5-8cad-4117-9453-326f2ed67e1d",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ff70da5f-5850-439d-a7d1-075cae42c50b"
        },
        "item": {
          "id": "87a8ca29-1c6d-43bf-882a-452767766585",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f7c99762-a618-4688-84f1-049a13594ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "095cd0a0-f8da-4422-a13f-e9fa64be36b7",
        "cursor": {
          "ref": "c3e0a03a-dc1e-4c2d-8d18-2e2cbe88fe9a",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "166327d8-37ee-42f9-b812-77ea9ce0c4f1"
        },
        "item": {
          "id": "095cd0a0-f8da-4422-a13f-e9fa64be36b7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "58bd67e5-4540-4802-a5e3-afb5d668cb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ee9e21da-a3b1-4162-9618-8b9bb2b4f00a",
        "cursor": {
          "ref": "695eb5d1-ef46-4d4a-806d-45ad57ec6e27",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fbb1174d-9853-43c6-95a7-e703fdcd6953"
        },
        "item": {
          "id": "ee9e21da-a3b1-4162-9618-8b9bb2b4f00a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c20923df-1f01-46b7-8f78-d36c13058ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "044e2a81-8c5d-4937-891c-0c39babeb130",
        "cursor": {
          "ref": "3659fdc2-cb3d-4d4c-8fc5-d7353532e023",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c5f591f3-18db-4327-8e95-e77504d4ecd8"
        },
        "item": {
          "id": "044e2a81-8c5d-4937-891c-0c39babeb130",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "94b68687-d325-407d-8342-2d8369b66d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e9db7c73-1dfd-4124-93ef-9302d37927c8",
        "cursor": {
          "ref": "e4108e95-fa1e-402c-add3-e5862c67b5ba",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e52c49b4-000f-4f8a-9652-d475e0ed026b"
        },
        "item": {
          "id": "e9db7c73-1dfd-4124-93ef-9302d37927c8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "44ecf937-b3b4-4ca6-a685-b2e81359397c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "faacb5be-d338-4580-aec0-24a66af548c9",
        "cursor": {
          "ref": "e7496fc6-85dc-4f43-979b-dd900a8a18a5",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3986c4ba-c39b-480c-a1d7-9c3273b4baca"
        },
        "item": {
          "id": "faacb5be-d338-4580-aec0-24a66af548c9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6f82b762-ce93-4fd3-94da-3723efd0945a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "94da9c9b-d66b-43b6-8286-b0e8aa9cf607",
        "cursor": {
          "ref": "e57e4d4b-967a-431f-93a1-bb6784f92206",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7b0c9f3c-0767-4655-99d5-a745fba62de8"
        },
        "item": {
          "id": "94da9c9b-d66b-43b6-8286-b0e8aa9cf607",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "701f71e6-18ec-482b-a482-209169a93e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e5f6561e-8051-4725-9f8c-5a520b227902",
        "cursor": {
          "ref": "a8846931-b380-4d4b-8b70-ad08647e6628",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7d3cfc70-69e8-47b1-8c20-fc223b70f825"
        },
        "item": {
          "id": "e5f6561e-8051-4725-9f8c-5a520b227902",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cce4f373-bcf9-45d7-9ae7-f6d19063088e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2cf2dcce-1a98-47bf-8452-bbb13a83adf3",
        "cursor": {
          "ref": "62206310-8839-48fd-83e3-34a5b226bd2d",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cc172977-2d7d-47b2-9e74-4cda5a153b82"
        },
        "item": {
          "id": "2cf2dcce-1a98-47bf-8452-bbb13a83adf3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6ee887c4-dbb7-41a6-84da-cc6a55511738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b676e8e3-7164-44b0-bee0-38006cc2a335",
        "cursor": {
          "ref": "afe88788-5475-41f9-bea4-55d87993b621",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8325c892-ab27-49ea-9273-1aa44406d779"
        },
        "item": {
          "id": "b676e8e3-7164-44b0-bee0-38006cc2a335",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "48175eff-4f2c-45af-b4d8-c23a08d7166d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "6901ad09-1689-4020-9d65-2cef41fea889",
        "cursor": {
          "ref": "d79d62a8-b77a-4d58-b8b7-8cf2254580c4",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "df6df5f6-79ac-4789-b936-009eb4164b3a"
        },
        "item": {
          "id": "6901ad09-1689-4020-9d65-2cef41fea889",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "76ad4581-2952-4005-b266-357671ed8a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "2c5a33bf-7ccc-4f2e-9537-a88c26c6df1f",
        "cursor": {
          "ref": "18e6fab8-8629-4108-aaec-6f97ae6944fa",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "da31d0af-0d37-4dec-9a46-5e55bbef47ba"
        },
        "item": {
          "id": "2c5a33bf-7ccc-4f2e-9537-a88c26c6df1f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f284299-ed34-4e43-927a-619425fc227f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2fb232fc-bd82-49ff-b04b-360e3d23531f",
        "cursor": {
          "ref": "98a266ad-a95f-41b1-b172-a3db9a137922",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "41746293-3b27-439d-bda3-ad5e153d4578"
        },
        "item": {
          "id": "2fb232fc-bd82-49ff-b04b-360e3d23531f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3f0892df-521e-4fee-a12a-5f7e379f09bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6a94f7d0-3e3d-4179-8d6e-caa176ff3e7a",
        "cursor": {
          "ref": "74c321b5-bff4-47df-bc80-f8f389bee3d2",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "af118ce1-31e6-4146-8c47-20104d17c257"
        },
        "item": {
          "id": "6a94f7d0-3e3d-4179-8d6e-caa176ff3e7a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "52450183-4db6-4f1f-880b-898ec575f098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "2e23a1b4-0c99-4a1c-840a-2e77f8af954c",
        "cursor": {
          "ref": "1b9f6258-ec7b-425c-aa86-aeb2ecf93f4f",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f62ca0f9-80e2-46b8-aaa8-9ec46c6e7bde"
        },
        "item": {
          "id": "2e23a1b4-0c99-4a1c-840a-2e77f8af954c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d535ea6a-7d3f-4b37-b5dc-2bae8774f744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "a2c8342e-342b-4cb5-a704-da5e885617d8",
        "cursor": {
          "ref": "71b66b2d-9c97-4954-9d20-e44f4b4556e9",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a27964cc-99af-48af-9cef-5e9ac6c59b81"
        },
        "item": {
          "id": "a2c8342e-342b-4cb5-a704-da5e885617d8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fe407162-9e20-4894-84d3-4cd029a2259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "e3cb5aca-7d10-4f3a-95f0-6deffd32b69f",
        "cursor": {
          "ref": "b7280c90-60b2-4688-b5b9-56e2304196f1",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8db95e3e-6cc4-4c86-8c12-9477233e048d"
        },
        "item": {
          "id": "e3cb5aca-7d10-4f3a-95f0-6deffd32b69f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "73a972de-1dc9-47c8-b926-b27831848fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f38c4c78-d5dc-4e7d-9401-b16e61646829",
        "cursor": {
          "ref": "8a62f4c3-ccef-49c2-8489-5952516ad6ac",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c42299c0-898e-4666-881a-50e2f3e370d1"
        },
        "item": {
          "id": "f38c4c78-d5dc-4e7d-9401-b16e61646829",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cf7a1766-c128-4519-9b37-5338f330efc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "df319615-230f-456d-be0e-077dfae6cd9e",
        "cursor": {
          "ref": "b6ba8570-e7fc-4873-a453-03b3395550c8",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "237d20ec-104c-4eb3-a75a-d3303172e071"
        },
        "item": {
          "id": "df319615-230f-456d-be0e-077dfae6cd9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "95b880e6-4453-4299-8640-692bce50e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "34d9900f-8e9d-4e42-9047-a1769d13df86",
        "cursor": {
          "ref": "272caefc-ffd8-479d-9c4c-851508e75b15",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "53722018-89d1-4e45-8dac-f412f3324fa5"
        },
        "item": {
          "id": "34d9900f-8e9d-4e42-9047-a1769d13df86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f191ae7f-d956-4369-a68b-0b862e964404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "de93aca9-fbf9-4d21-bd33-555d9fda1e69",
        "cursor": {
          "ref": "3fff5341-27e6-49a3-b2ba-090bbebf2e85",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "af39a268-1729-4df8-9c1f-022d1475e123"
        },
        "item": {
          "id": "de93aca9-fbf9-4d21-bd33-555d9fda1e69",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "de4265dd-c707-415a-afa6-a64ad7241468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "08fdcf49-326b-49c4-ba77-7e74b7d07018",
        "cursor": {
          "ref": "4e06bf5d-79b5-4f41-8637-8d65c1a83119",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "635cf002-4326-40e3-9cff-0eb5b12c4f67"
        },
        "item": {
          "id": "08fdcf49-326b-49c4-ba77-7e74b7d07018",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e60ef4ea-9606-4ad4-a04f-a9e55ac6d852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "633ec78e-cdea-463c-933e-e4c084fc9b29",
        "cursor": {
          "ref": "fe75f576-9953-48c3-8801-3842995d1365",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "32d3dc67-eece-4baa-b8c0-e9f888c6cd9a"
        },
        "item": {
          "id": "633ec78e-cdea-463c-933e-e4c084fc9b29",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "470fd7d5-1e0a-403f-afc8-8928713eff25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "b7153f47-26de-4b00-ab87-4e23e82d9380",
        "cursor": {
          "ref": "7208eb99-90a5-44e1-9555-bb7ea41d7d44",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "75eb6d96-c98a-4ec5-8477-a53780bfdbc1"
        },
        "item": {
          "id": "b7153f47-26de-4b00-ab87-4e23e82d9380",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "218fecb1-ee0f-4704-8638-c656dc5260d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "97437663-e0cf-47c2-88f5-5cfb670bd8d1",
        "cursor": {
          "ref": "906f47f2-cd46-48fc-8569-8f74adcf9d8d",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "90bddbbc-dc4e-4101-8a8a-7a4dd265d472"
        },
        "item": {
          "id": "97437663-e0cf-47c2-88f5-5cfb670bd8d1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "62579e60-2e9b-4b69-9c9f-57c3461743fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "426a41f2-1781-4135-abfa-7f67d6b65ff0",
        "cursor": {
          "ref": "d22f162b-862e-4fd1-8ac1-25878ae5768d",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5a5719d5-9677-44c8-87b9-c76bff9bcbba"
        },
        "item": {
          "id": "426a41f2-1781-4135-abfa-7f67d6b65ff0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3643815f-c1ec-4d08-a365-a25b34c791f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "cf5d9b67-f90a-4be7-b96a-0c4406c67b63",
        "cursor": {
          "ref": "34f555b4-3832-43bb-8c80-a86a7e6eae65",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7c1e55f3-e160-482a-8761-4b31ac848573"
        },
        "item": {
          "id": "cf5d9b67-f90a-4be7-b96a-0c4406c67b63",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4172521a-f91a-4c3d-9dfc-28750aa64bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1c358482-77a5-4fbe-8ac6-0a5561d38a21",
        "cursor": {
          "ref": "a2ec191c-b9fd-4fe9-b65d-d835f846ed5b",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b229cc77-ea86-4744-b628-78cecca2870a"
        },
        "item": {
          "id": "1c358482-77a5-4fbe-8ac6-0a5561d38a21",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b4fbb3bc-7a12-4c5a-8766-7af67fb40597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "180a3fe9-68ce-4095-b628-21d10b3113bd",
        "cursor": {
          "ref": "4109a75b-bfee-48e7-bdab-245029fc283b",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "da053c4b-00f9-462c-824b-9dc7c0d34fce"
        },
        "item": {
          "id": "180a3fe9-68ce-4095-b628-21d10b3113bd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "191c00fb-7085-41f6-84c9-1be21bf125de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "c5a886ea-f0c2-4fe0-9e2d-15119ae9b7d0",
        "cursor": {
          "ref": "cd0ef311-da5b-4af9-b3a1-b5e3ddd96721",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3684f4a6-1c94-434e-8b95-8a5d4043354d"
        },
        "item": {
          "id": "c5a886ea-f0c2-4fe0-9e2d-15119ae9b7d0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a6e7cc26-a86f-43e0-bed8-f042340b4e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7b24cdc2-5a71-4d05-846f-6a37b9c0d2cf",
        "cursor": {
          "ref": "4b8ef732-912c-4a5b-b454-81c4cb22d92c",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fcda8ece-e9da-43be-b09d-81943aaed045"
        },
        "item": {
          "id": "7b24cdc2-5a71-4d05-846f-6a37b9c0d2cf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "df1d4da5-92bb-45ae-96ff-0ac7df90b684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "cc257f4c-338a-4872-a60b-29858dded737",
        "cursor": {
          "ref": "37166e02-52b0-4ad3-b9b9-d01825207b0e",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a5c78476-427f-4bcc-a1fa-6ee450f656a5"
        },
        "item": {
          "id": "cc257f4c-338a-4872-a60b-29858dded737",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cefb09c1-b579-4f29-9128-b7b02be02357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "30173e4c-708b-4166-b88e-90a982f07cc4",
        "cursor": {
          "ref": "1ce49845-3786-4a2d-8fbe-1f2e5533c806",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ac67f0e1-338d-4329-ac5c-f7a932bf08f6"
        },
        "item": {
          "id": "30173e4c-708b-4166-b88e-90a982f07cc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9cc90704-d9c4-449c-ad98-d323611cfad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "bd343723-8aa2-470c-9efd-32e1025dc4d0",
        "cursor": {
          "ref": "b6572c42-4c0a-4a59-af05-ce3713a8ad1e",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ab080c78-e84a-4fde-a5aa-18354009f751"
        },
        "item": {
          "id": "bd343723-8aa2-470c-9efd-32e1025dc4d0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1debe2a5-ed00-4699-9f61-f623d29b9282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "fc900a1b-1ed0-4234-8f31-77c6ae7f7825",
        "cursor": {
          "ref": "ee082927-8056-4852-af92-2ff10c4a3e1d",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3618ee79-b638-44ef-a178-4795ec8153e0"
        },
        "item": {
          "id": "fc900a1b-1ed0-4234-8f31-77c6ae7f7825",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "94d9917d-2819-4410-927c-b162f7770609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "ec25b58b-8dbd-44e8-a4ce-863a22822c40",
        "cursor": {
          "ref": "e8f2e79f-460a-44f3-a0ef-85429b2e3b54",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b09b97ec-dbce-4e73-9a5b-bafa9695f214"
        },
        "item": {
          "id": "ec25b58b-8dbd-44e8-a4ce-863a22822c40",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8f3cfd71-72fa-44a5-b90a-3f414a8dd6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "aa0f65d3-908b-4cc2-bba2-a85bee823101",
        "cursor": {
          "ref": "170e0cf8-1759-4a3e-ad01-192bfbab88d4",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "690e498f-ec3e-4700-8fb0-811c8131c2d5"
        },
        "item": {
          "id": "aa0f65d3-908b-4cc2-bba2-a85bee823101",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77bf5865-b14a-4152-a1ed-139e19df6298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5665d499-89fe-4dae-82a7-4a968d14f41a",
        "cursor": {
          "ref": "7d696770-a22b-43fc-93ea-cdcc1323852c",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c11411dd-3a53-44d4-af95-f01a2642dc73"
        },
        "item": {
          "id": "5665d499-89fe-4dae-82a7-4a968d14f41a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7a50ba90-4349-48f8-bab4-93de7e273c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a15de79d-f656-40be-a0f6-6f2a97bfda03",
        "cursor": {
          "ref": "017e226f-7a9e-4a71-9fc2-a2e7598cb8f1",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "54c414f8-3c08-48b2-9507-e14d333e0835"
        },
        "item": {
          "id": "a15de79d-f656-40be-a0f6-6f2a97bfda03",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3b87c912-8d28-4e01-b59d-e0df82101a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "5e9b0669-545f-4a64-b530-72834d32f48d",
        "cursor": {
          "ref": "d3534f90-7aa7-4f5a-96e2-b518d84e7266",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ba8127cc-d7a8-4300-a8f4-561418a73878"
        },
        "item": {
          "id": "5e9b0669-545f-4a64-b530-72834d32f48d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d2e0c306-6f65-42b4-9c6a-38fca2cd9eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "cc604ece-5a2e-40ea-b0e9-78443f5c09e4",
        "cursor": {
          "ref": "51b53b02-71a7-4f1c-8cac-d872b8a208ea",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c787893f-3059-4aed-86ab-73c65ab74f57"
        },
        "item": {
          "id": "cc604ece-5a2e-40ea-b0e9-78443f5c09e4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4650e63b-be9a-465f-b972-8e9c564b3410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "dd26017a-9353-4ca7-a624-3ca502683ab3",
        "cursor": {
          "ref": "74461f03-fdc2-444b-943d-4816ee5fc829",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ffb9cf9f-f96f-4a27-b2d2-b52defa65903"
        },
        "item": {
          "id": "dd26017a-9353-4ca7-a624-3ca502683ab3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "83badaee-3331-43aa-bec6-de8c20603f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "0977fbe1-c34a-49eb-9bf1-e46907f7ed82",
        "cursor": {
          "ref": "cbfecf51-66da-4bea-9e5c-a01514dfe264",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "086056f8-7718-4d2e-abff-f93c3fa09380"
        },
        "item": {
          "id": "0977fbe1-c34a-49eb-9bf1-e46907f7ed82",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ccafc6e4-eeed-4b13-aaec-2e09ce633248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "1ab175d8-ed8c-4bcd-bdcb-5c5201ab4c05",
        "cursor": {
          "ref": "1eea411e-b3ce-4416-8dc0-49e43135f42f",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c1e54bfc-34fe-44b9-a6ba-0551037f2349"
        },
        "item": {
          "id": "1ab175d8-ed8c-4bcd-bdcb-5c5201ab4c05",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "81a77e80-a8ad-4e2e-bc43-ac92f2898b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "0b97c064-06f8-45bc-8fe5-de9823689411",
        "cursor": {
          "ref": "6c1159c9-2695-458e-a330-c7adb3be5691",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6946f6dd-d271-403c-a3d5-a8b590473733"
        },
        "item": {
          "id": "0b97c064-06f8-45bc-8fe5-de9823689411",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6abe3869-098a-4ddb-a4bb-7f75dcca421f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "d71a22ba-6b0d-4d81-bd96-1d9842a0444f",
        "cursor": {
          "ref": "52c16eaa-3155-43b8-8777-e67261caa5b4",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "451d6f24-285c-4fe0-af7e-fced0a004b0b"
        },
        "item": {
          "id": "d71a22ba-6b0d-4d81-bd96-1d9842a0444f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2f6719a5-fe74-4f55-88a9-14754717f665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "22b9e0b6-ef62-4174-bc0b-f77c7ac5318c",
        "cursor": {
          "ref": "4654765b-f987-44d0-b26c-aa88bb9c91e4",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "32a614cd-6b7d-4bcb-b1f8-f0f2858d1878"
        },
        "item": {
          "id": "22b9e0b6-ef62-4174-bc0b-f77c7ac5318c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cb6a5460-5f88-4937-a7fa-2c23b1167b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4c08b2de-33c9-4ca5-a40d-1df5f118d3d2",
        "cursor": {
          "ref": "40cdbabe-9aa6-46e5-9c2e-334bf9a66b3e",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fcdeb56b-5a8d-4d87-b699-c769a5bcb63b"
        },
        "item": {
          "id": "4c08b2de-33c9-4ca5-a40d-1df5f118d3d2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "223df184-1578-46e0-97b2-3d101c88895d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "a399bd34-36fb-4d59-8234-78f8637625ff",
        "cursor": {
          "ref": "abfd9093-75aa-4b5b-b495-ee9e3196773e",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fc83a73d-9c69-4239-91cd-6284b0361a6a"
        },
        "item": {
          "id": "a399bd34-36fb-4d59-8234-78f8637625ff",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ed26da12-25a9-4d35-b7da-61aa836dfac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "c16df0b2-e3da-4251-b8f4-fe3e4234305c",
        "cursor": {
          "ref": "04ffd3a1-dff7-48fc-81cd-2ef5461c7209",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "27d4f30b-7468-45d1-a3e1-4e515d92ffc8"
        },
        "item": {
          "id": "c16df0b2-e3da-4251-b8f4-fe3e4234305c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0ad77c87-0213-4482-9097-556f704f0e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3a0e7b68-6eb4-4df1-9559-404878a5e013",
        "cursor": {
          "ref": "b1746a30-87d0-475f-9abe-3809a65a9dda",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "61554ba6-9c9b-44df-b5c1-28bc0920dba8"
        },
        "item": {
          "id": "3a0e7b68-6eb4-4df1-9559-404878a5e013",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe6bed1a-f7ad-429f-bf52-cc25a20a777a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "a64d30b6-799b-44ed-8b58-d9ee8675b640",
        "cursor": {
          "ref": "8d04149c-f49f-4eb6-824c-e1a644dc9e6a",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6e016716-17de-4ad6-b0dd-86057d7a6067"
        },
        "item": {
          "id": "a64d30b6-799b-44ed-8b58-d9ee8675b640",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8b7153fe-3bd3-42d1-a72b-b93cab1875f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "c95edd54-30de-4ace-8df7-2849155bee75",
        "cursor": {
          "ref": "93f9710f-ce15-429a-a5c8-a5db3ea31521",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "50af1e1a-8868-4d40-a4f3-08e123ba4928"
        },
        "item": {
          "id": "c95edd54-30de-4ace-8df7-2849155bee75",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "426880da-155c-4670-9590-379c06d104ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1163d4d7-d3c4-47ba-b290-cd05debd1621",
        "cursor": {
          "ref": "e769bbb2-7f2a-4ba4-9aa0-9e0ba8429fb5",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aca1b661-d16d-48b5-9c73-03da8062c504"
        },
        "item": {
          "id": "1163d4d7-d3c4-47ba-b290-cd05debd1621",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ec97ae41-6a3e-4314-aae2-7281497b6906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "0ee94c53-d4a1-4277-860b-6dfeff63ce8c",
        "cursor": {
          "ref": "eb7938ad-f6c3-4afa-bc8c-273ebc7e51bc",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0d31ff98-be78-497b-a47e-7b0cd97f8c06"
        },
        "item": {
          "id": "0ee94c53-d4a1-4277-860b-6dfeff63ce8c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7f7be961-86fe-48aa-b232-f448370d1fd4",
          "status": "Created",
          "code": 201,
          "responseTime": 1719,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "f67c6079-9171-4a1e-a284-bb6a70f6026c",
        "cursor": {
          "ref": "b0012bf9-b6d7-4f3e-a61e-db6063f7323e",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "96c474a7-e451-444e-9bc6-da32346007c2"
        },
        "item": {
          "id": "f67c6079-9171-4a1e-a284-bb6a70f6026c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88cabf90-e002-4028-856e-b2f5bac19937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "631a350b-305e-4acf-a543-fbec76d63849",
        "cursor": {
          "ref": "0f65a727-829d-45d4-863e-8e124a83eaee",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a8499c85-23e6-482e-80ab-a104aae285af"
        },
        "item": {
          "id": "631a350b-305e-4acf-a543-fbec76d63849",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8f275db1-5444-4024-b26b-aec7f972724b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "0f9eb97c-4006-4ff7-95a1-761c57ca6216",
        "cursor": {
          "ref": "ef356665-4acb-40ac-a898-1b5e6d2dd7bb",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "402ce84c-b9e6-4cf4-951f-cf7bb6ce141c"
        },
        "item": {
          "id": "0f9eb97c-4006-4ff7-95a1-761c57ca6216",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "169e592e-bf3b-46fa-be27-d129fc02450d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c55087f5-20eb-4b4f-92c8-f32b962db653",
        "cursor": {
          "ref": "c19752b2-7e20-4254-b633-76432f5207bf",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0f6892d9-a4ad-4e9d-8d11-897d158418e1"
        },
        "item": {
          "id": "c55087f5-20eb-4b4f-92c8-f32b962db653",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "aed840bc-3995-4ce0-8b66-0f8258ae4fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "bbcf1d27-9496-4937-b165-0f0efae4a0e5",
        "cursor": {
          "ref": "dee2f6ec-12c4-4a4c-8e76-1edaf7da1aa0",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "82401bca-a09d-4ddf-add3-7a3c6eb7d29f"
        },
        "item": {
          "id": "bbcf1d27-9496-4937-b165-0f0efae4a0e5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f6487c9-faa4-4cc5-bf3b-242474b6ffa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "b6720576-0ca9-4808-8074-14befd62bcbd",
        "cursor": {
          "ref": "d0647e51-8e09-4746-bb82-26b13d1d0a79",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a6fcbfa2-7ddb-4db6-8a3e-729c83ab3dad"
        },
        "item": {
          "id": "b6720576-0ca9-4808-8074-14befd62bcbd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4fce3167-bffd-4e9f-a3b6-6612c2d33433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "5d2b570e-3915-4782-bc80-d8f1b45a9e83",
        "cursor": {
          "ref": "505e0e66-1fee-4c17-889d-14864bb242ca",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8d785b6b-9f68-4534-9ed2-b2fc007f45da"
        },
        "item": {
          "id": "5d2b570e-3915-4782-bc80-d8f1b45a9e83",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0d38e12e-e6ed-4f8e-863d-8956e551f1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0d6bfb20-8bca-4a86-9712-55afa150a4eb",
        "cursor": {
          "ref": "6fbe234e-14f5-4f95-88e1-34092ce217af",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "704bcf9b-1f78-4b0e-863d-d90bb110f0e0"
        },
        "item": {
          "id": "0d6bfb20-8bca-4a86-9712-55afa150a4eb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8fbc83e2-359c-4315-aa4b-448da94d7466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5ae93447-f53e-4de6-8d62-403f303fd4ad",
        "cursor": {
          "ref": "ac9b250c-f8a7-4c58-8c67-ef50e6585e72",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "609d4d3b-5c60-4f04-a0db-12e3dcbc6b3f"
        },
        "item": {
          "id": "5ae93447-f53e-4de6-8d62-403f303fd4ad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c0d124a5-3544-4d32-abc8-c72673c3aaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d760652b-23dc-4aed-bdfe-32041c1108ec",
        "cursor": {
          "ref": "f8ddebad-8fdb-4f79-8814-9461f131fc94",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f736f0ca-0a21-47b5-b2fa-5c1fb51ce3fa"
        },
        "item": {
          "id": "d760652b-23dc-4aed-bdfe-32041c1108ec",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "846ba114-5fa3-4d6f-ab8a-4ff9bb3389a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3c500f83-e7eb-4158-a851-b7f53d771fc4",
        "cursor": {
          "ref": "beae0b2e-594d-485e-8709-e79274e82cae",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f5bdb04c-1d27-49e2-918c-520bdb9e79d3"
        },
        "item": {
          "id": "3c500f83-e7eb-4158-a851-b7f53d771fc4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ce3c5200-ca01-4a3b-8899-99f76b28f112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "10e7d39a-22e1-4a2f-82b3-4446f61237da",
        "cursor": {
          "ref": "eaad4396-43f7-463b-8040-d32b1f39f809",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d225beff-fc7b-4535-a092-2cb46aafb33d"
        },
        "item": {
          "id": "10e7d39a-22e1-4a2f-82b3-4446f61237da",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8729ff6a-2e5c-47c4-9798-963a85fbd3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8bb8156e-bd9b-4886-ad6d-17a3da4f6bd4",
        "cursor": {
          "ref": "f811d7f0-708a-40a3-a506-cb29f5be1f8e",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "36b2c89e-e1cb-4c7a-92b9-bbaa18c29acd"
        },
        "item": {
          "id": "8bb8156e-bd9b-4886-ad6d-17a3da4f6bd4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "da6e7fa2-3d7e-4491-88e7-a0d9ee1eb1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "0af43a26-0950-4760-b798-2ce04398923f",
        "cursor": {
          "ref": "4c5ae980-779c-4b68-9f62-288511061d9e",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "67593c2e-ed92-47a1-9f1a-672735a3e1cd"
        },
        "item": {
          "id": "0af43a26-0950-4760-b798-2ce04398923f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4de8aa4-4a4e-466b-aacc-337e008fb8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ab3de443-477f-42ec-82d9-861ffc121c07",
        "cursor": {
          "ref": "611fdb20-6563-4aef-8c0a-9b205d038077",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c0dd74d2-b443-49c1-ae21-9a211f87a830"
        },
        "item": {
          "id": "ab3de443-477f-42ec-82d9-861ffc121c07",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dbe991cf-2565-4b0b-9880-d03578f4dbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "35a088f8-df13-4cca-a740-288d36c782f3",
        "cursor": {
          "ref": "cddfffba-740a-423f-8097-645c9e497f5f",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "050305f0-b979-4d9c-86ec-3eab4db50755"
        },
        "item": {
          "id": "35a088f8-df13-4cca-a740-288d36c782f3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b6b562db-37f8-4562-87a2-b872548bdaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a29ccd15-1a19-42ea-bc31-a98b7a5acddf",
        "cursor": {
          "ref": "8b1f1e8d-2e46-4d21-9c00-3e64f3ca77f7",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7bdb33fb-b325-40dc-8f4c-8d63114af96e"
        },
        "item": {
          "id": "a29ccd15-1a19-42ea-bc31-a98b7a5acddf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f663e21f-f522-4827-9427-17c4446f194e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "31b47d21-b7ac-4acc-b455-a9b0456afcec",
        "cursor": {
          "ref": "748fe803-0e78-4766-b92f-237b0b165533",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d638c748-e854-4e3e-b9ee-46cbc84ea890"
        },
        "item": {
          "id": "31b47d21-b7ac-4acc-b455-a9b0456afcec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9ed8f475-e3b5-4b6e-851d-667eeacc11be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "382a9652-694b-4b81-80f9-e0f312a45516",
        "cursor": {
          "ref": "1e366d4f-fcc6-4030-90d1-206728d48f12",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4f720f83-c599-428a-a361-877e7ff53273"
        },
        "item": {
          "id": "382a9652-694b-4b81-80f9-e0f312a45516",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ff54710f-6015-48f8-be62-2968102f3fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "14a057b4-060b-48d6-8a9c-83f33229838a",
        "cursor": {
          "ref": "1447a9b2-3465-470d-aa45-399c076aab4e",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "efcc491e-905f-4999-bcec-244705ba1b05"
        },
        "item": {
          "id": "14a057b4-060b-48d6-8a9c-83f33229838a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2d1dde86-ef32-48c0-82d2-2cd4744d38a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "42a0f8e1-c2a8-4e78-ad8c-34b2aced9513",
        "cursor": {
          "ref": "744e7999-fb8d-4041-9f29-bcf42a01ebdf",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f381e291-d941-4d33-ba6a-c7efbcd22bae"
        },
        "item": {
          "id": "42a0f8e1-c2a8-4e78-ad8c-34b2aced9513",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "239ee9c2-5948-4a91-85a7-3d4b2ffff450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7478abcc-b0fd-46bc-8f37-b857439ecc8d",
        "cursor": {
          "ref": "651d3341-41cd-40cf-8e60-d7d5017fbf81",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e15004aa-5ac1-4feb-9f01-dc24a6900a26"
        },
        "item": {
          "id": "7478abcc-b0fd-46bc-8f37-b857439ecc8d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a856c344-a6a9-4686-8e52-8521d1d72fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d1637014-6030-42b6-a411-254bfd3bb749",
        "cursor": {
          "ref": "70474beb-c351-4f23-879c-f14a769e08b7",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6ec43042-655a-451f-96f4-2bbd81a39e7a"
        },
        "item": {
          "id": "d1637014-6030-42b6-a411-254bfd3bb749",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "48a6e26e-2856-4b66-ac86-55baba9f318e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "df31656c-804b-4a68-a2aa-91206ddc10a3",
        "cursor": {
          "ref": "204be4f6-c017-4100-9e6f-b7213bcf5161",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d9f76fcf-bf52-45e7-89c6-7f8db4a7333d"
        },
        "item": {
          "id": "df31656c-804b-4a68-a2aa-91206ddc10a3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6022b70a-e133-4111-8f0e-35780347918c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "49d1102a-8338-48d9-96f4-a9d40c3349bd",
        "cursor": {
          "ref": "8c6c5ca5-8ea3-48dc-906f-fbb0acbd2443",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "117e3939-06e6-4a9d-a2f2-8c6476205256"
        },
        "item": {
          "id": "49d1102a-8338-48d9-96f4-a9d40c3349bd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ba8bccaf-c8f5-42e1-9811-aa6234c0b666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "055bbd12-b135-4d9f-9eec-bb07e4d9f867",
        "cursor": {
          "ref": "4c24e2b2-7ab9-476e-9223-73ce7a9e7170",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f456ee52-e24f-4e1e-a33c-d8e131d6acd3"
        },
        "item": {
          "id": "055bbd12-b135-4d9f-9eec-bb07e4d9f867",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6e2871c6-502f-4498-8238-04d2c9028c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "abc3d047-7653-4810-bba4-fcb2a3edddbd",
        "cursor": {
          "ref": "ef4b86da-9fd5-41c1-bb1b-a0e2bc764e56",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "611bfd6d-c22d-431a-8f69-fce81468c675"
        },
        "item": {
          "id": "abc3d047-7653-4810-bba4-fcb2a3edddbd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fdb4aca6-5a5d-469c-8057-ce98b1044c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "a7f94320-f9af-44fe-a105-a1626e68658e",
        "cursor": {
          "ref": "b9f521f2-7c5e-4978-afc8-976d5ebf1a79",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "17988510-3f09-4707-9d61-dad6be53a880"
        },
        "item": {
          "id": "a7f94320-f9af-44fe-a105-a1626e68658e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8bdfe61-d1a4-4598-b649-a698a0bd97a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ddbe9344-55b8-4d72-80cc-aa8650280619",
        "cursor": {
          "ref": "c78be551-893d-4908-9813-ad5357859016",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "19aff092-bc96-4d75-a6f0-8f74e403e2f1"
        },
        "item": {
          "id": "ddbe9344-55b8-4d72-80cc-aa8650280619",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b450064e-aef0-4422-9664-713a50cd7f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5225be9a-8e41-4f73-a3db-dc6e5f113392",
        "cursor": {
          "ref": "c64ff731-3824-4925-9c89-8380ba232956",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4dd5d2fe-0ecb-451e-b581-befca07551f0"
        },
        "item": {
          "id": "5225be9a-8e41-4f73-a3db-dc6e5f113392",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8cc1b057-2a35-4b13-8fe5-432ca56a4028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0a4a4a1a-24ff-4d43-9d1b-4a4e7c007bba",
        "cursor": {
          "ref": "35740cea-a233-4864-a4ef-91cb581d899e",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d0202a4c-ffd8-4e4d-bcdd-02f27bc24159"
        },
        "item": {
          "id": "0a4a4a1a-24ff-4d43-9d1b-4a4e7c007bba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "77a0576d-a34a-4c91-a689-80ed8d40ea64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "08bf8f1d-c6cd-4880-a004-55392fb2b4b4",
        "cursor": {
          "ref": "aa376278-1ac0-47ae-90e2-9b27c5a66da9",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7e180150-97f4-489a-acb3-f91016c63452"
        },
        "item": {
          "id": "08bf8f1d-c6cd-4880-a004-55392fb2b4b4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d2e71795-5665-4663-ab93-74298de99150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fa69406e-dfb9-431c-9ed7-7d5efcbacac6",
        "cursor": {
          "ref": "2ee9abe5-8293-437b-bfff-fa010203c97f",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5668c46e-d771-45b7-a12c-9676704211c4"
        },
        "item": {
          "id": "fa69406e-dfb9-431c-9ed7-7d5efcbacac6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "99f085b4-5dcd-4575-8f2f-6d509e562bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1f1fb4ae-d44d-46c1-85fd-13ee67bce1de",
        "cursor": {
          "ref": "8b010c86-c6cd-4897-b269-8f44f5f670fe",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "44a11ad3-0849-4a52-93ff-32e646e9c4ad"
        },
        "item": {
          "id": "1f1fb4ae-d44d-46c1-85fd-13ee67bce1de",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0800a70f-5b6e-4f8e-8012-37f01aad0455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b57af79a-d85c-4bf8-a80b-9784e180ea90",
        "cursor": {
          "ref": "b248eb8b-0c6b-45f8-9421-a4f68f95add6",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "274edc69-34b8-440e-82d3-1bfb24836064"
        },
        "item": {
          "id": "b57af79a-d85c-4bf8-a80b-9784e180ea90",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "14853e3a-1f63-46db-a123-aaa367f8c2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e9ed476a-18db-4233-8216-8f2d935a3c6d",
        "cursor": {
          "ref": "cd549a00-a295-4c3a-8a73-998f496d5bfe",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "269baafa-a84f-48be-bb06-22b345390525"
        },
        "item": {
          "id": "e9ed476a-18db-4233-8216-8f2d935a3c6d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "53b53669-009d-4d49-ad48-472aa59aab75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d70615a7-6ac4-4992-a040-74262a949211",
        "cursor": {
          "ref": "dc84273d-b6ef-49a7-a3a1-0d779984d2f1",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "24454f4a-bde6-433d-a9a7-187c6ad7a189"
        },
        "item": {
          "id": "d70615a7-6ac4-4992-a040-74262a949211",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "347112d2-f427-424b-8215-9018eb40cb22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d3da640c-1011-40b5-8135-bec9696a7fed",
        "cursor": {
          "ref": "40b291cc-2183-4262-b1b7-604864186caa",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45a5305b-8535-4e20-98d8-8bb91404a0c1"
        },
        "item": {
          "id": "d3da640c-1011-40b5-8135-bec9696a7fed",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a26628d-9acd-42b7-b05d-16eb7b257e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "8375ad4c-c570-413b-9366-40d8c9f050d4",
        "cursor": {
          "ref": "e8cac132-aa47-49b3-b01a-7c64decd2fcb",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b86a050f-aae6-4bc3-84c3-0cba384c17bd"
        },
        "item": {
          "id": "8375ad4c-c570-413b-9366-40d8c9f050d4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9d30e698-fbe9-4c8b-a9a4-e99df004ecbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "50700e46-a5ce-4706-9827-e587d0f74b48",
        "cursor": {
          "ref": "f36b161b-ae6c-4440-b8c0-3305e45f7b9f",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "857b5d41-a2c9-46e3-b0a6-088ae80c0ff0"
        },
        "item": {
          "id": "50700e46-a5ce-4706-9827-e587d0f74b48",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f9f7e77b-5146-4a9c-b75d-a3c8b7674ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e787257d-eede-45e6-8a25-b6194a71e2cf",
        "cursor": {
          "ref": "4f3a7b7d-8b76-4064-863e-264134471664",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cbf72b01-e7e5-4a78-b5e5-02ed8e033c88"
        },
        "item": {
          "id": "e787257d-eede-45e6-8a25-b6194a71e2cf",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "78418178-ff45-4539-8979-859dff5ad3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "91bb3d15-c22d-4f7a-aef1-0b607047cd33",
        "cursor": {
          "ref": "4ee344fd-4500-4b52-b0eb-c2335ea4861d",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5b607b12-59b4-4f51-b2f0-6b38fbe5bd8c"
        },
        "item": {
          "id": "91bb3d15-c22d-4f7a-aef1-0b607047cd33",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dcf65582-c779-4a51-bce5-f19685356b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "5fe6cb7d-297a-42e5-b82c-9cfca8a8383f",
        "cursor": {
          "ref": "5425b356-00cb-4167-86fb-b591c8d24614",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8aefc636-3172-4c6c-a9eb-fa755f426e1c"
        },
        "item": {
          "id": "5fe6cb7d-297a-42e5-b82c-9cfca8a8383f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0fd1465b-42cf-432f-b058-f85fbd323371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "63322a80-53ce-430a-b942-06c3850fb866",
        "cursor": {
          "ref": "07442d6f-387f-442b-b004-6533986ff3b0",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d07bce2d-0bb0-4180-ae72-290206b08fac"
        },
        "item": {
          "id": "63322a80-53ce-430a-b942-06c3850fb866",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1b9bd665-1b84-45da-a9e1-88dc05b73232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "9abbda99-b8a4-4341-831d-164fe4701160",
        "cursor": {
          "ref": "f5d39229-b876-44c0-a8ef-87337a178273",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bf75bdf8-8a2f-457d-9530-4f813c6ae0a2"
        },
        "item": {
          "id": "9abbda99-b8a4-4341-831d-164fe4701160",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3902f63d-a70a-43bf-a4fd-00d5eaac826b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "deff662f-afc9-4e75-9a1c-5f6125d1bc7a",
        "cursor": {
          "ref": "8d6f9035-a8e8-4984-b14d-fe06aea31832",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f6889494-89dd-437a-8120-21ac18bf3edc"
        },
        "item": {
          "id": "deff662f-afc9-4e75-9a1c-5f6125d1bc7a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d959200b-580f-4c28-8ecb-e967e971180c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a219f496-a741-4cad-870e-a31a77983648",
        "cursor": {
          "ref": "45d5da1c-4bf0-49f9-b919-8ef3eb277d05",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "61044ac0-b6b1-472a-a12d-bc8ab93e2300"
        },
        "item": {
          "id": "a219f496-a741-4cad-870e-a31a77983648",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7bc88f85-2b52-46cd-b0e3-3906d4e2ab22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c7f20b48-cba6-4161-adea-9c6ad30a179e",
        "cursor": {
          "ref": "91a550de-3ffb-47d4-90bd-f6dd8238597f",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "704e0813-4246-4f6a-8a77-7624076a737d"
        },
        "item": {
          "id": "c7f20b48-cba6-4161-adea-9c6ad30a179e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4c733e4c-2acd-4dd5-afc2-a1dca47f2ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "bafb2806-d4d1-4a2f-92d6-b6cd83293039",
        "cursor": {
          "ref": "b38cc45c-78f0-4ed8-9f98-8e420c49253b",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6a660e1a-7116-4164-a7c8-9ea370db67ac"
        },
        "item": {
          "id": "bafb2806-d4d1-4a2f-92d6-b6cd83293039",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1aefae35-f0c7-4d9f-ac63-e52a165edac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "8eef42d5-148d-4c18-8431-aa60adc89a8c",
        "cursor": {
          "ref": "1e93503b-1037-45fe-9c66-9ac97e7f6ed3",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dfba5925-6b63-43ed-a789-5b2e79e3bac9"
        },
        "item": {
          "id": "8eef42d5-148d-4c18-8431-aa60adc89a8c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f662fd26-238e-4b05-a0fd-56acb3d5374b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "071f6b86-9eb2-4bd3-88fa-7404844a2024",
        "cursor": {
          "ref": "69d80d7f-43d7-4cb3-86a1-2a7e75a9d5e9",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c255bb45-174c-40db-bf19-eb9dd8fde39e"
        },
        "item": {
          "id": "071f6b86-9eb2-4bd3-88fa-7404844a2024",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d2dee579-dea4-4820-9e6a-4e4577ca51d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d0dfd886-3f3e-4b66-93cb-a82abbef5513",
        "cursor": {
          "ref": "11d17bed-54a2-4e6f-979c-732299be00c0",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "de15a893-92a4-47a4-86ed-7e2b06538e9f"
        },
        "item": {
          "id": "d0dfd886-3f3e-4b66-93cb-a82abbef5513",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc988787-41f6-4a5b-9d2b-5360463643ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6756c58b-912d-492b-b640-79989b002092",
        "cursor": {
          "ref": "507be99d-3eaf-4908-b3c6-b3cabdc00a39",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b03271b0-820a-4d21-8956-c42b48a095fe"
        },
        "item": {
          "id": "6756c58b-912d-492b-b640-79989b002092",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c5b9e21d-7dc5-4b40-8876-62d0d8c3da54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "37e0a1fe-73de-4d83-88df-e8d17cd695e9",
        "cursor": {
          "ref": "4a46bc70-8810-4a12-bbd4-8107ddf31415",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6af512f0-0091-4542-8066-0218a211b8db"
        },
        "item": {
          "id": "37e0a1fe-73de-4d83-88df-e8d17cd695e9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "823b6495-134c-49b7-9784-2a133d79f206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "9b47c275-cae0-4e5f-b5a5-849846b8a8aa",
        "cursor": {
          "ref": "f345cea9-0518-44f1-9c30-248758878afa",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c19d0e8f-c134-4a7a-998a-aebdf17390c8"
        },
        "item": {
          "id": "9b47c275-cae0-4e5f-b5a5-849846b8a8aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7421527f-c108-4bfc-aae8-f50ab95ab087",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "0e2acdf0-9ede-4a64-9918-6666a5136745",
        "cursor": {
          "ref": "5e48ee1f-c558-429e-a9ba-13ccf4a32e7d",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "64df67ee-618a-4ca5-ab52-ebb07c1dd49b"
        },
        "item": {
          "id": "0e2acdf0-9ede-4a64-9918-6666a5136745",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "433b39f2-f6a1-4b74-b955-175fbce53c19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "6717d1db-c782-4e62-b83f-1b66f6ea9b71",
        "cursor": {
          "ref": "1d7aa6cc-1577-4d8b-b333-130ee2ecec6f",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7becf94c-080f-4efd-afd5-f51a42772bf3"
        },
        "item": {
          "id": "6717d1db-c782-4e62-b83f-1b66f6ea9b71",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "212b6ac4-db87-4358-9415-58c3f6d750e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6d7bb5dd-d50a-4373-937b-623808db44b1",
        "cursor": {
          "ref": "ab752117-982f-40eb-8773-50c6dc8cb4ea",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "15a7c643-3032-4336-bd29-3d33d44d2ade"
        },
        "item": {
          "id": "6d7bb5dd-d50a-4373-937b-623808db44b1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ebf104a2-ef0c-4bca-bc0c-cb3decc489c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "63c4850b-cd98-45ee-a5c4-cff0d5c50dc6",
        "cursor": {
          "ref": "5de38824-6622-4823-8c0a-be2b246a9206",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "77ebfb4e-0e4d-4c21-aa78-b2ef1a6b2736"
        },
        "item": {
          "id": "63c4850b-cd98-45ee-a5c4-cff0d5c50dc6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a539cde9-b4c5-410c-a2ae-35e5b96a5da1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ea97bff2-9d2b-44b3-aab5-d09c62a386e3",
        "cursor": {
          "ref": "46d89083-f65d-4a51-9bf2-087ada32bae9",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "316d3d80-65d7-4974-bb8a-86c578b4c342"
        },
        "item": {
          "id": "ea97bff2-9d2b-44b3-aab5-d09c62a386e3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "06f34639-2abc-4d35-801a-908fc31bf2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "22fe26c3-8b19-436e-8a39-027e13490852",
        "cursor": {
          "ref": "819f8529-27f1-4c2d-acea-2f3ec217ea0d",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "194e5a57-d805-44a0-b8c1-9397ce56cb83"
        },
        "item": {
          "id": "22fe26c3-8b19-436e-8a39-027e13490852",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "06407ee4-2694-44c0-9211-4b45f7ad03a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "f23a2d03-82a0-422c-8e61-cee91343125e",
        "cursor": {
          "ref": "24bcc43c-36de-4b15-ba27-eccb235afc33",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "97221fed-8c74-4d5b-9375-7c36773a9181"
        },
        "item": {
          "id": "f23a2d03-82a0-422c-8e61-cee91343125e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8a10d739-de38-4bde-b486-6e714a093601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b0412a91-26e2-493a-ad2f-17139a062c93",
        "cursor": {
          "ref": "a05cd842-75d4-479c-a02f-a7f86a5b28e9",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2b1d2c23-9256-4315-8ac6-33897c9ac65b"
        },
        "item": {
          "id": "b0412a91-26e2-493a-ad2f-17139a062c93",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "08dffb76-159f-48e6-80f1-8498eee4ad14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "86d5b136-cf7a-4ec1-8a1f-a1a42a6a8186",
        "cursor": {
          "ref": "9707d7ab-b59d-40a5-b706-b1e69eee4e34",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "edfee05b-fdc4-4ded-8d9d-01e85ac6cbea"
        },
        "item": {
          "id": "86d5b136-cf7a-4ec1-8a1f-a1a42a6a8186",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "51087052-c717-4e27-ba0d-074a1fa7830b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "eede8c09-8a22-4133-891e-a3bb9e9c4191",
        "cursor": {
          "ref": "e7285d82-a19f-4322-abfa-bfb003515c3c",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1c955d87-dea0-4908-ac42-ac7ce6edbe94"
        },
        "item": {
          "id": "eede8c09-8a22-4133-891e-a3bb9e9c4191",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "810be021-3ea1-46f4-a0fa-49b634f1fb1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7d70de45-5bfb-420e-815c-d9d15a237013",
        "cursor": {
          "ref": "b8a45187-8b41-428e-bf18-a9bc79978407",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2f6af9fc-1680-434f-b530-d73bf054369b"
        },
        "item": {
          "id": "7d70de45-5bfb-420e-815c-d9d15a237013",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bab5df0d-59ac-4c25-ba86-ed917821e233",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "d5f135dc-be6a-4ed6-a359-6ab325bae0f7",
        "cursor": {
          "ref": "2fefd592-9cbd-4042-9a53-766709dee546",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "accc6771-a2fe-4e2d-b4ee-7a81625edc6f"
        },
        "item": {
          "id": "d5f135dc-be6a-4ed6-a359-6ab325bae0f7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b78cf5c0-bcc5-428b-9d79-462071a64f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d8d96205-a0e6-43d5-85c5-50d87aecf554",
        "cursor": {
          "ref": "2d971fbf-3cb5-40f6-9b9a-666e3148fdb6",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b5f871b-6be3-4245-a103-52fdca99107e"
        },
        "item": {
          "id": "d8d96205-a0e6-43d5-85c5-50d87aecf554",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1351e6cd-226d-4d90-a0f1-4e24006eade0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "9dce446b-257d-4f34-b2d5-6990b5c9146e",
        "cursor": {
          "ref": "f6b7ea62-f7e6-450a-a08e-68e65cac8925",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8299f21e-873c-4ef0-9e4e-9407c334356b"
        },
        "item": {
          "id": "9dce446b-257d-4f34-b2d5-6990b5c9146e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3d376653-b5d6-4304-9cc5-19ff74f72375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "e9aaa6da-0594-4aa2-95a8-926b0c32f441",
        "cursor": {
          "ref": "a5cd256b-6036-4905-a1bc-5d1e547151bf",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "83697692-4ae2-4fa0-8725-a8290ec9f068"
        },
        "item": {
          "id": "e9aaa6da-0594-4aa2-95a8-926b0c32f441",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "003bbb69-f04d-42da-9056-326f2901cad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "503b6f2a-cfb2-41e7-ba1b-bea6680d2b2e",
        "cursor": {
          "ref": "5014ebe3-d3e7-42ba-b254-62ef4f5beff6",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "74f35990-6d53-4d07-8427-c0f2593a30ea"
        },
        "item": {
          "id": "503b6f2a-cfb2-41e7-ba1b-bea6680d2b2e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "63879bce-1f66-43cd-afb6-d58d475cf981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e967c9a7-ad40-43e4-a7b0-11beb3b1d98f",
        "cursor": {
          "ref": "20b863ab-eeaa-49c0-8627-4de50bdb6f00",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1d78aae7-cb08-4042-831a-80ee77a4d640"
        },
        "item": {
          "id": "e967c9a7-ad40-43e4-a7b0-11beb3b1d98f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b02e8274-48e8-4e2c-af4c-9774f2807ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "44b3c259-a304-4313-b787-4138a8976a67",
        "cursor": {
          "ref": "f613bc6e-e90d-49c4-a721-454f3efd9cd9",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f22f789a-2337-4396-bfba-a9f3ddbf3e7e"
        },
        "item": {
          "id": "44b3c259-a304-4313-b787-4138a8976a67",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7844cc8-4098-4aa7-929c-656120b4ea34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "cb51256d-dde6-4bbe-87d2-a5f5fd6403e8",
        "cursor": {
          "ref": "96ed479f-2fdd-4c87-8578-83c40c087743",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "676d911f-4232-42ec-8897-f85b96ea662d"
        },
        "item": {
          "id": "cb51256d-dde6-4bbe-87d2-a5f5fd6403e8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "91ee44cd-3f1c-4e4c-9981-72c9f55ca4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b2a3d552-e259-43b2-b32d-362fe5931b18",
        "cursor": {
          "ref": "10fd13a7-a517-42db-917d-0a331bd1d27c",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "78112e76-37d9-41fd-aea5-5ddbb78791ba"
        },
        "item": {
          "id": "b2a3d552-e259-43b2-b32d-362fe5931b18",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "dafcdb84-048d-496c-9c90-778fc8e29532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0d3ca662-ef9a-4bec-964d-5baa94d4ed87",
        "cursor": {
          "ref": "a8c7f6bd-63b8-45d9-88ba-150532b25125",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0e93e928-970b-4a4b-887b-786811382ede"
        },
        "item": {
          "id": "0d3ca662-ef9a-4bec-964d-5baa94d4ed87",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "447d7275-c14b-443e-8890-c490c6c0193c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e22da415-cdd1-440b-92d6-b0d32defbea3",
        "cursor": {
          "ref": "ef2fba41-2257-49bb-af77-42e2df63ee62",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "da367ad4-0039-4742-9d42-a40abe772f3f"
        },
        "item": {
          "id": "e22da415-cdd1-440b-92d6-b0d32defbea3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ec5e90b4-e2b6-4d12-9fed-a9c94ca7287b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "0144328d-2c03-4ba0-87e2-5c804b67522a",
        "cursor": {
          "ref": "68987cbf-f98e-443e-90e0-71a961b089b7",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "515a3e0a-9ae7-4c3c-80db-41fa73c6d87f"
        },
        "item": {
          "id": "0144328d-2c03-4ba0-87e2-5c804b67522a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "596161a7-8ae9-45b9-b8f4-13990f62f5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e7a6187b-eb01-4ccd-929a-5535ceb720e5",
        "cursor": {
          "ref": "c1adda5b-1510-4fbb-9857-0cda399d032e",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a38ae768-275f-4a6e-8c65-93d8efae191e"
        },
        "item": {
          "id": "e7a6187b-eb01-4ccd-929a-5535ceb720e5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3341fc85-4be9-424a-942b-e77f14896b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "45097c45-102f-42ca-a484-27673c33267d",
        "cursor": {
          "ref": "5a8bcca6-3bd0-4e16-9994-acf0e458c6f0",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "247e3635-1538-4b72-8686-7c58976b1fa7"
        },
        "item": {
          "id": "45097c45-102f-42ca-a484-27673c33267d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29ffa41a-eaf6-49de-9e0a-b659c17e647e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "77e86950-425d-4c15-b909-e980650a64e3",
        "cursor": {
          "ref": "52d97144-0303-452d-9f40-277a0a11f806",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9c027605-5c62-4621-93ab-ae1c954c644d"
        },
        "item": {
          "id": "77e86950-425d-4c15-b909-e980650a64e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f10841b2-8faf-4161-8d44-5327a3a9e606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "209b4b44-3ffe-4735-99ab-93eb11f23262",
        "cursor": {
          "ref": "c4ecbfd0-a911-4293-b819-8e88949d4b89",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a9de75a8-c336-484e-a013-d6c1e537d201"
        },
        "item": {
          "id": "209b4b44-3ffe-4735-99ab-93eb11f23262",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0ec4d9c7-2a07-4399-b6e0-fcfed75b5745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "31af0b12-27a3-437e-9ecf-611ff643b3f4",
        "cursor": {
          "ref": "9461dace-b86d-4385-be49-0ffc027e5906",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af762ac4-43a6-4343-aa40-f4f132395d4a"
        },
        "item": {
          "id": "31af0b12-27a3-437e-9ecf-611ff643b3f4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d6f8c0ca-92ca-4273-841f-f326ba197b4e",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c60b49ba-57a8-43dc-a97c-9cd0edb52760",
        "cursor": {
          "ref": "52ea1187-2c64-445b-9dde-026e6b4c90bb",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "86dfee1b-d106-42a6-83fa-440d16f7f1a3"
        },
        "item": {
          "id": "c60b49ba-57a8-43dc-a97c-9cd0edb52760",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d702578c-efd7-4aaf-a477-306769682e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "810c0eea-4eda-4ebb-b1a4-485e290eb0c1",
        "cursor": {
          "ref": "858c428a-d893-41ab-a139-f7b92853555c",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b3dc8dbb-613e-453c-83e4-776102213d14"
        },
        "item": {
          "id": "810c0eea-4eda-4ebb-b1a4-485e290eb0c1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9e054023-7297-40f9-9360-565db8fc1951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d19dda00-697b-4dbd-9ce7-e8226d9ad185",
        "cursor": {
          "ref": "713c1433-40f1-4a36-a535-4ad0fe774761",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "61ee1e4c-3e5a-4aff-a3dd-b91eaeccbdc3"
        },
        "item": {
          "id": "d19dda00-697b-4dbd-9ce7-e8226d9ad185",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4eea97ed-1c29-4d09-bc45-f9d527217d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bf9f3455-7625-458b-93b1-9f1607616860",
        "cursor": {
          "ref": "03b8f2af-1af4-483b-97de-f8d65329af0f",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "026c6e35-17a7-493a-82f8-337f3aa33a4d"
        },
        "item": {
          "id": "bf9f3455-7625-458b-93b1-9f1607616860",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f703da55-d7fe-4042-8990-b0a3944f689b",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8f89d75a-ce21-4b0c-b3a8-2edecab254c2",
        "cursor": {
          "ref": "35f6c750-0e11-4daa-8ce7-13c407b6129c",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f08b43b0-9821-4cb9-9cd8-d0cb77d27032"
        },
        "item": {
          "id": "8f89d75a-ce21-4b0c-b3a8-2edecab254c2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9c93a468-9894-4439-8ef7-04f3911e8442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "bf1b1e76-1794-45ef-ab03-f20b308e3ab1",
        "cursor": {
          "ref": "b05881cf-19df-4764-a1ad-e90681e2f7a1",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bd317dc6-b595-42e8-8521-2440c57df66d"
        },
        "item": {
          "id": "bf1b1e76-1794-45ef-ab03-f20b308e3ab1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "11c50823-f01f-4dfb-aa2d-538756fa05ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "63533821-2f9b-4144-abdd-2bae9972d80f",
        "cursor": {
          "ref": "8c094265-cbf0-4102-8081-d3e393b5e4b2",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "146b6475-0766-4d85-b7c2-06de571430fb"
        },
        "item": {
          "id": "63533821-2f9b-4144-abdd-2bae9972d80f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ab935025-b6fd-4bc3-ac77-1a25f42b3320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "4aacc734-5621-41d6-84e2-4303247b277c",
        "cursor": {
          "ref": "43da01e8-60d5-4c03-8142-4aa92e7137e6",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "44ceda0b-c18a-4eec-971d-b277cc182412"
        },
        "item": {
          "id": "4aacc734-5621-41d6-84e2-4303247b277c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7f204481-8137-4bb7-b83f-905c0115db1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "7f4f62a0-5713-4187-8e44-c74151f8ed3e",
        "cursor": {
          "ref": "7e7a0c78-e8bb-4507-bb83-82f2cd8eb0e7",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8b7395fd-eed2-4446-a862-d7d8ce53f42e"
        },
        "item": {
          "id": "7f4f62a0-5713-4187-8e44-c74151f8ed3e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "62dbb779-5dd0-4f3a-899d-416b731df36f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ba6bdd9d-785f-49a7-aef1-678e52f04213",
        "cursor": {
          "ref": "1b2e159e-c9c1-4609-92b0-9a23c7ae91ee",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "54b1c22f-8efe-4ca3-aad8-4e8c6ccad519"
        },
        "item": {
          "id": "ba6bdd9d-785f-49a7-aef1-678e52f04213",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "db692dfe-c923-4ef6-ae8b-6b10791fd8c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "cabdd173-d3cd-422e-8aff-c41de48765cf",
        "cursor": {
          "ref": "37a8557c-1999-4f8e-899a-56d12c3fe42d",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "074dc657-368e-4db8-b648-83a6b84e07a3"
        },
        "item": {
          "id": "cabdd173-d3cd-422e-8aff-c41de48765cf",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4e9966f7-1998-40cd-937f-4b4a3b248c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bb997650-1ebc-4868-a5c5-5bbaa984e69a",
        "cursor": {
          "ref": "1373a224-5cd3-45e0-b285-734daa8fc15e",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b111e62b-eb56-45f3-9ebe-0d6af50cf7cc"
        },
        "item": {
          "id": "bb997650-1ebc-4868-a5c5-5bbaa984e69a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cf7b2901-6221-4363-8ce0-aef5ffa37610",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "92cfb06f-0958-4e40-a1ab-05fb3faecfdc",
        "cursor": {
          "ref": "06278ff2-6748-4500-9585-d252a2692c52",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e5e3df1b-2992-4762-b5f3-037ac0c011c8"
        },
        "item": {
          "id": "92cfb06f-0958-4e40-a1ab-05fb3faecfdc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1aa6dd06-d36b-44c1-b863-090a3cc4264f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "35efb831-6d79-48d7-b4f5-dec285e9798e",
        "cursor": {
          "ref": "b3880105-8dc7-4e8e-9143-17bb746ad4e9",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35913ced-1766-4737-8715-32777da75117"
        },
        "item": {
          "id": "35efb831-6d79-48d7-b4f5-dec285e9798e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cfdba349-6f62-4f4c-bdd4-b27c9f6bef05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "f4f52870-f8e7-4b4f-94d7-329053db2741",
        "cursor": {
          "ref": "97b62a66-df1c-45e5-a0e8-5ec18aaafa02",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b150fced-15dc-46be-8a64-79e7a8f87e33"
        },
        "item": {
          "id": "f4f52870-f8e7-4b4f-94d7-329053db2741",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "955b3575-b78c-4bae-9b76-5f21a5f40b35",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "fa075c7b-e206-406d-aeb7-37a6a48e2872",
        "cursor": {
          "ref": "5d3095d3-b7b8-4c44-8544-9d3973a3fabc",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9a4e8d35-6d8a-49d1-a858-bad679d8e545"
        },
        "item": {
          "id": "fa075c7b-e206-406d-aeb7-37a6a48e2872",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8f87200d-b871-4790-b477-cee28ca3d54b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ea45bdf0-529e-4f72-aace-b60919f67887",
        "cursor": {
          "ref": "fc226f6d-0379-4972-a64c-23ea5c01d6e8",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8401f108-dbf1-404a-bf08-1a962764a93d"
        },
        "item": {
          "id": "ea45bdf0-529e-4f72-aace-b60919f67887",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "998ee56b-43f2-4cdc-b7da-4aa0b8486265",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "c621c2bf-2cf8-42d2-868a-aa870a9a723b",
        "cursor": {
          "ref": "cbc503fb-de32-40a5-8346-c56afce593af",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7750c566-20ae-485a-8a52-1f9c5462b47d"
        },
        "item": {
          "id": "c621c2bf-2cf8-42d2-868a-aa870a9a723b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "40fb8068-47a1-4262-b2f6-5c65b2a70ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "01f9b131-400b-4073-a5a6-e800769e7d42",
        "cursor": {
          "ref": "82b37d4d-cb10-4943-86bd-7edb7d26cab4",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "370814ef-ecfc-49bd-806e-7c075690183a"
        },
        "item": {
          "id": "01f9b131-400b-4073-a5a6-e800769e7d42",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c0e4d557-3e1e-4747-a0c2-4271c1dcda78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a64622e7-218b-44eb-910e-766b4b0d22e7",
        "cursor": {
          "ref": "2b19a16f-560b-4cd5-8fbe-d806a4590753",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fcb21887-fcb5-410b-a46e-a080ac9142a9"
        },
        "item": {
          "id": "a64622e7-218b-44eb-910e-766b4b0d22e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a20867d2-29d5-40cd-a1e2-545f99271c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6f028137-0de3-434d-9bc1-a82b7eafd6a3",
        "cursor": {
          "ref": "c0576195-0ec6-43c2-a92a-a3287ebc1224",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1d18b6f8-6a4f-4c8d-9406-fed35bd3e879"
        },
        "item": {
          "id": "6f028137-0de3-434d-9bc1-a82b7eafd6a3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5a5a99e4-0a58-4c64-b031-4b021eae9604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "05840b3e-667b-4e59-b5da-a35365d20702",
        "cursor": {
          "ref": "2916faf8-f605-40f2-8332-b20b7d5cb110",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a26309f2-4c93-4d3c-a2f4-2da5a3592986"
        },
        "item": {
          "id": "05840b3e-667b-4e59-b5da-a35365d20702",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "126299e4-9198-4dbd-a622-bfe05e4489f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "29af0c6e-3b46-426b-a492-c44bb90cb4d5",
        "cursor": {
          "ref": "76ec1511-3af0-4529-b3b3-411f2182fa42",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f4ceb5c2-8f44-4b3d-a24b-ee61ee527d05"
        },
        "item": {
          "id": "29af0c6e-3b46-426b-a492-c44bb90cb4d5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c916c50b-286b-47fb-894a-94de8974e975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f8b58cce-388b-472d-af91-27c044ab2c95",
        "cursor": {
          "ref": "b7feaa51-23e3-475f-9bdc-d59781093cd6",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "74a91b5a-aaa9-42e5-bb2e-542c7c41e62d"
        },
        "item": {
          "id": "f8b58cce-388b-472d-af91-27c044ab2c95",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5749335d-66db-49ce-8400-1f8033cff5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "f1a18fc9-ca02-40b2-a18d-0141b66b5e50",
        "cursor": {
          "ref": "b061d4f9-754d-4b03-b568-b7363f19f3db",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8e8a5180-8a45-4e71-984d-aab89bcc633d"
        },
        "item": {
          "id": "f1a18fc9-ca02-40b2-a18d-0141b66b5e50",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "238f2da3-6406-420a-8fd1-814ce993de0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "b9e0bbaa-cae2-44b3-91fc-d1d632fad885",
        "cursor": {
          "ref": "991d66cd-51ff-47cb-b041-88a0ecafd0c0",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f48d6270-3b8d-4b46-96e4-b350bacb8c8c"
        },
        "item": {
          "id": "b9e0bbaa-cae2-44b3-91fc-d1d632fad885",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5d20d25e-3f69-4a44-a64d-62c075dc4402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "fddef859-57de-4046-9069-f15aa82c3856",
        "cursor": {
          "ref": "f374b5fc-adb3-4776-addf-570071f08981",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "064c2075-de61-4df6-a40a-2b6506e952d3"
        },
        "item": {
          "id": "fddef859-57de-4046-9069-f15aa82c3856",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4465be2e-e121-4bd3-9834-6f4b456a6358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "227f5c7d-1f19-43f6-8508-20141e865a2d",
        "cursor": {
          "ref": "fefaa750-cb6c-405c-ad1a-a6ae6ede808f",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5504d81e-f533-440d-9b27-61762abe20dd"
        },
        "item": {
          "id": "227f5c7d-1f19-43f6-8508-20141e865a2d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7007dc39-a8d8-45f4-a66e-5cbbbc3381fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d484f42e-8a54-41dd-a496-40395fca5f8b",
        "cursor": {
          "ref": "18c3cf8c-2fa8-4575-8a6c-a67642ddaa7b",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "20dc1728-3836-4333-89d7-f311b6509938"
        },
        "item": {
          "id": "d484f42e-8a54-41dd-a496-40395fca5f8b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "48458894-1b30-4206-a0bf-2a42a95e9c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c2243e75-1d66-4ff0-9bb3-04e942bc3f1a",
        "cursor": {
          "ref": "93e6264f-0504-4453-93d0-864d720f238d",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "759fd399-fec6-42de-91ec-b854eca48d57"
        },
        "item": {
          "id": "c2243e75-1d66-4ff0-9bb3-04e942bc3f1a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5a9db712-7dc0-494d-82d4-3a44fcb5614f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "21220074-7f21-4377-bba5-3c8ed52d934e",
        "cursor": {
          "ref": "ef4cb5a3-a346-4a76-8c59-ab5df7c5684b",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "201f083a-b92a-41d5-86d8-9c092032b7bb"
        },
        "item": {
          "id": "21220074-7f21-4377-bba5-3c8ed52d934e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1c357730-2ef4-41ba-ba37-d91849330f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4d68c179-6b77-49a9-80eb-97ba9d83ef0c",
        "cursor": {
          "ref": "9e9f4c66-68ee-4d61-902a-8d95a315e6a5",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "75527e62-3542-4824-b48e-ebf83acc3e1e"
        },
        "item": {
          "id": "4d68c179-6b77-49a9-80eb-97ba9d83ef0c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "33d38147-8df1-44a4-8f71-40a96b4df4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "15ceb118-7442-4657-a2a2-019da8e5197d",
        "cursor": {
          "ref": "cc296da6-b886-4b17-ada5-7ca22834b30b",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a31fd4c7-9e66-4d08-8b55-f88437a151e5"
        },
        "item": {
          "id": "15ceb118-7442-4657-a2a2-019da8e5197d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d526a7e8-1d86-485b-a800-1361866a853d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2670c2fd-7ae5-4fbe-95f4-d790adf84ffe",
        "cursor": {
          "ref": "480d2228-8b00-4c3c-80fc-b1fc70281ecd",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "088a7703-ce2e-4c27-8bd1-8e8da73226db"
        },
        "item": {
          "id": "2670c2fd-7ae5-4fbe-95f4-d790adf84ffe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2a2b435c-bd01-42ec-8e87-ec1a110ddbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "47f24337-7708-4f19-a335-46f233e68e3c",
        "cursor": {
          "ref": "c1a6d16c-5082-480e-bec5-7f01e60fc6b1",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "41a9e94e-9378-41af-b881-73fe57dc4c5d"
        },
        "item": {
          "id": "47f24337-7708-4f19-a335-46f233e68e3c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4fa067fe-8a9b-4896-a23c-d0b14bdefe7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "61908dd9-8258-47e9-abc5-fd330159f4fe",
        "cursor": {
          "ref": "5c8b1966-2764-4c23-a6e9-76a4609e4f41",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fa5bb309-26d5-4679-b25a-e064e3a79776"
        },
        "item": {
          "id": "61908dd9-8258-47e9-abc5-fd330159f4fe",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "da6ac812-516a-4f97-81f5-4cfe0d17efeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f388d850-53c2-492f-bd70-e41c6276699c",
        "cursor": {
          "ref": "c2778529-f0cf-4073-9340-b239f72980a4",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "507b1c2c-0167-41aa-8cc1-3ed7176cebfc"
        },
        "item": {
          "id": "f388d850-53c2-492f-bd70-e41c6276699c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "33404a88-3088-4f17-b9b8-274d5beec2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "627ccb54-832b-4379-b44d-3e196c04175c",
        "cursor": {
          "ref": "9e251c74-9526-4c7e-9913-e12bd5e87e5f",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c62f65fc-1796-4979-bcc3-2bf40a8aeab2"
        },
        "item": {
          "id": "627ccb54-832b-4379-b44d-3e196c04175c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f29aab15-35e1-4c99-9f45-ea113b2d08d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2ba9a9d2-a4f8-47eb-beb9-b2458d54c7cc",
        "cursor": {
          "ref": "9b000baa-40ca-4003-a28a-5d79546c2f65",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "023caf35-e70b-4d16-a199-7e3c68fa55b5"
        },
        "item": {
          "id": "2ba9a9d2-a4f8-47eb-beb9-b2458d54c7cc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4da3a50b-96c9-464a-8ea0-5ad9e7a87d92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "59e6a235-08df-4581-8708-d57f56b8df2d",
        "cursor": {
          "ref": "4f26f7d4-51e4-4417-bd50-63e8685c8bff",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5c88cb15-baf1-457b-a2a9-159a6cc98f29"
        },
        "item": {
          "id": "59e6a235-08df-4581-8708-d57f56b8df2d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9a3378aa-2fba-4043-bb32-d510eb77e14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "1c41c56f-31a1-4985-8fb0-193cfe8767f2",
        "cursor": {
          "ref": "5e3007c8-4c22-4d70-be9c-265e6eadd650",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e4eed9fd-bb77-4649-945c-82dbec20c1e0"
        },
        "item": {
          "id": "1c41c56f-31a1-4985-8fb0-193cfe8767f2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee44bcbf-038f-4414-b356-34771cb18654",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "6155e7b8-2358-4bd0-8701-9d395da7a8b2",
        "cursor": {
          "ref": "6ee5d2f9-ac5a-478c-bfa9-9d15719c50b2",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fb5ff574-3f24-4cd0-b530-20af17a6d930"
        },
        "item": {
          "id": "6155e7b8-2358-4bd0-8701-9d395da7a8b2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa272015-0cd3-4ee2-9e82-4be7bf3289ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "9c69fa39-47cd-45c9-80b4-2308aaa47043",
        "cursor": {
          "ref": "6c6476f6-f2ec-4718-9f73-2104346e8bc6",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3013b0fe-b789-4921-b11f-d20e3e5de326"
        },
        "item": {
          "id": "9c69fa39-47cd-45c9-80b4-2308aaa47043",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f03a68cf-f1b3-454e-81e3-338ede8ee8e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "3f4c9e03-d812-4838-90f9-1395c089f95b",
        "cursor": {
          "ref": "069b5498-0d23-43ac-bc1b-7a10b3ebf112",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "86255730-bf2b-4f39-a2b2-81925315bf65"
        },
        "item": {
          "id": "3f4c9e03-d812-4838-90f9-1395c089f95b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f5a08192-f006-4989-b9ac-f4057eb553b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ef48bb9a-2f38-4fe8-9090-8b4ce1adf3f2",
        "cursor": {
          "ref": "be919199-dc78-4f2d-a5b7-613a94cea377",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b2dffd6a-a63e-46da-9368-d5755d0bb2b2"
        },
        "item": {
          "id": "ef48bb9a-2f38-4fe8-9090-8b4ce1adf3f2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eb11c44d-0da9-48ee-82a0-09e9ea464028",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "c375e864-c651-4a29-a1e0-124159be9708",
        "cursor": {
          "ref": "71072ef9-2a95-482c-a085-e0f5bd8f3849",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "218cb1fc-fa00-4466-9c4e-f1d634fefa17"
        },
        "item": {
          "id": "c375e864-c651-4a29-a1e0-124159be9708",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "77ee1f9b-59b9-45d9-b09a-a3a7f544d40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "4c70fac6-2c8d-423b-b004-efdfbab77939",
        "cursor": {
          "ref": "7d04b5fc-3d76-40f2-a1ee-671d608fb249",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0caaad16-7c78-49ee-b173-0836ceee1463"
        },
        "item": {
          "id": "4c70fac6-2c8d-423b-b004-efdfbab77939",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e190f8ea-9767-40cd-a661-1b32488dd50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "317a1ef4-af46-42f5-940e-f2c2e444ce28",
        "cursor": {
          "ref": "8d197541-609d-4372-a813-bbe098014497",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "80ca6df2-8e96-4584-8b83-368deaec4b9f"
        },
        "item": {
          "id": "317a1ef4-af46-42f5-940e-f2c2e444ce28",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b62a69b7-c07e-4ac2-a2a5-3e722ac74c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ad9fbfc2-22f9-4636-8ff9-8c8b675ea613",
        "cursor": {
          "ref": "d942436f-66e6-45b7-ae64-393d22648a38",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bb1e17fb-bf04-4fd4-98ee-b285e88cbe47"
        },
        "item": {
          "id": "ad9fbfc2-22f9-4636-8ff9-8c8b675ea613",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "408101dd-25e9-48aa-96ff-6390e685e91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "8a1904ab-8ac6-4754-87e1-86a5d8549670",
        "cursor": {
          "ref": "5ddb647d-f163-4906-a794-ff3a7df92a36",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "57c93ff9-f27a-4a9b-8780-01c0a4c87af7"
        },
        "item": {
          "id": "8a1904ab-8ac6-4754-87e1-86a5d8549670",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "effc9f58-ee96-42b8-b694-e1bca6f98b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "60cc0a7d-8682-4169-80a2-230f14d92d14",
        "cursor": {
          "ref": "3a75480a-04f8-4efc-82aa-b394589617da",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "610841f6-89d4-4487-963d-dfabcf886d62"
        },
        "item": {
          "id": "60cc0a7d-8682-4169-80a2-230f14d92d14",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "eb159719-05a8-48da-9072-3ededbef31a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a1e55493-3742-4621-b5ca-4948b2875baa",
        "cursor": {
          "ref": "79a167e3-0811-4c18-a906-5a64357ba904",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a304d02c-ccfa-4bd5-b573-35e3e5f3acbb"
        },
        "item": {
          "id": "a1e55493-3742-4621-b5ca-4948b2875baa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a9b83c59-12c4-46fc-9ce5-fe3b3bd89f40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dc3b8d76-9e92-4602-aa08-592ab6879c1b",
        "cursor": {
          "ref": "aac19554-ae91-42d9-a0ee-4b95951b1ed5",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39486005-607d-41c3-b08a-74b83e6a765b"
        },
        "item": {
          "id": "dc3b8d76-9e92-4602-aa08-592ab6879c1b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6fd8d9fa-dd75-4ff6-a3a5-8a257f33f834",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "5884f0b7-3f1c-43ed-8c63-88f0553b645f",
        "cursor": {
          "ref": "779c7b99-3d10-495a-a65c-b8ba3580ee05",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "28dbe386-e6b6-4a68-8dee-07a64db065ef"
        },
        "item": {
          "id": "5884f0b7-3f1c-43ed-8c63-88f0553b645f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0d023641-aa29-4c95-b007-352b8dde0955",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "64d3d8c4-577d-4f51-8d9d-bfc4a1831fe6",
        "cursor": {
          "ref": "6bb0535c-f268-423d-9309-4b3450ea9e78",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9c203719-9b34-4dce-924d-718e119ee834"
        },
        "item": {
          "id": "64d3d8c4-577d-4f51-8d9d-bfc4a1831fe6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6f4abbb2-c5fb-45bb-a66c-43ec39d33627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "9b26ef88-b5a0-42c3-b655-3720e885ffe0",
        "cursor": {
          "ref": "3aab901b-e175-409e-a689-5076907d6d35",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c019963e-82fe-4df2-a26b-cc9518a6e9ed"
        },
        "item": {
          "id": "9b26ef88-b5a0-42c3-b655-3720e885ffe0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "042fafb2-a591-4c9e-872c-e26a41d11b7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9b26ef88-b5a0-42c3-b655-3720e885ffe0",
        "cursor": {
          "ref": "3aab901b-e175-409e-a689-5076907d6d35",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c019963e-82fe-4df2-a26b-cc9518a6e9ed"
        },
        "item": {
          "id": "9b26ef88-b5a0-42c3-b655-3720e885ffe0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "042fafb2-a591-4c9e-872c-e26a41d11b7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "08ab8831-6575-425b-9e38-278eca3ee968",
        "cursor": {
          "ref": "d0148c61-29e3-47c8-9659-1a9edfd39a16",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "02593da3-c8d1-4fe8-8cea-98946c3551d6"
        },
        "item": {
          "id": "08ab8831-6575-425b-9e38-278eca3ee968",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dacfac15-86ce-4507-8dd3-7fb869eb0502",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "9512836a-bd67-4471-afca-72c1baa71714",
        "cursor": {
          "ref": "b3e40412-fa26-4161-a311-88ece737b19c",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4999281a-dba6-4772-9914-d6e2f682d11e"
        },
        "item": {
          "id": "9512836a-bd67-4471-afca-72c1baa71714",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7294e5de-d5f1-42ab-8762-935860eebd93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}