{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1b823c19-771b-41e1-8f5e-8be6ce223030",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8ee131da-7ac0-47b9-8418-5e3b12efa43a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "948cb035-b5f5-4fd3-b1e6-65bb1ac655bb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f562aa1f-1549-4c80-a461-80bc49f8aa79"
                }
              }
            ]
          },
          {
            "id": "311779d3-274f-4e1c-ab1c-b2264c99d4c8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "37922ac6-7505-4892-8111-ad1f30b386a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4fe8bd14-5061-4aa1-845e-08aab5d2df51"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4df6e388-814d-4a99-ae2f-c27afaa81b1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4a4222fe-a235-4d00-9c78-034d9e12d404",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d32f7078-f989-43b2-bb97-e55cb794c485",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb039a1a-6352-411e-99a2-efa2adca95f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2eb0677e-b944-4ff2-a0d2-43bac20ebbb8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "757a12e6-f302-4ae0-a699-1a389cdc87b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5ec97fa-1de5-4c21-8c42-9112f6370448"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8f02f10-dbad-4982-9a00-95958392bbe3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3760df32-a29a-4e91-bea1-8cd88cf93d83"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "571d2df5-9eec-4d91-a5a2-4758d44e9abb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3658860a-88d6-4f9e-af89-43440814fdad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7cb302e-5a13-4a56-b0a2-2dbcb1151fe2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66fea55b-b3b1-4b43-9bc7-fa9a9a137eff"
            }
          }
        ]
      },
      {
        "id": "86e11c73-e360-4b6d-9071-4731e81ed1d0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "85b10ff9-27b9-4749-80e8-e26e1c93c8cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e84fb361-42a7-477d-8cc8-caa8c88fe9ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0cb5a32-e90c-43df-a6d8-8ce764d4e300",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ef4a26-1236-4823-9c01-59b4fcbfbafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edf5767d-8793-40c5-87ce-0b7062b03e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fff7be4-edd8-4c65-8726-12638e04f63f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0685e6-0a00-41d0-b0c0-6a40b4bc82be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "626e7262-38ec-408c-881d-7380b6bad57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a3e936-4ef6-4378-9787-0f8d28351c7b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ae5a2-031a-4a11-bb2d-e1376021751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a37d59ca-de16-4d0e-a609-a0a4cc327d80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b992562c-3df8-4f53-90ad-c39189314755",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "438dc2d8-a73e-456a-a803-ae3efc847f5e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85c22e9-9e88-449c-bfab-9de13491e9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a238b96-8e2e-42fe-bfe6-f135aec3390e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bdc8d8-8feb-41f6-96a8-77fb8cebebf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfa910a-3766-462e-8162-a6bcb50f87d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "329ace47-3dd9-47c0-a066-af9987173be7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2330918c-34fd-4fc5-b0ec-fda0057d34a6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e24ccf90-a553-4c8c-8e61-e6f07d9605ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "87543888-080d-460d-9b59-85f90a6dd83d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba707851-3228-4a3b-a270-88b2daba9f6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ec19ae3b-04a7-49e1-bd78-8a3d4a5b35db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae7188d8-d1cf-4c08-a261-06048a3d9cd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e5a253c-950e-4abc-8fd1-06e37f49fb0c"
            }
          }
        ]
      },
      {
        "id": "2e54485b-adc1-4c08-8eea-f626a4cc2893",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6c496762-7637-4a7c-a17e-d2f51859e08c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1763ae1-c667-4a3a-8f88-5b68f6fd938b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "06ec2b34-0556-4214-ba68-c0e0194b3599",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3f7fea-3db2-478c-b9ec-5341dcbf7370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0700e02-7211-444f-9b85-4dbfbbcd5213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c026e3-be7e-47b0-be7f-ba3c0dc076ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "871fa0f4-8edf-43ce-81cc-d559ec496be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfb4d28-db59-41a5-bcea-ed29717c05af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016fa141-b47f-4d9e-b3bc-05c44247b885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac482be6-59d9-4f5b-9283-ed34bfdae560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeaadb8-646a-457b-8fa1-89a7e2c6cff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb931d1-c472-472b-87f7-f2586de921b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931970a8-07ed-4380-836e-14eecc6a9fdf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441835ef-fb92-4cfc-a875-fad547218c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c34911a-3c99-4fcd-a5bb-70881f4e8108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32c7da4-2f53-4022-b727-17115d3ccd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c45c50d1-fe5d-4369-b693-3b48326ccb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817c8d57-8bc3-4156-a30f-7288cd19dd5b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7535e8cf-8662-4685-bf00-1e58fcc1ff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c8e665-6aa1-45a0-9428-1fc6e544d58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d832da9-53be-4034-97b3-9e88a7e6fd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dbd59c6-f537-4927-9a23-7cca05890021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080b5c71-f293-4858-a5db-2d2e4e8362e2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff141e6-d816-4446-993d-b7480d32063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3a5cbb-3de8-40e7-881b-8ba46d9fea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c921dabb-6d8e-423e-b9be-aa84a54c39c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebdfa82f-579c-4b34-a95f-aa50dab4e33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0896bce-f8dd-469b-a184-13454352b06c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7c8c24-be1a-44c7-884b-44f50f7c55fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c3af40-3031-4db3-a576-0e664f4a45c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47246a3d-4186-4662-9827-f88e6c20c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fc906f9-e94d-48d8-ac21-4842b72e70e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3cf6cc-4b0d-4c36-982b-8011bc0924d2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cbd366-23cb-4373-a487-fde8fe309a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35266cd9-5fd7-4d20-9fbe-1afc034d140d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc8d7d2-ed93-4a88-9f1e-6d09ab82014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8e40a4-dd17-4c70-af4d-4199c2eb61bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e4e0ea-c5e3-4e36-bc88-84b9de6b8ae9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f0a4cd-fd78-405f-93f1-ba7e498dd129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2173d8-a99f-4459-b8a2-3cfe15a6f688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0707179a-e7b8-42f4-8f8b-929883b5eb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb2d09bd-5805-4111-b33a-1a0e61a54312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651e77a7-636b-4f31-a39f-f72b093ccedc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9281eca3-d0fd-490a-92ac-fd61f39a09f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311a3d72-aa5f-4bcb-a0e3-46f4abb7c011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39265d53-0302-4cd7-bf73-1eb6fc197175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1aa7485d-6830-4b2c-a35c-f51a7bb32001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adaab122-6396-473b-8ddf-bf3f89d1d26d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a160ad-305f-46b1-b1c2-6c1873e1946b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a33c1e1-cade-42d6-92a6-de348bec8f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4ce659-ac97-4c73-9fc6-753b8b601563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79525114-4565-4f92-a7fe-8c3f5aff8d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd96e81-3e0b-4a5b-b09b-53233bd08574",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c4cd34-804c-47fe-bb50-4325de6c7f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec778252-a063-4d5f-87ef-59af6092c7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b2a7e6-b068-41e5-ad3d-46fec9e09137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03216392-369f-4e2f-a7a1-fbf7f8a5036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0df2d0-b863-48eb-a150-1a2c32d685a3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b09af42-b629-48c7-b23d-3247cecaa801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eedbc42-d7db-47e0-91f6-d998998051c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a18275-4cfd-4221-b810-edef2ea92ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89f76993-2670-493c-ae11-a3e7c62fd742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cc49d2-267c-4668-8d44-a4abf3706907",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaaa41d-7d6f-4b1b-b60a-8c2afa615303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1da2da2-b827-451c-8957-9c7f846e6086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d38fc4-b5c8-4c2d-813b-dedbac482da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36bff1ae-822f-4acb-b9aa-17c3b6f70add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd9163b-dab2-4f5e-9b87-d41594f8559f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec86fda7-81da-4093-8be7-1e0140691298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83129b1-59ff-4145-904b-1e550ef691ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9423994-428c-428e-91cd-767fe5922e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d54674df-5691-43f6-9707-8b3eb47a5b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5629c5ab-c6ce-44a6-9f32-96dc82d2b529",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4df645-9b24-4935-85e1-93ee8130045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553820ec-67af-4a69-b25b-a102d208276a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c33f448-18d9-4735-9149-0083e20ddfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4efb9d3a-8ab6-42c6-b61e-9f8b68a7e23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b5995d-0a8e-4664-bb0e-cea522bc0a42",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6f13ac-e52d-4eb0-bfeb-06eac703eb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c090b9-e7eb-4190-b8e6-1291c7e6667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b67180-6469-4ca7-ac9f-d0a19c19491c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19892fa8-7401-41c8-af63-bf80ffe52cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66bb9d6-a928-4dba-9675-191aa16ce17e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7196fa-05c2-44c1-8d71-764ea68c484d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1a208a-e213-4180-985a-c5cc1ea55112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3190a3-fb11-4962-9470-ebc63c539717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f93617c8-4763-495a-8c58-758a3d739759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf70a5f-92fc-4a9b-934a-a3331279e55d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a403cb6-3d75-4f17-931c-a4cb2b0eca43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46214026-f2be-4034-928a-a1d56f759e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347dd116-10bc-4f20-afdd-698dfecdacb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac8dbb3-9c0d-4588-8ffd-f33b88528405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f0b5b-31c5-458d-a46a-a4a3f62b7b45",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd9fb38-87b6-4776-a861-6ab556cace52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d3825d-cb6d-4a2e-a441-edf80275b8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8889c64-82ee-42b0-9056-eef2ca12f49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c84604-8879-48bf-8739-9e9aa01ce393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4107f686-958a-4719-9b7e-6e08cfca6cc0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170bdcd5-ffc0-415c-a62f-e4aa3bb98d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b4b0b2-1f47-4631-a688-5d8f5cf3cbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d39200-591d-4ff2-b8c5-f0bf0ee57492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec788f65-ca99-4239-a082-54decf0c8748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aae5c2d-4bb6-442d-96c5-ba9ad7a21983",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b080e099-f610-490f-8767-831bb29af4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4eaba70-e556-4de8-88ba-6c0b8c8bdaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287d803b-778f-4c9f-8859-3e25e34de8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68f32ea1-77be-433f-8495-ada56f0f7f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a14cb8-f263-40fa-82f2-eaaeb906c23d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e07822-8fad-4619-bb63-2d7cadb08759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb11c25f-7b3d-41bb-afb8-590c681e7905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a71e5e-d5d5-4241-a3db-f05608768855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0474bb-0ecb-417f-afb6-502e46b4f67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250b4d12-a3a8-4560-8961-706da2933e52",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d20b76c-f83f-4f46-9dad-08ede235f17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5d48d0-c837-4da3-8dfa-5fa1fcd2db80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505860e2-c64b-4940-8e2c-037d0bd8d621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22c4d495-b93c-4d5a-a847-d7c95825e65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df57d16-bc03-4ff1-88f6-efa17fe92560",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a199da6-ac51-448a-b0b3-5c6d5f4d87b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6330e375-0276-4736-8533-230a01406d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433087ae-36be-4128-aaaf-eda237c4b46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca6485f-f470-43d1-9252-f668e165dbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6a50f1-8455-4927-ba97-801661971252",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b274026-5401-49d9-ba72-df81e725c5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cc00cd-cc87-4bec-8731-88d7cc72efae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655e5d16-a371-4550-83fd-05e955ef9612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac514ba4-8e2c-44db-8365-575509eb56a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f0f302-f7ad-4aec-9f79-9d2db5afdb47",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa31d3b-abb4-46c8-bb4b-9b97ebdc285e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048f49f3-6ca9-4d1a-93b1-a97c1883e143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697c5685-1eec-4102-9989-99fefde41651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5467ee9a-16d2-49b3-a96d-670707623ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35437ab6-65b3-4c39-bb42-a43965e3ce9f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3dc585-66a6-473e-8a82-5516e2cff4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8dd85f-0583-4c7f-ad2c-cb644c735688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505ca5f8-9bcb-493f-8fa1-279090a69cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31e8f6ff-c099-44d8-8790-e0db27d18f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2570815-e4a5-4ffc-a6e3-063594e5961c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb785aac-65bc-453f-a91f-c7c34558c5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76fe6b2-39d5-4d5b-b745-dca385600d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5640d01e-f81a-45a1-a739-dfd805a1f5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfd177e-7694-4d5a-929b-c711f5ce8def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a817c85-2888-4989-8fb1-354ae2ff6477",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0739d83-07d6-4938-9147-101884aabce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d20e5c0-6a15-4f6d-a26f-e5652b5a95af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e948e948-2f19-47d4-bdab-d76d13b41603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee899c2a-debd-4773-b67b-852a1fc93b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5411fd74-496a-4887-81a2-1b44b258c3c0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2001011d-1329-4b3e-9b29-5982509a3b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f32440-b419-4fdd-b45a-532900af9f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f0e171-eb30-4def-abb6-e026e0f9f3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e701aa3b-4485-43a2-9840-b94fcfb4cc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee33786-6141-4bd3-b893-987a4f06e7d8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d601c0-5e07-4c1c-9bcd-01f218209413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7daca74b-9ea2-4f90-83e1-dd0743e9cccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa207c42-a7c7-4da6-983e-585736397630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "976d6eed-de6e-48e8-8c49-fe403799e840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae12bde-1c7c-4df7-82f9-952e64af23ff",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe120c4a-efdd-4217-91be-156b0c7529ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a1a230-288a-4a98-8aaa-b2592e581cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99e090d-135f-4041-9859-0c31bdf64d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9b7660-ac1d-46ab-a125-451170abe2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7685f520-856a-4352-8fde-11c25ecaa230",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f380f9-b7a0-4d5d-96fb-b2fd44a41682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe56027-a831-45f9-88ff-ab42a93e8644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd10c393-18b1-4b0b-89d0-97a032bfbca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f3feb5-d437-4a92-bd28-7aed44e89a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bc9b94-daeb-4cc3-a0b6-d0ccc872888d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e45bf-3d54-400d-b7fe-e9f3353c66cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fabc245-28e1-44a2-bd01-0671fef8525c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e0acdf-4c0b-4ef2-85ba-febde0d9ce50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec9fed5-244f-4df8-8705-089e659b1e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc87ac8-d6fd-4ada-bc7a-5515eb8cc506",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673f0117-4fce-4f9a-8479-6590ff9b732e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a83503-e850-495e-87c0-81c206f54d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d638282b-d290-4766-8617-f075bacf5c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "eade9d72-1073-4dfc-9cce-dda4740b431d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e59aca7-7cae-4ba7-8522-3e8c00b18568",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e879de33-d451-42b9-8f17-3ed086572af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56d247d1-bbda-488a-9b01-03a1abf45cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72383515-b415-4420-9acf-17fae98e3884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04f477dd-3bbb-40d3-9750-93a0fb87e6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7c5074-8e26-4321-af4b-0129470a332a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d944c2c7-fe93-40be-bda4-85250e7089cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c2878f-ab8c-4e81-9630-24de8cf15f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365b2c26-5024-4eeb-b600-7ceb3247b729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ae0d94-5263-4f6b-b307-2961a992f440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683d26f2-e018-4436-b97d-7d9f506a3d77",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a7f988-c96e-48d6-9271-bf630e278178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b765629-6cd8-400c-afa8-c8054c77e2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69dd480-b18b-4966-80c2-1391845c03ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "405cca48-5392-4645-8383-690603dd5b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a71124-65e8-403f-a2f8-687f44351928",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f318bd-2f94-4c22-8dbc-217eb24f1d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c659b47e-db55-4f02-8cc3-c99e4a020d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf26e5b-b707-40c9-8a1f-3e06f1aa325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5946598-8e00-48eb-9900-b4c30cc07d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee1778b-94f8-4c7e-a9db-e5f5229a40d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed44ab4-91ae-4e44-98e9-efd1eff72a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87dd8bb2-e775-4adb-9f29-b06420acbb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8072f80b-452b-4f7e-bb87-a6c0513e1d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2396ce-48c6-4410-8aed-715c4db9b20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a12dcdf-7ed7-4686-91e8-3edbe2c447d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cabe6e-fa62-4395-b4bf-897a1a757359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985031d3-d24d-4b37-abba-d4724a360dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6eee96-c212-4f2d-adc0-1690189fb8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9afd0750-6b4e-4c7b-b58a-5bfab85ada3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5afc63-afed-48f4-9fc8-58efbdb292c7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0f8549-7c30-4976-b93a-0b0ce52b6894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e719cad-d32e-4704-9e53-279734b54253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63edda5a-ecc8-45b4-b9be-9de99b95ae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "331f5449-5e95-4a1f-9f04-5f9efa4f9fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2499d96a-4144-442a-b77d-635d8687024b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255da99e-da80-44d4-89e8-938b08bd59cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ed1500-1d52-4a0b-9953-7f2f5cdb8ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1656d624-e026-4b05-a9c7-df1867b75c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "53768a2d-ac97-48a1-8a0c-34b87b0537b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658df422-6600-4d96-902b-1fd80d6a5c49",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c96e43-0a75-4ea9-9e80-1c877876419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa3fc16-876e-46d9-a9c3-e83ac920a5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc54757e-09d3-45b6-87b3-0db3bf265c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2109c6b-5d85-431b-b0e6-d5a7c375720a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad815e3-d637-4e70-83b4-5228d09209d4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e376a20a-1497-43b4-8195-7320789586cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828f053f-da0d-4b44-8702-4a2a53d7ef47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057d5c8e-6cb4-4ea5-9b70-af5447ac17b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20f6df90-0d07-4ad6-8d53-c8246288b962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59eb49d9-ea64-4e40-b14f-3e47eeff739a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89fc33d-08e6-490c-a95f-c536b01aa176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0365f1a-0b8a-4221-8d3d-54298117c288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a075471a-c227-4b6c-809d-b8f15168c7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48725efa-1e0f-4d48-b93e-f25a08f6d197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91a2851-0c32-4d78-9201-6d45a6260547",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd2ef83-ee65-4791-a0a0-5f4ead5d5f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3966e8-ed7f-4676-b20a-152708dd5961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3978e245-03a1-4ddc-906f-829d3a817eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3ff10b-0455-4382-83bc-d50a8331ca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262aa6e9-1f73-4964-87ea-9fa84593dde4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7831ef7-5bf8-4e54-a868-236ef0a9705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70b366f-b7b2-4c60-8556-8ce2a675c3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cdd2ea-c8ed-48ce-8ef3-a2157bce89c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24556a06-9c46-4961-a758-a51ad1265635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378f4f40-f45b-46cf-a740-6a70b090b1b5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632fcd18-e704-4613-a1cb-722ecd173079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8cb06d-f2ea-4302-878b-bed1ba184923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c1984-1a0f-41a0-ac4f-a7e4878c17c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe2d761-3091-4b1f-a33a-895c8213e2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5951617-4553-4855-ac95-8b365bcf6618",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b14b31-94aa-4a80-b95b-32cee7931073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f523415-77f6-41f0-a7ba-2bd94ee030af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167fd26a-c805-44dd-8043-72fd237cc31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "841bd521-80f2-40d2-af61-327550ce7afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454e30b6-e74b-4b80-a8f1-a0940fb8aac5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5685014a-6c1d-4192-b9e2-b172afcd700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7f88f0-5de3-4b2d-93f6-28a5974f83d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042d5277-572d-4685-8587-ecbd31917d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "04315519-d0c6-4f2d-aa9f-c78b4e2cc780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614e6e21-ca2d-4606-9785-191c0cee2bd0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b1db6f-02aa-4ddb-885d-04ac00a091fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c79dc85-ef39-4f5f-a214-8588eef455bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3965253-4935-470e-9eec-46088ad0382e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e562d844-b4b5-45fa-b9e8-2d473a06299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228f01e9-1ffa-46de-9a5f-6dddfbcc80db",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1e7cac-6676-4af9-a3bf-c1b50a41586f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0500601d-424e-4f88-8e75-0cf30be4f125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1212ee6-72e1-4b53-ba58-935828392aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bedce17-8d4d-4cc7-8bd2-2639eb7d5cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830b32c2-4099-4fa2-ab5a-7119cb05f8ea",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c79196-06e9-4357-8278-1d45aea8af82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedc1df1-de14-4db9-98c0-dc92fcdc1adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d6868c-ce94-4937-bdba-85c210f381c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc14fdbc-f960-4a2c-b106-f20469cb9ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95621497-86e5-4cec-b4e8-73b63538f31e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c8c7cd-fba0-44ab-9f6d-821aa0104784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81629847-1032-49f4-82db-abfc45cc1af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e86a24-1aee-4142-b503-ef98e971adee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2fca60-42c1-4076-8003-ff548e826528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f5ae41-be79-42bb-9e1d-d6e25081e8e1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a027a4ab-4f78-43bf-87d9-bea96c3ac7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d9552c-5043-4d38-9ab3-5c5ed32f3b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fff79fa-527f-4f29-ae49-bc3867e07c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "79d6280d-e8d7-454c-ae14-b58bef228cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad41e5a7-c974-4570-9d94-4dbc236d52a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4824b3a-0fc5-4780-a7de-7b45b389ac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6f14be-0a7c-4717-b8a3-372683192253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92565523-74db-4c46-a17d-0c6ef57c6a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2975ca61-d1b8-4d5d-9388-6b687d982532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72f06be-bd08-4b1c-a97e-a28599de8609",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfeff4f-64ed-4b26-804f-435c24f3b916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55241d3d-6547-407d-b560-b8bc2c87b7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba4e072-3109-47b3-b4d2-0f0891e63685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4717a54-2dd3-4fc3-acdf-ec779a5bb5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e540bb5-9ac2-48ec-852d-abf9ea6b6174",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbab6d8d-84cf-46e2-9a98-25362095b30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f76d2c7-93d8-4c82-adc3-d8a01532f6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319e212b-8573-4ea3-8e63-87e43e2188e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e34c5877-11f0-4c5c-b774-2c801065ad46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2479dc39-f714-42e0-86d1-f567b519e188",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fbafc9-8e70-4e55-9925-4b021f0b1dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eba39e9-1389-4b4b-a5fd-802b03e48656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ecd23f-c06f-40c6-a43d-d242c6d8ee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "01911cde-d07f-4df6-97af-a5d508432bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6062e15-af37-48ee-88eb-9013203dc519",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079761e4-3906-41e8-91c1-aea9c9fff3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cae1c3-bf18-4dc2-b049-dcc346c00d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ffec84-47a5-4e6b-8b27-1285f3c8adcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02baf2f9-17a4-4f40-b55a-3b9b2bb6428f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234e08fa-840c-4e01-982b-34ff1e35abb4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692c7465-a97a-4c59-b925-c928e2fc9b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b0c2a0-7bed-41cb-a86a-c1f666f85281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21137c6-4184-4ebd-a888-4d9f7b7ec079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ff6099-ff33-40e7-8001-6def16a827cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45174bc-0567-4472-b25d-e0144716892a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe7c5fc-01b7-4068-b917-e73c8af2b226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e93215-485f-4b82-b8ee-decfa36d1053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee33927-2fed-4337-966b-07fcc22bcbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc26871-57bd-47ef-8eb6-c7ed5da53d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a780041-82e7-4f0e-9580-6368b2eb3055",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8fb6d3-3ac3-40e8-81e9-3a83e916d3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ccc753-02f6-43a9-89d0-2b10d8462d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746eea96-3406-497f-a0bf-303aae065b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "211a7017-bb98-4722-854e-fce623a429b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89c9b17-40ec-4a0b-a204-7ad006c30111",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41da7c4c-a976-4003-9de1-40da69bb28a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4725a07a-0e73-4e14-a271-5ac2f3ac2930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe54b21-0258-4248-a8bc-30bc8878a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "077952b8-620b-4fc5-b0d5-020e4e8c872e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0031aff-fd00-4ada-91b2-0e42da8d02fe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc5b217-3ad4-48c5-bec4-95c5f15f1233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1310d3-8506-4fe5-bb75-39eb0ff83cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8f6637-58b7-4ebb-898d-0b448dc3232f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b506e6a-1931-4954-897b-e69060facb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1be9d6-cdfd-421f-addb-e32391b2d858",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6095f92-05c4-4a5e-b912-6e11a8966c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8522e193-a423-457a-947f-f97e735a2028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61fe038-761d-43c7-957c-bbbdccfca23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73c4f06b-49f1-4664-8cb6-53db50e0b57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1663273a-7cd3-434f-bbf1-a1899e31f689",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde43050-e4dc-415c-bc79-0b4fca245dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fad1233-337e-456e-8b54-f48bde6d02fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acd8cd3-5ee4-41da-b2c8-a940a211c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "71e0c981-f79e-4c2a-9a31-ef3f5fbad46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69f526c-0005-43c0-a74c-4a15f5466541",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec4e94b-672b-43e7-b5b7-90dca88db849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e3601b-0853-45b8-a1e0-32cab538a1f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e328c221-2021-45ac-9e66-df126c196b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd07920-8b1f-4f89-86b0-af3ffb3c2a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26191d68-0586-4512-80bd-bda31dfddffd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fad5659-cb10-4317-bb08-2e5606e0fea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d88058-07b3-4f53-9809-8b1a8c65a530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fee2bd-f7c4-437b-bdf1-c92899df7214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f1199c-70e0-422b-9360-d4a944250361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77de64f-d3fb-4870-aedb-fabcb7e517e2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6863b6-717e-4e4e-abc6-ab0dedc90c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d86d7a-4ef9-4593-806c-1f1032a89e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc18de9-6b50-4580-a828-8001bb4341a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffeb97e-20c8-48f2-a035-860111c4ae66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fad0744-8b91-4948-9edf-8368237c7e9e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5005e300-c030-46bc-9a3b-dd9a90609cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e33b681-81e2-4ddf-8392-20c8686860af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ab88f5-6853-4c31-944b-8d1bf7fae6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a661b717-13ca-416b-8bad-bcef1ec79feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65b197c-0ca7-4ef4-868e-a2b9959aeb3d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e208b2-0787-47e7-a423-c515c72f7693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307ace6f-03d6-409d-90c0-ace09c65bc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e27688d-9ec2-4bf1-b9ad-caeb9d06c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01842dd9-209b-4094-9a7f-d33820f5c92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d798e9aa-08d7-4495-ab38-53291eb0570c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c94f45f-9ef8-42a7-a2f0-73fb99cf348a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2182229-92ac-479b-ae5e-a6ae1c17605a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d2eff4-ce73-494f-897b-e73a1dae7740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "592d9dfd-7380-418d-9af6-6c73a6a3fb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c02d22-edf4-4f11-a325-b0fd66248205",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11735d33-fb87-4b0f-b041-231c96893703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0bdacf-e8be-4266-959d-d22279cb1e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad954d9-c373-44bb-a8b9-ef34651181eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d9b00d-1d08-48f9-84db-de310daf0d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6974d6d1-b566-4c9d-91c2-6dcafc6facf9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaa5ade-960d-41fd-b080-3e294eccf2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709849ff-3a25-408a-8cef-4e4a8676900e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18e79a4-b646-40d1-a8c8-55efbfa58a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df8fb36d-39ce-48dc-8e98-3feb58912d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9512fca-c21f-444a-83ab-1f51a00149c0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8385f638-6e16-4a67-a5b3-be52627be955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddac0915-a35f-4490-9cf1-b0155388fd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6e1e7f-e6e7-426e-9901-96d1af06cae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9789be4b-617b-4f37-8377-595aed93e8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d93b99-0809-4e47-92b2-1ce9d34a490f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3330457f-4494-437a-8593-ba9f9e6e9cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db11bbd1-b65c-4f00-8876-d5e61a7b872d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e115045-bbfa-42b5-8601-9755c938be87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2132f24-b56b-4542-bd0e-9708f9b50bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749d727b-7880-4ccf-b3c8-e441c03b031f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9062ace1-71a9-432a-9e26-3ca8e3cd0578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240ba10a-6717-4c77-a072-e3098ccd5256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a5a28-61c9-4f5e-8e80-43602e4aee82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d04e029-0589-4572-b05b-e8a4d0285f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982f8661-e8e0-4051-a2c8-c62748d294b5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e7ca05-1e38-47b4-b882-4bd34b3a7398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4889ac8-2aa7-4cdd-84bb-d19b70ae1ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeed0a6-bc58-497a-897d-3c70780b9b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ece64f7c-a64b-4987-b857-dbfccce57362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7f8304-cc23-45ef-80ad-ec360051fdb3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4ac882-1fa3-456f-bab2-f6e133c0fe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ed0b49-7014-4fd9-ab53-a6a28e843727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b85bf5-c04b-46d5-b7c9-35a7a17fbff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6446896a-f0f2-4040-90cb-33eb49661cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd43294b-3930-491c-863c-ee6894c4a614",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8147dc36-7005-46df-bd75-e998131eabed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54218ffd-f818-4e92-a3c2-b4d0bde25611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808d0a00-4c2b-4a89-bcc6-1176da2f70cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80a5740d-d544-4ca8-9a31-53cea25cb988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57bb60c-8722-4d54-952e-cee825ecdf20",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b71dac0-4dbe-49fd-896a-47e51cf8c72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881777f8-3a00-4785-866c-dcbfd775505f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58297f5-b9fc-4d77-8a86-d99083d12468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de6208b8-ca74-428f-bc2b-4c4f1bc9ab1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1918d60a-bf08-47e2-8b6f-d4fc9603d04b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef7622b-4d0a-4031-8354-6419161c6adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b373147-944b-4e70-bba1-9f4543c87a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c4fafb-0823-4725-8538-1b3c47d9f1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf442c79-ffa7-44d1-992e-fc55d73bdc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab2469-88d1-424b-990b-da11a30e3de0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fda2e40-397d-4669-b4ac-e04672603200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308cf6c0-8bd2-4512-b7a7-dc692e0b5ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dc0546-9a31-4eb4-9b5f-6c3bbb7ce16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac68a51-e48c-4180-8254-04a11652fbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2c83ac-df1e-47db-b06d-203a563c4489",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d2926f-83b1-40d2-9e52-eee4316efc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1bdb38-0e04-4b84-9aac-bd9d7b19329c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187a9795-51c9-4b8b-8278-bbf5d0db416e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1e52b6-fdd8-4ba7-9863-b7eba888a9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722adc3b-4205-4081-bfd5-01a977760d23",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836a5b9f-e3d9-483e-9bec-05534dea1b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f857f877-d580-4289-ab8e-46a23072e9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78126a7-ad8d-403c-ae8e-33eaad63294c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "329a2922-2dee-45df-b179-d11f2c9fda18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e119ca0-2f75-4913-b974-c5d98f7d6de4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f970bebe-2c2d-437f-9377-1c27903e4c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637c1f2c-9ef2-4644-88a8-279245c035b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc84c8d0-618f-46f5-8103-419ad6a0d089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb70e7b-e10e-4997-8ad2-35a978204edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1348aaf5-ab9a-4d1e-ba59-2932235ab6b8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a071895-e7c3-4048-a4b0-7d994c51c5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a25fc0-0d0d-4c69-a39b-994f49e0b6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0953e29-0928-4d39-a7cc-bb02d1d2f248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "820d2b2c-3375-4a4c-9a16-a8996af748df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1125645f-7065-4dd3-824c-93d1a11904a3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f559370-44f9-4ab4-9f3c-6ace9dd39a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c84479-2c09-4cc5-978e-8264106d2732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f20668-e66a-47d3-b6a9-fd850ca5da20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "81927e7e-783f-4bf4-9d47-fe1eab38ecad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637dee3e-ae34-4afe-8dd1-ec7b643f0b6b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdc5582-e2f4-4151-9241-1d891b4d865a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc99f01-d439-4dbd-a0f8-e31d81d26147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02326a9d-fc73-4a44-9533-0b46afde2f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "27256c28-91fa-46b4-be30-7fa98be94c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5730dc73-c5a5-4e26-81b0-4e86285ea88d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699efb8a-a3b9-4250-80c8-629570f75794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f7a6f5be-844e-4260-b9ef-8b2008ff31b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fa2ade-1c22-47c8-9770-c1c126267803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "65625cdd-470d-4763-b631-9d329907ae7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d30f3b4-f574-48bd-af84-98f67106ae37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4abc2bd5-52cd-4213-b230-583b3e6b619a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc054e52-8dc1-40b6-9de1-7975c4b40bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b22cde1-4480-490b-9c95-d60f493659d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c373d039-9e10-4d2f-8460-fa3f0d548653",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11e6a6a1-6af0-4d7a-b150-f3f53c69a6ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a6e355-8884-4f01-a9aa-2476a7d1f052",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58c14ab4-9166-4100-b897-3e4ce6d3b72e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87c5a3fa-e35f-48f5-bc5e-dbcb7dc15b64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6922d9f-4f03-4f28-a0a5-34e9acf3f8b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29b378b2-53aa-4a66-8610-c1520299cf76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad09c8cb-4ada-4098-b3a5-97dcbe8bd835"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d6cb4a0-7477-4470-813e-49b7a4d3da56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06c0160e-c2b7-4b1e-a206-4fc4ca6ad6b7"
                }
              }
            ]
          },
          {
            "id": "a561ac3d-ce02-4b7e-a8d4-c3c4ebf62bac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4efc1c46-10e6-4712-a1aa-66d76481f73e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e385ac68-2f8a-4182-8fda-32cd5b3d80fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66187fe3-1450-496c-876a-dc130a06e57b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e516b0b6-7960-4d59-aa84-ecbb9184ab1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df68ff44-d6a5-44d0-9462-df7717fa9b4d"
                    }
                  }
                ]
              },
              {
                "id": "c721d961-2f36-4ad3-bf4e-34c499eaf679",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a864bf5-a49e-4208-925c-29d3aa048dfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9a8604a-52e2-431b-a6a8-da3ad8cab63f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f4193a0-250a-4fe4-be1a-d952c1cdc6f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "599274bf-8ed3-4af7-9a6c-0ba22685cf3f"
                    }
                  }
                ]
              },
              {
                "id": "c3793638-4f25-435a-a491-aa8d8170b1c3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4732a794-fd97-4ff2-b756-a6dbdba3b4b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3deb5949-18c0-467e-a3e1-66733886bcfb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "007ea344-23ec-461d-bd98-5e8421973710",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "abda4592-a8cf-47ec-a2d8-695ffff1d302"
                    }
                  }
                ]
              },
              {
                "id": "b9a45066-11cd-4676-abf3-62118509ad12",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7deefdc-61a6-49d0-816e-3b6704c81714",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fe57742-e90c-412e-93de-f0b5d21ad6b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84acccf5-e866-42ba-bc1b-914536fa8f2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "110ea765-6ef9-472c-bba1-b7970d1231ad"
                    }
                  }
                ]
              },
              {
                "id": "27b12084-4aaa-4199-98e1-0cbd0ca93431",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a92805e-8a1c-4cc6-a94e-c153de878b54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5f27606-1cc9-4f0a-9746-d567b58e83a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93f11c8e-5b51-462e-958b-0fca3d62f22c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e937a77f-7622-4cbe-9dbd-86282880f59c"
                    }
                  }
                ]
              },
              {
                "id": "a35971f0-b03d-42a8-bcfb-3cf8d31a891b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09e42490-bb54-4116-9904-31b9cb9f124c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94bf5d93-c1c6-458f-a00f-ff9b5c06c3be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d71a608-1a3a-400d-ba0e-01e68c05e6f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a444834-e21a-4abd-949f-f79a39c33041"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20436635-56ba-4aff-b969-25f21059afe8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8011c10-3d71-476f-ba43-07fb68843546"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0d51c20-e487-436e-800f-b02812627cf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a40cf541-a3cc-400a-9219-818594df1c08"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06602403-c59c-455d-94c7-b901ddd88981",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "09a94bc7-10d0-4cce-ba23-0803c46dffa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "802a38ea-6cee-442c-9b98-cb0a5c8b0b64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9888c692-c9dc-4dc8-8f72-105e35dfe315"
            }
          }
        ]
      },
      {
        "id": "0ba49d4c-100d-4a3d-9f73-b7ffc8d9bfeb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5145699-4e7b-4b33-9d27-1c2238520707",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54782ea8-edb8-4900-944b-e382356d0134",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79d717f0-00aa-4140-8a3a-27152f366d43",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c867785-cc2a-4727-bbf5-eb470a32a009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53fe7f6-1244-422d-b42b-7d43b55b0767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22e3236-dbd7-445e-be80-2f5a60bd63e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "10b0ab3c-3f84-47ce-91a2-bba1d793b224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6829020a-bb8a-487d-9fbb-903e00aa1d1a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bf11df-dba1-49e1-bd4e-6d85a49a9843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e213bd1-cb32-4f3b-b47c-08a385622427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6e6c63-5028-41d4-b017-d20561d3b65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5c6dad-cc99-4c45-bb2a-eb18deadef51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b8ed7d-61bb-49bd-90cf-de89006bbc2f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba87b25-34b0-4935-ba68-a269fa899e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0a1885-9196-49a9-a5aa-f5bc92d71351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acf45d5-1d37-4a09-8ca8-5ee9c89c0566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4856f5-8c0d-4eee-b990-c1a5474f9550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738a2366-89ef-4c00-a1e2-c558c7fa4420",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e31c30-75aa-4459-b0af-6e221a9f87d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb7c43a-c287-431c-b0f6-706f6baea7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4428e38-3491-491c-b2af-c84038345c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b71bf615-1cbe-41ed-9c79-f4998b2be8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ec8bd9-ca93-4d13-8633-d5287ee9cd63",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c977e5-4e48-4a74-bdd5-92ec0b12ba31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7debf25-5af3-4a7e-ae9f-3809c482bac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6592148d-e2b5-44c6-bc15-050b7c846e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5d6058-7d52-488f-9ac3-b5805ac8ebbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54e62a1-5687-4d91-815b-47711cf4264a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0956cc3b-013c-4712-834e-63fad767510d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2628041c-418a-48bf-b0b1-e27ae294c2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89beef39-9671-49a8-bddc-8993b6a4b6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b29f165-1534-4fa7-ac8a-36a39039fe73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e55991-00d3-46f5-8178-29974bac9c47",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae76b40-e55c-4ee0-bfb2-a68daeb84f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f3584b-0d50-497b-8551-40b001527bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd8dda8-019c-40a9-9659-ddb43e5af27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2902e775-60ca-48f0-8921-82d765078b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03652c4e-e35d-44f1-a84a-bdcf4343b8e3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22f473c-f417-4ca7-b612-7d31de85bbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d7daf0-9166-442e-a398-f0f21ebec6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca191d5-2a80-4f3c-8b85-f5cf2ad88587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d4e100-6fdd-4ec8-b14e-c262ab366ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da6057a-6d49-4689-9f48-83ece9a18552",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5fd323-0b84-4e38-aebb-81d252dbb92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7125cb-b263-49d8-bfd7-d8182b3762c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8892b9c-e2b1-4e36-bd82-9ed57b709812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49067a8f-1e70-4aff-ad8f-960b3db035a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b575e01-46a3-4c3f-976b-a672dfa562ea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0722e7d0-1b6f-42be-bec0-f04e4267a930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7d11e0-254d-4719-9d1b-32394d31428e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7eb357b-497c-474d-b585-997a4b9a950b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "688deeb1-e5d5-4520-a5a5-0ce1077f14e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab64252-cf35-40ba-8506-bb30cb71c266",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0283582b-d408-471d-a8ef-dfccbda09e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14b6118-8270-4e91-9ddc-7d81cc11e5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466afaaf-7caa-4a5b-8e22-e376dfa4fe86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7f658d5e-0c88-4718-90b0-d204bbfc95ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c784a82-8b3f-48bb-a514-a972e128de3f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e84960-b3de-4ee5-a753-091d10308205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94ae220-70e7-4b2f-bcaf-540eb08843f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badbeedd-eed0-40ff-bf2a-c6d30804e761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bf6129-ca35-41e4-bfe1-143d00e142fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89fd13c-d075-4afc-8d7a-d62a550ab6b7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7a9d23-5666-4652-bd58-7fc534a1a7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf0391a-559c-4a78-84f5-3f16e45b31f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae77d395-6e73-4274-820c-7983856f4e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca51d73-fd5d-4e87-9a2f-ec08e301cdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4160c9-c4a3-4944-95f5-0f1e59f99eba",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b65595-28da-4f8a-bae4-5b16f324fb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0192d844-06da-4f2b-8843-15110dea3272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12840df5-44b0-456b-b069-bff43698cbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7520cb0d-81d4-4dd9-8248-ec1be59a15b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3554e7-607d-4857-8937-ebfe2dcc062a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171d6b7a-2b49-4614-b9de-9499aeb955dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee912355-637b-4451-ad2c-9fdadf42d9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72522ef6-c99c-4176-bd07-2aed5c6254bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4e41bb-b2e0-4ea6-853b-05360cacee8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185071e3-adae-4461-b6e7-a32a9aba4d95",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f760de7-a0be-4360-b1e5-818b2456e0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38a5319-64f5-4fed-b7af-6ab23f60c192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a3db74-5e35-4c7b-9ac3-30a59fa0ede1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cc5b0b-c2c2-420a-9743-3b66c6a4b886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b330c19c-9575-4c54-8a50-40f45efa0cf7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2838a7f8-423a-4209-a338-c44c41fb03f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd24f031-81b1-42fb-b081-fd739e9f68ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3234a3-bf91-4ed2-b278-5ab5718a0692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "106e9277-c174-40a9-9893-eb5c26e3ea55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9401447f-e38d-48b0-b861-bd555b23ee09",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac86726-0fa2-4304-aa20-c4eb1ad5ebec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57535059-cdfd-4444-9083-0b7367209cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c1e991-0d8b-4314-8d2b-32d188d165e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf2af11-ba45-4021-ba13-2708c01a8c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192e524a-3740-4d5b-8684-f9cd6a91ab15",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f2653c-d63b-4ebb-ba5c-c5856e7db81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d43b901-0004-4609-a226-bbc652254dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8aaaaf-1c88-4206-928a-cac539c1eb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5eecdb1-9d21-42cd-b59c-0ec4194a7a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48293aa6-c0fe-48eb-8db1-34be23894494",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0c833e-45e9-4a1e-9c86-60e9ac83f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c06c509-6554-43d1-aa5e-201dea680816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc84e2d-5012-4545-aaaa-c5a88bddb18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a31e410-33ca-42c8-93d7-dec1fdae4cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2dead9-6c64-4e1e-be9a-6a78a9051fc4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72ce6e6-8b7a-47a3-b957-f389665ba061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0352345-bd2c-4ad4-ada1-0756961ebbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744db340-26f5-432e-a280-ad30b2e16f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94aab10-0bd5-4d07-9a1d-83dcedab395b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8d918d-13fe-4338-a970-e872f15accf3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590198de-0b68-4155-b9d4-1710ffa577c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb73f100-c48c-405b-aa03-798db95e50b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a78cf7b-e710-4acf-8ccc-75f4422d1543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c15bf77d-b41f-42e5-9fb8-ad67d87c03b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbed099-929f-4564-be5e-f00ead25848d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b35360-f6b3-4ad9-b127-95735297c0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fb9a6b-b06a-4145-b504-cecd1d871f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75172ac7-9393-4be7-b477-44c083b9018d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0847d415-e378-4ad0-86d9-ec7feef7c040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f3707f-d20e-4c7e-99af-1d2b475e03fd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50236ceb-5ae8-4a8e-947d-914d82275079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d3b6fe-8439-4bd8-8237-1eb0148f1e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991db978-d9f8-4948-9de1-be3dcc6f890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bad58a3c-17d9-4d57-bf7c-d0fe3a147b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c18ff24-fa84-4435-9342-169c93e95c38",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef74be0-dd53-4f5f-ba34-01c74058dad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea82d3f-3f9b-4e91-840f-36d4a1c0bda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3917ad52-354b-465d-ab97-38705aa6c22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a0946-2ed8-4f12-a49a-6818e31012ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a73961f-51cb-4f55-9617-937757b0df32",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afb050d-5578-492c-98b8-5d2a68d1afc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074a9f26-10a2-4b51-99aa-579c86e2db81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cd7d3c-b77f-4e24-8d15-8afa71c8e5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55937524-a4f9-4a7d-900e-766d0bee6a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1a7ee3-238f-4831-a33c-74ceb8a743d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df79f2ae-142d-4412-a721-26ce2eb03a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30abd990-00d6-4e9a-b54f-b4b50ca1523e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f850cb3-026c-4d39-bb76-6cbfff0221d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea16259-2697-41c9-9938-2b03c176b2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb294a1-d224-42ac-9d5e-1897eac68ee4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e96d1ba-6161-40e0-9b25-0e591a12182d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9831fb3-82ad-4801-a4bf-39acda8a8a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7233b43f-9f83-4d0d-823c-9119fbad529d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "258cf9d3-959c-4a2b-8e35-e0aeea793b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb1e10c-124b-4e66-9b2f-c672c264446c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def74ebb-a093-4a98-8927-d0240dae5951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4a5a59-f5d8-4bba-b31b-3eccd2d05dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee572eaa-68d6-463a-92bf-8bdece5f1fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a327fb9-760a-4444-b80f-f618aa145f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31ecc43-e349-423a-a099-84637098505e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656b8577-3d0e-4505-9a03-82eead4db3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708fca8d-5fe0-4769-97e3-79937612e478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94058c95-2ed9-4316-b616-245b1a0d7e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8e6742-bb66-475a-8f70-7baa45b8634a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e125d3b7-0783-4d8d-97e5-d0636ae6d7fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ac2058-65ec-44b9-bcd7-ec5bc52a0a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7489f2-f607-4fd7-a100-b267f931f458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c2a37c-3749-46d6-8263-c483322024f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae138d6-19a3-41bd-b18d-2c4ad263ee1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86880a7f-bdd0-4a21-82be-d736fb254327",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2251d5-c72c-4c84-a437-8978cbbb70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c8bfdb-4383-48a7-af30-c6de219fcfc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2321608e-59cc-425f-858d-e567ffb4e7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf45a24f-02e9-48fe-b3a6-3fb18790addf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2130e62d-d14b-4312-8b0e-4bfff77a3baa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46b4762e-ccb4-4aec-9fc0-0cfc58e64263",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efece1e8-d52f-4f38-8c2d-dd2eef411faa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a608a9f2-bff9-4c24-ab9b-1dff61cb0b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458ee6c2-44fc-4d77-a431-2ed220447ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa49b4f2-08bd-42c5-8564-7c61da8216ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d080b9ff-7baf-4ba3-8de0-ad00cf3f0dce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "371d450e-b9ed-4c16-9784-57eb9017d4fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "242cc361-8ed0-4324-b5c0-7cbabeb1840d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "143851e2-f250-43f5-b0b3-91f0bf5d4f0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bfd0a71-1431-4007-8b28-0a7720a37eda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7384aae3-daca-4f7a-8be8-0baca0fdcf9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "043113e9-563f-45e1-97dc-3135d427e5dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddd67c9b-ad15-421c-aa97-f16d79c4464e"
            }
          }
        ]
      },
      {
        "id": "a91c947e-7dd8-4cdb-85af-bc78417026df",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "dd0e57e4-7e09-4046-8c8b-46c0c210a21d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a13b0969-eec6-4710-9c9d-85e5fba4a2e8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "429edd50-e75c-4299-b2b8-331177598690",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48887d31-74f1-477b-95d9-f13ebc6fa996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a562be-45b7-402e-8422-62dfd131ba5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd88ce6f-9639-42b3-9723-8b7879fcdd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a82f25b1-e20b-4a79-bfc4-443c22a6c14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c589545-ba25-41ef-b0b1-8db217b018e2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa9c3b0-4bee-4b3f-b534-a34490714d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef8b4f5-f7e8-4775-bea4-af1cc229f6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cf63bd-f005-4d8d-b467-6f230b5a9bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff75736c-74da-4977-9e7a-d73c4bf2ad84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db4be94-2aa8-4dc9-a7b8-3385d4f9be4f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595a9a0e-47dc-47ce-8214-779a6a069aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e2f5cb-ee28-49f5-9e46-188dcba730c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd9d170-6ad9-4c49-a9cc-c0c598d3a928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c59285-c8bd-4d96-83d7-4fdb711bb423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c6cada-d6b1-44b0-8ef3-ebb2e63ede56",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2da73b-5016-4862-8407-f443c048132f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a914d782-a639-4fa2-8254-835bbda50962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd175f14-de2f-49a1-a741-cbbe5f4693fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb686f1e-3f43-4437-a919-cdd06aa3db4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b533999c-1fc8-4179-9ab4-074dd6021c46",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf94642-5c72-41e6-8a38-3cf73ef6b14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ba4fc2-3248-46d0-817d-62ef497ccc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ab2248-fbc0-456f-8406-8fcd858bfc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30572f38-ce18-43df-9eb8-01361a10e6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e523d170-5fc7-428c-b162-2b4b988f3379",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d94b85-a5c4-453e-80da-6516c20e70ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34da5cd-b926-4838-8b54-b9f9dee3a824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3014d613-d674-4447-88bf-da5bd0fc12fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62633cf8-9802-42ff-adca-59ddd9abea22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd93769f-ed82-4218-a03f-51faea7700a7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84c143a-21a7-4179-984c-b9aebf9dbfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd76dd26-c44b-42cb-8522-f1ca50d09d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09776aa-0bfd-490f-ada2-b2d0b77fc21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "182086ba-ebac-4b5b-ac84-d6e41091ceb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8912d2f-982b-494d-a05c-251ecc396879",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d85fd7-b01e-48bf-8c06-518a4e6e6fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0502bfba-0243-4e45-bc53-66ae12f9795b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20dd440-7b9e-4d58-a2f4-f6cb56e6a042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07210e0d-e27c-46bd-8fc7-d6448ce92d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241ec397-8d98-4171-aced-f2dc4bf5ed02",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba08b485-4a52-4fc7-93f4-2934afa8e79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824912f4-dcf4-4284-a90f-54d3f570d356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e559fa53-3a28-4a4b-9d69-f9dd22ab4f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "808b2761-1075-4837-b278-da432b62c727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cd15cd-3d18-4626-8105-03a098bfc8d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b848231-ea9e-4ab6-8dd8-c898c113f912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcf530e-e9d7-4b1c-9707-6111550cf445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e32a6c-6cee-4cb8-af89-e506df683a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf312ed1-f27e-43aa-aebd-6274f84e74ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9665fb41-f7e4-42da-933a-456f7bb64526",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97da09a6-4d15-4726-8491-fff499fdf689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3985504-0cf2-469f-b0f6-f7f9c89dce2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ba78ab-b42b-4b81-b2a8-af0531a5f002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1e8e67-d232-49de-8b2d-531551ae30f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb10f56-2a4a-4386-b831-e57db4e3136a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7790340a-42e5-44a9-a278-d112dbbe3d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ebc712-5ec6-4179-b168-1d0450f52600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e50f4f-d71b-4c29-8c16-35247b30000d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "187b2f1a-bc0c-4bf3-b339-869159750b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05308ec3-f20d-4ac5-a122-99769d6434f1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd2ebee-a4d5-4734-94a5-48069bbefd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32e551b-61dd-48ea-be77-73a102dff5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8952a0f5-319e-4179-994d-0e3c44c51bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b314584-6d48-440d-8c66-be89f76476b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a88954-af8e-457b-8bc7-e4ffca758bf5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873e0f07-e38a-47e4-aba6-8200c3c67042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd26282-2aad-4d80-9f8b-f1b61c98cddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd1a2b7-300e-4c47-9fa4-aa5908f7ac62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9afa9b-239b-4e31-b2e1-db2d6180d0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4ee52b-acce-43e2-be2d-3f97a7d997eb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc52ec6-ca68-4eb6-979c-89eaa8ae788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a1a930-cfd7-42b1-9834-976d6711732f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2520b88d-455b-421e-9db8-c0e3024aafc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8dc8a8-192a-492b-b1ad-31dda545d0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c01fa17-9d49-47c7-b374-2dec0c3f751b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7566c8fa-23d3-4f7a-b274-4567b93bbb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4abdf8-d393-4cba-9467-15dfd7fd3d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0d55c4-2d9e-44a2-8166-36e9992fdb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d44330b4-a608-4c75-80e7-9c0bf5fa89b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb4f2e7-da8d-4802-ba6a-d7c44443e6a0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248a495b-35d6-4707-ac96-b79f3ba8446d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9653ecd2-fb88-4883-9b27-a7e544b18973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466c9281-c144-4728-96fb-ad2f214bfe24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "985e4958-f51a-4380-8cc4-5f8f0f67ab55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f23fbf-a52a-4072-93c4-1f9678e97974",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea079144-3e6a-4c4e-9119-cb9bfe4cfadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e76e22e-0fb8-460e-9c10-b317c2180521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0633b736-d3a5-40c1-839d-b74896ef50a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "608ac242-4d2a-4df3-94c2-31006bcfb40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bc159d-c563-465c-94b0-4c0d4e9a4cf9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2560c5-ffe4-4fca-99a9-5983da988915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5d3e8c-44d0-4bb0-86f5-0b6a8c2cf30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493f28ca-9156-49d7-8eb9-82e81e4a5407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "535ccaa1-b964-4372-bf31-5eb2a5e26b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af53e6f-9f80-4f71-a9f5-b10bce336f41",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0ba83f-662d-40fa-a4f8-576840ba5c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fa7017-93bb-4df8-91d5-c397014e991b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44eee7a-f628-474b-a771-a85ff3ec2c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b56ea242-3af0-413b-baf5-c3eb2e1c0e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc002cd-3c8d-4c39-96a7-470902cc5267",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550bc1e2-f9bb-4e31-8c81-27568de84d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f521e6dd-daf3-42d5-96cc-54eae7bdf5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c47af51-f73e-4cfe-a5b9-a37fa767f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f54ef3-2943-488b-987b-58490e796cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f456025b-238a-4f5b-8127-53103475ab67",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f797719-1e0a-41d2-bc5e-7f628bfa3ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921ac1d8-b215-495c-be07-43ec041e8535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1cbca7-b51f-4b4b-b367-a0183007e47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6fbef4-4576-4e6a-b8a2-1425c7aa32c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3d30b9-78b9-4a42-879d-002b941ae543",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69290dc-83b6-439b-a00b-a8b1130ecb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a4406c-3a85-429c-92fc-0e49f321e105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d0142b-cc28-4c61-a68b-a88fe4bd3a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "323aa69c-2078-445c-ad9c-bc92f12db092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e044f8-505c-4755-a7f2-72ed96668aa2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31118d32-e5ec-41c9-9523-d994b1f1a96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87743e30-d751-4a12-9974-14e89a6e3b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310ea30c-1e4c-4e46-8091-531e9a337171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ab538a-82c4-4e03-9571-8de5beac9338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fef60e-1e7c-4280-8e8a-4884e78d75f0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cabf47-8b86-4f29-b7fe-26c7491b4b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b015b6-b18c-412b-b5d6-a770a9b3397d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc4c9f8-2dc0-45d4-8d09-571a9192c2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c21ee2-123e-486e-bd57-6aa4571e53ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e7626a-ffc4-4ece-a729-abfa9a79880b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a79d458-f314-4dd8-9042-b777b9e24e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c24725-b0df-46c9-a89b-c9d9161b8502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483b3f93-3afb-4662-a1fb-7daf362e3ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccef9742-d0c4-4834-98b0-53ce507bef70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbf67c8-5ef4-4e41-bf15-b0c0f338df30",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456532e2-52ab-4b24-9c05-ba345ae4a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ef6ece-fb0f-45a8-bd59-6d95a791ee8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d32c1d-b801-4cb3-97d9-2b5c75ebc47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac60cb6c-8a07-4c46-999b-60e3b7045623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393febe2-ee10-4300-b4d5-40e9b3a0607a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2dcd43-2463-4ac7-8f3a-bd224b52840b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff7d21f-0b50-4a37-97fd-3afdd6a924b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6660e96-1337-48f9-9635-c941c31867ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "384aa4ff-1246-4230-9405-b017797282b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68383e4f-d808-45fd-9d0d-18a8da8883ea",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d23375-de31-40bb-9f26-90ea68500723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbcf93b2-8d23-45bb-b22b-4fdee46b7696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70cd800-948d-4e34-baef-2f44f4735b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a91a53d-196c-4c9b-a2fe-73b980611e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2cd3c7-b3cf-4bcc-a010-df7444646146",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87efc83e-6d66-4cb1-8858-a405ec8c45ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95db85a8-40fc-46f3-96fb-c753dea04a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5997b3e4-b888-4322-ac4b-2d775c31789e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa4bcb0-d557-4b23-8a71-161d9778681e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803e1421-284f-4a54-84c4-e80615a197db",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d91ea1-5197-4541-bd3e-365a45d10b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faebfc79-48f4-417d-9081-20da2fc51c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503257cb-753b-4e6b-b8a0-ae5f0e14ee3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "589e83c1-20d7-40ea-907c-f857d0bb5608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa508ed9-66e4-45b0-adfd-6be09849115b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1ac4a4-aa74-4aed-bba2-c4bc64d107d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4940f93b-467c-48df-b430-f41a0d0940e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ad4764-7b09-4a88-aae6-295a6daf2e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "558c1c26-2da0-4ef4-9f74-fcb5c034ed13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d730aba-7fab-473d-aa6e-fb969f84b24d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedbf511-b2cf-4dc9-a1ba-1ae98835bc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece4b944-38e6-4b49-adab-111e093915f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc701a44-5e64-43aa-968d-862d73cf9fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ae71e3-1e48-4f77-89aa-cf72759392c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b41c246-2a5f-4adb-848b-845702a7398f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a916e09-13fb-4cbd-b68c-3e0ae3ad0abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7aeea5e-6fc2-4e15-a606-dfa245afb63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fd1e78-c0bb-4770-96ae-834995643d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1e7cb5-6a5e-44a3-a1ed-216b64f818b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120ec9e7-0ce3-4188-bdd4-37d1a4190532",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d661241-8363-4902-b221-b2fc0f25ca27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866367dc-99e9-4d5c-8afe-0a04fb009822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3280686e-f0ec-4b71-bc16-4a18d7b8b420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d49fa952-db7c-4ec8-8ed9-388822db45df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e886755a-ed3f-42bb-9f9c-a6d44d2bc712",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f59f85-a85d-4575-aade-4e8f16c0f85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085b31cc-7b03-4706-9eb4-e63e61e162e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d26b904-4673-4161-b0fb-ded5f4d4dd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b903aa66-5fd4-4887-88a2-faaa8a5d3962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe534092-3712-4909-9d39-75b545581199",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c3a32e-3532-4d38-aee6-46e7c277b012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f28181-8e8b-40b7-92de-3e9dbd4182c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1bf09e-23b2-4f61-8259-569d1e1f7d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a4cf1a-9ef3-48f5-8bcc-fba0f1ae27fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f45f2aea-5211-4164-99d3-98dcca5ca9f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fcb46336-26dc-44a5-9e41-6942f910bd76",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b330a57-7307-4c8f-9c8d-c7ec777e0ae7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "854539b6-a850-42b1-b0d2-76e4c08388b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8b99f1-ea3c-42b8-86d7-dfd30d74883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66f9ff4e-7292-45af-af08-69d3f50d33fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42091642-d8d4-4cd6-bbdf-1b42d8967494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "103427cd-692b-4a0a-a810-0f39e0be136f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8bcdb9e-9436-4ed1-87a4-a1a6d6f18278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2815a3ac-e604-469d-a109-efe58639c9e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ec9b6aa-9738-48a9-9678-8eb8d9184e0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f4ae44ce-005d-4f86-9bb6-9446e95f4fa1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "372dc77d-2806-4a09-873a-604a113409fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65e32c8a-47fe-408b-841d-ace4ad7e8132"
            }
          }
        ]
      },
      {
        "id": "b55611ed-193f-4585-9482-6d7810fc441c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "49fb24ce-3a5b-46dc-94c3-a02f34f1f000",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b307d86d-d317-4848-84fa-c0f14eac13c8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7cd1d97d-9e15-491f-b845-f66875db548a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81866abc-453a-4b1e-95ed-75382dcfadc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa71682d-3256-4abb-a564-c03da2454934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e838bd75-085e-4864-b18d-51d25efdb4bb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd82a748-bae3-413a-8a0e-a5e3b7aafeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee479d0-4406-49f2-b31a-b387d78943d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecdc49c-2f91-4a86-a841-752c07634272",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04edf026-8fa7-4010-9abd-f70f739873c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a31474-acab-458e-b847-d8658a16ffe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6f5203-eb9c-4ec7-be1c-4fc24a68662a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72eb692-2296-4534-b8cb-43a736a48349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890109ec-b602-4b0e-acb0-38cbc09bfd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd38637-812c-4a87-860f-5244b876e7cf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1a591f-1625-4328-8a18-627cd0f33d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b88cc79-479c-4856-b37b-44382eaec3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f57bab-4a5f-453d-bd5f-2791333acb10",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc317e8b-01c4-4e3c-ab39-38ddec12d1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674f3c9b-8e3d-442a-8faf-ddcf64e5e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0426df0-d1ae-4b01-a5ee-1707f3cebb1e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314040ce-5049-43c5-b9bf-f61c4fe9cc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee4dc75-7644-4daa-b8b1-c1581bf68216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cd9da9-d3d3-4f7d-9b43-31e09baff514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55d3b22-96ae-4503-9fd3-9e5d805b483e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc3a262-e4e7-450e-90a4-584adce30fc7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e8b9f0-f7a6-466e-996d-399b74442657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a5ce77-82e3-4760-b70e-23a1dbcef0cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b30a43-9b58-411f-a1e3-6c1f8ce64154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb28b20-7ef8-407e-9066-f60a41459857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f3fcc0-1eac-40e7-9d6d-4e3a7317b0a8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817f099c-f6d0-47f6-873d-dc89c30c4c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb8216dd-5a1e-4641-bc32-af9e9b989575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e88bf0-4d2d-43ab-ab74-12a144693284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc19bd57-27d7-431c-80de-ce68061d8051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df99a0c7-e84f-464f-8e27-878ff4b4db64",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1f7d0e-0252-4df2-9a3e-65b4372abb5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "394d0bc3-633c-49ef-9ef2-f6258f3cbb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed6213-dedc-4d76-9b3d-aa6765c04642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67b283d-7501-440e-9619-84ae8199d7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6610083-830d-4946-b370-43780933ebc9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c220269-6b92-4671-aa98-43b3abf4c172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29710504-3468-4452-9e9f-5902737bb1e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "608201c9-7bdb-46b0-b156-761f5769c3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9192973d-bcf7-4906-a4e3-176108d417c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426b4118-e495-4e00-a2fd-6e3a44c4881f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975e9c4b-b356-49c0-8c14-7cb3a3c3cf5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3860fe3e-b687-45ab-b8ad-9533b3cb6d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9be816-00a4-484d-ad98-aa8f95fd1955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6dcacf-d75c-4c98-b5e7-163f96315a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74a4a08-a546-4ed9-84e8-f73df8968ab1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7eb072-d3c4-496a-8341-e3ab17c43222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f705e4be-dc37-43c2-9625-c92c62b03d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd6ede8-744b-478e-9ad0-6d0fd8651cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f451a9-ffb4-4dd9-8fe5-474d0ab4359f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceece5b2-1c20-4311-8e9e-46fbddc632dd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ac56bf-d79d-4e33-a718-6335a88eb051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9349ef06-b099-445d-ad48-c5ab2d1585e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023016f5-27b3-4fcb-872e-9cc9c9c51717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "affeeae6-6117-40cb-8b14-6d0f81603cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39df34d9-b8f2-494f-aae8-45907aba9ce1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbd7f73-5a3a-46a3-be87-65ab4a6e5b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "210b5865-1ffa-49c4-803e-5951a31432c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23569d9e-efbf-4fdd-9654-2da4bed4cb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4df596-a0a3-4b87-9288-cc42af67adb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a71131-41d9-471b-b904-2960c98d9997",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee73c5f-f011-4f45-8db3-87d710b5e076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc85f04-11de-40f8-800e-7ed552b3c40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea5fc64-355f-4c1a-940f-36f54ddf3f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecd268e-3479-4e85-935d-8ddaee0b42d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9357406a-5d0e-4894-b2ff-7241235d3657",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87773f7-fe66-409c-ba8f-22cc3b0c5a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da442764-038b-4052-b499-26e02a0612f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f00331-8cfd-4e01-a9e1-09a88477763b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58f694c-1b3f-4ec0-a626-28a37f7a729c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba0328-4cc8-42a4-b1ff-d085d4f5135b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7127a0ce-e7ad-4d1d-9a0a-86e6ec3cbd5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a21fa2-c3df-492b-a0a8-87776b0ad2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2467dceb-aada-4178-a626-ccc3c577b10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75ec88d-e996-40a2-981f-d26ca77f06c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb39745-1509-4c74-876f-aa10c47a782b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8272a99d-645d-4e4c-9a44-e84904d59a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42997aa5-8c3a-427e-b322-990413f92afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c735a84a-d716-451e-af02-74e551fbd337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea73b84-c1a2-4542-b27f-5c9933ca4f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4b706c-6f53-44f9-8580-762f3777bc7c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5c7935-defa-4b89-95c4-3ec7fc1ebaf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d348d7-9549-499f-be02-02a237687c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e868b4-cb79-4b2e-9e14-d28d3cff6cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68247126-a786-4e53-b817-a5792d3f701c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8c8a98-c0d6-4852-bd8e-375dbddb0b95",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d508a24-8e7f-4f50-a2dc-e88f44e7af8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524467b3-92ff-4d6b-a8f1-2c2b02321b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32493274-45ac-4b4d-a721-287ba75fcdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f9623c-a8a0-498a-833d-9b867b98965a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79901aa1-0d3d-4d22-822e-85914804a663",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71f37b2-6e65-4994-bde2-3f9d5891bdec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39cb8bde-1a58-464f-b2f2-1ef27b65bd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02270e78-a87d-4fd9-92b3-a5b6f796c5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb37fd16-be59-42b3-808e-79326e17d2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1db45e4-8949-4b0f-8a83-b9217817d453",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ff222b-ae57-4653-be67-bae91c68ae08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b22441-2f6e-4844-86ba-df7ecd7bc07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b199663-b542-4685-b8d3-7c1b034c9810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1579dcce-7ee6-47d2-a6f9-f226b8ba80d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d555ee7c-081d-453c-84f8-cea36ebe160c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77834b11-12a8-4f0b-984a-f29456b3dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4331c597-8373-44a9-987a-e3ec252646b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c72c61-ab47-4031-bc0a-d4289ecdacee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58b8a9a-2478-482a-9c0a-c58895ab2c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e7aaa0-b352-4f30-afb7-3e5f1d3dc3e9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe0d78a-972b-4254-b695-a74aa5d215ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983af007-c8d4-45f5-86a4-d42375965cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4827af12-194d-47c2-a6bd-2fec894b5e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8676f99d-d116-4b6c-a39a-77ddc5920554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03428c80-18d4-4044-96f7-5d7555bff64f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3525b6-eb5b-4112-80ee-8086d78a7c9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a515741c-b7b9-4545-b23b-ef6b544f1f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c470943-47e0-4ed2-a9bd-2054869fb139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f16dbc-5a63-4e95-af64-a335de3e6743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675de4db-d565-4540-8953-42cef6824341",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9edaa1c-7a0b-4c78-956c-4405cada3df8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "124ae70b-fe89-4e67-8c90-5839614892b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dad2a2-e996-4c95-9a54-a2ea9be9781c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060f374b-ae9e-407e-af61-e2b480c80794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98a0021-a002-4640-a3e0-ea98b4c22a74",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0beadee0-0617-4f22-baec-380b2c4426d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f06574-4d7b-4fbb-957e-787eb42009a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c557ca9-c080-444e-ad95-d35cb3632e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656cca38-924b-41ac-b088-684996d57095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9815888-4cc0-4e06-bcff-38c3a29681b0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7540a3-3f19-46ec-889c-21a25756f681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61fba975-5e30-485b-8b42-29141fb6bf54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec69330-5ff8-4913-9f2e-22b7a7d7aed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c5cbdb-6e4c-4663-9b1e-c9ab503ba290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d5ee62-e913-4f2b-913d-731a58d9ab0e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b85031-4861-41bd-a90e-a2327a1830b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfd9452-46a4-4474-95d0-e63bdbf709d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4021a9ff-2603-4fc6-9d55-eceea3638c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efe61a0-8f30-48c0-8979-67c2ff25f702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a942017a-eb5c-4616-bfac-4553d722a629",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d975a55a-0309-45fb-9bf6-285336b17264",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a03ca98-499e-45fd-8654-08a614dfb794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b11ec6-23c5-44b3-8c14-a03e0e91cd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5723de36-ffba-454a-a8d2-f1db06100cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862af5dc-a2b9-41eb-8d21-d2295abbf84d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27baf63c-0064-4666-93b0-fb2f2e3cb9a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dfb8515-3f0d-401d-a5da-69c5b86db5df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5076c5a-bae7-41e7-ad0b-2d923c825e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2496d0fe-245c-4a40-aef9-7ecf6d6391c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788e9fc9-24ed-4295-9ed9-72589257f9fe",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c646c4a-a784-494b-b055-75777b2f0d9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "332bdd1d-466c-4136-910f-06953b23d0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbec544-217d-430a-869a-8fbaa3fe1496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb02058-89c1-43cd-9d09-12a18043c33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdd78fb-bad2-4b22-ba5c-2ff2bc1ef9c3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea3de2f-5b32-47b7-9476-6133a7cdc618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be0977d-3617-40d7-92e9-9c7de31cc750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d548be06-d27f-4979-a57e-f51e3e1c6e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469cb337-b54f-489e-a623-a3cd97da2db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b9ff71-f67c-425d-b2a5-fa76267d69d0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706445b8-1927-4d37-9118-668c0dc43cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e25ec1e-2fc8-4daa-9a46-830194cdae4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04538a73-913f-4ead-9bb5-71a38c7ba5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20186072-9c70-4ac0-8870-f32062dfc273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea3b663-b6f3-4e13-bb3b-eb9161cec8b0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5034171b-ef02-49fd-b090-f3463e4ddc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fe6036-d379-45e5-8b4b-d0fc8c0266e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3be4e2-4981-4712-8b1d-c31542e97b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d38458-516e-4ade-9383-c6e3a23df1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e34381e-6534-479b-84e2-2a3a37e40bdd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0134839d-d290-4ab1-ae32-4c96fd519d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20448f9f-3ad9-4b2e-8547-3ddead3a6116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38500d1-d88a-4e69-86af-74fa4df53ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b96889-55aa-42e5-b0d0-3480126f679d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34259e7c-be2d-4818-93ea-b47b964df215",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0528da8-8277-4cbc-8e1a-fa65f8d4fca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce65ab8-a2be-4dda-95bb-d5bdde71db17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf9416-fb68-45d9-a3ba-f5de0cb3f804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ed8c90-fc29-4b86-9c7e-e57ae0a92290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c683f171-4d92-4cea-ba19-b59a65de263a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f933fff-d512-420d-8c15-b76a62cd2c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773f84f0-00a7-4c8c-8eb5-9f176f8cc83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1c44a0-0061-49a7-9477-8a8746965064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80711043-ef46-44e1-9dde-9dc545a59db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19c9df6-9b7b-44da-a4d5-fc81d7d709ef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce3d8b7-d991-4aa2-bdfd-77667446605e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb38f44-b4e7-49bb-bb97-4ad50352968c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037ad005-c2be-4afb-b2e0-812137e9f70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc9de95-a9de-42b6-9608-fca077407814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413dbeb1-6791-4da0-a3c2-26f8db754b57",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79db11c3-e662-47ce-8396-0eb01b01dfdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6cd1dbc-683b-4fbc-96b4-0297800da8cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afe9b99-8986-4b68-8859-350a230d8a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e1e521-445e-4997-8741-aaf4f65347aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dbb667-2bc9-4387-96e4-bd52b797b6e4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b25501c-bae1-4550-8f1b-7d676d8ffec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1459f40-c4ff-482c-b76a-b723a9c46179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3981dd68-138a-45c4-ac98-2a3bbfd1f70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5cbaabb-db8a-4e9a-848b-d70ef86c8891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2c72eb-c922-47ee-8c4f-76b7c43ca1c9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6d90f4-fe57-4131-a831-722f2c462314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa919c50-01b9-4931-8a7e-5317fa86b2f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1bd4c1-8b40-4861-b989-0b51a37928ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13748514-080a-435d-a78d-912cd27a6313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d597a6e0-319b-4d95-85bf-5e71cc72a3f4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97d519a-5696-4367-a90f-df18a793304d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cebae61-1204-45b6-89ea-cb94fce8953f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4729ca-a244-408f-82da-97851f16fc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d414936-4659-4afe-9980-09aa077a3a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73aff23b-bbe5-4569-ab05-b7630741347f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cb888d-06e6-4573-ae38-08523a1f97bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05d6e30-e983-4278-8432-2b1b0478bcfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7651e6-3fba-499e-a134-300b74c4188f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae387a6-7a80-43a2-831f-937fea4dc1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c07327-c0e7-46f0-b87b-be9cd541198d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876e1602-03d0-43d0-9740-a00a469de48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159cbc7e-0c3f-43a3-a2fc-fad6170d56d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde217f6-bb25-45b0-bacb-81409b599332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35886365-efde-4936-a8d8-440d52f6101e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc18aaa2-f53c-42dc-8253-97bd7e1f2eb5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809601f5-7f4e-4176-87eb-c91b92309285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0be9cc-9efb-4e88-8a2a-a746cb49fab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b8eef1-62d6-4745-a6ec-a4d642494992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df810c81-cda5-4a30-894a-351dbb67a300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4e87ee-91c4-4fe1-9aa7-cfd2ebd723e7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e629b36-e7b7-4398-8134-8f12a1840cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8e044b-8695-4051-896e-4e123d548cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ea61d3-e2ec-46f6-9fba-9fdc03b5f647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c5c982-51ad-4c90-93db-7eec9fd48ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7c3462-87d1-44e7-88ec-89e4d6e622c9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b01e7f-981a-4ed9-910a-904b2bb6da45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc7ac20-611a-4163-8d33-572559d219dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec86ab2d-3f0e-4559-a5e2-993413ab828c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fba6fa6-7a69-4568-8271-00e08b91b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83951566-2dc0-4f78-8594-07468ab0329e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071f8d62-d294-4969-abdb-b8fc79981b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb03cda-3889-417b-aafc-632c4c794fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfeef956-72df-4cfa-bad0-a4239a6a5c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb1ba9f-49b7-4c2d-999a-cb57209b7066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a8b3c8-3386-4cb7-900a-1dc7654a25b0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713b940-988b-4af0-b724-7478a05b05c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370c2080-cf35-4bcb-8c59-2e39046a3db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56dba2e-c18a-419d-b5a3-67641c3082bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4174edae-1ea4-4509-be2a-407c18de3a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac66f6a-c6ef-4575-bdde-ba06815d4a3c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0180c5-7833-48c2-bffb-7c08a94e6720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a1a87c-80ea-4fd4-b7d7-f473e0fc5b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060f92c3-bdbb-4bd9-89e0-5fc29ed5fd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92e36a2-bf8e-4f2f-b6f0-cabfcbd0ba2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e5cbeb-e669-484d-bf07-00c7819ff9ef",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7d0878-21b8-46b9-b1e1-da6b35792da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858f3480-e706-4fbb-83c1-2d11692cced7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359b7ebb-b4eb-4fb3-9365-fb07ce79329c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfab5f5-deec-45a7-9199-5b7002ac9840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40de3372-4d4e-4247-9cce-985ddd8da0f8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff47d27c-c5c8-471f-b2fb-c9dc30a3e55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0850b015-f118-42bf-b5cf-ce8cd9810401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101feb1a-42f0-400e-af0a-ef47c86a01d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30b599c-2ae2-477e-bda2-4d80a432b5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6e6889-8bf3-4957-beac-a815b5e9386d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3292e1-08ae-4b64-be8a-47be62bda2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd8e821-263d-4743-825f-b6176c86ec57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4766181-f2e8-470d-9476-58c2a1aa1aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8921f34-807f-43e2-8c05-2321be4eccf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8a8baf-cc02-407c-a2c3-96bd77049e4f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e09b5f4-7ef2-4022-a9a6-00b7a7c0b5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d7178d-193d-45aa-ae79-80845dc0c7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787c09f9-6d5f-40d9-ab58-5cb4ff61d24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d923de96-2c90-4888-9316-78f94d7a0b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97d3b9b-8b42-4c3f-9bbe-3c2c6e79bc93",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1cddcb-19cb-460e-8b69-1438683e666c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca81142-4e9f-40a8-b47e-01f1e514cb2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c5c986-5425-426a-8a2f-780095bd31f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db4e66e-f420-44c5-93da-c22d46505ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b2141d-4c3d-4ada-9815-8ccc03d82fde",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abefd2d-97d5-4d3d-8e2c-5f86363bdc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248bb619-71e3-4a19-8d60-8b23076b0e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bed9b00-7423-49f5-80b8-6668c0f05629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef0900e-b589-4fa1-bfb5-003ff466e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd87f43f-18c2-4143-b7ed-1b96b286fe71",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8966cb5-7b8e-4692-a82d-9ec17c6fc3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81a6623-3ef2-4dc0-8dcf-ffc1488038bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea58a81-30a9-43c5-8798-7150fca4845f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a521f0-0fd2-4880-be30-230ca94485d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1fbd55-b6fc-4110-a46d-61868e43b236",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd048f5-db9d-44a2-80d7-f31a30f40bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91877e73-9471-4073-9a95-e0442eb4a795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa34b25-9385-4328-8cad-80ab6e878b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af945846-7b80-4304-af72-d761fb3a1150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a431ee09-be9d-4c6b-b280-eeba12a45b8f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c80b20f-590a-4fa7-9d55-719315c06fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a697bb57-e913-4621-bcb8-4a4bf6c74586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6d2b69-57d6-4413-84bb-b1407799bc21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719658e8-7f68-4446-8219-85b8945ffbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2807d5-c1d6-4e92-8ff2-8e699aa652f0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9723f11b-3108-4224-9978-d3ce2656017a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e792bb2-d51e-4716-bf81-6170cf1db926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfc6015-8b4c-4890-9233-692b5a0f0293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cc291f-8d9d-413d-be07-52655f87ebfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207de3f4-8b1d-49e1-83b0-dcd5b6fe87ba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97960a27-f7af-4685-9681-e10b454b700d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5b0e50-e748-4f88-982f-32e6c243eeb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366d46ea-bd9f-4d38-856f-6ed64455d03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b0d327-416b-4a34-b056-b09e687bc68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457fe9d5-6402-4b71-99a8-ebc46163365a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5d882c-baef-4117-9f14-f796619e4628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96ee5a30-0c13-434a-8b59-a76c1062ff38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b848b62-b051-411e-9bef-d226590bb857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a6a346-d030-488a-9b8d-5b41449627fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efc2084-f35c-4904-9eb0-00a5e21fa90b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befd01f2-bdce-45fc-920e-15e00b5729f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53903571-7081-414d-89d5-75716f042639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e63a63-9739-45a5-a2d7-943c77317673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec394950-4d7b-407b-b2e9-1a7a9ebb3786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ceb6148-a36f-4490-8c19-b6e23ee67d8c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821b19a1-2023-4b46-a53f-b23ee2b19646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c991193c-1251-4f4b-8e3c-93eefaed3957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8314c7c7-b00d-4d3b-8e23-0426d81a7076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffeb22e5-0e8a-4d0a-998c-1e74ffde9daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae224f0-bb99-40a8-b351-df4e24518912",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17406f37-b943-4ed1-b92d-7494b34cf721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18757f69-337b-4be3-9f3d-d4c6ce161bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94014a3-8e0b-4b2e-851e-ae847c168d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d369c08-ddb1-451a-b599-25128d82fe4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b74682-137c-47d3-ac4e-df8cc681b1f9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e11aaa-c4e8-441c-b5ca-913a7580ac98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fad75c-9d37-4631-ade8-fd4f1d8c5ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66483ca4-13a6-4a83-ab5d-0ff382feaffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b684ce4-707a-4e9e-9975-0abe3063e96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccab7904-2d41-428d-a286-04f7e8438ffc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86abec58-251f-470f-aee6-af58e87b7d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4887ac-534e-4024-9980-b47d1cf61eca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de72938e-475e-4b73-aa5e-f1d4873b8b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9318e4fc-0506-4da4-bbce-4a43e73b36fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac8fa1-df1b-43cd-bc43-55c06316af65",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744e584c-8ab5-4e25-892d-ce444990713a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d5d9aa9-571f-4f53-bca1-ae6d4c3fc71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd249cf-ce79-4d4e-85a5-2987d69eecb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33884183-4f4e-4fc9-91bb-dc5533593813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58312f06-bdfc-4a52-8ce8-0ddf884e365e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2639f87b-aa0c-4682-a6e2-5747b64fbbaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d7b380-ec7e-4be2-8e49-f86bc5ccaaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100a6e6e-d14f-45a9-aeca-06240bbec167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c32487-3e42-4d3a-afb7-62965c2ca4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8631a7-b2bf-4cc9-8334-9e4bdb3de64b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c97c6ce-bfdc-4e67-b952-9cb88ac9ee92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ed1f40-e6a0-4c3f-9205-6600e021a774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfd03c9-0181-4641-ac55-09548d5ba214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3365a5e3-444f-4f8a-b7b8-d2ff44fc206a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79054805-2468-40f4-af42-bcdc2fb9551a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cd8378-f482-4360-a9d2-07eb87839f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23835935-9807-4e8d-bf10-2d3692e0e6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee252c84-cee2-458c-a79a-6719f377bcb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc47644-3fb2-46d7-a475-974201f11560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab2fc27-40f3-4a58-af42-54d252e54185",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629d98bb-adb2-4957-8444-c8a991757aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7a5e35-d9a2-436d-810b-697bbb53d448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8795e87-f2e5-4b98-aff2-c431ac81104a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540f31a0-5daa-4eca-b1b9-04cdc319c068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59de15e1-02bf-43a4-a1c5-550bc44da1b1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d3a27c-0200-428c-a8c4-c93f45e186bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad4ba73-abe8-414d-9340-c5c7105afeeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d280205d-ed23-4321-a39d-f3733c07b681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcb938b-84fc-480f-ae13-605260a23c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47ea763-f5b8-40a1-ae7a-2c4c8a84a679",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcedb7b-5144-49a9-8180-7df0a283cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cffd04a-01a0-4fa5-92f1-7cd5a95b265d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f234daf4-9423-4af7-b395-fc428f7ad30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a47215d-33b6-4c72-a48a-af459efe5d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d29a3ff-3e16-4177-80c3-77162e9dddf5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f441ff-8480-46fc-a823-917c2d82d2a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d87499-8f1b-435b-8343-849cd6284653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d9b384-d403-4d40-9392-65f822346203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016ab597-7c3e-4221-b7d0-ef71c3c0c5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee57369-4175-4cb8-ba91-65dbc813f070",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2037f389-2393-47e8-8748-e5f0d4ab9b18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d3d336-413c-4c91-a705-cd43628770f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e29515a-2f2d-4519-b82e-3d98ca658663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ebdaf9-36b7-4462-8397-5a99d85798a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb19e00-0d79-49fa-aee1-3a6b27eae4d3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d7a9e2-c813-42a4-8f86-f329db3ed168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40fedf2-c5a8-4751-80be-1ce23e7f095f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c93918-5716-4f14-9130-5ded412d64d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30f4ba5-011c-4a63-960a-edd9f487f982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876608f5-dd2a-4390-b2a9-6ef1e640797f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e3fe83-10a7-42e2-95d7-f7d15f873a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac5c688-8706-4dbd-8c27-b8d79e2e1018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968a8928-30b4-407c-b099-17c2bc250a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02e882e-d216-4ff2-8438-b1a766537608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a0001b-4d9d-476a-a8d0-d46101f0d681",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209b5d37-a0ea-4eb9-baef-f74eeb995d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fdbe0d3-f931-4013-994a-ecb1ffd01dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c13bae-dbac-4219-827d-4c0579375c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2703f828-2f3f-4789-82d4-8bc6f9be24f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c72e465-91a8-433b-98a1-9cb67312416c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eae1068-94e8-42d9-9f4a-7af4ead52238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66af40fe-dd98-4d72-9c05-e507f00566ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f046644d-7429-44d2-a086-fb17ead47609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e27bed-43d1-4677-b407-e009af220f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5598aa6-37b6-4663-a4c5-77dd0019fded",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daab0c7c-863e-4530-95dc-c8aba53b2c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6da4e0-a065-40a3-990d-780c9fe469a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16084dc2-58df-48ef-b3d8-490387b53fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2320abca-0893-4567-836b-11e3f7d5e00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c8f0a8-3b7d-466d-80cb-d939972ecea5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e498fc-67a4-4879-a006-58796d885481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f97d032-d01e-4b90-8b33-b63889d06128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d593430-fa07-42d8-b01c-676b437093f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daac1822-4487-403a-abb2-2ca754dd86a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdc5b67-f482-446b-9726-140f2fe8470f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad72ed0-b1ed-46c2-a5a4-a153f1cb0463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f26c94b2-057d-42fd-86d4-f2cd06b55c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5214df-6e73-42f8-86e1-f5cd04c9cb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5211d5-c118-466a-9b58-3d03ccaf4927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f986e71-02ea-4456-afc5-e4f426f7bab0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0c95f3-d9d8-4a9b-99e9-27367694b529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8edfdc2f-e755-45e0-9509-dec0e5bcd222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4f67e1-53a9-481a-b8c0-e0b3ddfd847a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc7d7fa-bcdf-4a0e-bb04-f33db94c2af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb139282-8ac5-49ae-a944-7d85859581c1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36508fde-4212-4764-a4e6-660aae749532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2630f53-d47e-4bda-91a1-82326faa4c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb636eaa-3696-438d-8f61-2c47472e8572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63532dd6-3108-4ea8-8269-6f783bfd8b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee8e608-37d8-4c26-93ff-ea5876b0ecd0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c101ca5-4ac2-4c23-ab02-7e73ac968be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64e7aa43-f536-4103-b410-abafd883d059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0200e99-cdc9-40d6-94b0-80f33712ea8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879b1230-f920-46d3-a5e7-78c2b4ad788b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65abed88-b6b9-421b-8e37-541a170b43a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e63d26c-0c93-4df1-83df-6a93e8552646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f10ff871-ca0f-43ac-a212-cfae50d235b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ed7bb6-2106-4160-8b72-b825e3f283f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ef14a8-2a1c-425c-ab2a-ed60efdce7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff33045-85ba-486e-a903-b47437cbc9a7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723baa27-f5bc-453f-9380-d20f9f618197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a173a2-f451-477f-81fc-7589c55dc36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4416f9e4-5161-4e33-8b82-a57a814c8eeb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251ffa74-27e0-4d11-a9a0-e0cea76aa489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261fca47-1e23-401a-b4e3-506280120077",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4252da5d-2e13-4aaf-92e0-48f2c30dfa82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcad9caa-0c26-44d5-acc4-f665e4be1750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5fbd69-a52b-4bab-b356-a83bd3fbc315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50563b5a-3e3e-4663-97b6-1be14b5f9242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d007f89-f0da-490d-a708-a9e4d5136dd2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6520a565-b783-414f-9472-0a4fa029c8cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99e90c4-f0e8-4c10-90fb-7817be68bb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3764253-05df-4cfa-af49-36dd6f8185a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afbffe5-385e-4600-aaf4-2656e8b023ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bc63f5-4105-4b7d-a507-053b10163365",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392319e3-ec1e-456e-b87f-b9f994e4a36d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16037272-2951-4fc3-a5ac-9d0018fefcad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb43ffb2-293a-45d5-8e9c-30b9396aa4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2b26c5-1e2a-4b1b-bddc-c8f87933a4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdee310b-6ec9-4fc7-be75-2d316a6c2531",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e7a7c2-c082-48e1-baec-bc58487c3fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207437f0-3866-4148-9e2d-da7fbe5e0d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b997edee-2f4d-42bc-8145-e6f062ccc190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70c8b88-3220-4d99-bcb8-fb0762ca4d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35c1d6c-69ea-4220-8072-b267b1398eb7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc9ef8-2338-4cca-9e17-338e3c354911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4415310-1538-4895-8ff0-d41c62bcd51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e3dd0b-dac6-49b2-92c9-325ab134fcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cd080f-667e-4e2f-8ffd-d07ee50ca9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a422bc8a-18f0-4f9e-8baf-b5f6542822c3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0f7e63-a4bf-4e96-8e62-e68b9261d833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7279817-35c4-446b-a128-a0a78df2cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f4805c-8015-4a23-a6e5-4291ddfa2905",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab2a8a6-1583-470f-91c1-ec602e17494d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e141f217-787d-4f30-8a10-431bd72ba878",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c87d5b-6bc8-4d74-8170-e970f05ce442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5eee5a0-1387-4195-9400-95e99b115281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa21e283-c2af-49fd-a17b-a5aa4c5d2d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52517f45-fa32-4d5f-89ea-e880ad9b9823"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab72d0ac-c07b-4285-8667-55ae562c9268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc742970-43e9-4d40-b84b-a1b163ace502"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "add4cb9d-b1e6-41a3-b5dd-7304f340b98c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "178152cf-55ca-42f5-a286-5d163b132c83"
                    }
                  }
                ]
              },
              {
                "id": "f0e48e80-79c0-4247-9a93-a88de5abd59c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f58e4fec-71d3-447f-89e3-77462a7c3e3d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d4bf1c-178c-4f0b-831c-383e88e2072b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f0aa360d-4b8c-4a40-aeb7-9182e11f06af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c6a29-ac76-4569-ba95-ed7a9fddc5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7df857da-8c1c-4c5b-a123-e24b5df1cff6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbb24450-8fb4-4ef3-8ce7-060da2db2a87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c37a2dc0-223d-43cb-a271-efc0deb7ca45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cb2d341-7341-47be-b094-3713c47c7d84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a98cd7f-d792-4ce2-9a95-aefbf5af7b54"
                    }
                  }
                ]
              },
              {
                "id": "f777a1d2-0b8e-4654-83b5-8b2488b2f494",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1ebe12cc-b7f9-44c5-94a3-7ff1d8a80a8d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8453d6-36c5-4b46-a609-7fb0bc817223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0198330d-773b-4595-bcf9-668cbb35ebbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e3bd58-83ee-42f9-9a26-99806efa0d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38efb21c-0825-4fc5-b064-70b6df56ad2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3226afad-9aae-48ad-8618-31c48d8d8cd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a1f290f-f8fa-45c6-9576-a4959fd7a573",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41979179-6b11-46bf-a498-637bf2811724",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "808da7c6-78bc-459c-a4c4-627f51d1560e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8969ee3f-9976-448c-a428-1980df2d9747",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22e09fa2-406e-45f3-b378-cff514e31186"
                    }
                  }
                ]
              },
              {
                "id": "63dafe91-2cc9-4d1a-8490-e39cfd8b2d84",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d36ca4e8-f4bb-435a-ba23-25b133c0b764",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "49eeea1a-a6e4-4e51-b21a-3dc44be729c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c77f93f2-077b-41c3-bc3d-7c77e95c17bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64b1daa2-8f3e-4e97-8514-8e727aec80ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46c520e4-f922-439f-9c1f-56f05001af0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "50a1d308-63b2-488c-9281-e709cd420359"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35ee747d-22b1-469b-ba7f-d4e77dc65bfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c6aca80-f32e-4d3a-91e1-7dd4451ef4c3"
            }
          }
        ]
      },
      {
        "id": "0db2287c-fabb-4c90-a4a1-95d59610e1b4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e059733c-1ab3-4e91-9bf8-abc08246f20d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33331b6b-ef38-4696-8c47-6f072f385254",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1eea5ee2-4d07-48d0-a1b2-f1ceea1eebcf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c57ab8d-3bd3-4082-b057-c8b6cd1c9da8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0b52c3f-40ff-45ad-b065-ef821d089023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f01a10e-84dc-4548-8168-049522fa9de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "038dce51-c135-458f-8b32-e7cc0ede182a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8a09ea-f475-43cf-9a39-501a6fd4e042",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e4324a3-bfa6-43b6-bc54-a1b3de55588b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c030b0f-559a-402d-92a2-82b0ab34a2cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91ac0952-9da3-4e41-988f-7aca6ea22586"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2105dc16-251a-4317-b864-eb759feb60e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e05b28d2-3333-4259-a10f-231cf5e160b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3885e75-957a-492e-8c07-bf54a2e3ea04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81a09d86-87f8-4c34-8627-842dad7da612"
            }
          }
        ]
      },
      {
        "id": "62cb623c-2067-4c6f-8d50-c1e6c86e18c0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f33af66d-d203-47f2-a2b2-20ef8e45f34c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0621531-2156-433f-b8a0-27526164d91e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4dd5acee-26b5-4571-b876-a5b19e7d590c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d68c0b2-86ff-4052-8921-bba0cf7dcd66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9506a7c-d051-4982-8d98-64b3c1ae9963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403a5952-9ab3-4748-9386-360714404c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf60bb06-8dec-4fa3-9c87-72565e795482"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56259a98-31e1-4844-b00c-c011c1a488b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c529bca-c2a2-4d48-a9f4-68245dd826d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cba62244-be84-4371-9d6d-966b90defbe2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8e04520-31b0-49af-9fd1-4c3de306ad9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fb377ff-8d93-40ae-9721-69217e511cb0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4494a9aa-f372-4189-895f-e1bc822dfd3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "137fd4df-96fb-44c8-992b-26529b53a7bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32fa167b-4687-44c3-988b-e1e046b72399"
            }
          }
        ]
      },
      {
        "id": "3f97307e-e6e5-404e-91cc-83da35f4f3e8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5787ef66-069b-4cbd-99ed-1157070b6ad7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "888612b6-72d5-4938-a22a-4dd46ea1e0a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eab96f4f-dab2-4cef-8922-eb36d0c9ffe2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a9aed0-e8db-4688-9a71-9f353f2546ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f8b8dcf-07f1-4cc5-baf7-986fa4c62ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c775c9b6-4a32-4546-bf09-07bace5bc573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b2ec5ac-629f-433b-99c5-4c48c788d52a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e154e84-9387-4f4f-afb4-cd99d178b417",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51bb0f23-9107-4b6f-ae6b-a36b7441740f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5587f5f4-2829-4ba5-bffd-24629a4c0ab3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91b383b1-21fe-4fd9-838c-75767700101e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75a95b27-3052-4947-93f1-491be10eb6e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9f749a43-6231-4f21-809f-4571bd59a369"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d3d8505-cdf8-4475-b5e4-583c72c9a26d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "949fd2f1-ccd8-4a1f-a680-281cf6e82e6b"
            }
          }
        ]
      },
      {
        "id": "7cf2f9bf-9a76-41dc-b004-e4ff108c591e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3168cd26-393c-4cc9-b024-98ab377929f4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ebdcc93-388a-46e3-ab52-45f0b06ba2b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4982066b-2e4f-497c-8503-ec5137fc14a7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "209b1286-a581-4ff3-a39e-336b43452edb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03e16e60-dbf3-4dc6-b7af-e08d8b6664b5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 87.89788732394368,
      "responseMin": 10,
      "responseMax": 2039,
      "responseSd": 229.70040222922765,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692923526471,
      "completed": 1692923563446
    },
    "executions": [
      {
        "id": "8ee131da-7ac0-47b9-8418-5e3b12efa43a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7827e8f7-9402-484b-be7d-b2d4eb03e5cd",
          "httpRequestId": "10f9b264-eff3-4b07-8d77-6e9b6cd90f68"
        },
        "item": {
          "id": "8ee131da-7ac0-47b9-8418-5e3b12efa43a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "357d6b3b-fbd6-4ddc-916a-c13a6a7022c6",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "311779d3-274f-4e1c-ab1c-b2264c99d4c8",
        "cursor": {
          "ref": "707edb19-0c53-4d7b-8f3a-19f07f0672df",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aca372d9-13a4-4ee0-ae40-bdc56b404762"
        },
        "item": {
          "id": "311779d3-274f-4e1c-ab1c-b2264c99d4c8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1bdc0c7c-8432-4e0d-8032-95d1b62a3d38",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "d32f7078-f989-43b2-bb97-e55cb794c485",
        "cursor": {
          "ref": "c75b5c2f-cd95-4ba2-82ab-e0881bf2e999",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff6037c7-b400-425a-8791-d6e0d85f5b5e"
        },
        "item": {
          "id": "d32f7078-f989-43b2-bb97-e55cb794c485",
          "name": "did_json"
        },
        "response": {
          "id": "9a46ac8f-bbdf-4f36-b069-f6a0be2cdaec",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cb5a32-e90c-43df-a6d8-8ce764d4e300",
        "cursor": {
          "ref": "72dc13ba-755e-4e3f-834f-f485315423f1",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "878e0ccf-2bfc-47c1-9d13-ca4db7bdabaa"
        },
        "item": {
          "id": "e0cb5a32-e90c-43df-a6d8-8ce764d4e300",
          "name": "did:invalid"
        },
        "response": {
          "id": "b53f66fb-36e5-490c-bdfd-fc4cb836d62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cb5a32-e90c-43df-a6d8-8ce764d4e300",
        "cursor": {
          "ref": "72dc13ba-755e-4e3f-834f-f485315423f1",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "878e0ccf-2bfc-47c1-9d13-ca4db7bdabaa"
        },
        "item": {
          "id": "e0cb5a32-e90c-43df-a6d8-8ce764d4e300",
          "name": "did:invalid"
        },
        "response": {
          "id": "b53f66fb-36e5-490c-bdfd-fc4cb836d62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fff7be4-edd8-4c65-8726-12638e04f63f",
        "cursor": {
          "ref": "3195177b-ea56-406c-815f-b31c7dfbc3ca",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "205c002e-3a4c-419f-90dc-96be3553edc7"
        },
        "item": {
          "id": "3fff7be4-edd8-4c65-8726-12638e04f63f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8129ff2b-2aa7-4aaf-b0ed-ddaff5705e47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 125,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a3e936-4ef6-4378-9787-0f8d28351c7b",
        "cursor": {
          "ref": "0412b3e8-e13b-4c29-82d5-3a29a99801ac",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "123e1cea-531f-44dd-af70-614e54ce14ee"
        },
        "item": {
          "id": "50a3e936-4ef6-4378-9787-0f8d28351c7b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f350bb3f-6d5e-48dc-9f2a-e6942f35f396",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438dc2d8-a73e-456a-a803-ae3efc847f5e",
        "cursor": {
          "ref": "40563b3f-8c4b-4d1c-bbf6-442c9df03620",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cb262754-5115-4a5d-b8c6-c1a6103002d6"
        },
        "item": {
          "id": "438dc2d8-a73e-456a-a803-ae3efc847f5e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f98a62a1-7c1f-484f-91d9-10bf45dcb516",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2330918c-34fd-4fc5-b0ec-fda0057d34a6",
        "cursor": {
          "ref": "a4b2fe8a-455f-4991-902f-7300a82a0636",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "54e9554a-ee0f-45fd-99b3-bfd9d5f6f8ca"
        },
        "item": {
          "id": "2330918c-34fd-4fc5-b0ec-fda0057d34a6",
          "name": "identifiers"
        },
        "response": {
          "id": "b2145e5c-0911-484f-a553-827fe98d4685",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ec2b34-0556-4214-ba68-c0e0194b3599",
        "cursor": {
          "ref": "098346c5-d75e-4982-a91b-41b85e88e15e",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ae911ff1-8840-429a-bf08-fc8491be30bd"
        },
        "item": {
          "id": "06ec2b34-0556-4214-ba68-c0e0194b3599",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23952a19-3b8c-4b15-b040-9a94c46c9663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfb4d28-db59-41a5-bcea-ed29717c05af",
        "cursor": {
          "ref": "38437886-3465-49ba-8d56-4aa66cb9e7f1",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c0ba4a19-b83e-48e8-995c-1fad8fa4cdb5"
        },
        "item": {
          "id": "1cfb4d28-db59-41a5-bcea-ed29717c05af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7158a2fe-baf8-4072-bd7c-b232a1f82ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931970a8-07ed-4380-836e-14eecc6a9fdf",
        "cursor": {
          "ref": "d15b021a-3312-4816-bde0-1150f531efe4",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1bc7c54b-1751-4a9b-a0b6-7bfe89fb7a62"
        },
        "item": {
          "id": "931970a8-07ed-4380-836e-14eecc6a9fdf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c5b1abb2-70b7-4ba5-827c-b062d95958c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817c8d57-8bc3-4156-a30f-7288cd19dd5b",
        "cursor": {
          "ref": "149aa59d-2e06-4c3f-b2e0-8e801e76f508",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9f9306ec-f805-45ff-8fb6-dd61041cbd86"
        },
        "item": {
          "id": "817c8d57-8bc3-4156-a30f-7288cd19dd5b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3f0511fb-b6a2-4a02-9246-d5036a35d4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080b5c71-f293-4858-a5db-2d2e4e8362e2",
        "cursor": {
          "ref": "1b9d64c8-7c44-47b6-908e-cdae5452adca",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fd25fbb7-7c04-49d6-a561-f1c2ad2693c2"
        },
        "item": {
          "id": "080b5c71-f293-4858-a5db-2d2e4e8362e2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "325def8d-11ab-4a88-91da-adc7bd27fd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0896bce-f8dd-469b-a184-13454352b06c",
        "cursor": {
          "ref": "7eecc948-cedd-4a3e-ac30-d206b82c5607",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "61c91353-ec06-4aa1-a783-e0a41b2ea771"
        },
        "item": {
          "id": "a0896bce-f8dd-469b-a184-13454352b06c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b923ca04-37ce-40a1-9f28-76c4b62ae0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3cf6cc-4b0d-4c36-982b-8011bc0924d2",
        "cursor": {
          "ref": "4470eb05-772e-4d3e-a887-ae7e2c9be0b1",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5aa3c760-2b1a-4e9e-811b-92adae282a5d"
        },
        "item": {
          "id": "cc3cf6cc-4b0d-4c36-982b-8011bc0924d2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2e95502f-796b-4189-9c3e-860942f0e438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e4e0ea-c5e3-4e36-bc88-84b9de6b8ae9",
        "cursor": {
          "ref": "55aa7a91-ded2-447e-a52c-9ce00105d5d0",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d713d1ab-978f-4be5-8104-5457b0a7e0f4"
        },
        "item": {
          "id": "f0e4e0ea-c5e3-4e36-bc88-84b9de6b8ae9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ba1c6b1f-5fd6-48ef-9070-2636b964cd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651e77a7-636b-4f31-a39f-f72b093ccedc",
        "cursor": {
          "ref": "a8fd678d-c57a-4f93-8c96-65c1a877f7cf",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e353723-6abb-4b3c-8a27-c9d4911da5fb"
        },
        "item": {
          "id": "651e77a7-636b-4f31-a39f-f72b093ccedc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6bd0c3fe-e4c0-4322-a310-7b356c9f24d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adaab122-6396-473b-8ddf-bf3f89d1d26d",
        "cursor": {
          "ref": "301dad75-0d89-4697-a864-6946760f0ed6",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6405a94a-c49d-48ae-b343-49145f687f88"
        },
        "item": {
          "id": "adaab122-6396-473b-8ddf-bf3f89d1d26d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f8d8d2c6-8d56-422a-b268-0a54b5146bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd96e81-3e0b-4a5b-b09b-53233bd08574",
        "cursor": {
          "ref": "48767e31-c33f-4d50-a47f-7c0bd8b49647",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c8c0e4b5-cf32-4043-80a4-25fdb343b36f"
        },
        "item": {
          "id": "2cd96e81-3e0b-4a5b-b09b-53233bd08574",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8d3ea9ee-7e1c-4d2d-b7e4-2c3baa13120a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0df2d0-b863-48eb-a150-1a2c32d685a3",
        "cursor": {
          "ref": "ef9fc2c4-c65b-4b84-a02e-f23a861356a1",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e930dfd9-e9a3-466c-a99c-954c5abba518"
        },
        "item": {
          "id": "df0df2d0-b863-48eb-a150-1a2c32d685a3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c89770e0-d92b-4c66-973f-2c6417dee44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cc49d2-267c-4668-8d44-a4abf3706907",
        "cursor": {
          "ref": "9590450a-5465-425f-b87d-f4a26ecfc3f9",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13e20863-809a-483b-be07-d8b591afbba8"
        },
        "item": {
          "id": "b8cc49d2-267c-4668-8d44-a4abf3706907",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d35c3ad6-4d24-44d3-9b02-126520cc63f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd9163b-dab2-4f5e-9b87-d41594f8559f",
        "cursor": {
          "ref": "035b6b99-6da9-471f-8924-438fb2d749bd",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "38b457fe-6737-4deb-80d6-076bd01c2b98"
        },
        "item": {
          "id": "ffd9163b-dab2-4f5e-9b87-d41594f8559f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6595dac7-7db7-4d2d-8f63-f780136ff43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5629c5ab-c6ce-44a6-9f32-96dc82d2b529",
        "cursor": {
          "ref": "221260b5-1237-4468-b16f-fcf4bf625023",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5fa0d1b7-4abb-4bbc-ad9b-a6687e7887e8"
        },
        "item": {
          "id": "5629c5ab-c6ce-44a6-9f32-96dc82d2b529",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d20cb7d0-358c-4fc1-aa09-19a5d3e2bbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b5995d-0a8e-4664-bb0e-cea522bc0a42",
        "cursor": {
          "ref": "0b25dee5-3f36-4716-8e14-0ca2620e322f",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "86d40a79-4c2f-4d98-a896-69a0653674b6"
        },
        "item": {
          "id": "c2b5995d-0a8e-4664-bb0e-cea522bc0a42",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fed8a28a-e505-4e20-8c7b-c4f3991862f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66bb9d6-a928-4dba-9675-191aa16ce17e",
        "cursor": {
          "ref": "df31a980-6273-43fe-9ff1-1171dd99d474",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2213a7bc-5f2e-468e-bb2f-a4b9a31f1468"
        },
        "item": {
          "id": "b66bb9d6-a928-4dba-9675-191aa16ce17e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "392f151c-55a4-4ddf-9a88-2d41abc9c5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf70a5f-92fc-4a9b-934a-a3331279e55d",
        "cursor": {
          "ref": "289aecc5-0649-472b-8e2b-d7737268c4f0",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "63375d9f-f05b-44f7-87aa-784665e80d33"
        },
        "item": {
          "id": "3cf70a5f-92fc-4a9b-934a-a3331279e55d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "973a6d3f-f43d-4736-8b91-3fdbd92cf5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f0b5b-31c5-458d-a46a-a4a3f62b7b45",
        "cursor": {
          "ref": "403cd77d-858d-4a99-9596-24d861a27d13",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "377a8521-f525-43dc-8517-c533719d835c"
        },
        "item": {
          "id": "536f0b5b-31c5-458d-a46a-a4a3f62b7b45",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9cb741db-5c7b-4dee-a914-b2292582edc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4107f686-958a-4719-9b7e-6e08cfca6cc0",
        "cursor": {
          "ref": "8097eb51-c5d7-4fb7-826c-0f76af857478",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "548f9c67-7b6a-478a-9018-b0cb703ed1e3"
        },
        "item": {
          "id": "4107f686-958a-4719-9b7e-6e08cfca6cc0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "edd50768-9740-4cf5-85a1-c9a2c9feaa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aae5c2d-4bb6-442d-96c5-ba9ad7a21983",
        "cursor": {
          "ref": "2eae2dd4-571a-4690-a998-7e8d6d6a6a5a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "97e0c942-3e3b-4ebf-943e-c2609b7d7379"
        },
        "item": {
          "id": "9aae5c2d-4bb6-442d-96c5-ba9ad7a21983",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "712b6a66-8a0b-4e85-858f-72a5441951e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a14cb8-f263-40fa-82f2-eaaeb906c23d",
        "cursor": {
          "ref": "2afbe7b5-c926-46d4-9b01-2f3a87a02d14",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fc8807e4-9611-4858-b0b5-917e1f4f0e3d"
        },
        "item": {
          "id": "d1a14cb8-f263-40fa-82f2-eaaeb906c23d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b260e702-c29d-4693-a916-1ebe5f6f0dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250b4d12-a3a8-4560-8961-706da2933e52",
        "cursor": {
          "ref": "bdafe279-0784-42bd-b269-fd0b5d7b0666",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1e63927f-347d-4701-ba9e-0dac6bc81efa"
        },
        "item": {
          "id": "250b4d12-a3a8-4560-8961-706da2933e52",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "79b82d9c-519e-4542-b2c5-615337198d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df57d16-bc03-4ff1-88f6-efa17fe92560",
        "cursor": {
          "ref": "ee9cd508-bda1-4212-ab77-95285b830fb3",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "177e7592-b54f-49b4-a6cd-4aeec5393111"
        },
        "item": {
          "id": "4df57d16-bc03-4ff1-88f6-efa17fe92560",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "86b678ae-4620-4e10-a3f3-1ef2b6242445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6a50f1-8455-4927-ba97-801661971252",
        "cursor": {
          "ref": "53792f47-4aab-42bb-8299-5b3d49c1556c",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bdc2ca8f-0a08-4bfc-b458-c85e3b481f13"
        },
        "item": {
          "id": "3c6a50f1-8455-4927-ba97-801661971252",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1a8b04ee-807e-4169-982f-bdbd45986c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f0f302-f7ad-4aec-9f79-9d2db5afdb47",
        "cursor": {
          "ref": "5a25ebe8-3e08-484c-a240-15c50794d014",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "27f16315-9049-4e18-8f8b-1e94ec24f6fc"
        },
        "item": {
          "id": "a5f0f302-f7ad-4aec-9f79-9d2db5afdb47",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "03a71994-f6a8-4b52-b857-bd4e910022c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35437ab6-65b3-4c39-bb42-a43965e3ce9f",
        "cursor": {
          "ref": "23ac7f4f-86eb-4583-b7fb-60e0b55b63db",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d188c2ea-0da1-42c6-9d3a-2c9e9419e379"
        },
        "item": {
          "id": "35437ab6-65b3-4c39-bb42-a43965e3ce9f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6a17405b-3611-40ce-9e23-5fde5e4763c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2570815-e4a5-4ffc-a6e3-063594e5961c",
        "cursor": {
          "ref": "4810e85b-5bfb-4fab-8bbf-5b8c6859e731",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e02fe4f6-35c1-4a92-8b63-1fcd2fbbe3ce"
        },
        "item": {
          "id": "b2570815-e4a5-4ffc-a6e3-063594e5961c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bf33e36a-f4d2-472d-be3a-0cf8ecd2f472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a817c85-2888-4989-8fb1-354ae2ff6477",
        "cursor": {
          "ref": "055562a4-0365-4cbb-8df5-7734a1de7749",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f03a8bad-a0fa-4e5e-bb83-5c9eca927914"
        },
        "item": {
          "id": "1a817c85-2888-4989-8fb1-354ae2ff6477",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e6ca349c-c26d-4642-9501-7be58313c78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5411fd74-496a-4887-81a2-1b44b258c3c0",
        "cursor": {
          "ref": "816e511c-62d4-4ada-a307-92619c3bce0f",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "eaa0dff4-64d4-4d74-b07a-a4d3c3e2726d"
        },
        "item": {
          "id": "5411fd74-496a-4887-81a2-1b44b258c3c0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4c16547c-9e6e-4a15-be22-aea534b905bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee33786-6141-4bd3-b893-987a4f06e7d8",
        "cursor": {
          "ref": "e5b74be0-1341-4b15-802d-6c52b53d10b4",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7335978c-291c-44b9-88bb-1a7f17186e19"
        },
        "item": {
          "id": "9ee33786-6141-4bd3-b893-987a4f06e7d8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0503fbc3-1c24-47af-8e33-390fac6ee3fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0ae12bde-1c7c-4df7-82f9-952e64af23ff",
        "cursor": {
          "ref": "fe7fb414-7aaa-4d41-83cf-788004134c36",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "91245d11-a12a-4225-a94f-44419a6adbab"
        },
        "item": {
          "id": "0ae12bde-1c7c-4df7-82f9-952e64af23ff",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f763c8b9-45bd-4c40-9bd7-da6934835aed",
          "status": "Created",
          "code": 201,
          "responseTime": 2039,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7685f520-856a-4352-8fde-11c25ecaa230",
        "cursor": {
          "ref": "96d8e337-e0c8-4de1-a9d4-27a8d4f25d96",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "46b5198a-bd77-4810-9aa0-50ef0a1a82a1"
        },
        "item": {
          "id": "7685f520-856a-4352-8fde-11c25ecaa230",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7170541d-4223-44fd-ab89-f2df49a6c2df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f6bc9b94-daeb-4cc3-a0b6-d0ccc872888d",
        "cursor": {
          "ref": "ec9a3ef1-d412-4945-b3c3-a9871ef60c89",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3d7264ea-b590-41c7-87a0-4b42138af0c5"
        },
        "item": {
          "id": "f6bc9b94-daeb-4cc3-a0b6-d0ccc872888d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "79ce0b0e-d48f-4d30-80f1-59f8528813fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc87ac8-d6fd-4ada-bc7a-5515eb8cc506",
        "cursor": {
          "ref": "604e84c1-d8e5-486d-b564-2c7be8e3ebee",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5fa65272-8960-4e65-ba13-6b6c42cd2bb8"
        },
        "item": {
          "id": "dcc87ac8-d6fd-4ada-bc7a-5515eb8cc506",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a9348876-4586-4aa6-b611-7911ff2e0573",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2e59aca7-7cae-4ba7-8522-3e8c00b18568",
        "cursor": {
          "ref": "4adf8258-0549-46a1-aad9-f3149ecf246a",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ea14ec0f-36b3-4fa5-b660-2996d7b8b38d"
        },
        "item": {
          "id": "2e59aca7-7cae-4ba7-8522-3e8c00b18568",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d8845f81-01d9-4a7d-bd40-29c158641f6e",
          "status": "Created",
          "code": 201,
          "responseTime": 1515,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cc7c5074-8e26-4321-af4b-0129470a332a",
        "cursor": {
          "ref": "9cab39fd-c22f-4fe5-9e55-4afc06a1f58e",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8dffc5b0-11b6-476d-955a-2df0b7acc094"
        },
        "item": {
          "id": "cc7c5074-8e26-4321-af4b-0129470a332a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "df985d83-1b8b-4af8-8ae5-295761c956bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "683d26f2-e018-4436-b97d-7d9f506a3d77",
        "cursor": {
          "ref": "f1434b37-f5f8-4d26-91ec-16a0462feac3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e5b42dff-11c2-4210-a50c-54aac8ca0199"
        },
        "item": {
          "id": "683d26f2-e018-4436-b97d-7d9f506a3d77",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8af25911-077f-4dbe-84f9-30d27fa2d0d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 752,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "21a71124-65e8-403f-a2f8-687f44351928",
        "cursor": {
          "ref": "68c4bbee-7aea-4856-b341-f6f7ca30f566",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0c596791-f659-4683-881c-ea3f6d3c4082"
        },
        "item": {
          "id": "21a71124-65e8-403f-a2f8-687f44351928",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "444706ba-d87e-46b5-a4f4-84980db2d94b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1ee1778b-94f8-4c7e-a9db-e5f5229a40d6",
        "cursor": {
          "ref": "74ae6fbf-d103-41ad-bafa-73d2f6c3d8c5",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8603b179-6ade-4456-b831-1e588d501d3c"
        },
        "item": {
          "id": "1ee1778b-94f8-4c7e-a9db-e5f5229a40d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "01202033-c3f5-46a9-b4aa-e3f8f3f60783",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6a12dcdf-7ed7-4686-91e8-3edbe2c447d8",
        "cursor": {
          "ref": "a0a5260b-80e7-4c20-b7e6-6940d6c83a2f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b9af2cae-748a-4146-93bb-bf91d8c7301a"
        },
        "item": {
          "id": "6a12dcdf-7ed7-4686-91e8-3edbe2c447d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a08d6728-1eed-4c41-8086-59d0573fe793",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5d5afc63-afed-48f4-9fc8-58efbdb292c7",
        "cursor": {
          "ref": "8edb733e-bf8d-4873-ba61-1b49bcb371bd",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "10678887-0e41-403b-9c40-1a32c1f5e460"
        },
        "item": {
          "id": "5d5afc63-afed-48f4-9fc8-58efbdb292c7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd00a9c4-0116-41a7-992b-47fbb802686b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2499d96a-4144-442a-b77d-635d8687024b",
        "cursor": {
          "ref": "563ea787-33f3-4bd2-91d3-9ea64049dc4e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9998a388-5a4c-4d53-aec0-6993c8a2e900"
        },
        "item": {
          "id": "2499d96a-4144-442a-b77d-635d8687024b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4281928b-125b-4a84-a721-aa02ce7bfd1a",
          "status": "Created",
          "code": 201,
          "responseTime": 993,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "658df422-6600-4d96-902b-1fd80d6a5c49",
        "cursor": {
          "ref": "d533982a-9bc5-40eb-b8c4-93d6a1230784",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4aeace2-64df-4800-a675-1424184e9248"
        },
        "item": {
          "id": "658df422-6600-4d96-902b-1fd80d6a5c49",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5e87b777-6f23-4758-b4be-e13bb33080cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad815e3-d637-4e70-83b4-5228d09209d4",
        "cursor": {
          "ref": "871c214d-fa45-427a-b834-1eaecfb3b081",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b5132200-7d04-49d6-a509-12961056e9f2"
        },
        "item": {
          "id": "6ad815e3-d637-4e70-83b4-5228d09209d4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "81ab2445-cd38-4e0c-8cc6-c3a2f1176e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59eb49d9-ea64-4e40-b14f-3e47eeff739a",
        "cursor": {
          "ref": "dc74f9bd-4a65-4f61-b55c-473e62c889cb",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1f05dcc4-34f1-4140-8572-247563894471"
        },
        "item": {
          "id": "59eb49d9-ea64-4e40-b14f-3e47eeff739a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "99f469c7-fae9-40ee-b610-4e2be0d4fed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91a2851-0c32-4d78-9201-6d45a6260547",
        "cursor": {
          "ref": "7f2f7017-a010-4981-9615-3e8ba900a606",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6ec26bcf-2db9-4fd4-8978-4ad9ada9b7f6"
        },
        "item": {
          "id": "b91a2851-0c32-4d78-9201-6d45a6260547",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "69a92bee-6e59-4d98-88be-f161c44daa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262aa6e9-1f73-4964-87ea-9fa84593dde4",
        "cursor": {
          "ref": "f834eaab-51e7-4682-8d5f-fc35644b0983",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1f0784af-8e30-4fc2-a0a5-8ded84bc2fdb"
        },
        "item": {
          "id": "262aa6e9-1f73-4964-87ea-9fa84593dde4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "65c94bf3-e878-4c9c-b057-1a821896679f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378f4f40-f45b-46cf-a740-6a70b090b1b5",
        "cursor": {
          "ref": "c701199a-6ae8-4d35-bcc9-c52c8e1678e4",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a490c91d-07b8-466a-97da-00561e666d72"
        },
        "item": {
          "id": "378f4f40-f45b-46cf-a740-6a70b090b1b5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3032119f-4b9a-4d70-b69e-3af84f0685dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5951617-4553-4855-ac95-8b365bcf6618",
        "cursor": {
          "ref": "44788da5-fb6d-4f14-aec4-dc4b3db34237",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "67a72a66-77a3-4da5-9638-a1bc894d90ab"
        },
        "item": {
          "id": "c5951617-4553-4855-ac95-8b365bcf6618",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "68212eb3-81c3-46bb-94bb-70a7601d25c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454e30b6-e74b-4b80-a8f1-a0940fb8aac5",
        "cursor": {
          "ref": "b793a2bc-9b64-46b6-a3c3-9c20180d0d8a",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "217d763a-451b-40ed-b0cc-ecf21c95333e"
        },
        "item": {
          "id": "454e30b6-e74b-4b80-a8f1-a0940fb8aac5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c0e7214a-d0b6-4813-a366-159f98ec3ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614e6e21-ca2d-4606-9785-191c0cee2bd0",
        "cursor": {
          "ref": "989f8a42-dc7a-4cd5-acdd-b5b78c5bc722",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "914de17f-1bf8-4917-8ed3-7735d2e6a807"
        },
        "item": {
          "id": "614e6e21-ca2d-4606-9785-191c0cee2bd0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d2666f31-18cc-40bc-ae9c-c778b43eb3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228f01e9-1ffa-46de-9a5f-6dddfbcc80db",
        "cursor": {
          "ref": "71076644-d374-4193-bb6b-2f9abd2d37c3",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e20ef4ac-8763-451b-ba2a-f23fbed9f62b"
        },
        "item": {
          "id": "228f01e9-1ffa-46de-9a5f-6dddfbcc80db",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "77ecdc39-8374-4c60-a19a-e3dadb044e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830b32c2-4099-4fa2-ab5a-7119cb05f8ea",
        "cursor": {
          "ref": "39ad266d-8598-459a-a960-62ac27df632d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c4dc3418-9251-40a8-a62e-02807fd4818f"
        },
        "item": {
          "id": "830b32c2-4099-4fa2-ab5a-7119cb05f8ea",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dd6c9698-e925-437f-8de0-34c20907f485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95621497-86e5-4cec-b4e8-73b63538f31e",
        "cursor": {
          "ref": "6d79d865-e389-496b-9f53-40dc2764eebe",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4775c096-470f-4266-8f05-a99f326c47b5"
        },
        "item": {
          "id": "95621497-86e5-4cec-b4e8-73b63538f31e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "770a977e-0ffd-4a54-aeac-744ab8889f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f5ae41-be79-42bb-9e1d-d6e25081e8e1",
        "cursor": {
          "ref": "113e56d6-bb6b-4f8f-a4df-1a3ba8eaccb6",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "22ade67e-c9be-4de3-802d-9c51d2e9bf05"
        },
        "item": {
          "id": "b8f5ae41-be79-42bb-9e1d-d6e25081e8e1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1a96baa9-67be-41e9-8e84-c771d9a1554b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad41e5a7-c974-4570-9d94-4dbc236d52a2",
        "cursor": {
          "ref": "b6805173-1d5b-43c2-b252-ae1b59fab445",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7b0e239d-28a0-43a7-8972-efecad1914e9"
        },
        "item": {
          "id": "ad41e5a7-c974-4570-9d94-4dbc236d52a2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "239ec774-a53b-4015-8c72-d3b82a883727",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 686,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f72f06be-bd08-4b1c-a97e-a28599de8609",
        "cursor": {
          "ref": "fe2e2ff6-91e8-4bb9-b65a-438f094d0fba",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "781e01d7-1b3e-4062-a10d-09667d10bbe7"
        },
        "item": {
          "id": "f72f06be-bd08-4b1c-a97e-a28599de8609",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bf6f86de-40c3-497c-b6a0-8e238a43aecd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 744,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5e540bb5-9ac2-48ec-852d-abf9ea6b6174",
        "cursor": {
          "ref": "e9e69d60-4f3a-44b6-ad51-26431a0191a9",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9ebf4009-da49-47b8-b156-4ee569e06f0f"
        },
        "item": {
          "id": "5e540bb5-9ac2-48ec-852d-abf9ea6b6174",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1fb760ee-f787-4a48-aa7b-d51095932768",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2479dc39-f714-42e0-86d1-f567b519e188",
        "cursor": {
          "ref": "304a43e0-8e90-486a-a707-7e494ec28fab",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5997c867-c64b-49d4-b513-5731f785887c"
        },
        "item": {
          "id": "2479dc39-f714-42e0-86d1-f567b519e188",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "03257f5c-f91d-4812-9e56-da410a028edd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 703,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f6062e15-af37-48ee-88eb-9013203dc519",
        "cursor": {
          "ref": "8d0cfa46-9939-4990-b8b0-aae07bd156e5",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bf64edaa-ab55-4095-9fa8-2ec2986132da"
        },
        "item": {
          "id": "f6062e15-af37-48ee-88eb-9013203dc519",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "316d36b6-60d3-40ad-af0e-3855fffd91b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "234e08fa-840c-4e01-982b-34ff1e35abb4",
        "cursor": {
          "ref": "d50988d6-7316-49fb-8a6f-8d13fa4c2b88",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "121273a5-b669-4782-ba07-721b290c6354"
        },
        "item": {
          "id": "234e08fa-840c-4e01-982b-34ff1e35abb4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "744ab6ed-6c16-48ea-9516-dafa978c2e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45174bc-0567-4472-b25d-e0144716892a",
        "cursor": {
          "ref": "656bfdbe-a712-480c-971e-363f797c251d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2571741c-b4bc-466c-ac9d-b7dc563df42f"
        },
        "item": {
          "id": "e45174bc-0567-4472-b25d-e0144716892a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f5ae9c25-a7e5-45f1-8d78-ebba30d220ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a780041-82e7-4f0e-9580-6368b2eb3055",
        "cursor": {
          "ref": "ed18ebc2-cb52-4104-94c3-18b31bd5f899",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "115a751e-17ed-4e09-9072-ab5b3852550c"
        },
        "item": {
          "id": "3a780041-82e7-4f0e-9580-6368b2eb3055",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ddb70dd0-7d31-47e1-8376-92ca1834389b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89c9b17-40ec-4a0b-a204-7ad006c30111",
        "cursor": {
          "ref": "356e54a7-be20-443c-97a6-6e604dd121ed",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1a6ba8d4-4cea-4f40-bf7d-6480d0c10f56"
        },
        "item": {
          "id": "a89c9b17-40ec-4a0b-a204-7ad006c30111",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a0bf7869-6baa-4101-9cf2-10423d635379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0031aff-fd00-4ada-91b2-0e42da8d02fe",
        "cursor": {
          "ref": "960631d6-bd5f-48c0-8589-82d571ba6120",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1276313d-2d1a-41b3-8ccf-a9e9be1ef5a8"
        },
        "item": {
          "id": "f0031aff-fd00-4ada-91b2-0e42da8d02fe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "47030bb0-0485-4adb-b66e-fc7a98973802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1be9d6-cdfd-421f-addb-e32391b2d858",
        "cursor": {
          "ref": "7d76ce63-07f8-469c-b9d8-8c7531093f3e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "98e4896c-351f-46b9-8ff4-e97a9e5f2102"
        },
        "item": {
          "id": "9a1be9d6-cdfd-421f-addb-e32391b2d858",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fb8e1158-96f9-4419-b78d-976c64fa793c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1663273a-7cd3-434f-bbf1-a1899e31f689",
        "cursor": {
          "ref": "86d44508-0a49-4397-960d-d8768ab080e1",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c0ca160-7a9a-4f5f-b446-e7f21a829a4d"
        },
        "item": {
          "id": "1663273a-7cd3-434f-bbf1-a1899e31f689",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7089b969-d250-469f-b054-3808e7612a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69f526c-0005-43c0-a74c-4a15f5466541",
        "cursor": {
          "ref": "4f3fcf8a-58ff-4cf9-9d78-68401292f14d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cb251644-4894-4b0f-8c29-70757ba81e4c"
        },
        "item": {
          "id": "b69f526c-0005-43c0-a74c-4a15f5466541",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "56321fbb-715b-4cba-9851-a686cf1c8552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26191d68-0586-4512-80bd-bda31dfddffd",
        "cursor": {
          "ref": "89669f7d-1fc1-4f0a-84da-3451187d61a4",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eb408909-cb6d-4911-8a5e-3354ea6dd1f1"
        },
        "item": {
          "id": "26191d68-0586-4512-80bd-bda31dfddffd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "19c248a3-cdc4-4609-95dd-1d6b907fc0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77de64f-d3fb-4870-aedb-fabcb7e517e2",
        "cursor": {
          "ref": "be2ff403-355a-425a-88f3-c31a3c07fcf3",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5628a821-dce5-4f49-af1e-3279da7b48ec"
        },
        "item": {
          "id": "b77de64f-d3fb-4870-aedb-fabcb7e517e2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "01e240c0-b109-4998-8a59-cec54403d06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fad0744-8b91-4948-9edf-8368237c7e9e",
        "cursor": {
          "ref": "3d5c9e2e-ac9f-4295-9b94-09417497e57f",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e572c2c3-ab06-4812-aaf5-ebb98cf78de9"
        },
        "item": {
          "id": "2fad0744-8b91-4948-9edf-8368237c7e9e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "56a97431-6229-4659-9a60-4dd7bada6805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65b197c-0ca7-4ef4-868e-a2b9959aeb3d",
        "cursor": {
          "ref": "086b6632-da76-47ca-ad09-7155f757c376",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "da35b119-3a6a-4dea-a340-6723e639ad42"
        },
        "item": {
          "id": "f65b197c-0ca7-4ef4-868e-a2b9959aeb3d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cb916a06-ad90-4890-8bc4-7f3881cbbacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d798e9aa-08d7-4495-ab38-53291eb0570c",
        "cursor": {
          "ref": "89a7bf09-728a-41b9-8e31-3eca41824374",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e76f4255-473f-4d0c-b487-7135536326c8"
        },
        "item": {
          "id": "d798e9aa-08d7-4495-ab38-53291eb0570c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a58bd8e5-c6a3-41b1-9116-f5fe0a2f94fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c02d22-edf4-4f11-a325-b0fd66248205",
        "cursor": {
          "ref": "efbda4a9-1cff-4052-8484-ae22eb9770b4",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "edf99a9a-eebc-48c3-b149-48a0d5c8c30e"
        },
        "item": {
          "id": "b0c02d22-edf4-4f11-a325-b0fd66248205",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9267f7d7-1225-48f9-bc68-7990ccda2118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6974d6d1-b566-4c9d-91c2-6dcafc6facf9",
        "cursor": {
          "ref": "02d75471-8d9c-477f-b52b-0ee046136e39",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fdfa6025-d145-4e90-9f12-50e81a61593f"
        },
        "item": {
          "id": "6974d6d1-b566-4c9d-91c2-6dcafc6facf9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4592e452-053b-48c2-9d61-f61dc9dffb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9512fca-c21f-444a-83ab-1f51a00149c0",
        "cursor": {
          "ref": "f548dd08-b4c1-4aab-927a-fab8f1bebe8d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a0ee395d-d071-4e2e-84f8-fe5b1a00d279"
        },
        "item": {
          "id": "d9512fca-c21f-444a-83ab-1f51a00149c0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "641f3ba6-68cb-4ca0-972d-84c4defcfd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d93b99-0809-4e47-92b2-1ce9d34a490f",
        "cursor": {
          "ref": "941225c4-dc5a-4f7a-b90e-bb588538ec39",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "85153530-42df-4177-a630-2994e6a011ab"
        },
        "item": {
          "id": "e5d93b99-0809-4e47-92b2-1ce9d34a490f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "50655d95-71f7-4bf8-aedb-28482919bb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749d727b-7880-4ccf-b3c8-e441c03b031f",
        "cursor": {
          "ref": "75af050d-5576-4224-8523-a50761868738",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "16849263-22a6-46f5-a7dd-bc8275e009a6"
        },
        "item": {
          "id": "749d727b-7880-4ccf-b3c8-e441c03b031f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "230630fa-0b5c-46d4-9e7e-75c8a6c395b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982f8661-e8e0-4051-a2c8-c62748d294b5",
        "cursor": {
          "ref": "059070b1-f087-443a-9e9a-018b01e2a958",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "318e0734-beae-42d8-901d-436d6fcbfa45"
        },
        "item": {
          "id": "982f8661-e8e0-4051-a2c8-c62748d294b5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5d2d49c7-d871-43cd-a2b8-c62b2d4c369c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7f8304-cc23-45ef-80ad-ec360051fdb3",
        "cursor": {
          "ref": "69a0c7a4-4caa-47f3-ac3d-847e31cbe80f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "390a4ec5-f4df-43e8-84ea-a890bffcecb3"
        },
        "item": {
          "id": "ff7f8304-cc23-45ef-80ad-ec360051fdb3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4fe090da-b24a-46f9-a01a-43ff3a61cced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd43294b-3930-491c-863c-ee6894c4a614",
        "cursor": {
          "ref": "eb33ced0-221b-4bf1-86fb-f1af1bf8fb9b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ffba99b5-dc3d-4f1d-8080-f58234c78932"
        },
        "item": {
          "id": "cd43294b-3930-491c-863c-ee6894c4a614",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bc345f33-c3d9-4cc8-a3e8-5773af722017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57bb60c-8722-4d54-952e-cee825ecdf20",
        "cursor": {
          "ref": "bd048b2f-2f49-47a2-b872-649ba98131e6",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d1728f8f-f503-454e-b61d-8d83c6b25c9c"
        },
        "item": {
          "id": "a57bb60c-8722-4d54-952e-cee825ecdf20",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "15625990-6a6f-46b3-af33-8e0ee0284ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1918d60a-bf08-47e2-8b6f-d4fc9603d04b",
        "cursor": {
          "ref": "5a7f6449-59e1-400c-b7ef-da51dc7c9cde",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cc0a4094-1cf9-47cb-84b1-cb0c21c53fbe"
        },
        "item": {
          "id": "1918d60a-bf08-47e2-8b6f-d4fc9603d04b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a1814f58-5ca9-4592-88b4-5f5d411d888b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fab2469-88d1-424b-990b-da11a30e3de0",
        "cursor": {
          "ref": "df26b330-ac58-424b-8909-9bccff3ef344",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "35d6adc1-f693-4bcb-872c-2aba68d1b1ba"
        },
        "item": {
          "id": "6fab2469-88d1-424b-990b-da11a30e3de0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a129e21d-17fc-4e22-bef2-63b969098402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2c83ac-df1e-47db-b06d-203a563c4489",
        "cursor": {
          "ref": "5ef4cd4b-c37d-4ce3-9acc-a8e3fc0e558e",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "87723829-a196-4d78-b645-e41b11e479b8"
        },
        "item": {
          "id": "8d2c83ac-df1e-47db-b06d-203a563c4489",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e0efdcee-8c85-42c2-b9ae-4c31996f6220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722adc3b-4205-4081-bfd5-01a977760d23",
        "cursor": {
          "ref": "6ac5b077-a600-4993-b9fa-c61b6064618c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "932c7585-2e58-48b5-a86e-56448e1ad7e1"
        },
        "item": {
          "id": "722adc3b-4205-4081-bfd5-01a977760d23",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "deddb2a3-d8ba-4730-b603-1a96a460e4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e119ca0-2f75-4913-b974-c5d98f7d6de4",
        "cursor": {
          "ref": "4c5bd02a-6d6d-417a-9f82-db9d8d76344e",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f280bb44-f7cd-4283-b7ab-909a8c6be3f7"
        },
        "item": {
          "id": "6e119ca0-2f75-4913-b974-c5d98f7d6de4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "49a92731-72ff-4c92-b890-fb8f6b1af0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1348aaf5-ab9a-4d1e-ba59-2932235ab6b8",
        "cursor": {
          "ref": "37fc9570-6da7-4872-9420-cc16087ae013",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "502aaae5-6c58-42e1-a446-a3b7672f9bbe"
        },
        "item": {
          "id": "1348aaf5-ab9a-4d1e-ba59-2932235ab6b8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "33192b90-75ee-4ece-96d9-eac584f91b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1125645f-7065-4dd3-824c-93d1a11904a3",
        "cursor": {
          "ref": "3b86796a-d03a-478f-a472-a77f001601ae",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "85468b91-6715-4faf-afa4-7238142ad931"
        },
        "item": {
          "id": "1125645f-7065-4dd3-824c-93d1a11904a3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "58d79877-e248-4129-9ae0-5dd33bf8528c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637dee3e-ae34-4afe-8dd1-ec7b643f0b6b",
        "cursor": {
          "ref": "67984965-29d9-48f3-93e7-f1ea7649db64",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5a9848ca-7070-4e2d-b5ed-05e01d23eae6"
        },
        "item": {
          "id": "637dee3e-ae34-4afe-8dd1-ec7b643f0b6b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "701a4721-512f-4db5-b414-835d7487bbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5730dc73-c5a5-4e26-81b0-4e86285ea88d",
        "cursor": {
          "ref": "3a5a0835-2928-457e-a354-b72329af8b5b",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3b06684b-72bf-4a14-ab76-f43cf7502436"
        },
        "item": {
          "id": "5730dc73-c5a5-4e26-81b0-4e86285ea88d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "03478dd0-1a83-4c93-996b-599bb9f547ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abc2bd5-52cd-4213-b230-583b3e6b619a",
        "cursor": {
          "ref": "106d75b1-ce7e-4fc7-ab47-b198d5632369",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "dc803e04-d28d-4060-b531-e423569486e6"
        },
        "item": {
          "id": "4abc2bd5-52cd-4213-b230-583b3e6b619a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "781bbb92-99f2-4467-8aa9-c58f9155eec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efc1c46-10e6-4712-a1aa-66d76481f73e",
        "cursor": {
          "ref": "21291b27-91f7-45a6-b824-e1d0a00652e9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bf8e1039-e23c-4fac-8e11-f211fd9bcd7f"
        },
        "item": {
          "id": "4efc1c46-10e6-4712-a1aa-66d76481f73e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ffa6930a-b7f7-4e31-8539-f4c62ed0f43c",
          "status": "Created",
          "code": 201,
          "responseTime": 1518,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c721d961-2f36-4ad3-bf4e-34c499eaf679",
        "cursor": {
          "ref": "2a085cb0-12ef-43de-9359-e6a41c9b149b",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6ee82e83-da6e-4ad6-9f39-f3bab69cd9b6"
        },
        "item": {
          "id": "c721d961-2f36-4ad3-bf4e-34c499eaf679",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d0d47e68-ce5f-477c-8c07-fdadd160dca0",
          "status": "Created",
          "code": 201,
          "responseTime": 913,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3793638-4f25-435a-a491-aa8d8170b1c3",
        "cursor": {
          "ref": "7861486b-ecf2-4c65-b8b4-231731b64787",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e39f413c-fff9-4ce4-86a9-50e467e3acd4"
        },
        "item": {
          "id": "c3793638-4f25-435a-a491-aa8d8170b1c3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a8ae9675-b914-46d6-9f8d-8b5fd492a32e",
          "status": "Created",
          "code": 201,
          "responseTime": 943,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a45066-11cd-4676-abf3-62118509ad12",
        "cursor": {
          "ref": "aac2d52a-dc2c-4b68-8382-c22fef377a01",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1ec223b0-fdb7-4195-a91a-e96f0b0fbd77"
        },
        "item": {
          "id": "b9a45066-11cd-4676-abf3-62118509ad12",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6adf6e28-4a71-4a09-b36b-1dca7bbec115",
          "status": "Created",
          "code": 201,
          "responseTime": 950,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b12084-4aaa-4199-98e1-0cbd0ca93431",
        "cursor": {
          "ref": "f49c2078-f736-4176-950f-307fe146b7e3",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1671cdd6-fd85-42bf-bda6-186095c863bb"
        },
        "item": {
          "id": "27b12084-4aaa-4199-98e1-0cbd0ca93431",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9b4489a0-0a6d-4478-935e-a968a879d269",
          "status": "Created",
          "code": 201,
          "responseTime": 973,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35971f0-b03d-42a8-bcfb-3cf8d31a891b",
        "cursor": {
          "ref": "87ddfb27-0ca5-4a72-803a-aeaea10a0603",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "26780998-b43a-4fa1-831f-9e4358dfc03b"
        },
        "item": {
          "id": "a35971f0-b03d-42a8-bcfb-3cf8d31a891b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "97413a39-4091-484a-a361-3cff14098ec9",
          "status": "Created",
          "code": 201,
          "responseTime": 1128,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d717f0-00aa-4140-8a3a-27152f366d43",
        "cursor": {
          "ref": "b9c3609e-4e5a-4c29-875e-f1180d199893",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6d6539df-d05f-42ac-a117-3caf5744c9b8"
        },
        "item": {
          "id": "79d717f0-00aa-4140-8a3a-27152f366d43",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "485c6626-3d7d-4114-872d-6f4e7fe50e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6829020a-bb8a-487d-9fbb-903e00aa1d1a",
        "cursor": {
          "ref": "5be02395-6720-4676-b041-a7c9e40a94a1",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eb577fd3-a125-4af1-adbd-3216910b0383"
        },
        "item": {
          "id": "6829020a-bb8a-487d-9fbb-903e00aa1d1a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7b1cfeb2-ddd5-4b99-8378-9d60f8653c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b8ed7d-61bb-49bd-90cf-de89006bbc2f",
        "cursor": {
          "ref": "14f7be6e-e749-4e28-9805-79db59b3e0b7",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "be03806c-0a27-46eb-ae64-c7ec1c6ffc35"
        },
        "item": {
          "id": "62b8ed7d-61bb-49bd-90cf-de89006bbc2f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "19fd3a2c-d6b4-43b0-9539-9cd44f3f1865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738a2366-89ef-4c00-a1e2-c558c7fa4420",
        "cursor": {
          "ref": "e4655695-e081-4479-af64-6c1be2783341",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a9ba4a9f-3a36-4074-be6d-d8455721bf6c"
        },
        "item": {
          "id": "738a2366-89ef-4c00-a1e2-c558c7fa4420",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "44f9844e-33e6-478f-94aa-d7fc77b41b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ec8bd9-ca93-4d13-8633-d5287ee9cd63",
        "cursor": {
          "ref": "8b109a64-80f9-445d-a268-2625e4152401",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6c86d6b1-481d-4e1a-b7b1-2d141437f896"
        },
        "item": {
          "id": "73ec8bd9-ca93-4d13-8633-d5287ee9cd63",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "afceb10e-6a62-42b2-a6fc-19dedd74fcd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54e62a1-5687-4d91-815b-47711cf4264a",
        "cursor": {
          "ref": "f691060e-0cac-46ae-8db2-877431838623",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7f0d4c19-8632-4294-8373-6175dc6c35fb"
        },
        "item": {
          "id": "e54e62a1-5687-4d91-815b-47711cf4264a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "abc8730c-c61e-42a4-aa72-5b75b0ad9ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e55991-00d3-46f5-8178-29974bac9c47",
        "cursor": {
          "ref": "499c88f5-a7e9-4a2b-8e3b-a48390a52fc7",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e4d7dc1e-dca7-450c-83d3-b4b738bd0236"
        },
        "item": {
          "id": "46e55991-00d3-46f5-8178-29974bac9c47",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aa80c8e7-ae0d-4d03-b95d-0507fe86a271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03652c4e-e35d-44f1-a84a-bdcf4343b8e3",
        "cursor": {
          "ref": "c11bc832-fc6e-4223-86a6-9e573376667c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1983bd65-e319-45d6-8818-dac4c763423b"
        },
        "item": {
          "id": "03652c4e-e35d-44f1-a84a-bdcf4343b8e3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cf2a60a2-2e74-4e1f-bbaa-88d9ecaed14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da6057a-6d49-4689-9f48-83ece9a18552",
        "cursor": {
          "ref": "9fffb070-4381-4013-a35f-a5af0a7a82f4",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "00a1033b-f351-48fc-9ea2-3edbc7fb2fa3"
        },
        "item": {
          "id": "7da6057a-6d49-4689-9f48-83ece9a18552",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c15596ca-b4a4-4746-9c80-b5326b508ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b575e01-46a3-4c3f-976b-a672dfa562ea",
        "cursor": {
          "ref": "2a2872d0-05c5-47b6-aaab-ea8c90eb3705",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "13da7597-1060-481c-9836-93efb8a6697d"
        },
        "item": {
          "id": "7b575e01-46a3-4c3f-976b-a672dfa562ea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e1ce5665-8f7a-47bb-929f-a48c0391cc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab64252-cf35-40ba-8506-bb30cb71c266",
        "cursor": {
          "ref": "c2723db5-e03a-4fa3-b92a-c18bd22a938f",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8a8cbed6-98dc-46fb-a9ec-84e94c01136f"
        },
        "item": {
          "id": "bab64252-cf35-40ba-8506-bb30cb71c266",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e0d036b3-3354-42f9-be9d-08009c16a1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c784a82-8b3f-48bb-a514-a972e128de3f",
        "cursor": {
          "ref": "d929be1a-c38b-4a0e-9929-87c7f8ec970c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8eecaa55-e6dc-4ad8-9148-8917e6281561"
        },
        "item": {
          "id": "4c784a82-8b3f-48bb-a514-a972e128de3f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "546592a9-4615-4a56-a316-93df259ebafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89fd13c-d075-4afc-8d7a-d62a550ab6b7",
        "cursor": {
          "ref": "e01623ea-e97c-4668-9562-eeb4e6a6860e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "55e3bfdb-dd16-425f-a977-c62a3f79034f"
        },
        "item": {
          "id": "d89fd13c-d075-4afc-8d7a-d62a550ab6b7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fee8f9bd-00ae-4529-9829-ff00b6d37371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4160c9-c4a3-4944-95f5-0f1e59f99eba",
        "cursor": {
          "ref": "5e2e231e-13f2-4bb5-8c7d-2ed3bd378c43",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f530a455-554e-4b3a-85bd-1a82613940c9"
        },
        "item": {
          "id": "df4160c9-c4a3-4944-95f5-0f1e59f99eba",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f534d2fb-a1dd-4d09-ae3e-8e1921337349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3554e7-607d-4857-8937-ebfe2dcc062a",
        "cursor": {
          "ref": "f4cccacf-005a-4338-b8a0-db582506b569",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eb373c68-e86e-4561-ac4b-48382e09fbd7"
        },
        "item": {
          "id": "cc3554e7-607d-4857-8937-ebfe2dcc062a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "af6a6c57-dc6a-4b6e-b032-c894e9bc34dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185071e3-adae-4461-b6e7-a32a9aba4d95",
        "cursor": {
          "ref": "102a1722-120c-45d9-8835-c4be67d12f50",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "546f0cd4-0e4a-4ee2-a4df-a6165f641c4e"
        },
        "item": {
          "id": "185071e3-adae-4461-b6e7-a32a9aba4d95",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5be69c9b-dd38-4536-86c5-2ee309055029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b330c19c-9575-4c54-8a50-40f45efa0cf7",
        "cursor": {
          "ref": "c34bd89f-ffb7-4d74-98bc-aa0f4c397526",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "79c22ee9-699f-4ea6-bf6c-4b822e481d6d"
        },
        "item": {
          "id": "b330c19c-9575-4c54-8a50-40f45efa0cf7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e7b5a480-9b50-4999-b381-49bb01efe361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9401447f-e38d-48b0-b861-bd555b23ee09",
        "cursor": {
          "ref": "13eea7ad-9b23-42e1-b53a-fa3fa55d082b",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "db5cbbc6-ec97-47fd-b9d3-01fa573e7612"
        },
        "item": {
          "id": "9401447f-e38d-48b0-b861-bd555b23ee09",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6f9c9875-91c1-4ae0-8ae7-bf540e7e65c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192e524a-3740-4d5b-8684-f9cd6a91ab15",
        "cursor": {
          "ref": "9ad4d053-eed4-451a-af87-2f3578411029",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4649d889-fe84-4298-aa96-efba88e72946"
        },
        "item": {
          "id": "192e524a-3740-4d5b-8684-f9cd6a91ab15",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2ffb3797-70fa-4b0a-a4bc-5d8c116942c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48293aa6-c0fe-48eb-8db1-34be23894494",
        "cursor": {
          "ref": "861056b9-6a4d-4a0d-8608-d2814b9cffbc",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "999fbab1-872d-485a-9f54-752195f8cd84"
        },
        "item": {
          "id": "48293aa6-c0fe-48eb-8db1-34be23894494",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1b60d4de-60b0-4919-80e5-632b9275ac3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2dead9-6c64-4e1e-be9a-6a78a9051fc4",
        "cursor": {
          "ref": "503d95cc-e22e-4753-b9a0-4ee4a89b75d0",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "18c545af-cb00-4fa4-9c8f-ea2ac908e40a"
        },
        "item": {
          "id": "9c2dead9-6c64-4e1e-be9a-6a78a9051fc4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a609d816-8dee-478d-a14e-1c87c8d4d2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8d918d-13fe-4338-a970-e872f15accf3",
        "cursor": {
          "ref": "e34c194e-ce87-44cf-99d3-fc71a2ebee7d",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0b70b8bc-569e-43ae-a332-34abf1624e60"
        },
        "item": {
          "id": "9e8d918d-13fe-4338-a970-e872f15accf3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fd1c2cb6-5992-4981-af1f-898eceb844d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbed099-929f-4564-be5e-f00ead25848d",
        "cursor": {
          "ref": "3eee98d2-e6d6-497e-b63d-e59ee2c6d880",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c6156efb-ec23-4334-8257-ecfc18e0cd8a"
        },
        "item": {
          "id": "1fbed099-929f-4564-be5e-f00ead25848d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "22c49c71-fe58-48c8-9ce5-ce1630242155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f3707f-d20e-4c7e-99af-1d2b475e03fd",
        "cursor": {
          "ref": "15a0d4c2-333e-4193-b0cf-02838d06c0d4",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5d17e382-7d00-4c4c-89e9-aae244cfbd94"
        },
        "item": {
          "id": "08f3707f-d20e-4c7e-99af-1d2b475e03fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d9f18554-81d7-4930-b170-21d1defcb4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c18ff24-fa84-4435-9342-169c93e95c38",
        "cursor": {
          "ref": "083120b4-0fd5-45e9-8f50-20a64a00785e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "58e3487b-be8f-423d-8ab4-6a9a7b49610c"
        },
        "item": {
          "id": "7c18ff24-fa84-4435-9342-169c93e95c38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4b20ea9a-37bb-4018-aaf0-4b99f261b113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a73961f-51cb-4f55-9617-937757b0df32",
        "cursor": {
          "ref": "3101f7a1-1b51-47a5-96b9-f1dc0dcb3152",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7302cead-2b00-4969-850c-c43fa9966e90"
        },
        "item": {
          "id": "6a73961f-51cb-4f55-9617-937757b0df32",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b04db919-63ce-4233-877f-6df609f3b872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1a7ee3-238f-4831-a33c-74ceb8a743d9",
        "cursor": {
          "ref": "1a813e1b-6459-4733-a0f5-c6b0c9a31fa2",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "34deca8b-fd79-477c-8aca-2e911eff0252"
        },
        "item": {
          "id": "5b1a7ee3-238f-4831-a33c-74ceb8a743d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f15236af-ad89-4eb3-9650-6282d20e119d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb294a1-d224-42ac-9d5e-1897eac68ee4",
        "cursor": {
          "ref": "302f309c-6080-44ce-90cd-b7ff4e392bca",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e4c8a2fb-e470-46bc-9757-15bf379158a6"
        },
        "item": {
          "id": "8eb294a1-d224-42ac-9d5e-1897eac68ee4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c10598d9-dee9-46b1-9e01-3dfeae496815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb1e10c-124b-4e66-9b2f-c672c264446c",
        "cursor": {
          "ref": "226b489f-c81c-46d8-8537-bf6cae8a2f61",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9e38acbc-82fa-4591-baa6-e85a4f4544c5"
        },
        "item": {
          "id": "1fb1e10c-124b-4e66-9b2f-c672c264446c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "be27919c-2998-487a-9b97-42036d7249ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31ecc43-e349-423a-a099-84637098505e",
        "cursor": {
          "ref": "4dd74c60-2cbb-4f8b-add5-866b4988c10e",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "93e3ee98-d8b0-4340-bf45-b683aaff44ad"
        },
        "item": {
          "id": "c31ecc43-e349-423a-a099-84637098505e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e5b3bcca-d25d-4819-b2a2-63adb88cf2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e125d3b7-0783-4d8d-97e5-d0636ae6d7fa",
        "cursor": {
          "ref": "656facd4-5790-41a1-828a-85039bf8da75",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9d3de336-afcb-419d-b193-7cf063a53e66"
        },
        "item": {
          "id": "e125d3b7-0783-4d8d-97e5-d0636ae6d7fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "88c30710-3321-4f5e-8a6e-9bc55a192873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86880a7f-bdd0-4a21-82be-d736fb254327",
        "cursor": {
          "ref": "19339947-fb2b-46fb-b2c2-5099d8dcaefd",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2bada88a-a30c-4d75-bfbb-b9a5b3742668"
        },
        "item": {
          "id": "86880a7f-bdd0-4a21-82be-d736fb254327",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7066e418-86bb-4a85-aec4-604b44762621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b4762e-ccb4-4aec-9fc0-0cfc58e64263",
        "cursor": {
          "ref": "eaf30a38-eb97-4933-a7d6-4a0330f22cf1",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fcb4c064-4ce0-4130-98c5-3450ba6fae10"
        },
        "item": {
          "id": "46b4762e-ccb4-4aec-9fc0-0cfc58e64263",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4bec3d7c-05a6-42f1-b26f-d4b4f9a420e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429edd50-e75c-4299-b2b8-331177598690",
        "cursor": {
          "ref": "417800f4-2d7b-4742-803c-2ea2af1eee8e",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f9f8f8cc-dd8c-4fff-bb6a-968b9754333c"
        },
        "item": {
          "id": "429edd50-e75c-4299-b2b8-331177598690",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2bf1eb01-cbe4-4379-9e01-b9f568f0f297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c589545-ba25-41ef-b0b1-8db217b018e2",
        "cursor": {
          "ref": "d28ff283-de59-4d26-b856-69a3cf4933a1",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1ef01eea-3196-42df-8a12-479299f32993"
        },
        "item": {
          "id": "6c589545-ba25-41ef-b0b1-8db217b018e2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ca8dff76-9b9f-492e-934b-74d9adc99819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db4be94-2aa8-4dc9-a7b8-3385d4f9be4f",
        "cursor": {
          "ref": "4018bdfc-8358-4439-a364-ccc9833754b8",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4d710e14-e202-4e2d-9bf4-014468d5ba98"
        },
        "item": {
          "id": "2db4be94-2aa8-4dc9-a7b8-3385d4f9be4f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "341387c1-a0f4-49e0-a931-0e3b5f11400a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c6cada-d6b1-44b0-8ef3-ebb2e63ede56",
        "cursor": {
          "ref": "d8daf483-e051-40c7-af15-9ab43d305da5",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bdce4f8a-3ee1-44e7-b880-ad7f9677900c"
        },
        "item": {
          "id": "97c6cada-d6b1-44b0-8ef3-ebb2e63ede56",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "86e04562-2414-4da8-a3d6-b8571f15957a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b533999c-1fc8-4179-9ab4-074dd6021c46",
        "cursor": {
          "ref": "93c99f5a-c04b-47a1-b707-5f9fb3b7d9e2",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b1f834c9-c813-44ad-89cd-e9dd2ffc6ef1"
        },
        "item": {
          "id": "b533999c-1fc8-4179-9ab4-074dd6021c46",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fe267056-83ae-42d8-a365-58b43ce2ff6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e523d170-5fc7-428c-b162-2b4b988f3379",
        "cursor": {
          "ref": "df675d78-d07a-4f4c-8e80-3d86b44a75c6",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "00d582ba-436a-4b83-87b3-06d8c35b4e17"
        },
        "item": {
          "id": "e523d170-5fc7-428c-b162-2b4b988f3379",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "573870e6-d85a-4a8d-ac05-78ee526092a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd93769f-ed82-4218-a03f-51faea7700a7",
        "cursor": {
          "ref": "b116ae2f-644f-40d4-b2d3-12552bfc6b3e",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1e9531bf-476a-4d29-aec3-6b74026759cd"
        },
        "item": {
          "id": "fd93769f-ed82-4218-a03f-51faea7700a7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cb0a5637-06b4-49de-8bbe-c3bb471cb268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8912d2f-982b-494d-a05c-251ecc396879",
        "cursor": {
          "ref": "746b4780-c287-4b78-adc2-540cdb6a8e2c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3eae2186-59b2-4d4d-aa5e-d41cd3cecdfe"
        },
        "item": {
          "id": "f8912d2f-982b-494d-a05c-251ecc396879",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "551930da-75d8-4516-9406-a637963c1429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241ec397-8d98-4171-aced-f2dc4bf5ed02",
        "cursor": {
          "ref": "14b7cc55-9101-4f46-9979-17c138883841",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "192fb7b9-06db-4b4f-ab9e-97f1ef1bc7c2"
        },
        "item": {
          "id": "241ec397-8d98-4171-aced-f2dc4bf5ed02",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "053e84ca-a308-4ca9-9b2f-e58c70644a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cd15cd-3d18-4626-8105-03a098bfc8d6",
        "cursor": {
          "ref": "01da3f15-c905-4a44-82b9-c70f0d2a98e3",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dcb68583-b85d-44af-82c6-926fda9f9c60"
        },
        "item": {
          "id": "d8cd15cd-3d18-4626-8105-03a098bfc8d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8cbf93bd-2fd2-41c7-862c-b8b0cdc0753d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9665fb41-f7e4-42da-933a-456f7bb64526",
        "cursor": {
          "ref": "6e3cd4af-a3ec-47f5-8773-cd425334c582",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5d9f3e03-66db-4110-9a53-97b49d88f2a0"
        },
        "item": {
          "id": "9665fb41-f7e4-42da-933a-456f7bb64526",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e88d8328-233e-4424-8fdb-954063dc2be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb10f56-2a4a-4386-b831-e57db4e3136a",
        "cursor": {
          "ref": "8290a036-8dc1-4cfb-ac22-a4c17a7ec1f9",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ffd788e4-6f7a-4c62-ad05-11ef5ffe1ad3"
        },
        "item": {
          "id": "3bb10f56-2a4a-4386-b831-e57db4e3136a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14c2c153-8864-4e85-a687-4d44fbd0cfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05308ec3-f20d-4ac5-a122-99769d6434f1",
        "cursor": {
          "ref": "f6e120de-85e3-4749-9fa9-cf9d7ce21e10",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "84e82474-b571-4f76-bbe4-ff76b2cba23a"
        },
        "item": {
          "id": "05308ec3-f20d-4ac5-a122-99769d6434f1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b58b36ef-715b-4c5d-8c69-134c237aab93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a88954-af8e-457b-8bc7-e4ffca758bf5",
        "cursor": {
          "ref": "b23f109e-7aa9-4724-ada1-e7c6b549091d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bf5b8c70-222b-42bf-90c0-fa737ea160c7"
        },
        "item": {
          "id": "12a88954-af8e-457b-8bc7-e4ffca758bf5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aca51106-76ba-4344-8fe6-8e96c762a280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4ee52b-acce-43e2-be2d-3f97a7d997eb",
        "cursor": {
          "ref": "012db0cb-6f9a-4208-9302-4a231e9d288a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0002c91b-4e95-4311-91cf-97e2953cd3e7"
        },
        "item": {
          "id": "6e4ee52b-acce-43e2-be2d-3f97a7d997eb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc0465a0-2abd-4bb4-83ad-f333b4fe10bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c01fa17-9d49-47c7-b374-2dec0c3f751b",
        "cursor": {
          "ref": "f96209dc-8524-4c6a-8cc8-bbe1eae2d5f9",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "070013fc-7c54-47ef-ab2b-e36e1f98cca9"
        },
        "item": {
          "id": "7c01fa17-9d49-47c7-b374-2dec0c3f751b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "29616943-d0b9-40d7-90d4-58b100af292d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb4f2e7-da8d-4802-ba6a-d7c44443e6a0",
        "cursor": {
          "ref": "abbac8a3-7034-46aa-875e-2671dd98152d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "08964ce8-ad1e-4e57-8690-3511481c4c04"
        },
        "item": {
          "id": "4bb4f2e7-da8d-4802-ba6a-d7c44443e6a0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "17465f99-f2d6-4af8-9bf4-235c04d3c21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f23fbf-a52a-4072-93c4-1f9678e97974",
        "cursor": {
          "ref": "074c6bd1-0497-4d9e-a316-b624888d1099",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9b8ad030-1223-48f7-b405-1b906bf3332e"
        },
        "item": {
          "id": "52f23fbf-a52a-4072-93c4-1f9678e97974",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6b553557-0e10-48b2-93d3-681b42ea543b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bc159d-c563-465c-94b0-4c0d4e9a4cf9",
        "cursor": {
          "ref": "cc11a2c1-f6eb-4d25-b0d2-0f5e32c4e0f3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "653581c6-f1f3-4e96-9799-8ef2872f4b68"
        },
        "item": {
          "id": "f0bc159d-c563-465c-94b0-4c0d4e9a4cf9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1b4a76d0-e5a4-4148-b4b3-e520f765a373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af53e6f-9f80-4f71-a9f5-b10bce336f41",
        "cursor": {
          "ref": "2a3d83f6-381c-482c-a772-421ecf2f4924",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "eefb555f-789c-43ad-9539-86b1872ae91b"
        },
        "item": {
          "id": "9af53e6f-9f80-4f71-a9f5-b10bce336f41",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "be4e6787-4cec-4ca5-8b7c-af4caf2dd321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc002cd-3c8d-4c39-96a7-470902cc5267",
        "cursor": {
          "ref": "cd621827-b9f4-4467-a776-00891100aaf5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6636d9da-8133-4dfb-b955-aee5b0f76122"
        },
        "item": {
          "id": "acc002cd-3c8d-4c39-96a7-470902cc5267",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b5490d8b-5f44-44c1-b6d4-1d21c4b8d58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f456025b-238a-4f5b-8127-53103475ab67",
        "cursor": {
          "ref": "ce2c296f-b409-4051-864e-8d1f280b7cbd",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d50b27eb-e76b-4556-9423-6ec6f9c256ca"
        },
        "item": {
          "id": "f456025b-238a-4f5b-8127-53103475ab67",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f38224b-53c8-4804-9f4d-3d7616d4f3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3d30b9-78b9-4a42-879d-002b941ae543",
        "cursor": {
          "ref": "8ee5a51c-6f10-4f85-93ce-43bb48307379",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "949b181f-5198-4213-8c4e-5cb5f5db586a"
        },
        "item": {
          "id": "da3d30b9-78b9-4a42-879d-002b941ae543",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d613454e-20b7-4ef7-87e8-d94cc5e92e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e044f8-505c-4755-a7f2-72ed96668aa2",
        "cursor": {
          "ref": "824a42b6-714b-4ddd-b22c-deaa127ef55f",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4a1e4aab-178d-42e5-9c2c-8a873321f7e9"
        },
        "item": {
          "id": "09e044f8-505c-4755-a7f2-72ed96668aa2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5a998e01-e41e-426d-86a5-1b96ac62ff62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fef60e-1e7c-4280-8e8a-4884e78d75f0",
        "cursor": {
          "ref": "f68ae714-5546-4989-97e6-f79684d8b558",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "49b496e0-c79a-44e5-9cb4-05f0b08dfb6e"
        },
        "item": {
          "id": "83fef60e-1e7c-4280-8e8a-4884e78d75f0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "86d0be28-d2a4-4abb-8ad9-d13fdc18828e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e7626a-ffc4-4ece-a729-abfa9a79880b",
        "cursor": {
          "ref": "035f2141-e2af-4d71-8516-90aabf291890",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6813e6f9-41bc-42e0-85ec-64d950ac6ce7"
        },
        "item": {
          "id": "19e7626a-ffc4-4ece-a729-abfa9a79880b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cb2ad0e2-3297-4dbe-9af9-3658378511da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbf67c8-5ef4-4e41-bf15-b0c0f338df30",
        "cursor": {
          "ref": "8fd3259d-860b-4b4b-a00c-ef8a95e64c91",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "445ce2b1-efce-45fc-93eb-81cc7a971ffa"
        },
        "item": {
          "id": "3cbf67c8-5ef4-4e41-bf15-b0c0f338df30",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0dc47ca5-1d6b-44c3-9109-414b10465445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393febe2-ee10-4300-b4d5-40e9b3a0607a",
        "cursor": {
          "ref": "ff7721eb-8fd7-42ee-afad-2505a91b1ee8",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5f7c2af8-5da9-4ed7-88c3-dbf134a309d8"
        },
        "item": {
          "id": "393febe2-ee10-4300-b4d5-40e9b3a0607a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bfc0f0cd-f8f9-403e-8a07-89f63573c3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68383e4f-d808-45fd-9d0d-18a8da8883ea",
        "cursor": {
          "ref": "13892469-c2be-4f5f-9c7b-afc336394da5",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "59361ec9-fb8b-40ad-9747-3a93e795b109"
        },
        "item": {
          "id": "68383e4f-d808-45fd-9d0d-18a8da8883ea",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "56b2da11-e5c9-4d82-a0c3-a48f632049e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2cd3c7-b3cf-4bcc-a010-df7444646146",
        "cursor": {
          "ref": "00716f74-5726-4d9e-a2dc-6270d7cd154c",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fc0c37d6-a22e-4895-9177-4efc1b42a78f"
        },
        "item": {
          "id": "4c2cd3c7-b3cf-4bcc-a010-df7444646146",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bc7b163b-2ebf-41d5-813d-c357da93c4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803e1421-284f-4a54-84c4-e80615a197db",
        "cursor": {
          "ref": "b2d52f65-1e3a-4ade-8190-f942fc13b22e",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "54c11eb3-14c0-4f99-8133-df2a75d22027"
        },
        "item": {
          "id": "803e1421-284f-4a54-84c4-e80615a197db",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e601a453-31b7-4f47-a4d0-3668ec0d3e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa508ed9-66e4-45b0-adfd-6be09849115b",
        "cursor": {
          "ref": "2661cfd1-6688-4dff-b4e4-7ab7ae2a6339",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "599aa544-d382-4a9c-a8f5-8f416721df7f"
        },
        "item": {
          "id": "aa508ed9-66e4-45b0-adfd-6be09849115b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8af19bb3-2838-4d2e-86a2-d28b47210ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d730aba-7fab-473d-aa6e-fb969f84b24d",
        "cursor": {
          "ref": "16c44b8e-6422-412d-852e-1796da083a4d",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "67bc9d8e-b2fa-4795-98f2-1907b964b1ec"
        },
        "item": {
          "id": "8d730aba-7fab-473d-aa6e-fb969f84b24d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ac801c54-5b7d-4f56-a70d-13b78d88f749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b41c246-2a5f-4adb-848b-845702a7398f",
        "cursor": {
          "ref": "9d78a0e8-e1e4-45ed-9fdb-412ab99cbec6",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f910c61c-d9f8-4249-832c-e8ff6306de4d"
        },
        "item": {
          "id": "4b41c246-2a5f-4adb-848b-845702a7398f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8d838cb0-f728-4c12-97f2-0aa2fe9cfc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120ec9e7-0ce3-4188-bdd4-37d1a4190532",
        "cursor": {
          "ref": "e331470d-99b4-4b1b-a0ca-14f01fdbafb0",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f79a9889-26d2-486e-bf3f-042d90b49892"
        },
        "item": {
          "id": "120ec9e7-0ce3-4188-bdd4-37d1a4190532",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "32a660c1-bec4-46c9-9119-a52f095421d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e886755a-ed3f-42bb-9f9c-a6d44d2bc712",
        "cursor": {
          "ref": "94ea76c7-9fdf-423d-af9a-a3fd5b5ae6f4",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8a4c6bb3-aee4-4474-9759-a7f08b6cdd59"
        },
        "item": {
          "id": "e886755a-ed3f-42bb-9f9c-a6d44d2bc712",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b8697d61-748e-423a-a467-5e3df5a45c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe534092-3712-4909-9d39-75b545581199",
        "cursor": {
          "ref": "afcbda91-c89b-4d84-b9b4-8fa2af6fb472",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "43334e09-2d1a-4db1-9dcc-fafbd0c0fb19"
        },
        "item": {
          "id": "fe534092-3712-4909-9d39-75b545581199",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2efa383d-cce6-4a77-bad8-cb70d45fecc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb46336-26dc-44a5-9e41-6942f910bd76",
        "cursor": {
          "ref": "43daa214-f4ef-42af-8f35-56a173070858",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "65bc1690-3753-4668-8bc9-9a29f8f7cc7d"
        },
        "item": {
          "id": "fcb46336-26dc-44a5-9e41-6942f910bd76",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e225b90d-a426-4ffd-b4c0-16c90aa2ee6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd1d97d-9e15-491f-b845-f66875db548a",
        "cursor": {
          "ref": "59e25d85-fb11-4bc0-822d-65789c6c23c2",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "795f537f-e8c8-44a6-990c-7f0db307473d"
        },
        "item": {
          "id": "7cd1d97d-9e15-491f-b845-f66875db548a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "88a8cafa-f23c-4897-86d7-8386f79a9adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e838bd75-085e-4864-b18d-51d25efdb4bb",
        "cursor": {
          "ref": "ebe7f09a-6159-47d0-bfaf-c7f5f185851d",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "770bb022-975f-4f92-9100-09ccfd87e35f"
        },
        "item": {
          "id": "e838bd75-085e-4864-b18d-51d25efdb4bb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "37bb566a-30b2-4f4f-8ef0-664257c44053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecdc49c-2f91-4a86-a841-752c07634272",
        "cursor": {
          "ref": "fdd4b02d-1419-425f-a74f-5d36f1416dc1",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f28b5a1a-98c2-45e3-bcac-0a3a80c8105e"
        },
        "item": {
          "id": "6ecdc49c-2f91-4a86-a841-752c07634272",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cc165786-d336-4678-ab76-1600e47bd796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6f5203-eb9c-4ec7-be1c-4fc24a68662a",
        "cursor": {
          "ref": "31b57c72-2cd4-4d78-abf8-7128509a9734",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "49146d62-ed6f-4db8-b38b-298d92a2f522"
        },
        "item": {
          "id": "8c6f5203-eb9c-4ec7-be1c-4fc24a68662a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e1488f01-365e-4c9a-9b60-2f2e854863e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd38637-812c-4a87-860f-5244b876e7cf",
        "cursor": {
          "ref": "7bd1c596-5e8a-4df2-be73-e2c9559c7055",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c3bba4ab-c237-40d5-aef3-08b19690a953"
        },
        "item": {
          "id": "bbd38637-812c-4a87-860f-5244b876e7cf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8de4049e-0793-46a8-a188-569261572721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f57bab-4a5f-453d-bd5f-2791333acb10",
        "cursor": {
          "ref": "b06e65e2-0ee7-4c8f-a0f9-f47d9c0b2a03",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "03fc97a6-d770-4a40-ab70-b4118330c0c5"
        },
        "item": {
          "id": "02f57bab-4a5f-453d-bd5f-2791333acb10",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "53afa2c6-2406-494d-bcbf-9c2ceda1c373",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c0426df0-d1ae-4b01-a5ee-1707f3cebb1e",
        "cursor": {
          "ref": "3d50e66a-0b6f-4d65-8dd8-e2bf55f3f827",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5c084732-99a2-4fa7-8e2f-f2453d3c397a"
        },
        "item": {
          "id": "c0426df0-d1ae-4b01-a5ee-1707f3cebb1e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "86946f10-9d14-4a9b-bbe4-8cd9cfb45e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc3a262-e4e7-450e-90a4-584adce30fc7",
        "cursor": {
          "ref": "f4518eb0-4520-4b1c-9640-04a888f1d4f1",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a734df93-3d1e-4261-89a9-142698434ae3"
        },
        "item": {
          "id": "4cc3a262-e4e7-450e-90a4-584adce30fc7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "80082ce4-735c-410d-8412-ec750811569b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f3fcc0-1eac-40e7-9d6d-4e3a7317b0a8",
        "cursor": {
          "ref": "c1661452-c947-4812-af4a-90c28b899ce6",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1e8c752b-6da6-433f-8795-a749f8abdf73"
        },
        "item": {
          "id": "b4f3fcc0-1eac-40e7-9d6d-4e3a7317b0a8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7b10fed3-4c07-4699-84af-3d8dae881840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df99a0c7-e84f-464f-8e27-878ff4b4db64",
        "cursor": {
          "ref": "6909258d-440c-42a8-88f6-0a61ec9da14a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b1ef33eb-6f49-4a05-96f8-cf8567ac1b74"
        },
        "item": {
          "id": "df99a0c7-e84f-464f-8e27-878ff4b4db64",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "87c276a8-0d15-4cd2-851d-0a2dd5bbf9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6610083-830d-4946-b370-43780933ebc9",
        "cursor": {
          "ref": "c4d88ea8-ee76-4e71-adfc-6fc3b4f7545d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "617bfab1-740a-43d5-b8c0-2f55e0f729ab"
        },
        "item": {
          "id": "d6610083-830d-4946-b370-43780933ebc9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "60d94289-e22e-4df7-ae80-3e25495365d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426b4118-e495-4e00-a2fd-6e3a44c4881f",
        "cursor": {
          "ref": "c4dfd025-a2b8-4253-b673-180781be50e2",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d257bc05-2bb0-4699-8e59-4606e9582c43"
        },
        "item": {
          "id": "426b4118-e495-4e00-a2fd-6e3a44c4881f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6f3bc66f-7c9d-41c8-8c99-7f3d6b26a589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74a4a08-a546-4ed9-84e8-f73df8968ab1",
        "cursor": {
          "ref": "233f3ce1-6fb8-4eff-b6c2-e094046bbec3",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b4eccb37-c02b-4d6e-a3a9-6df52ef0294d"
        },
        "item": {
          "id": "d74a4a08-a546-4ed9-84e8-f73df8968ab1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "de3075f9-4628-444c-b50f-1e5693f504fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceece5b2-1c20-4311-8e9e-46fbddc632dd",
        "cursor": {
          "ref": "b3b08210-c743-48e6-8cc0-408726741cbf",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "af967cfe-d081-4067-8bd3-4a1a8d9f4108"
        },
        "item": {
          "id": "ceece5b2-1c20-4311-8e9e-46fbddc632dd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a9e7e9e6-9924-4020-88a8-e79a4b13a4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39df34d9-b8f2-494f-aae8-45907aba9ce1",
        "cursor": {
          "ref": "95acfe6c-a2a1-47db-9ae6-16fb22037368",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2369ffb5-4d19-4985-b896-ac3f629fa2c7"
        },
        "item": {
          "id": "39df34d9-b8f2-494f-aae8-45907aba9ce1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ebde4dae-e237-4a99-af8a-728c1a6d600a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a71131-41d9-471b-b904-2960c98d9997",
        "cursor": {
          "ref": "b1bb838d-9c26-4c01-a8aa-0032af4a121d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a383dd3e-3baa-4d66-9bab-1663d2162332"
        },
        "item": {
          "id": "b4a71131-41d9-471b-b904-2960c98d9997",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8da72ee0-5680-4149-a04a-1d9d9833852c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9357406a-5d0e-4894-b2ff-7241235d3657",
        "cursor": {
          "ref": "fd68613b-108d-414e-bcdd-59fcc33417c3",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e9dd9991-7d32-4542-94e2-25a0a31fcc5c"
        },
        "item": {
          "id": "9357406a-5d0e-4894-b2ff-7241235d3657",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3b6c257c-a700-4b54-bb2c-4fb637a128e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ba0328-4cc8-42a4-b1ff-d085d4f5135b",
        "cursor": {
          "ref": "a9fb1562-503c-42f9-a09f-99b8c1866a8d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "55fecf15-ef8e-4550-a7a6-672e4af13b67"
        },
        "item": {
          "id": "05ba0328-4cc8-42a4-b1ff-d085d4f5135b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4c30326e-61c9-4624-a42b-a8877d4543d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb39745-1509-4c74-876f-aa10c47a782b",
        "cursor": {
          "ref": "177b9f44-5901-4365-b71d-5ba2ccd4b73d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c9ed6f3e-995d-401a-864d-122bccdc383f"
        },
        "item": {
          "id": "2cb39745-1509-4c74-876f-aa10c47a782b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0b1cdcc2-a325-4906-997e-c0703444047f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4b706c-6f53-44f9-8580-762f3777bc7c",
        "cursor": {
          "ref": "0e65f089-0721-4642-9bf2-ed9fba8d281f",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "730d228f-4121-4a1a-a828-c3ff71df1453"
        },
        "item": {
          "id": "fe4b706c-6f53-44f9-8580-762f3777bc7c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4ff91051-89e9-43d0-8152-e9b1db3eebd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8c8a98-c0d6-4852-bd8e-375dbddb0b95",
        "cursor": {
          "ref": "01c529d7-9d1d-4a26-8303-1d9a46318890",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b434c89d-2d5c-4802-9308-84020a1297fa"
        },
        "item": {
          "id": "bf8c8a98-c0d6-4852-bd8e-375dbddb0b95",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b229291e-cb0d-4448-acdb-3e705ab4174a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79901aa1-0d3d-4d22-822e-85914804a663",
        "cursor": {
          "ref": "103acd6b-1167-48d0-873c-e68e3c9a84bb",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6a30dcba-954d-44fc-acf3-f04902336c2b"
        },
        "item": {
          "id": "79901aa1-0d3d-4d22-822e-85914804a663",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9c86a0e1-2dfc-4bde-88b1-e3d3e7f08420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1db45e4-8949-4b0f-8a83-b9217817d453",
        "cursor": {
          "ref": "7056601b-a8d7-4245-9c53-48b1222e1168",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2819fb86-3c1c-46e0-80d1-0d63cbc4aa6c"
        },
        "item": {
          "id": "d1db45e4-8949-4b0f-8a83-b9217817d453",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6b4aceda-b022-4a32-a060-d3ed26a8c614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d555ee7c-081d-453c-84f8-cea36ebe160c",
        "cursor": {
          "ref": "91baa241-3f7e-4ca5-bc4a-a05fbda5c668",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a0d10ff4-b699-46cc-9790-21acd482181f"
        },
        "item": {
          "id": "d555ee7c-081d-453c-84f8-cea36ebe160c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8dae274f-e926-4ab0-bfe4-e3020178e30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e7aaa0-b352-4f30-afb7-3e5f1d3dc3e9",
        "cursor": {
          "ref": "bbfa62dc-c8a3-40ca-855f-360bde295bcc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9a745f72-ce4e-4a99-82eb-438924558377"
        },
        "item": {
          "id": "47e7aaa0-b352-4f30-afb7-3e5f1d3dc3e9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c472db49-ebb0-47be-9707-6ae2abf4745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03428c80-18d4-4044-96f7-5d7555bff64f",
        "cursor": {
          "ref": "4957ebeb-bf0a-481d-ab0d-f5dc8689b4c4",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e48b0e4b-8806-4b71-afa2-e396afb07ee2"
        },
        "item": {
          "id": "03428c80-18d4-4044-96f7-5d7555bff64f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bc9f7b65-dd28-420e-a96f-69823b05634a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675de4db-d565-4540-8953-42cef6824341",
        "cursor": {
          "ref": "1d6843c9-bf24-48d0-b82d-eca04fe68e2b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bf66d166-d82d-4378-9c0c-4b2d1bb77cfd"
        },
        "item": {
          "id": "675de4db-d565-4540-8953-42cef6824341",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "42283a40-c962-401d-b9a6-c65d29aee8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98a0021-a002-4640-a3e0-ea98b4c22a74",
        "cursor": {
          "ref": "0a0db799-1d71-4ea8-a354-0f397e885990",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d63158f5-0fc3-4c12-97a0-c01479ddc6f7"
        },
        "item": {
          "id": "b98a0021-a002-4640-a3e0-ea98b4c22a74",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "955ce51b-880f-4b18-b533-74b4774e6336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9815888-4cc0-4e06-bcff-38c3a29681b0",
        "cursor": {
          "ref": "edb8f5f3-45ca-4084-afa7-62933dc41794",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8e089570-a3b8-487a-b183-d80120efaa1f"
        },
        "item": {
          "id": "c9815888-4cc0-4e06-bcff-38c3a29681b0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4f343b85-ef86-4c09-8f3e-18875297034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d5ee62-e913-4f2b-913d-731a58d9ab0e",
        "cursor": {
          "ref": "a0f8bdbb-bdb9-4853-a251-81d80a34704c",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4b1e5a24-55a4-48a4-99f1-64ecfb1d9678"
        },
        "item": {
          "id": "46d5ee62-e913-4f2b-913d-731a58d9ab0e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ee0e4cd7-55f9-46d1-bb6f-4a86a23a1101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a942017a-eb5c-4616-bfac-4553d722a629",
        "cursor": {
          "ref": "3dc16c34-2d7c-4190-8a5c-4dc552df4d4a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1948f330-cb61-4cca-99a9-737976091662"
        },
        "item": {
          "id": "a942017a-eb5c-4616-bfac-4553d722a629",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "88f651bc-f156-4581-947d-94860501665e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862af5dc-a2b9-41eb-8d21-d2295abbf84d",
        "cursor": {
          "ref": "a1e2a2f6-faec-442b-bab6-6cc8df21b2d9",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "441eb067-9b6d-419b-850e-5647a0186e77"
        },
        "item": {
          "id": "862af5dc-a2b9-41eb-8d21-d2295abbf84d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cbf27956-67cc-47a0-9a6f-03907ce93556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788e9fc9-24ed-4295-9ed9-72589257f9fe",
        "cursor": {
          "ref": "84631f4b-adf4-41b4-8c3b-18a6a35e5336",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "68e887b0-60d6-4379-8d57-bc388a07890e"
        },
        "item": {
          "id": "788e9fc9-24ed-4295-9ed9-72589257f9fe",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9c36f12-193c-47e7-8257-109b1a2d0398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdd78fb-bad2-4b22-ba5c-2ff2bc1ef9c3",
        "cursor": {
          "ref": "c410e598-e2cb-4f84-aff2-7cbf832122f9",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6935b511-01ed-4f83-acdc-ba7e27522708"
        },
        "item": {
          "id": "fbdd78fb-bad2-4b22-ba5c-2ff2bc1ef9c3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "52233079-b06c-4f04-a0ad-2d7a271981e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b9ff71-f67c-425d-b2a5-fa76267d69d0",
        "cursor": {
          "ref": "83ecebe2-2fc6-449a-b2d1-4790041f1920",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "811631ce-4b97-4a30-8c44-3ec717858a19"
        },
        "item": {
          "id": "06b9ff71-f67c-425d-b2a5-fa76267d69d0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7cb7aada-b77b-488b-b892-8de9db36a52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea3b663-b6f3-4e13-bb3b-eb9161cec8b0",
        "cursor": {
          "ref": "37019e0e-2ff8-487a-88a5-9db85346f204",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a3de9ca3-69a5-46e9-85fe-8351b132712f"
        },
        "item": {
          "id": "aea3b663-b6f3-4e13-bb3b-eb9161cec8b0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f1934829-a0e0-4e9b-ac3a-2dc7c6a519fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e34381e-6534-479b-84e2-2a3a37e40bdd",
        "cursor": {
          "ref": "2c8491e4-1172-4038-9971-541af71219a3",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0c99c5e4-5a70-46b7-919f-01c61a4fa66b"
        },
        "item": {
          "id": "4e34381e-6534-479b-84e2-2a3a37e40bdd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "39f354fc-6351-490d-bf27-b49450dbe987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34259e7c-be2d-4818-93ea-b47b964df215",
        "cursor": {
          "ref": "b900dd7f-f5f6-4ba2-be3f-1d8646adc434",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "19683f1e-2eb3-459f-915f-228cd5e6bb57"
        },
        "item": {
          "id": "34259e7c-be2d-4818-93ea-b47b964df215",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3e6ffba1-e221-41d0-b6f8-6fb851307655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c683f171-4d92-4cea-ba19-b59a65de263a",
        "cursor": {
          "ref": "00f1d4d0-7d76-44ce-8982-8536afe03069",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "911d4a5d-ae20-4681-8738-f5ed2a1a0075"
        },
        "item": {
          "id": "c683f171-4d92-4cea-ba19-b59a65de263a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c71c96d8-c7d9-456c-8705-00da7391e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19c9df6-9b7b-44da-a4d5-fc81d7d709ef",
        "cursor": {
          "ref": "6fba470e-f2ca-49f0-92b1-22b9fdeb646b",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b9924b51-4889-41b9-9545-9ed04903b7f4"
        },
        "item": {
          "id": "b19c9df6-9b7b-44da-a4d5-fc81d7d709ef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "05dbd0e4-fc6d-4cdb-bbc0-08ab6866c90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413dbeb1-6791-4da0-a3c2-26f8db754b57",
        "cursor": {
          "ref": "f67d9028-045c-4824-a54a-9569dbd67797",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f8489cad-3ffb-499b-9610-cd5b2551a085"
        },
        "item": {
          "id": "413dbeb1-6791-4da0-a3c2-26f8db754b57",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "39849488-85eb-474b-95cc-2e3be5aa3222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dbb667-2bc9-4387-96e4-bd52b797b6e4",
        "cursor": {
          "ref": "b6d0010a-8429-4c62-8e09-b5beec74c807",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2853de7d-8616-42df-b0a9-09e7ec6be787"
        },
        "item": {
          "id": "e4dbb667-2bc9-4387-96e4-bd52b797b6e4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a8988ff6-9f70-4156-b8a7-322e48fb7ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2c72eb-c922-47ee-8c4f-76b7c43ca1c9",
        "cursor": {
          "ref": "2bd1f846-aa69-4fdb-a3e0-cb85a985e695",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0469ec08-9e75-42e5-9f5b-ce40cc46a8f5"
        },
        "item": {
          "id": "4b2c72eb-c922-47ee-8c4f-76b7c43ca1c9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5e629163-ee00-4958-a2e7-31716b37b28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d597a6e0-319b-4d95-85bf-5e71cc72a3f4",
        "cursor": {
          "ref": "b70f1dab-6d90-4d87-a71c-a76450fd3b59",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9e4f3905-5281-4146-acd1-f1f19cd31b8f"
        },
        "item": {
          "id": "d597a6e0-319b-4d95-85bf-5e71cc72a3f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "13894bb1-99d2-4fd3-9078-a5ca001c5027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73aff23b-bbe5-4569-ab05-b7630741347f",
        "cursor": {
          "ref": "81051a0b-58a5-46cc-8e84-f5295be9b729",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8d874d87-0c4e-4b6c-bd42-164e78c675be"
        },
        "item": {
          "id": "73aff23b-bbe5-4569-ab05-b7630741347f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "74919341-0dd7-4675-8036-cdb9a29176a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c07327-c0e7-46f0-b87b-be9cd541198d",
        "cursor": {
          "ref": "f4582dcb-8168-4eb3-bd93-779fd3d0d81f",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dc99168b-f446-436e-8c1a-963c1358a8f8"
        },
        "item": {
          "id": "55c07327-c0e7-46f0-b87b-be9cd541198d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "863a4641-b057-4bde-acdc-cd5408e88800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc18aaa2-f53c-42dc-8253-97bd7e1f2eb5",
        "cursor": {
          "ref": "654bdf64-329b-4141-a8fe-0cfed5014453",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "570146b9-bff1-4033-9570-10b1bc2ba335"
        },
        "item": {
          "id": "dc18aaa2-f53c-42dc-8253-97bd7e1f2eb5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b81f44ec-c95a-458e-9aac-b439af822624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4e87ee-91c4-4fe1-9aa7-cfd2ebd723e7",
        "cursor": {
          "ref": "515ccb83-f1da-4d57-bfd4-325f05f9efa7",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8c77e84a-5a40-4a54-9bdd-c3dbad63fccb"
        },
        "item": {
          "id": "9f4e87ee-91c4-4fe1-9aa7-cfd2ebd723e7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "22d119ed-fd42-4734-a1fe-bfbbf22b5f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7c3462-87d1-44e7-88ec-89e4d6e622c9",
        "cursor": {
          "ref": "c03f7f03-b90c-4b78-8fcd-b0d5bb503f9b",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "83043c6f-8579-4537-a3f4-7a954bb61740"
        },
        "item": {
          "id": "cf7c3462-87d1-44e7-88ec-89e4d6e622c9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b7b8c814-7480-4e2a-95a9-a0afbd5f2912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83951566-2dc0-4f78-8594-07468ab0329e",
        "cursor": {
          "ref": "8772a92d-c7db-47a4-bc59-92875123787f",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "434018a6-e1b9-474d-a6f2-c9814b2f75fe"
        },
        "item": {
          "id": "83951566-2dc0-4f78-8594-07468ab0329e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "612185c2-deff-4509-8b86-f1f6dc73d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a8b3c8-3386-4cb7-900a-1dc7654a25b0",
        "cursor": {
          "ref": "1bf47f6f-5ad7-4090-8446-243d6d7a6446",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "89db80a3-d3ed-46cb-854e-49a37ac2ca77"
        },
        "item": {
          "id": "d1a8b3c8-3386-4cb7-900a-1dc7654a25b0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a6dd9e38-8d58-4383-8c19-1eaed3f7094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac66f6a-c6ef-4575-bdde-ba06815d4a3c",
        "cursor": {
          "ref": "b89ecf31-5e59-498a-aec8-84097870593f",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8fff6d23-ad82-42cc-9c65-39fca4f1c488"
        },
        "item": {
          "id": "0ac66f6a-c6ef-4575-bdde-ba06815d4a3c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "73eb9fdf-7c99-4ddc-8872-c07f26ce82ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e5cbeb-e669-484d-bf07-00c7819ff9ef",
        "cursor": {
          "ref": "06b16ad2-0955-4780-a392-af343d21bbf0",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d42e499d-70b1-4f9a-9071-932f7b1dd05d"
        },
        "item": {
          "id": "d0e5cbeb-e669-484d-bf07-00c7819ff9ef",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c9d4540d-f9fe-4e9b-a816-25c191a3ede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40de3372-4d4e-4247-9cce-985ddd8da0f8",
        "cursor": {
          "ref": "0bb270e7-d816-486b-a54d-bbb0635fb4cf",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e20bea58-a2a9-4208-9caa-441f575ecf82"
        },
        "item": {
          "id": "40de3372-4d4e-4247-9cce-985ddd8da0f8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3ea29734-df5c-4011-b285-4928842d42c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6e6889-8bf3-4957-beac-a815b5e9386d",
        "cursor": {
          "ref": "011d5413-fbf9-4e0e-baf8-bc8e451fe6a0",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4033122a-6df9-4ce1-a0d0-b7d91809f626"
        },
        "item": {
          "id": "cb6e6889-8bf3-4957-beac-a815b5e9386d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d038e92c-ff68-4c33-87c7-e586318c8378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8a8baf-cc02-407c-a2c3-96bd77049e4f",
        "cursor": {
          "ref": "adc3b7f6-3183-437a-a2f5-deb6a36a12a4",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "026c8403-9ff8-4473-b6c6-83259717aa35"
        },
        "item": {
          "id": "4e8a8baf-cc02-407c-a2c3-96bd77049e4f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b96752bb-e12d-48ff-ab42-f294033e444c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97d3b9b-8b42-4c3f-9bbe-3c2c6e79bc93",
        "cursor": {
          "ref": "fabff6dc-d211-4c9c-b6f3-168827b822c0",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9d39896a-78a1-4d91-a060-9474f285e705"
        },
        "item": {
          "id": "f97d3b9b-8b42-4c3f-9bbe-3c2c6e79bc93",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "da0b3ee9-6cde-47d6-ab3f-ed6873f41878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b2141d-4c3d-4ada-9815-8ccc03d82fde",
        "cursor": {
          "ref": "95a73789-fa0b-428f-8ce4-2794fb233ddd",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b6e15dc1-c187-4fcf-a669-eb8d0b8a5cc2"
        },
        "item": {
          "id": "c6b2141d-4c3d-4ada-9815-8ccc03d82fde",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "058e3c0c-d538-4f48-9c55-190b99818dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd87f43f-18c2-4143-b7ed-1b96b286fe71",
        "cursor": {
          "ref": "3dac2708-475c-4959-9997-1448c773010f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ab609450-d185-4e2c-821b-dc58e2898736"
        },
        "item": {
          "id": "fd87f43f-18c2-4143-b7ed-1b96b286fe71",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9c91fa53-8aa4-475c-8ff6-a87b29c21a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1fbd55-b6fc-4110-a46d-61868e43b236",
        "cursor": {
          "ref": "a7a3580c-0ec9-4d1c-bbb9-dc0d19b93b12",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0edab1f7-e263-4927-80d2-528c70241ccc"
        },
        "item": {
          "id": "bc1fbd55-b6fc-4110-a46d-61868e43b236",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "677d9d9d-9b7a-43ba-a2fb-9f52361563f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a431ee09-be9d-4c6b-b280-eeba12a45b8f",
        "cursor": {
          "ref": "c3a8431a-051c-4b4d-9405-ce27d5e422ea",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cc5bee17-6364-4284-9d3e-f9811a3abe52"
        },
        "item": {
          "id": "a431ee09-be9d-4c6b-b280-eeba12a45b8f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7598f17c-935e-4a63-b6a6-a3cc9b70c7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2807d5-c1d6-4e92-8ff2-8e699aa652f0",
        "cursor": {
          "ref": "5e416326-5984-41e7-8921-55acba0f5783",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bd35fdc1-f147-485c-80c8-6c8e1e636480"
        },
        "item": {
          "id": "af2807d5-c1d6-4e92-8ff2-8e699aa652f0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8d53ed7f-f31b-4559-83d4-f738e5e5eb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207de3f4-8b1d-49e1-83b0-dcd5b6fe87ba",
        "cursor": {
          "ref": "4c31944c-8390-4816-8dd3-1c9aaad91107",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2074b18b-5c01-4724-ab94-016516624ab3"
        },
        "item": {
          "id": "207de3f4-8b1d-49e1-83b0-dcd5b6fe87ba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0766fe0f-bc9e-4ff4-85b8-3ad839652eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457fe9d5-6402-4b71-99a8-ebc46163365a",
        "cursor": {
          "ref": "d273b3a0-de24-427e-b0d7-1db8580531bc",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "84f3ea2b-81f2-4d7f-955e-6f685c61e1e9"
        },
        "item": {
          "id": "457fe9d5-6402-4b71-99a8-ebc46163365a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b5e52a65-01b9-4e21-94c0-ec9e9c6c0d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efc2084-f35c-4904-9eb0-00a5e21fa90b",
        "cursor": {
          "ref": "d2ff0a62-6b70-49c4-9e51-715a2d885db1",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5cfda61b-82e5-496c-a52f-f37a98287dde"
        },
        "item": {
          "id": "0efc2084-f35c-4904-9eb0-00a5e21fa90b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "44336e0f-33b9-4295-88ab-51797c99abba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ceb6148-a36f-4490-8c19-b6e23ee67d8c",
        "cursor": {
          "ref": "0e089970-3151-4eb4-a495-99058ec814eb",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e784b881-13e0-416f-8c52-7dcfa5448c8e"
        },
        "item": {
          "id": "3ceb6148-a36f-4490-8c19-b6e23ee67d8c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "506c13d5-8299-4f8b-9c99-6adfaca1c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae224f0-bb99-40a8-b351-df4e24518912",
        "cursor": {
          "ref": "6cd26957-1909-4c8c-bdc1-1b352742cece",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9a4f26ea-f5b4-47f1-bcf4-dc7a900fadd8"
        },
        "item": {
          "id": "cae224f0-bb99-40a8-b351-df4e24518912",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "090133d0-523c-43de-9baf-ecabf3263e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b74682-137c-47d3-ac4e-df8cc681b1f9",
        "cursor": {
          "ref": "d681411b-3e43-4553-9e38-37ad6c461ca5",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5d9340f4-051e-44f5-8602-105527322565"
        },
        "item": {
          "id": "a8b74682-137c-47d3-ac4e-df8cc681b1f9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a05335c1-b185-482a-999c-1f9616cd6eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccab7904-2d41-428d-a286-04f7e8438ffc",
        "cursor": {
          "ref": "d7e65e7b-9fd7-48ce-b724-2e9ad4ad2229",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fad3a264-febe-4395-b7dc-8c1b287c0ee1"
        },
        "item": {
          "id": "ccab7904-2d41-428d-a286-04f7e8438ffc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0e2e1713-830b-4339-be5d-c9fd61d96d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac8fa1-df1b-43cd-bc43-55c06316af65",
        "cursor": {
          "ref": "3fe6673b-9cb9-4edf-9e57-1c32b095efa8",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "22b4be1f-594a-4f97-88df-1bef60568b18"
        },
        "item": {
          "id": "61ac8fa1-df1b-43cd-bc43-55c06316af65",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "abb56e89-8b55-49c8-944c-8e4bd7e3bceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58312f06-bdfc-4a52-8ce8-0ddf884e365e",
        "cursor": {
          "ref": "606b8713-a44e-431a-abbb-d3cd3b068af8",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "03f7b4b6-2e8d-484a-9007-aaa3abda91f7"
        },
        "item": {
          "id": "58312f06-bdfc-4a52-8ce8-0ddf884e365e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8d42c743-e4c0-4ce6-b7dd-efde416daded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8631a7-b2bf-4cc9-8334-9e4bdb3de64b",
        "cursor": {
          "ref": "c76be1b6-d33f-4fc8-bdc3-69288d2580cc",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ceed16ff-ad56-4a3b-b268-b31cf51268a6"
        },
        "item": {
          "id": "1e8631a7-b2bf-4cc9-8334-9e4bdb3de64b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6ed64815-2e5b-4771-8a6d-641a9a2628c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79054805-2468-40f4-af42-bcdc2fb9551a",
        "cursor": {
          "ref": "5cc0e8bc-c182-44da-b7a3-f9e735077b3e",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "960e5917-c59a-4f82-a30c-2fe39fe12314"
        },
        "item": {
          "id": "79054805-2468-40f4-af42-bcdc2fb9551a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "00b964d0-006f-4660-aca0-d9e048f87ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab2fc27-40f3-4a58-af42-54d252e54185",
        "cursor": {
          "ref": "a29c9415-eeb0-4218-b6c8-903495c5dd5e",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "acb87fc1-e1b8-4604-819a-7e55631bf822"
        },
        "item": {
          "id": "fab2fc27-40f3-4a58-af42-54d252e54185",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "10e331f9-3ec8-4e26-b3f6-07c04077c794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59de15e1-02bf-43a4-a1c5-550bc44da1b1",
        "cursor": {
          "ref": "e2539ae8-dc11-47fe-81ff-709701b0bd2d",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "66ecd621-b67f-4c28-88fb-55025e58c5b6"
        },
        "item": {
          "id": "59de15e1-02bf-43a4-a1c5-550bc44da1b1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "53624bb6-313d-4342-9845-06a87a6294ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47ea763-f5b8-40a1-ae7a-2c4c8a84a679",
        "cursor": {
          "ref": "65b8626d-6dc3-4fc6-8748-67ee563c5b46",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3dff59d0-844b-4f88-a47e-4f0f9e1402bb"
        },
        "item": {
          "id": "f47ea763-f5b8-40a1-ae7a-2c4c8a84a679",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6c05ea8a-1d5c-44d1-9eed-0dd0ca1535b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d29a3ff-3e16-4177-80c3-77162e9dddf5",
        "cursor": {
          "ref": "816cb3cf-cb99-4820-a4d1-6ab20aa7b7df",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "29c3b7c9-6f83-41ee-8a10-c5a692d60db2"
        },
        "item": {
          "id": "6d29a3ff-3e16-4177-80c3-77162e9dddf5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2a28e214-a686-4f06-a30a-2cdc6aa37fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee57369-4175-4cb8-ba91-65dbc813f070",
        "cursor": {
          "ref": "2aef995f-1e9f-4e3d-bce2-e474250e3ada",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "7aeb4da1-b67a-410c-a326-633cc0db0b35"
        },
        "item": {
          "id": "cee57369-4175-4cb8-ba91-65dbc813f070",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "adac27fc-e134-4071-a8e0-cf4af80b42a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb19e00-0d79-49fa-aee1-3a6b27eae4d3",
        "cursor": {
          "ref": "f229c55f-6385-428f-9645-c71045dbd9e0",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ed93d182-b60d-4574-b114-4af9eaa6cee1"
        },
        "item": {
          "id": "4bb19e00-0d79-49fa-aee1-3a6b27eae4d3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cb03209f-7fe9-49df-916f-7cd2269abf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876608f5-dd2a-4390-b2a9-6ef1e640797f",
        "cursor": {
          "ref": "b02838de-b543-4fdb-8371-ae8e7923a300",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6f40c7f1-63d4-4030-99ac-a22b31b0115c"
        },
        "item": {
          "id": "876608f5-dd2a-4390-b2a9-6ef1e640797f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b4c306d-bad3-46b6-9c2d-e4ab91c9823c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a0001b-4d9d-476a-a8d0-d46101f0d681",
        "cursor": {
          "ref": "b14b9801-7436-4f40-977c-ec4051629453",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c742a308-641c-4e69-820a-bb51fc29d617"
        },
        "item": {
          "id": "60a0001b-4d9d-476a-a8d0-d46101f0d681",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8d53d004-260e-4451-8688-37f7fa54d7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c72e465-91a8-433b-98a1-9cb67312416c",
        "cursor": {
          "ref": "7290f3f3-0264-4dd8-be42-db054b680124",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dcbb8592-2df4-482c-9809-16a03765aff0"
        },
        "item": {
          "id": "1c72e465-91a8-433b-98a1-9cb67312416c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "21babab9-be26-4d54-806f-106564a7f99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5598aa6-37b6-4663-a4c5-77dd0019fded",
        "cursor": {
          "ref": "d282a907-a340-4c13-b5aa-b16c8e2ceecb",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8731288f-c4f6-447d-9074-3a8edefe300f"
        },
        "item": {
          "id": "f5598aa6-37b6-4663-a4c5-77dd0019fded",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "140c0a67-c424-4189-bbdb-d7cc5c1cb9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c8f0a8-3b7d-466d-80cb-d939972ecea5",
        "cursor": {
          "ref": "b9c3311f-8b11-43a8-b4c8-95c41ba7e3b5",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c28650f9-108a-4068-b2ed-538b4f37d465"
        },
        "item": {
          "id": "e0c8f0a8-3b7d-466d-80cb-d939972ecea5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7ebdd960-3293-4c7d-9ea8-d3480c927f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdc5b67-f482-446b-9726-140f2fe8470f",
        "cursor": {
          "ref": "bf729d55-0b4f-4de9-8929-38418d664571",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "58eebe61-0655-4113-b836-f5b9ceb129bb"
        },
        "item": {
          "id": "0bdc5b67-f482-446b-9726-140f2fe8470f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b6be3079-c822-4e23-a92b-0deb36096514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f986e71-02ea-4456-afc5-e4f426f7bab0",
        "cursor": {
          "ref": "d4b87fc0-f225-467e-beb6-cbd50714eab4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dfec9348-615e-4ee0-864c-80d3376030ad"
        },
        "item": {
          "id": "8f986e71-02ea-4456-afc5-e4f426f7bab0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ca87b58e-523a-4235-afe5-a892e0c15d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb139282-8ac5-49ae-a944-7d85859581c1",
        "cursor": {
          "ref": "cabc1a88-0d92-4f37-b30e-d11ee83600f8",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9b205a97-d4e7-4952-bc03-507e06e74965"
        },
        "item": {
          "id": "eb139282-8ac5-49ae-a944-7d85859581c1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "49279204-18df-4464-b5d1-36ac8e6237c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee8e608-37d8-4c26-93ff-ea5876b0ecd0",
        "cursor": {
          "ref": "152f24ae-2ebd-491f-a4c1-441b44b0e02d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f69bc3c5-ae16-40a4-8ac8-3c5b11db6102"
        },
        "item": {
          "id": "1ee8e608-37d8-4c26-93ff-ea5876b0ecd0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "909d81ea-49c6-4ef8-bec8-45fe46b82a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65abed88-b6b9-421b-8e37-541a170b43a2",
        "cursor": {
          "ref": "6399d19b-bd7e-4152-a8a7-59d0bb4f56c7",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d125e755-bd74-459a-9905-16424cbfa8bb"
        },
        "item": {
          "id": "65abed88-b6b9-421b-8e37-541a170b43a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1ce6f90c-776a-4ed2-92c0-7745a0113f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff33045-85ba-486e-a903-b47437cbc9a7",
        "cursor": {
          "ref": "cabe5104-9941-4d7c-9b55-a29e5f6e245f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e6b20c3b-42a6-4246-9238-e39ad9596901"
        },
        "item": {
          "id": "3ff33045-85ba-486e-a903-b47437cbc9a7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b42261fc-8433-4ddd-9636-bf67e6986688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261fca47-1e23-401a-b4e3-506280120077",
        "cursor": {
          "ref": "4073c47e-4fbb-4c2e-b884-9ff74e38b330",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "553f1d6b-7ecd-4576-a641-fad7444f3f40"
        },
        "item": {
          "id": "261fca47-1e23-401a-b4e3-506280120077",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c79abb5e-40e9-490b-93d7-1f2feec0426e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d007f89-f0da-490d-a708-a9e4d5136dd2",
        "cursor": {
          "ref": "00f48cf6-a969-4c3c-8b71-929a32f157dc",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4e9853c8-844c-41a5-86b9-fcb8d0268dcf"
        },
        "item": {
          "id": "9d007f89-f0da-490d-a708-a9e4d5136dd2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d7aba78d-ca6d-4f13-8c30-e919edf22c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bc63f5-4105-4b7d-a507-053b10163365",
        "cursor": {
          "ref": "f4a1fc2c-cd5e-40ef-9432-f18b8b93bd03",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "db45cd61-ec21-4915-ac07-988c81948a51"
        },
        "item": {
          "id": "09bc63f5-4105-4b7d-a507-053b10163365",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b3b99628-feb1-4130-88ab-881c1d184f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdee310b-6ec9-4fc7-be75-2d316a6c2531",
        "cursor": {
          "ref": "9634ef90-ed15-4e9e-8e05-0371aa793b81",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d0b3b0bc-07ed-479b-8a29-0bc7537e3553"
        },
        "item": {
          "id": "fdee310b-6ec9-4fc7-be75-2d316a6c2531",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "93511042-e94e-4cfb-a37d-ee0937cb35ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c1d6c-69ea-4220-8072-b267b1398eb7",
        "cursor": {
          "ref": "da80ce84-e2b0-43b8-b6e4-4be7a02685fe",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8de65caf-a28b-47e4-8c71-ca00858a5108"
        },
        "item": {
          "id": "e35c1d6c-69ea-4220-8072-b267b1398eb7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b85b407c-71f3-4288-80b6-1dec6326835b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a422bc8a-18f0-4f9e-8baf-b5f6542822c3",
        "cursor": {
          "ref": "a966d905-1559-4084-a13b-f799f777b29a",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "af225513-3ef8-47ac-8a23-bec72bcfc43c"
        },
        "item": {
          "id": "a422bc8a-18f0-4f9e-8baf-b5f6542822c3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a64f3e34-3ecb-41f9-bb5b-0456097e7f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e141f217-787d-4f30-8a10-431bd72ba878",
        "cursor": {
          "ref": "65d81fc7-2eed-493b-9e75-a2a6c2b13054",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "aa7eba36-1c6b-4a7f-a826-5d17157a8368"
        },
        "item": {
          "id": "e141f217-787d-4f30-8a10-431bd72ba878",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "114d997e-f773-4e68-a9bd-c796f5dbd0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58e4fec-71d3-447f-89e3-77462a7c3e3d",
        "cursor": {
          "ref": "ef3dd2ef-c912-47d9-b686-4f011c8d8752",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "14bfd9f2-8051-4fed-ab29-c5e332769319"
        },
        "item": {
          "id": "f58e4fec-71d3-447f-89e3-77462a7c3e3d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "947af6d2-bee2-4db0-a362-d2b4c7a03808",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebe12cc-b7f9-44c5-94a3-7ff1d8a80a8d",
        "cursor": {
          "ref": "6d91e7c2-b89c-455b-91d7-93d37782f059",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "687715f0-1f6d-4702-9039-a32b1d870119"
        },
        "item": {
          "id": "1ebe12cc-b7f9-44c5-94a3-7ff1d8a80a8d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dc9085db-bee4-4726-9630-46144f876268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "2a1f290f-f8fa-45c6-9576-a4959fd7a573",
        "cursor": {
          "ref": "92fac0f6-febd-4fb8-8a33-7fc92e1892f8",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8d080b66-0932-4520-9fb8-722a3c54c619"
        },
        "item": {
          "id": "2a1f290f-f8fa-45c6-9576-a4959fd7a573",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7b30dbb1-bca9-4907-86bb-c01718fbc481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "63dafe91-2cc9-4d1a-8490-e39cfd8b2d84",
        "cursor": {
          "ref": "4895a7f9-cd4b-4107-b32b-b95f4a55ba39",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1fce970b-1178-46f7-a3d9-bc63e4d1e7fb"
        },
        "item": {
          "id": "63dafe91-2cc9-4d1a-8490-e39cfd8b2d84",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bba92576-5daf-487d-8a31-efcbaad2ce09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "1eea5ee2-4d07-48d0-a1b2-f1ceea1eebcf",
        "cursor": {
          "ref": "101bf00c-251b-4083-a73c-2f0fc0a9d23d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "26fa032c-4ccd-4298-a602-af34c524f63e"
        },
        "item": {
          "id": "1eea5ee2-4d07-48d0-a1b2-f1ceea1eebcf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "57caa3a5-9eed-4f41-9e82-ad0e1f9f276f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eea5ee2-4d07-48d0-a1b2-f1ceea1eebcf",
        "cursor": {
          "ref": "101bf00c-251b-4083-a73c-2f0fc0a9d23d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "26fa032c-4ccd-4298-a602-af34c524f63e"
        },
        "item": {
          "id": "1eea5ee2-4d07-48d0-a1b2-f1ceea1eebcf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "57caa3a5-9eed-4f41-9e82-ad0e1f9f276f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd5acee-26b5-4571-b876-a5b19e7d590c",
        "cursor": {
          "ref": "9bdc568b-53af-466d-92c6-20eac5d82f96",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f082534a-f434-47f5-8644-5daf7b66f24c"
        },
        "item": {
          "id": "4dd5acee-26b5-4571-b876-a5b19e7d590c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "106b028c-7520-47d3-8116-c8438143febf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab96f4f-dab2-4cef-8922-eb36d0c9ffe2",
        "cursor": {
          "ref": "28928816-29c3-42e8-8c69-5761a121449d",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c659db19-aedc-431e-b8c7-9c61ecfd9510"
        },
        "item": {
          "id": "eab96f4f-dab2-4cef-8922-eb36d0c9ffe2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f07959af-ba85-42fd-9477-f07d26f80ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}