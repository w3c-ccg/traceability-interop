{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "94807a2b-50ca-4481-864b-5e0a960632d6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7b0fe725-3155-43d6-929d-4972090bcf16",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38b71958-f162-431b-88ea-6c37b6c2f98e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e89d02fb-e41b-4c19-aa7d-4e51615e3f5c"
                }
              }
            ]
          },
          {
            "id": "a3d99ab4-f190-448f-8c2c-066932703c04",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f444216b-bafd-4c51-85c1-27a90e56d2c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "eea237f7-f557-45a4-98d8-59753a8c39f0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0f1e16af-25c3-4f96-9041-18e3d9815021",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a5cd1fbf-f177-4aaf-be59-6c2fcfb69ae8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf68e456-71e6-47f6-85fd-409fb8bfe29b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db8a2689-9d08-45ac-b1bb-0609c17b3973",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64316123-f4a4-4bc8-acbf-0cc312ba9b1f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f75cacf-a3c4-438b-a8a4-53ed9897e5b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60e2aa90-ff23-468c-a00e-017eaa7b428b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eacbfb22-d138-42b9-944c-4f44edba5591",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b0e1f7d-4262-4243-931b-4e5a8c8fe069"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be36fb03-7023-4144-b0c7-3f290294a0b4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f500d47c-166d-4f9a-8be8-881c44963a83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39e7d48f-d3c4-4a12-b959-1a9e89f4b405",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4e46556-08d4-4b78-94e6-22746c3c359e"
            }
          }
        ]
      },
      {
        "id": "f4ed1eb5-598c-4682-8567-5979298e5a6d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "41a85817-b241-4e6f-a6b3-944d83b0ddf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59d50ba8-99af-4b12-a12a-9292d640ff14",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "245d0853-ab09-4794-9f00-048d14cce3ea",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9529167-3a47-492f-8736-2cef633b1f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c04505b-1a5f-471d-8145-139589f78f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9035a779-2b3a-4f11-ad53-0672f3608fdb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7927d57-b48c-4f69-9fa8-e9a39e670a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12f030e3-d054-43b9-842f-a519d36163d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6a51c3-5d9b-4721-b479-435291933532",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a642ce0-ad30-4c93-99fe-1aa5d6410ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c66c9ed4-5730-4db1-9a99-b12246246b51"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9bcfb34a-a84e-4320-acfa-6891ab678d44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84bb25c8-f320-43c0-9922-ef00109e2375",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ae60db-3532-4434-8e4b-58ca3075679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7797c84f-c27b-48ed-98d9-47e670f1977f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecff83bb-2105-4918-9d59-ec50e06a270f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4746eb74-2916-4292-b292-3090eab0c337"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "72eddf16-3161-4a10-ae13-a4e0c7ee49f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "870de968-119e-4184-99f7-ab7526f376e2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e57dc729-d1ec-42ba-a107-a0896d51c69c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0489bbd3-a216-4597-bc59-4340b38dd397"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d91de2da-92a5-4835-a414-22c45bb69e4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "69cce002-5ffe-4cd5-8307-69ee1b0014a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75377ff9-211f-4d7b-993c-bb294ac89387",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3309018b-3576-481e-ad8e-7174dbb49a13"
            }
          }
        ]
      },
      {
        "id": "267792ad-9ce5-4a1d-9d24-caaf55a44804",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d38352a5-5e33-4fb1-bd2d-b45e7532119c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb80090c-7c8c-48c8-8b9d-d0f367f82890",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f29b76c6-eadd-4d2a-881d-8c89fcc459ef",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12888f1b-8672-4401-85e6-e6e689eff748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d996a4d2-6b2e-4446-a57a-21247468675f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f62770-6b5e-469c-8c03-3bb43a7e96a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f1850af-3fbf-43a4-ae23-37c638e1a3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610716c8-0626-4809-abe6-869940a88843",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac6c997-0a91-4adc-ad78-81409bb26b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8687a49-a7c2-4c35-a661-25b66f3764dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc41058f-1570-42ee-9a62-be63624c624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abb2d564-0fa6-49c8-a49f-c1f85985db09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6838d2c7-fb04-4cc5-912e-0442707cbce7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa54d7b6-8485-471d-9441-35b927f951e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a759b85-d635-4bd9-ad53-340d9e0a24ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359ab2f6-2211-4a27-8227-b76fe2f15901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c25e3eaa-a382-41b8-84d1-1c374c919212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488693f5-363e-47fd-a9de-021d00d93dda",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e85cea-a73a-4189-beaa-75121f53f4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbda4e8c-b0d1-43ee-b905-a119ca315628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace67c23-14bc-4dbc-9f65-467cca9f0a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60c2ccb6-03cc-442d-9474-acebce28582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975f1b1e-352f-4773-abe9-d9abb64a12f2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1798c74-91d9-459a-a147-c94176c7042d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974e069e-86d0-4664-999a-cfdb4fe8c1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb418d55-9794-4ae4-aa09-e98127c67c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3816cf7-6e50-49b7-8de9-246089358bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ff6706-a265-46df-9311-0e4d0465440d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e19b0c-83df-45d3-996e-a09088723944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ca09e0-ef7f-4034-bce6-1dd8605afab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ba6f23-0b4c-4dea-8126-bc6ccf40ddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c440687-90c1-4111-b2d5-b9b9b3824883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81b7ec8-d34c-49e5-9c70-c2354b306ebb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27113e48-898d-4645-abd3-55f979c6f78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982b30d9-b52d-4bd2-ba2a-53d9921297e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae421f0b-703a-4a2a-8ea8-360cbfecfc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bea4ca8-fbc7-4e33-96d2-7d6462759386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d073502-3059-4e31-b0db-a586c57d9c9a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc45d3be-b70a-43be-8d69-f58807f8a9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e57d47-9665-4155-a6ab-76c0848706a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74e5f35-42a8-4205-9a67-9553b3402ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2047801d-03ce-4ac5-975e-5d69cda5fb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96a7481-a013-4bec-aa01-b21721da6760",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e40e778-2a4b-41d7-a8d4-40b9c80d6bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37eaad1-f15f-444e-9e57-25607ebc1c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9d1c83-01e4-4ce1-9293-0ff767428c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e716b7c-b78f-4b1b-9cc2-89ab73cd4339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba94a4bd-c6d3-4667-bc7c-f40621cbabdb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761bfc4c-f050-466c-a5b6-428c2a1100bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed53c21d-1ecb-4c5d-84fd-1a369a63df7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b049936-1f13-48a5-be48-73dc8fe8d3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0800ff27-ccb6-4004-802b-e6ae3b863207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc56aede-afda-4532-b201-e35f11cec77e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978ebd9b-eeda-4f54-b73e-ac0b3110c90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babcd170-d987-4fa6-9ddd-2541da66ea03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760dec20-5207-4c5f-a429-659d25d051e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95abfbfd-0879-43b6-a979-db66bb583dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0036ba-3e82-4168-a313-2aa23d43df5a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6de172a-de83-4240-a891-5f434929f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f559d59-7d57-4a45-82cf-372770300467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782c4213-e1a6-41fa-9563-f2e153910223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f81d941e-3b72-436a-a355-bbfd3582157b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807d109f-b8de-493b-bd5b-87bc6c81a383",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7bbb20-62ce-4fd5-9450-6a1895ff8c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c71bc6b-2d59-43cd-9193-62b660745568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beeab3f-79ed-45fd-8502-3bbc36901d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "001b4909-e2be-42d8-bf9d-87b18b98ab71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18e6795-f0dd-4c3a-beca-03d714cef35c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a5847c-ba59-4367-b3eb-74fe7e905f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dfd14b-b411-4c9b-9905-e363474215f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9067728c-b5f1-4b0c-a6ef-a88a76ea8bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78e40056-df1e-468c-8257-ec08c0d51357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a155cfe9-c79b-4cb7-abe5-be2ffec62dee",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9be62bb-ebba-40cc-a413-9023e9b15ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5794df39-3313-4e8c-9c15-d29739e63d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0a7692-4537-48b8-a54c-35ac26d97f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa2482a-8e4e-445a-a700-6dea9d1f7df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae428aa-fb9e-4560-999e-7d58faf4396f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ca4ac8-577d-4d4c-ab60-396195371748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc55b7e-8893-4c60-8d65-d406e761f3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da3fd6d-7137-4445-8b2d-1047f91bf278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81920fa3-3dd8-4198-91da-b78af8d57eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b5c07b-088c-4360-a6ee-e637fb1e023b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20c8687-4a2d-468d-a0b2-34c85b4e7cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05220d5a-c475-4e20-88d5-94327afaf42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285140c5-292b-43ed-9402-610f5084b402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4a26813-0140-4f83-9664-724f696a6f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b56acd1-c7f3-4346-8329-aefbeae94f45",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a27a640-7c50-4814-aee6-605f1bb263ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2173ac26-af14-4438-a168-083129dbc061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f1b295-3a47-40a2-84c9-a6c04e4b28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "60d13ee6-be3f-4555-ada9-30d81f729a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6a3b03-1566-4a7a-8119-4f7881865847",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58416738-4cad-454c-95ff-6da2d56844ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4d8714-4d6f-4453-8f64-8b72c21b10d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b8f443-475d-44b4-a419-524f4ea8f588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39e1ad25-79d9-4cae-bdc4-a9a6610d1048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8faaee-7bd5-4064-b2a4-7ed78ee94db9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334daedc-238c-49a7-a351-ca1501d495d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3e1512-eb80-4d99-b213-59efb318068b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d698033-213f-446d-9553-84fb7d2c0a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a2d38c-c356-48e4-85d6-f3029fc798bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f007ca86-a7b5-45c3-addc-452a12f034a3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee615ee-7dce-491a-8816-d192d85e3fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ddbd08-9577-44b0-8ced-841165ae3f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e90d5f0-c115-4afa-82d6-af11e76fbda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "434055c7-cafa-4c53-86f3-bdf51bac2ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1cbde3-cc0a-411c-99a9-6faf1d1a055c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae623945-1872-4a01-9d23-05c268a8d225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51483b0d-99f2-46a9-a4e9-3448b6524d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e36157-0de2-4014-8c67-148f0b62ea3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb0e8f2-3f4e-44b0-af63-5978752b0e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b018295d-6a7a-4967-b8a8-67bbe4ca9c90",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df7e53a-43aa-432a-8489-d4e909ac5d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b6d46b-dee6-4851-9d21-8e60a46d72ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80694b2-9bd5-45dc-b4b6-af258a4720ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35479064-67f6-47b5-bfbc-021e593dedf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe4e22-16f4-4161-8d57-c3dd663fee86",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5283e6d-b150-4835-bcbe-44fe5c1cf873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26706b9-d49a-4695-8cd0-77014841d457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a27ec6f-cab9-4815-8684-79ce7c90e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3250808-a204-4dff-84ee-571b606e8a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7932f6-ba3f-4668-9a0e-278aa587630c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be452fd4-9635-43a5-ad8b-008d75ff6775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feed6150-a412-425c-921e-42345bbcf44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2963db20-7227-43fd-bd52-23b1d5d018b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1600a3d2-e25f-41af-8dcd-c2ce0794da5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8575b3-0645-44c0-9e95-61adefa26f5e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a223f3-b355-408a-9c16-9e1719ee6687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f117329-f87e-4ca4-ba6f-ff11555f2cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0715ec53-59a7-4a4c-b13e-8597282d027e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd29500-59c3-4d8e-8c54-57b9244d4977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0aad0a-544e-4d7a-a62e-d0cd129d918b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d054614-9c68-452c-b23f-58878e5bfcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c75fcf-9c21-446d-b3cd-f209e80f8593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49a882d-7840-4445-ac6b-d2e5132c086e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea10494-d30e-434c-8407-6c7c276a4df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc651635-3784-455a-bb20-bc4c3842a8e5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc4e622-76bf-4c35-9ac5-fa111c4ccf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261b1440-f905-4ad9-b728-8293f9c9adbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af49bbc3-5590-411d-85e5-b158e0d7a4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbdf8968-3766-464e-a9fb-1af3f1d878d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26498c66-6e91-4253-8767-542dd81ebb21",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffb31b2-a23d-428e-ae9d-aa13055773ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14e0927-fda5-430e-8adf-cd0951e8231d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fb5436-350f-4c5f-b138-ee6bc32843e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78430eb8-3b4b-4cd7-bab4-9767262c09fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb7f5ea-ebe1-4fe3-ab7f-8ddc11476c0c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7f112b-7f2f-4d77-bff7-c1a9a4009914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832eb9ef-3639-4baa-9545-6259c4a96a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875fc972-e8e7-4904-9092-b5ba2b86e647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde8f8b1-d805-4958-b211-95e3a5d03d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6168b5bf-8499-4437-8c98-f837c9a41ae5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c5d6c4-1d9d-46d8-b38d-041751a50246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04b95ea-32e5-4e82-aaa7-20b177811d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3d1b8a-4571-46ab-9faf-797424c4493e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9037c3c7-9a0d-4341-96f6-c137a2d6850f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c49adf-c761-448d-af90-03858d239733",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfb746f-ec68-49ad-baca-f34cc2c272c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ef1ff6-60ae-4bec-8b0f-48b9aa615ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d95a2e6-7804-4ebd-a4c8-9c5b310eb94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7423439-ce94-498e-99d5-0e32d86f1565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab3b64a-d835-4b91-9112-2fc9295e6ff7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3725af-2016-498b-9127-9ff0f683e232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c8abd0-4cc8-4cab-b401-ee823429f877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1edfea-3fb7-4446-a783-6db71d0cbdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d49825e-09a9-4872-bb8b-1f3745ea2c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7c6a83-c5ca-41c6-9cfe-119aafec33b5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c618f4-431e-47c7-963d-f9da24ddd619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2d13d0-770e-4674-b4a2-843b0f4107fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8056c988-97a0-4186-a13f-a081493d7d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ae856c-8c95-4e4f-8bd9-029f993bc8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e7338d-848f-492a-a757-f5e2034da8a2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b63de8-bbe0-41d7-a584-86ead0ebfc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95255f8d-d1c5-4c8e-8d29-ae36bcb264dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86070a2f-94eb-46eb-a1ec-5980eeb3652a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7f27f67e-6390-4498-81fe-fd94be12eea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c6e830-c969-4a22-a090-025bfe64fed3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e7f34f-d047-4892-8339-af1b81564ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b303488b-e6f1-42de-87ea-63e2f9763fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60e30b9-f04a-4fb4-8d42-d23f452f4ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54a9a7cf-aadd-4abc-900c-d280839d9bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30195198-d5d2-4d73-a7a1-e026f594ba95",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aed131c-7a19-472c-955a-fb86445ebbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5bec77-a929-4bfd-9a20-7c9aec47fb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea9707c-1106-469a-8751-b9d920a85f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42bd0af-e305-40e6-b357-ab88fbb95cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15447ff8-85e0-4678-a490-96b394061032",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e1cf40-8e7d-4f60-ba48-1251a5978601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff61e40-4d43-4a97-bde5-897fa2081370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c559f264-3cf9-4c80-a47a-52f281000330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74c27d36-ec70-4334-8b63-5373271a5ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dbf1e2-0784-410e-aaf6-3d4d7fb1bfe7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b2bb2b-ebe8-4258-b315-33fe410d51a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cc735b-671d-4c60-891e-537955e8143d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64608e6-88ba-4119-a7d2-33c0ac1bef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ebff79-ff61-469e-8abb-dec2a1da28a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e0fd08-400a-4358-ad61-8a613ad9d96f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9719bb5e-0111-4396-9e5d-da98ff76c806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41cb1bd3-2a5e-4684-a358-e9a1ea2786dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3910600e-0d34-4a1b-916f-4ee07d6b6a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5abfbffd-b560-4a25-8727-da04a2bae3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5f9237-1941-47a2-b038-52ba0cb85b4a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7d3bad-dd45-4664-a14e-33506d903707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1489b7ea-8966-4fa5-adf2-dada4bba529d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39099b83-84e5-49f8-986e-ce4b72ab6684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e04157a-845f-40f8-8929-2134589e4916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9f8e9d-79e6-4509-999b-271b9469e1ae",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0143bf-e585-4c13-b285-b161a52654bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ca72ac-8b9a-4d26-a881-d3213471add4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7fdd0b-4f70-4639-b150-cbec3720bbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "51c694b9-05e7-478d-a4d9-f69a6d3f0afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ed3acb-6f9c-4628-8302-d18f295741c8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fcb28f-1cbe-4158-85e5-519178d8d4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61c94a0-d88b-4646-9800-66e0efc44aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cb8470-adbf-4add-9e08-85c4a3186c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "05a68876-d04d-4f2f-9837-8d67318415e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ded52ab-fb94-4fba-8d05-ce5ff66ff658",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc2e7b8-4d38-4d6b-a740-f037ded9e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40b6452-7380-473c-a119-5a4903a61ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720bba11-d2ef-4bd2-ba99-65ab81bdf4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2da9be3c-6b44-490e-8ad2-b66980ce62cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1346c4bd-d88e-4787-a6b0-6f6fa9c03cd4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6325f49-7079-410d-8af9-80ac09dd857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bfb608-dba4-4cef-a0c7-3eda99799ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf6ddcb-c499-49e2-b291-1aada7c2b11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90617f4b-3391-4b14-9e7d-3a63a0606537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9679b32f-c9e3-4212-96fb-2000f244bcbf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1fd71a-30c6-473c-bf98-1fb671523ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93246c27-72dc-4b5d-b1a3-0a117aca58da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c2fcce-e946-4773-b66c-964782f826b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "843e5734-ecd1-4b4e-b67c-8425325aaa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd15e13-03ff-44ed-832e-ee58dc829f8d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f62af8-b747-480d-b20b-7fdaf61085c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26837a19-bc52-45a5-a2a2-d3c18549aa37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8318a0-e389-4923-95fd-07ca92f8dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc106ade-fdf1-405e-a399-0ce3eaea84bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ffd8a2-0c0b-412e-bef1-c37e9d8dd491",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fca2c91-7d51-4ef3-96ca-5c870cfa9fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98784c8-41a1-4cc3-ac16-a4e7cf4b648b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42d5063-80be-404a-86c6-38c255dd98e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5972deac-1b27-4da4-ad22-4116e6fcc19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696555ca-88c1-4cec-a2aa-eaecc22818d7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f8ed95-9d59-4ea6-a5f9-1215374e1424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4ba56f-37b1-4d7a-8c8f-0c0a27b0b256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f686acb6-fc05-4d91-9dbf-fe18a2cf38c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ee4ec6-cafc-46e8-87fd-c42536189721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba7c616-9f26-48f1-95a8-1ee9a282fdc0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bd2ec6-404b-4fcf-9470-98915d513755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2de049c-4295-41d6-9e3b-06e6c25ca46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7988dd4f-0075-401b-81b1-dc03392d882f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2db1c46e-6ce2-438f-b7a9-ee74abf0a4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6985a0b8-0d5e-4e2a-809a-823f27500b4b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46786e30-a071-477a-8dd4-0f0b1d27ff8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bde7d1-36ab-4df3-b11a-d9bc46005c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11ee04c-8fd8-406e-a336-893b2d59c7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b0dc4c-353c-4465-82f6-c0e0c8da905d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afa017f-d31a-4a00-a634-b8ea3cc3285f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed632291-049d-4242-bee1-bd3c67e64428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc950dd8-f175-4727-a238-d2fd483e5657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511b3e0f-3028-49a5-a7b2-e75ba2df979a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9faee0-8bf7-4cbb-b780-cc69c40b6e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40de470c-6031-4e55-97bf-afa7e2c4f55c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dcc18f-11ba-4123-98a2-4ef228b14453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da562f5d-c9ae-4efc-bac7-aa8a2cd85962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673b4b0c-3831-4c6f-8455-a6d377b9ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b064e4f-50d5-4ce9-8eed-03d53fdc964c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e591c8-c1cd-4f33-acbf-ee3a2c57981a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9181a33f-9caa-49d7-8ec0-957e1b1c094a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bb3772-9ff2-47cd-b9fa-e593a4baef9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520e460c-8d04-4bb3-9436-14a47397372b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffb5795-214d-491d-86a4-2e2fd9e61354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1def04b8-16df-4897-b5f5-1eec9ac0348a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05164348-23e6-43f6-a332-bff4539b1d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9247bf37-56d4-4531-9413-5218da75a63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff8f93a-c695-490c-9dc7-d47349b21755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "044836c7-caf0-4f4b-9a8c-79b3c03fb96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cf227b-7e4d-4d19-bc8d-2eec067cb9f3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897b6422-23d8-4fdd-a481-d366a079923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b952126-5b62-4050-b84d-6d71ec0aef86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cc6db8-b7cd-4e3d-8079-f8701e8d083f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2befd61c-a1cd-4238-a50a-53a0bfda59ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f5959f-ccc4-402f-bbe1-40ced89cee6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f648f27-6169-4ba6-9098-7b381ebfe3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351b6d47-f2e7-4ba6-a684-6f7932817837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb73a40-86bd-4b3a-a706-bb1034df1b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "57a440b1-72da-4180-bc74-769805c83166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d159a68a-aa75-427f-92f2-928916f7d3ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30a4667-54bb-4d0c-98a2-4189337e74b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0efc86af-fd7f-4d53-84a4-9070c84dd349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb0e0ef-2fdc-4b40-b98d-e752a0fc49ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "befc42c8-6cae-4f9c-a051-d07a8f41b28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04c882c-407e-44ef-a8f6-e09648af73f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c302119d-cd13-4494-8592-75e1d43a0b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c7f445-9a8e-4b8d-99a6-4be825b01b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e7ebcc-e4f5-4a41-8c53-5c4e3b9a1040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd65912-1e4d-4f50-96df-55387aa4bcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f4c303-5a16-42b9-857e-33ee9261736b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8827d76e-f803-4c1a-bdea-1aa223e90e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b5f86d-f9d2-49d4-9a87-b99351973766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3035a0b-588b-472c-a878-f31d0f1dd497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aeffe874-d919-4a56-98c4-eb5b5f6739fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5337dfdd-4643-43ff-a005-edbf4fee9e20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddedaf13-1cc6-469c-ab08-e2a8445d482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe913a61-4043-4bec-a30e-dcaf0edcd83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6580af-0246-41af-9bd8-71c0f8ddb9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "452c8f46-9cac-456d-a03d-a48d9532cf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c25954-7fea-46a2-b465-364ac6f91c15",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35b540f-f134-4aea-acad-7f2e2995b84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d7b249-5795-408d-9717-eeff3266cafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa9613-2df0-4a65-a232-8a2de937d618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "495dc57b-4cd5-4911-a4f4-03de8aa1e615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e700b4f3-c081-40ea-8327-b80be8a0a0ee",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b222a0f0-152f-4194-8e27-98014e20fb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbeeff1-8f2d-4914-bf3c-732fd4eb1b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073aeace-66f8-4878-a2c3-52cfed29f433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "175a2016-2e80-4851-9256-5888c36c1779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcde184-5340-4903-8824-8049c336a0ff",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99c37d6-1101-4e58-9093-c9bbaa5368a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f49d7a-b430-4b2e-86e8-eb8ccf13ca02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fc8bad-cb98-40cf-ac73-c418bc1c4bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a23344a-5015-48d2-8d8c-26c2c5c2a193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394e45ba-c194-4921-ae67-470b9e5d6def",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8752ee79-3e84-43e2-b02c-2b1d27ef251f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce800ab5-9be5-486a-90d7-a56a2c0ae240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6cb5c4-7e88-4a86-9e88-4a338ba07c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83e80efa-750a-4f41-bdf0-1fb55e625b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994a1396-3280-4a5e-9289-5901b44f1cee",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c0fbab-2b4d-4855-8ad5-44595ef087f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b7b569-a11f-4267-bf2c-b66ac3109ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d079dfc1-526e-4cb1-8f8c-5c0df025a571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac805798-5ae8-4b50-ae70-1531bcaaeae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b561850-2ed0-4e37-95b5-7c6a1b590f45",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7d261a-89c8-46b8-9650-37b469f79829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5bf164-98a9-414c-aa18-cd4edac0e811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572dd626-5af2-457b-9320-4f2fb19d40f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66d7e9c6-2ca6-4059-a90a-c72071d6a760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd87f8d6-1643-40e8-8b5f-f78c594f0b40",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec37c064-cf70-4746-8f12-338189a85a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e3f78f-4f4c-4149-9ad5-4a266c1e02e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d82fb01-39dc-4150-bbaa-66374d5ce2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6085ed-c0b8-45b7-afa2-24d4c586a38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312a8bd8-a88c-4d7e-a6ba-22611e89eb25",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649ad67c-2c61-4627-b401-ea6d118b572d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5079bc-957a-4e8d-b8c8-4d035b0b0c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d02e6a1-9b74-4722-8b19-3894a5d2be13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "368bb7f8-6c6e-4bf4-9cba-474ef820d337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969579a5-e15d-4086-a842-f00f5f3916dd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363d51df-5d24-49db-80ae-12e64c737c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb6e518-ffd5-4341-b8bb-158217a2cdd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71a05f9-13b3-4079-a454-6fff197da720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abf7959-64b4-4200-9ff9-df9516ae7f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d07dfc-1c4d-43d2-ae6a-5b60c866d36c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd03b36-aaef-46be-b4c9-d7e48a7de639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cda5c6-417a-45b6-a941-71b3d52459d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ada214-6d04-4622-9799-9078af0133be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e59d583-f1d9-4928-b03d-54eb53fbb3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ffd223-2afe-4c80-a736-489b0fafe7e5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6680e0b2-93cf-4423-a986-49f1fef761cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ee7137-de69-483a-bda0-ae27f5a8f3f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf5d54f-b326-435f-aa51-7d5271ad575a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc48b02-7f12-42dd-9a71-db4258b8ffa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748bb380-9ba9-4218-966a-3897f65d7452",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b116d9-e3c5-4266-8833-a5fd9451d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50639300-fdf5-421c-a6e3-7ad31df67723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41a7f6a-40d4-4d07-9829-715328631758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8be65d82-38f6-49a4-9cfc-ec868eb47caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129c9a88-7c6e-4beb-b7e7-35508f123b00",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160884c8-0413-464e-894a-8e844ea81390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0beb20c-0332-4f08-96e5-5fa38f8fb82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765c2a65-3bd0-4571-8b2b-cad799bfd697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a62584c8-aa29-494d-96b1-2a3b4a010c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29acaafb-a431-4493-b3b2-bde39f099ca5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123e832a-6c17-418f-99ef-60fcc80d6e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749e2c7d-a677-4f4b-9d04-be1b69466363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c409eb0-cc86-4d2e-a02d-6daf86a87571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61886a13-cf97-403f-b7af-95cf3bc98be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee232c64-187f-480b-a250-86f2f3592216",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4504feb7-c480-4ef9-9875-0fc848ad673e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64963315-531e-49f7-b0d9-a3f2c8bcf763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5218c8c4-aa5f-4140-818e-54980437f490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e14988e-bfac-4ab6-929c-df1453d44545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a8dcb4-0662-40f4-8a8c-86cfca7749db",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3865a093-d68c-41d2-b093-e039ec91a8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f7e23f-7e76-4c6a-ba29-15db696dc35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acab37c-5883-4389-bcd1-2090a10f78e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3103ab53-5678-40a2-b045-28738d05e891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd40d6d9-d800-4845-9c10-cb82b83eec70",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b70bbe-a3df-430a-b7aa-b01c50442bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96853950-c6d4-4a53-9716-6dfba6b03d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5663db3-f6f4-4452-af78-5278eab993a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd13559-2c09-4ba8-9738-5b18c52a9f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba8f332-004e-4a39-bfa0-ed3554a47ddc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c59e78-e8ba-4656-a493-4cd7e79a6cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7b5245-e412-4abf-947c-df77ae6545a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603b8475-8c2e-46b8-afb1-3f217336bc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a363e9f-574e-475f-a3a5-7e13570c5905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee2cf09-7d66-4f85-85e1-39b038e9861e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702bafb3-608f-415b-9a10-62c9ed55dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917abc42-7e11-407e-b4f4-60a82d7186fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edf5211-5365-47c6-b3b2-818d8f9cb6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8deebc81-ad11-41cb-88a6-ce6377168aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfa96f1-71b0-4861-865d-64ae9896f327",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65078d1-d622-48f5-97a7-26ecfd8591e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b11a8c9-ab13-4095-af14-ae390613c2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacbb800-0065-4219-b5d3-2da49e4a5467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c020c9e-831a-4676-8ab3-ebd50b8d3f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3335ef7a-e0bf-4c51-9e78-b889a3da4183",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a7db55-b808-4404-aff6-723bcd9943e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcb13f6-45ab-4c61-a3d4-b489f8b22f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3586b38-2c01-4b0a-bb54-ce467ca6af98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e742fbe-69fc-4fb7-9c45-cc7322e67d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb0d70b-931f-48e8-80ee-6e900a25b709",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099227d6-a68c-42ea-817a-dd266f82352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17aba65-01c8-46c0-911d-e00615950100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeff0cdf-fc5c-4bf5-accd-a50f6b895573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7304af-6b7b-4ea1-aa39-4476f2575fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49447383-0d63-4695-ac39-f54cd9776d81",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea2e01-5a6e-4762-98af-2e8511660c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec25494c-d382-449e-be1c-9c47a11c71f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbc17c9-3354-4f18-b278-30dcbcbe0a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13152cf1-3ade-4443-a979-adc83d745b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f9a94c-400d-447e-a750-2c13c16dbc29",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34cbe22-8f22-4ad7-8005-e679fc6ab957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce09677-174c-4751-8e02-8bb95ee27d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4ef771-c9e4-43e3-b402-eac503717dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9207a2f4-dbdc-4ebd-ac0f-9446b6fd7316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb99263-ffb4-4cce-9965-e702950bd16d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4dbe4f-d09c-4e7d-949f-2024df7595ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64993c18-7620-4d42-9f4d-66954eb23207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ac3b7f-bb12-48ae-9b4c-bfcd9152a73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d116965d-c9c0-4b07-8a8c-393ed1b2aa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4090659b-a347-48e5-a1b0-d1363293690c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81eb28b0-1e90-47fe-b9fe-baf54f99d23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19693e54-2f14-4c2a-8193-77576f3d652e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf3ea8-54c4-4c77-8b06-f9b769a0bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8851b9-4f8c-41a7-a570-ada5cc35b1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6009aacf-865e-4f79-9e63-6828ad225a3d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531e382e-fd37-46d8-bb19-b440cdc5f1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3cd1d0-c9ec-47df-bc3b-5a0ad5fc4f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4216216-eb8c-41c6-9a54-c15daa0a71ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a406c1-89d8-41c5-a23f-90c525060931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6511cb-b4f0-4315-bd69-fcc75f6d76e3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348a70c0-1b6d-4d5b-9c05-3707ee871fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc5fbc0-0687-4d9f-bd12-a20810b64e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e22965e-04e5-4945-a7b1-6469dc31787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7167f929-e085-4621-9caa-aeb9b102477a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8488076b-8dab-4130-80d9-55d21bbb66c4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9548faee-9733-4966-899e-5627dcb718f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95aa9912-933c-4c43-a4b7-72aa89daf143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01abc75c-b505-4725-b1db-6da0a7e287e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "62a88afe-fbae-4c17-9a48-0b960d825042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b575013-e977-420d-97c7-b8a89cfdffd6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9360bea-6527-44e7-af88-af15a8adfff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76891f66-6b0d-4cd6-9f89-b3b797e4fde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bf72ac-9c6e-4061-a5c6-16561618126b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f83b1f9c-ce93-42b4-87e6-3d408cdda1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3e47ab-e79d-4a56-9d14-12f3bda12aad",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6637117c-367c-465e-b8dd-6eb4a962889c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e509ca7b-6b53-4dfa-b933-990591ec2045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdb0e7d-10d3-428e-9d05-3c4ab1a97dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c68b4a-ddef-4859-9baa-ff1ab52f766a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c4719f2-24ba-4c49-8ac2-2d6cf7770b18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d28fea6-89e7-4b07-9da6-ae26e1f41158",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0435a415-c240-4487-8b08-eb82a1e05a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2677f8d1-8714-40c4-ad2c-183a49b544ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacf00c4-95fb-44c5-b100-0815c82dd235",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2047f44-d4b5-4094-8e48-0c269d53a1c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f52af92d-cdde-433c-9785-19fa0f72fa6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aed9489b-fad5-458a-837c-073568e39e76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c302da02-bcaa-470c-81db-746490361e8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96e361ff-7d71-477b-be75-8198d9087d84"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a48c795c-621a-45c5-a1b0-acc3536915e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "523f8d75-f0ec-40dd-bcc7-4d26953dbb80"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a00b45d9-51fd-40d6-8c82-a04ae1eb444d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be0273c8-b80d-4367-8106-6ea522d469aa"
                }
              }
            ]
          },
          {
            "id": "aae336ca-3114-4ea6-a977-f9feb754e5cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a116666f-f4c6-41b4-a405-342cc55c6f19",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b08424d7-feb0-4a72-83d7-6bfab40c86a9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3973b8dd-483e-4832-bd39-e634ff55a51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "464fc804-e040-4aa5-b103-f15b6d166dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc082d1-734f-433b-b8fa-712fa5f57de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff929b67-0a3d-4265-a287-4c4f696a0714"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c5f4e46-bc4e-4fb1-8bb0-52aef72dac62",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2ada14a-a32c-4b66-8c00-b9e93c8a6317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57ff74ca-db5c-4a10-985b-933ccb0d09bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c7cac8e-333d-4926-a1ac-ce5ee5f30b0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15d9b83c-521a-4a2c-bd5e-f262092cf6d1"
                    }
                  }
                ]
              },
              {
                "id": "43df40f9-b986-4c96-a769-608d1d20b2c5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fafef3de-8ce2-49e4-8338-ef3787581ec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "263ff886-3cd6-4a7d-a0b0-7c796ca50220"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f87ad5c3-af31-4d2f-bbc5-24f41093c8be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ba8dc16-8c40-4874-a5a0-0139096384c6"
                    }
                  }
                ]
              },
              {
                "id": "ad9ada12-2a13-4f13-a7a2-8758d638f5ac",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e55e534c-269c-46bb-915d-ba2d0234f829",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce89830e-4835-40e1-b090-b637ebec58be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b5a24f5-e3fb-4017-b8ae-466c4e1166ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1a6508f-16fd-4177-a5cf-1cad3ceefefd"
                    }
                  }
                ]
              },
              {
                "id": "dfe0417e-8dfa-488e-bb61-314d56a33cd5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ab607f5-6aea-4f44-9c64-edb1a4b9f00f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e9c2b71-2fd1-44e9-823f-8a55108825db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10e86247-3d90-4e9a-b452-5df5c72d9ed2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "978fad9b-d094-4720-9f5b-6192c35b6729"
                    }
                  }
                ]
              },
              {
                "id": "ec95cd1a-409c-471f-af95-7c89426363db",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "babaa50c-ba23-4d17-8861-4504e9fa93cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf72cb29-3af4-4c59-b88e-f9e5acc27ac0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f40c0731-96b5-4585-96a1-0d5cc1138d1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6961b56b-7a60-4230-a50e-87b53ded0404"
                    }
                  }
                ]
              },
              {
                "id": "9598cce8-17b7-41dd-8456-33e9bad29875",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87284b14-6415-45da-b513-f4def2e52cc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14ecb4e2-ee12-4d03-9705-f95f4a0b92f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe5923ff-a50c-43db-9979-0168638250c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4adaff43-0518-4762-af89-8f31c5df1a0d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cce2de21-ce69-4a68-a834-a3416e030951",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1baa595-74a1-4371-af9b-8e2f0b80da0b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d21c4f5-cc80-4aa4-9985-1775e9657742",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86ecae26-2858-4892-bd30-2c7f540523b2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7556575a-e231-4ab5-a359-1e686e6dd52b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b2d61204-8194-4d50-b1a6-88b42642bf39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "daf51991-c55b-4dee-b3a3-88af6f8d2f81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "759e7d00-2b23-4be7-ac91-14d43946b7b8"
            }
          }
        ]
      },
      {
        "id": "79ccc983-1188-424b-9f67-312ebc7d15fd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c2232760-b6b1-4995-b367-e1de6e5cc7e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b73e1222-8ca0-4e06-a233-9e07bc53c39b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3585f5e4-6a94-49ae-9128-b822935c0838",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6501bb2-39b5-48bb-848b-dfa0dfbe668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a7ff96-2e4c-4c9e-9c0f-275a759a246c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1799ae30-2ab4-4845-b281-05e905bcc6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "df663b63-f064-4c54-83e9-e82c436bcb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740cb810-485e-45f7-8af5-b052ba6902b7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58016506-e6be-4d6d-8324-801c31c3b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee7e9f0-3e85-473f-bc53-e64493a83fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75256eb0-10b8-46ff-b979-9c53c9a94af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08f130f6-f055-40b1-95d7-2f5fa30757b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e6d03a-2a1b-4c51-85a7-292f053be093",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fba9d2e-52a1-417e-a261-b01572b92de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e370d036-b146-4c59-b23e-9067c260e239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb59a57-369e-4844-ab68-b00b01e7217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b03afd51-ca94-4f38-a880-d4be64bc01e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90fc87c-d2e6-48f5-b86a-30fc464f32fe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c29670-c038-48d2-9936-8107a4dc883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e37146c-f440-44b1-b9ef-af3970a80b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870f3fda-11e0-4924-bb53-18bf93541764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7234efdf-b63d-4d8a-b23f-ec796429c5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c85275d-62af-49e8-ad0b-921f06f116c3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f42131-103e-4c4d-894c-34afcb5b5b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b338736a-ca9b-48bf-9423-44d8d3432697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d262c7b-faa6-497d-ae6c-9affbddb2d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3a6a64-6062-4f9a-901a-d6bd5004fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e32635c-a9f1-4a15-81cb-ff11be7d46d7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef25c04-b2b1-498f-b249-d6306cdfa427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324af41b-bd91-43fd-b6ce-0226cc1a37cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae0e163-d91c-40bf-b032-17c1b0a84213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7ac11e-134e-414b-8a93-ccb909fedf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08b2a73-126d-499b-8622-30ddc6c5a047",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136c5e2-695d-4856-a67f-9afa058765b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511c5215-34f2-4adb-9da6-5b860654308b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e659e843-3d06-4ed2-86ab-4099369daca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6781a0-3ad6-42ad-a98a-dd9b1399c109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ba6b64-f323-4417-99c3-184b8daa5241",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c0fb9a-d7ba-4f85-8d62-f6ce7bca8b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd7b76d-20ec-4e22-881d-768294222c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6548bda5-0d10-43f4-a10e-e9a43984ad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "062df103-461a-49a0-bde0-d8bdcf3e3e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b67111c-fd23-445b-90b4-01ae094d4370",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe548e2e-f1cb-426d-8e4c-09ec13ac6346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86316577-ce2f-46de-afca-bf5b61fecb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb88f7c-bc10-4476-84a7-ccbe9e70f5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7044fe-9d98-4632-bd00-c7b7d74e348b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8760589a-35e4-4e5d-81cc-6f36ae46fa1e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b73b07a-74c5-4410-9355-db1185df9be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188aaefa-110b-41b7-a0d9-7e839fd036e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9320b5-cb1b-4eea-9469-94072533304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "879bbcd4-4580-4853-a118-de20bf9233b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3f34d1-60f1-41ae-9915-2128fad0b626",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7de58f-3e3f-4e84-ac69-26bd81ffdd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf100f49-a0b4-4d3a-a871-b59e46dbd572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f34c6f-d8ab-480f-aec4-0591e2b79fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "13cbd34c-ee7d-4c61-bce7-9302fd129993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dd381d-2e6d-45ca-8ea9-c4e407371ad8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771762b6-d441-46b4-abbf-f5838b1cc4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cfaf9c-721e-4101-ad6b-ecf9045bdeb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0d3d85-b9f4-4007-940d-6f537732b747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8e46bd-5932-407b-933b-309ad11db781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1125b7fd-c9c0-4531-8779-a0c6bd130530",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eaf86b8-d665-4b48-99ff-e6314050466d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d282d8-a732-4b36-a924-797bce44f552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a3832b-c1c5-45eb-acca-c5050ecf6582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e9a2d1-ac40-46d1-8a74-7370af0ab983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d2a954-12b0-4f11-893c-d9a814149aa9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197bfb04-bcb1-44cc-9f71-7394e4c55318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994aa260-7488-4777-b871-8b406e559eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2361e76-ab49-4689-ac6b-7fcffcf28648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce87e69-2d24-4633-870f-ed25e5917c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63020145-0f5b-471e-bb1d-f409a8b7fb3c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6047beec-2f29-4790-a675-ecf7420c990e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3178d9d2-8f01-4223-9b29-2b3c4784c5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cec004e-9a84-4676-b8b5-7587c49dfaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "da390c99-05a2-4271-a22e-70e27c751387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29db5d7-b3e8-4f39-918b-7b5cb7285fd3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecb271d-f421-4c96-aaf0-4f5c5af747aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fd56d0-71fe-474d-9b82-a0e59ac55ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2167838c-6dcb-4793-bcf1-f5c536ae7eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b2a4f2-5aa0-40d0-a9d3-d690ac4c9f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f1b771-e15f-4843-a6e9-433a870026f5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489ea3f3-40fa-4cb0-a632-711ae24d75b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d68c80e-c76e-46b0-a32d-5f60bff25ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c71d61-161d-4f17-80ad-68894445e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c55299cf-431f-4a7f-9423-f5cbf99cceba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcad4fbf-11f0-4fba-836f-822c2af75c52",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b91fe4-1691-41dd-8e4d-cb2f653d6d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d2cc7f-b288-407a-a158-5a16e75f05ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632222ee-abae-414e-8928-60b39e02edca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1926d025-8dc4-4fe7-929e-84277258722e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe093f7-017c-4df3-969c-e0b223a26760",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e939416-802d-4366-b60c-5c455347196d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc86c6d6-e7a7-43de-8cb3-83ce98f42e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a12a8c9-a9f1-44cf-b1dc-8c81caef0347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1584d8f-5556-40a6-bf0b-99ccbb3a437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c3033b-2781-4849-b40a-09f563403e1d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8f5cf1-9fb1-4810-8d8a-afaca3e11c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67091fe2-5f13-4358-8be0-78fc09bcc247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c656ec9e-5657-4bf0-b22e-1d04c0098f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe0db3e-9fd1-4ea1-ac94-42da1cd95c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e477981-a808-4a65-a8c9-e12e3e14350e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f961d9a-1560-4b23-907a-b46a5eb0de01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca47dbd8-2c65-431c-a595-24b78268032f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3751c3-2448-44a9-8654-8d2647498984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f0e26c-5407-4f4f-b302-57d1abba4c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d173ce-844c-43b8-87d7-603b2d84b2e1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632235ae-aa8a-4daf-935c-8f72d9a12799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bafc940-7dda-4862-b3b0-11a0df42faaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d97a80a-b3e1-465e-be84-5fe1aa7cf719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb76dcc9-7758-45ed-bd7e-1890602c3b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7217e2cf-6247-48ad-99be-bc73395dc428",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20817d9b-1b2c-469e-964c-9697ab9628bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdadd5e-fa66-4b5e-a95b-d1dd94a67578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e309081d-98ff-493d-b9c8-7272d8e50e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9295393-9937-4e8f-9498-3c718c335b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fe5dd2-ab3c-4b93-b96b-a35b91ad4414",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66a6bfd-b742-4e3d-98dc-af4e5a69874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab797342-b7a0-4170-81ae-9e01ee1a988a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f2ac80-e816-4b81-b513-5df3e45fbf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a671fd-c8d7-44ad-b670-b230326cc015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb29b9-da06-4e70-8d8e-6524c294ad02",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbcb630-e298-4230-9dfd-3cfebf4c31c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6a60b3-7429-415d-808e-1dba219e5b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2401cd-fb90-4183-9f67-d34cac2bf6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5465fe7f-06de-43f7-907d-9111077a1f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fe2071-7be8-412a-a052-10695e1f0642",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8ece33-dcf8-46e3-9d01-040347ac526f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5220f491-e5fa-4f06-8839-ffae6be1260d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628a4ce6-8a08-4fd8-b1d2-7efb69b679ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50390bea-97af-4086-b6db-c7502bb4d3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a582255-941a-4024-aa62-1baa4d8336d7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d739c5-0166-415a-b208-2c5a8b9ad716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91544e2-70b5-43b5-b5d4-a00457e8b00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce70d0a-2ee7-4d93-b275-d3761ed7f03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85916eb1-d8b9-4ff9-a554-a502502e87de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d560b95-c6e4-40e2-ac5c-518c2a5a820e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aeadd4a-e2c9-483f-9d1d-a10ca5d05f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006b9baa-ab0c-4aff-9442-9ce6bb279d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e249d372-bad0-4bfb-969f-b216eac70ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "292ecd4c-547a-4b0c-bdb7-3f6f658192f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60771546-70ba-4bc6-8a0b-bb3f698342a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b1df43-8f9c-4e3a-b1bd-6c2487cf5528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e0a7de-276e-4163-be27-3b5611fc83c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b2785d-57d5-4473-9869-94089f416e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "879022be-2f15-49a4-a980-13b584c3614a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e541be5-f459-49d0-b562-ae2e2f509e3d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa412b47-46f9-4d89-8b57-93979f45078c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e152eea2-af6b-446e-bdd6-ab788de10b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca40dbfb-dfe9-4f77-aa23-40025eb68906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4cde2f-78e9-4cfc-b913-3d16c139ec50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473aab97-37a2-41b6-b913-c30074943b1a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c254ad3b-d413-4651-9376-7130bcf4f88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71dc6c5-edb6-46a3-9951-533d165d8f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faabd8da-c292-43e3-9831-b1a3bbd9b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb77344-8a05-43dd-937a-ac3ea27d9ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac145d67-c97e-462a-9874-4caa1bcfa6c9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33df5dc-2661-4626-a5bd-499789b4c944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a061d6-aab6-420b-921b-82a875e87b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a2df74-d4a5-4ff7-ab20-b7e0819ddaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb32cd84-f519-4a74-84d1-415d42176ce0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90c5944f-c593-4f76-905e-0672940b5053",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df62d17d-1db9-4864-b5d8-d79f4a34d59b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9a7ecd-413e-4c68-9440-a4cb79138781",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bfe205-dd46-49fb-ba16-274e9618735b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f37045-0afa-4f82-aa90-d595d8f5dee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41510e80-07b0-4735-990f-b2284ebad50f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e844258e-4d7b-4329-8cc6-a6e8cbc3e736",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "448ae32b-ab9c-4ba7-aee0-9f8edd4249d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b92c30b-c4a8-465f-ac67-e20e62729ee7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a65892a2-e113-4f4a-8270-8410f709675f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26593aa1-6cb3-40bd-b9c0-cdd09226ba05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "230fcda7-2777-4b6d-baf6-89065472ddc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f56f93f-5f38-4a08-b84c-9b41c0eeedff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ba555db-03d5-439e-a10f-6c62b0146af0"
            }
          }
        ]
      },
      {
        "id": "5a0e4632-c746-456f-b002-653d0e8db939",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3c97f9f6-e86f-4448-acb9-62f741f5b0d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb237eb3-07e1-42ed-b954-bf624586bda1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "82edd16f-30ec-4dd5-a0f4-182612f81906",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628aee88-9f0b-4858-8a6c-634531d44f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14afad8-2dc8-470b-a159-f49b0acdcc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47dda37-6a4f-4f5d-9522-f4e6d3502ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "408b6f0b-3ab2-49f4-a238-a5df867d9937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f923b8-c259-435a-8d2c-1266e2f92ff7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f239a6d6-390f-40b6-90ce-f5b2a64bb017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6c7c0e-fe9b-40fb-b241-4740522d02c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8abc59-6da3-4202-af1f-050f24fe0650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2565a6-968b-412f-b1c6-04f5fe8b1875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01f9e41-1c2f-4394-a31f-5ba1cfaed5b0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a613c606-8d6a-4aef-b755-ecb2c0b9b434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696eb59f-9bc2-448f-bfd3-3483bf2c199d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f50d567-fc13-4c93-9912-ea6d0ee2b4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb7b3c0-dfbc-4bf5-b74e-a1e44f8d67b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128c0e82-1530-47f8-8d72-57ee22f4e6ab",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5b65b6-b788-48a0-b04a-f3aec9e58c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c78f418-4074-45a8-b5d3-215d19542647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c191880b-e461-48bd-b56a-3a28e5e5a0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c253ef-2a91-42af-8cee-afaf66d16b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e6a977-d7b4-437a-be74-61ccd7fb5426",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e4931c-e1c8-422e-90c4-72d1d0ef126a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e56c0d-dc20-4e93-8f09-16e10291a2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765b3b48-a83b-432d-8f2b-ad2625699daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3ee73d-753e-417c-8d77-010498a4ea56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26572d7-12f7-40c5-b1ee-58aa875eaccb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a69598-f2af-4cfd-b3ea-77cec8959040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39d29f3-a079-433a-bd1e-d186f55830be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f04cb4-1c70-4119-92ff-5ebadccb4ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35df79a5-6db2-48b7-993c-89093b802a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d677a3-c928-422b-b4d4-d9e7d5e73296",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f60cae7-cb01-428b-942f-956375b957a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551ffabd-156f-428e-80be-e5d7837ae82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490973c8-7d60-4fc7-8315-70824d7c4ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5e3f59-5830-4717-929d-69bc83de9824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545b2f89-a685-4d1d-867b-602f8f9794cd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7912aae7-b42f-4457-8fca-56855cdd7da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c9424a5-906e-4ec6-8fdd-e358290c7540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d246e72a-6de6-4e8f-8882-0354a73c70cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20224049-8459-4fad-8420-878c7e07db73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ade4579-e054-4da5-8941-254d65257919",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66c1156-9c52-4dde-9c27-d48f4ded04b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500866b9-f12d-491c-93c9-556eb62f3d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c08df1-7bd1-4998-ad39-d7a651b854e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf4a591-75df-4836-8ebc-e161f0700c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1220b779-5f27-4b91-8f90-f1f3564f6b96",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837b0bf1-d5e4-43a0-a166-33c214eac644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd66b13-2424-43f2-a5a7-a08f9987f70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc42a4c-2621-4f4d-971f-3cb4a1b749a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df8ad0ec-e732-47eb-945b-b7159157f373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af8e099-ae0c-4ad5-bedb-5532a39bca70",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6349ab4-cafe-4d21-bc7c-50dc0ea640b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ce2d79-9b72-415d-b030-02becc8a1e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee9e29f-6661-4a8e-a6e5-330559f31bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "458d967c-f063-424e-9ecf-207f52f03367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775d636b-1170-45fa-bf99-02eabc729653",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d345b4-1b82-4f95-a08a-2244639ef87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cca0abf-ffd7-4ff2-96ce-e78e8a38e410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6111003c-f140-4d69-81db-7598625d9030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "945f816e-1dc0-436a-a5ee-71bc505b8537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd959f4-06ab-49f7-9f3f-e82d57a10146",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30158d03-21bb-4c0b-aef9-69cb8f853bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd326f85-3f75-4d99-89fa-93ca67134c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fabc633-5c13-461a-aa26-f6d6ab2bf8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa6040f-749c-4a3e-811d-5a66f5c798bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e45b93-5328-48c9-8f9f-f15ae238ee55",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b4d723-f3d0-46aa-aa25-c0f7b924511d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bf2b5f-0adb-4b06-803b-fa2544abad80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a422361f-4ad7-4746-81c9-c134182d6314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5c918d-7b0f-431d-b4f5-24b83e1966e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4c8f14-c28c-4cf8-8d81-d37d9b4c4d74",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098f60d3-89e1-4630-9333-30190b50695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f1f4dc-3886-4ffd-b1bf-602e5c9c91d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75b7704-26a9-4e3d-882e-f229cdc96336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d6621e-135a-4483-82fd-5e27b8ba316a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e18d99-aea3-4883-9cc8-694a0c7b8bf0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9949fd9-edb9-4084-8f4d-7fb594ab2831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d03df3a-20d5-4ec6-9245-36f53dbe934d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e97069-ac7f-425b-96e7-53d55e558739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e75dd357-1156-42e5-9f67-ae525bcc763e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61063ae-e48b-432d-8355-802ab172da91",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fe3187-7a90-41fd-aca8-e4ee07bb767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e3872d-6fc8-45fe-9e03-1156b36fe9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1beb44a-a54b-442a-9cdc-3b03b7a2cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "099524c5-cbca-4f30-9795-6e21d2348832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5706a17-4758-4ade-af30-0ee7a3fcc119",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb55d73-874a-49a0-a265-cd0e9e0eda59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6ed152-6136-42df-81ad-75a78acce6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccaba86-9d98-4e44-88b9-aebcd8bc5063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f792f743-6075-4720-98a7-3caa317653a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e503f86-2464-4188-8c88-dcabe0c7e17c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a1e467-f556-4f25-baa7-5c7e50419e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027f372a-1902-457a-8d09-f100209c5036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363720f4-c6b6-49c2-9d7b-242ebbc38be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "277a887d-69e7-4598-a389-9493522e7336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ca4f2b-688d-480f-86a9-a6a3b64f387a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63980740-09ce-4196-9d9b-0035f3b23f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ffa53a-677f-4c45-9653-fb92d2d1f6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0f7824-dcff-4747-bd6c-92ce721f16d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b2d64a-0405-40cc-971e-a6096ea9c007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd7788c-a541-45a4-bf47-71e5bf66baee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76220405-55ce-4f06-87e7-fac949b7835c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb9fe17-dcd2-485c-88f6-b503a6a21b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c4090-3965-4386-8344-c42ac93cd1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c088e88a-5374-439c-a475-214745d03ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb32693-29ed-4172-9702-a5623c645c6a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d861197-4ebe-4b33-8837-035970de5a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f3af44-0799-404b-91fa-f70bb6d00698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d52fc5-ade6-46e0-b4a6-43fcc424b187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aecce571-04b8-44c3-ac76-2ee8d75195ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9285c32d-288b-4fe1-b3a1-36e3ce6fb707",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6865a21b-5a65-4af4-af9a-833b811ff9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be67e63-003a-40e8-9ee3-0eb7ef0a70f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cfd146-2770-4f5a-8e63-85880493de0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51b7a89a-3d8e-44b5-a11f-dd49cb002b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f343880-b1d5-4c6d-80eb-d634e99505c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3c3945-dd10-4d7d-aa8a-ac13541aeb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49455638-5856-43b0-a2c9-08a23b96b7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cbb1cf-d311-479e-8154-d0106963e30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de2ca6f-bcb5-4e7f-ba85-7b1078cc85e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d24d332-1225-40fd-9a03-17e996033f8b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1befec18-0c42-48d6-9e06-601ead5c7d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f222605-c4cb-4fd3-93ae-9ba7cb860951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb1c192-b31e-46d9-b65d-a34b19576426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "348f89c2-4d4e-4fc9-9d8b-3ed98808c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dda60e-abd4-4e5b-a0eb-ed3110160f45",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269e5dc5-bd72-453b-be74-44f987c810ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16272fea-004b-4ae3-9260-0c84a5ac6a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87ebf9f-2274-447f-bbed-8b6f2fe0f194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04eed29f-5d84-4f8f-8a2c-906cc8262177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ebec87-bcb4-4fae-868c-5bdb2eb60bdd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61becfeb-fac3-4097-9445-77fd3103a33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2e051d-81a6-41e6-9d75-e5dc7f76fa90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea370c0-a01e-40b8-a25a-7b1b86ee6b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40cda444-d5aa-4fea-ad94-2f284ebbfbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edf0845-a724-46af-87aa-c1589d0c02e3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47e7b34-956b-4217-8ed7-7ed79717a67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1951093-1291-4254-a62a-f63b4a04e64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a083de0-ae5d-4edb-af3b-cafb5fa93019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be68861d-12bc-42c1-a690-1b2cbf4282ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8fd94f-67b3-43d3-9cdf-670f2a2a6c30",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbeb7a9-9010-4930-a0f6-656a18acf336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a06a225-fdb1-45bc-8172-dae079099e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1f55ab-1ce0-4f4e-9e08-b5953d9e0790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "454c20a8-a816-4eaa-bc9e-84749210e105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e758465d-4b9f-44a0-92c4-c491a047a4a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb5340b-0266-48ea-8562-af47e2e44403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d5da1b-b3ab-47cd-bdba-9b7e6e4746a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae72cae-b3a6-4ad3-8d08-27bf32c73623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a77f9a1d-26a7-419d-abbf-dd946a82b89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb13ab9f-9bbc-4229-9b87-3daa8056dfc0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892c0707-7820-4961-b8c7-cf5e698e3860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977b42f5-fe59-4628-afc9-d400e96fb4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfe10c3-64d8-4279-a994-e3dac58ef82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "897918e5-71f9-4783-af79-b10b2c7d03fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c51dcaa-6456-4289-b236-574818c10306",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac1048e-d36b-4eb4-8188-d59290338fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16209ce1-a086-43f1-89c3-12992ec6307f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3e5d1c-e9a9-43f4-b94b-91839047c37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a98cef7-c753-4274-b088-a15fcc7df43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74967dbd-8c9e-4c98-a0d9-b97489855846",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb2567a-bded-42a5-9632-038bcf4edc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba16f231-f20d-465c-8491-b8153a100cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a7bd2c-99dc-4f36-98eb-d1dcb476acdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee4f121-4b9d-4cf2-87d8-68d01954ba5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78836a4-62e2-4fc8-8f8c-a8e51f088ab4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be8d1bf-c930-446b-9146-f9a4ef7b04de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ea2afb-3c48-459a-8734-88deaeb7d91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db0e7a3-8dfa-4d37-aee6-eb33346a9462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b88df737-05a6-4a35-89e0-b18cd97eb552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfd8470-290d-49c3-8bf2-83c07325d89a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e46db0-4c65-4266-88df-c31f55865df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11fc262-a4a1-4281-9f65-ff30d89b7aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e366e4ac-83fb-4249-a46c-8131e257ae98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ebec01-c464-4d78-8906-ef976f26050d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba17212-12b7-4d52-b9da-2b12635016ea",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745fb80d-2f3b-435b-985d-706ce38af860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc64482-bc55-4e9c-a42d-20f458fa5354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04369159-2b6a-4282-9e0f-30b3f5a29ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50d7712c-cc90-489a-8034-1a8d3daab6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5f18fc-bcbb-4415-a881-20f23516f80e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f925b725-458a-4434-a112-143929b56ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86176e21-08ab-41d3-9344-7281d75b9238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68b4d2e-2287-4b80-b02f-d8b9b64f9ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f1776c-fec6-4315-8a58-b9bc378f005c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa50cfff-4345-4742-823c-42fd30bd4944",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8719a90d-8700-45e6-a20d-b561335ff938",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f903b317-8604-4eed-abc7-49c1d6107789",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4ddcaf-8b14-410b-8da5-89707d4fc2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdd3de8-2a48-4122-8a0b-8785a68fa0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f973e6af-0113-485b-a3f9-a967950384ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca250d6c-0684-4c92-b7fb-2127ee3ac87c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d950a564-a526-407c-9bc6-92b656a3467f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90793b63-f113-4e5d-90e2-d05c1830b6ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c458de8c-eb69-451e-9145-bd1cd3be13e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d8fe2ca-d040-4648-b584-47aa4d2562f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "da288774-f450-457c-9251-ba02796945ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d28cc30b-8660-4863-a553-85a5b4424ac9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f01aafa-dd4e-41c4-a6db-febe3693b9bc"
            }
          }
        ]
      },
      {
        "id": "638e8a17-e6b9-451c-a1dd-0b08fc429c7d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6413f142-c8a3-445e-ae77-9e80e22958d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ca23ad6-1463-4349-b447-63a8b93bbbd8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52819619-0d2b-4f9f-a9a9-f79a3e85ec97",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdedc45e-60b7-42d2-be00-518d5ab8751c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4329231-7eb2-4b83-8cb1-b3ccaad3ab56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f4d42f-4d19-452e-9405-3b67fd4403a6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f23c33a-7c91-473e-aa9c-e84adcb56b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb35174a-35bf-4bc6-b0cd-e474ce814653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e135fb3-bc3e-4e6f-bce1-b4b39da65f3c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed2c4d5-d81d-477b-ad6b-6bf23463e05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a417c456-1190-4dd1-9e9f-989a929c1b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1e05da-a48f-40f5-b1ea-129fe38c5253",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9839fa9c-27d1-4d2d-b1e7-3463bbd5a2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111d613a-aa1d-47a6-9b59-23404a233400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef1ddb-8e11-44ff-9975-777d8433bc69",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c663981c-d080-41ff-a15d-935ae3a07ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49170628-4ed5-466f-8ef9-6de08a16b66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d0eb60-94df-477c-89ba-42564b9cefad",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6407373c-3f89-4e49-860f-b0d42920beb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543f0b85-7dd8-4239-88e3-283e9b9fca6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17242490-6f5d-4772-8b05-fc18aecd300c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5c3329-161a-4a5f-9546-b6284eae6ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ca390f-bf51-46be-885e-b05e955b3bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86961e64-ffa0-4f5f-80b3-29e450fe4e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e4ec03-1bb2-470a-a029-6c818ae078c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac147c5-297b-42c9-89d8-8d09041718fb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf67e02-bf13-4fc6-90b9-43d831232251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5f9172-1c4c-4394-b533-5b647e136f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade6a72-cff2-45a6-bf24-129cb534a911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112fc4e3-d524-4cef-b000-f02423719186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c506e4-4a5b-4c08-8663-57d03b4b2b6a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d27b29-c3dd-4d08-b040-dbd22700c922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7414dcaa-8c4d-4793-9538-56dd670d5233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405d412d-ca5e-4694-a783-339bd9c62519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638725c2-7899-4f1c-8c4d-304b1c8bb958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c87321-b1a6-490a-bcb7-71ad733fc618",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01684089-08a1-49ce-9e58-e0dba6dade35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b2acf1-cb91-428c-92ab-2607744f7308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f4d10d-88a3-4e76-bcbc-241ae77b1f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da03939-103b-4733-ac78-df087055c2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82063fd7-6e67-4dc7-8bbe-9d20c568cb0c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9052386a-aff6-483b-98a8-4222870754db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8326b28-c123-4006-81a1-222e5c80e3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e80582d-6241-455e-ba1d-5599443a2345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f7cc3c-7451-4056-a857-c64d69cde8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcddb136-5325-4d8a-b31e-75d79fcb315f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d5d62b-7f8b-49ad-a3a9-5e9250b58770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "820d2b73-5f51-414b-bad2-e5fd353479d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3497eed3-2790-46e8-801a-7a70cb27816c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd27f568-d8d1-4648-8703-554580659bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6762cace-ca3c-49a1-890d-df199888f1d9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735af5a1-af68-4019-8db3-df2b7f43b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9fbfdf-7665-4ec2-bf89-4a14a186732a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137413b8-2edb-4134-b01a-96ec84083a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5a703f-4346-4cf2-885a-fad70c4b63c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222fe818-8023-4016-a8e0-8f544b6ac2ce",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea881944-71dd-41df-bafa-854f39a29a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088d71ae-3364-4f78-bc63-3e32ec9b3235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e05cb51-dfa6-461f-8db0-d43a7fa56dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e9288a-05ab-444d-ab37-51f95a1c534e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af70ebe5-906f-4e20-9b6e-f06e6d0d1ffa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ec2852-4191-49b5-a050-354cbb687eb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f57cd84-a0b6-4c9e-b46a-4a25838124cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d0b389-547a-4bc4-a031-058116025dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d80f485-b72c-4205-b873-5503fbde21bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b915e0d-1c1d-4d42-a3b0-db80b3cbc897",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30547049-7687-4408-b12d-2136ba4aed35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c87443-8175-43af-802c-3e98d5c1c75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b3f689-2925-426a-a007-63369a7b7a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8911c8e-0778-4338-b310-162eb8998642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecb78c0-78d9-4011-bb0d-79fbba000fba",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232bfba7-bee2-49c2-a271-c82e2a02d0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7558ae-7430-4e31-ae4a-9ae467f5f3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca94c551-7dc4-4e06-a2fa-c7bb80c2fee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ceb80e-351e-4dff-840e-1029cde76c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639eb1a5-58f1-427e-bdf8-1cd0e26f65f0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7779c977-6c24-471f-bd9d-41cf398a2d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec89aaf2-9ead-41a9-b9c4-0433024a2f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee268769-15d4-4e3d-b82f-3db604ab2024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2caaea8-1c86-4e9d-b6f2-e6408c6f814d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9675c17b-b61f-4c32-95e6-3395cdf620bc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e881ee8-83f6-49ed-8eba-3a4acd6ee120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6521b594-6e47-4942-bdc6-fc46903b6ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822469e7-373c-4cba-9168-419d0bbd3ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00195739-7a5b-4a8e-97d0-6210c9dac54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27921a38-83f7-4b02-be1d-23aaf9d7617b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38efd195-58fd-471a-ae27-245d7c9c6bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba7826b-cb29-4972-963e-a4a01328a65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa17f8df-c306-4f4b-8f3b-858287137bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0854df8a-39eb-4751-9911-72700117f6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed746ad-8bf9-4e2b-a7ee-9be2ab526f2b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd8e3de-f502-4c86-8621-c26e89cb95d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1dddce-a409-4f0c-adf8-bac9eb737383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e00544d-7984-442d-b156-f109b6924d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714357ae-dcad-4b0e-9fe7-7353cc88ff87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca410779-04ab-45d5-bbfa-ad73e30bd95f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae2f58c-09f3-45bd-a885-71ccd2652a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449600a4-7922-43f7-9020-e25bc762496f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbbd006-92ac-4ef7-b519-93090a08d945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbb7abd-ba4b-4430-8409-4c83fb0c69b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d159766-7423-416a-914f-31ed6d0ecff0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02b3e3b-a728-4f09-8dcf-98835b1cb014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761155b4-4d0a-48e0-99a0-1409de9d724b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6f0a63-cb11-4d8f-93a2-16134f2b82de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33be2518-92ea-4567-87c7-9ada72f29289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083ebf54-a46c-4b51-b625-2839ec380649",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ab749f-8ea7-421e-aab5-6619969481e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbd9ca73-5aea-44b9-a84e-2aa81ac732d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c49add-3363-4948-8575-b063b8c1d962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9384b35-c37d-4d16-82a5-351c3726d29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa1f5f3-07d7-4aaf-878c-4edd6095100d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e9ec59-f910-43e7-95ee-ea2cdc247b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41ccc7d-211f-4955-b050-8c4a74a9e717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317b5dbb-1b6f-4f31-abf5-891c8d1cd5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d1489e-2297-4b50-98a5-d3a36c3e8aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef81d3e9-fa03-4021-b248-66649449fc33",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a66dda-8483-4f3a-82b7-0efb32831bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf4a7e2-234c-4a4e-9501-d1efb5c508a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e369fc55-08d8-42bf-bb9b-49fee8861349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d1d791-0029-431a-b211-f63b1287e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d485fb5-9319-407a-8bf4-2963669b8f41",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b899e2e-19fa-4141-92af-255e2969f461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6c19b5-1874-4080-9c31-2f01e944d0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e994b424-4521-47ad-815c-51502924177c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d7e1ce-5905-4cba-9f41-42a2300776eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f20a7e5-9669-4ee0-befb-d26969d9ec45",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b2a959-9570-40c8-9180-ead7f52e6d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d506947-ec9d-44bc-a27d-2d7652c458d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bd706c-ab86-4900-822b-ded8602ca1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca853cd5-1976-44b3-bbba-761afcd0cab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37670bbe-0ec7-40a7-87ab-fd0c73d95909",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702e0629-b29a-40d0-9770-9e6b9d92df75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6255027-b9b8-4609-981b-f375ca971f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa527df-b149-4bed-9afd-7006ff01a3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53ec728-7572-46cf-8774-aca8031271c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f0ad6e-626d-413b-9c8a-aa51a0565815",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4a353a-e2ae-455e-8404-9b2bb4c77a91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd67602-9847-4f7a-924d-c04028a30e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4182fc53-a78c-4357-a778-b6f677bd2999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edaf04f-ea75-4de9-9845-9e3d004ea4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef3f78c-c06f-44ac-be49-ca1f7e9c89a5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d69c04-8131-4561-ab4a-049b5152d544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5079eaec-a9db-4ca6-8d1a-b09fd0824475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5ab98f-d1ec-42ff-8083-5277daf37880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71c2b25-9cf1-4e5d-ada7-acd5b7f9b767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8acd84-ee5b-466a-b7ff-d8f99d7878e6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e39be5b-d05e-4090-90d2-739ce6445bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ad8f94-7eef-407c-a51f-c1bbbef7793e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ef8146-6ca5-4e46-8246-70308571643a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142613aa-a1e5-4b3b-b87d-e57c6c3629e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002f834c-4e56-4f49-ab3e-8062d732a432",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7c4303-70dd-45b1-af7d-b145d43d97be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17aeaa0e-b266-4d44-8ef9-37543ce1e0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8061102f-1896-4367-bd8d-7f04176cdeac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5294d6b7-a11e-4b55-977e-890615d02b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9497695-4d27-4f71-b8e7-08acf1516483",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32495f2-9d84-45cd-acbb-ebc038d8ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "202c12be-9bd8-497c-afe7-6df0d2fb4737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a93ed8-3355-454b-a690-b793a59de804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31b755b-f1fb-4e6c-bc58-73b02b02dbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59f92a6-0135-4a72-bc0e-de782d38b63f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5baecc6d-5418-4a91-b59d-ac46623a0b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a6169b-5120-41b3-9ec5-ccb9545326a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49932e07-f6a2-4849-8879-dac0a1ae7bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991f03d6-7475-4863-81cd-6208df37ef8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9385fd84-b369-4a23-a609-216a1b07b6b6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5c6d13-f9e8-4f1e-ab53-4d22d77f7913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0ccea8-56e7-4183-ac0e-70a05a12211a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ed9e02-bb73-4bd8-b7f4-23dddff6b973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd093dea-712e-48dc-b9aa-e7833bdbaeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67a67e2-0846-4eee-8984-ea89d45dae92",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08228aa6-eb74-4391-ab58-73165719ae33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6836e9-5c91-4ac4-9056-073a01a9f07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae7882a-8073-4f7b-bd5b-abdd36ce1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b115f765-9699-4392-95c2-f1956b42bf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb902ea9-4139-4d14-b206-bf1e94cef6b9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1e038d-12f8-4cdc-a686-5e351c3b63a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afacaec5-5461-48c5-a80d-597d1fadebe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe8b32e-e833-40d9-a53c-e08016b068d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c4bd7f-1c90-4895-8cf2-a93db65d732a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc69f71-9d0d-4b1e-a7c2-8cb43ba15190",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a562134e-fe62-4d4e-9f64-2d130eb4a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8b83c1-1e19-4c91-99e8-7325450efc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f5a0da-ce4a-43e4-94f3-518d31a775a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff87693-a35f-4d5c-8db8-c55744f000b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3154310b-3a52-4be0-bde8-564f2d6a8118",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2a0aba-61d7-407a-a8d0-c66ac38d61ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c03e2f-35a4-427d-82b5-a09f9122cc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0a47e0-f4c3-43e1-b502-c0c15b9382f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890764c0-1e91-4a42-80df-f20cb7659a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1733eb9d-3583-4bab-a209-a4e331fe21e6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26c8b38-5fe4-4fee-b21c-30b8abfd8dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88546821-57a4-453a-86e0-fb917dc58546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d04264-d64f-4f6e-a72b-88a57eab01ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509cb8cb-14b7-44c3-a903-163ce3fa452e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d595c160-6062-45dc-a1ca-f9afa0656e55",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4da7d4-d0ef-4ba8-8a03-690daff0ec82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3deb9b-2fb8-4b8b-abf9-cd3668bb6f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac021dc-248f-471b-bec4-84ad3bf61682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d52b2f0-88c5-43fd-a6c9-a1e544e98c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2470363e-c800-4c6c-9740-ce5dcb64fa69",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf0b4f0-2de6-45da-89e0-c6dab153d08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99015d0-c883-43e4-ab35-9874439b7bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbeb298-d3eb-4ee0-964e-178654f5b3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd8871f-02a8-4dd9-b403-9f4eda4e1e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedf9d21-d846-4d39-8040-7fbb14535730",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137e5509-a8b1-40ff-857d-381eb6350efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748a5ff7-5640-4913-9c26-16b96815493a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a166856-d628-4cb9-a6e8-887486ce5158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7e6b2a-746d-4c44-99d7-de4c287a5bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e536f6b9-554f-4f6d-adaa-69259b3270e9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da01f4c-b32c-4234-aca8-ed6239b219a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c2ed57-8f7d-4eee-b3d9-091784c51b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26d5e1d-0fcf-4787-85d4-5b9fe203ee25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51230dc-2b14-4bc6-a187-d533005a943f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e22325-5537-43c3-a49c-66950c0661b8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9f5674-325d-4a53-8d1f-d6dce2bc1d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bf0ef3-9536-4d58-b3c5-1bde50abbeae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b423276b-7f37-4e86-b825-83c928abcab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2726b1f2-df58-457b-b740-ac21bfe68be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698feb7b-3f45-4c96-851d-8e5c51dbe0b6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b33a6cc-bfb4-4bd7-80b0-6ebb022aa390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b548c0-666f-476f-99fe-353bb584850d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a9ae1d-aa84-4b8b-b76c-80acd0d56003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b591bf20-1af2-47c2-b8aa-d05fb92668f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2750e2f2-9017-4d16-a410-788ad523019b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9f909c-468e-4687-9a76-45956ed04c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bbfc4f-b551-41d1-9cb2-a8f96afaf3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874ee445-3a6a-4ae6-83e4-8bf2653c1134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324c850a-2712-4546-b51a-a36414079a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8257ff-96f0-4961-a624-ea6c8aff0c93",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850d80b7-255c-4ab9-bb50-2d36c20ab1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64de199-128b-48ed-a705-c6a600e0538b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7741d14-1df7-4c96-bade-3d29857d6d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c815f680-47d5-4aa7-a51c-e0b553d7206a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0cce14-7a13-43f3-b117-6ecf0b382046",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61e3474-9bcb-4faa-95bb-275a96959fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96065aed-9c19-47c3-9e9e-aadcdf35c134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c2ef0b-df57-4a58-84fb-cc8cce1bd5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e764f868-c3d4-4f11-9ebe-9c45349a0294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce5f812-2662-4acb-a173-dd08cee15b2f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7e8a90-1348-477a-9c7d-e2cf69d3f482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c6e766-f1ce-4af7-8ecb-a75742afa0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0467449d-4650-4a6f-b950-770dcf5c4a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c565d38-b5c4-456a-89b5-5881623e3eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6d29f0-a931-4275-9125-635b029b1dce",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecd6c2a-b635-475e-9409-b137109fd767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff39170-2372-446e-9e79-7e8db173e500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58021d9d-39f7-4ac3-b9fb-d1b5fc9fa864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf68470c-8774-478d-b1d3-564d0bba4af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb17d1b-0b67-401f-ad27-d8bf363c6008",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec4dff4-b29e-4a51-9e4a-a7a1219c5adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412bc2f9-dacb-4a29-b391-3c306d19ecbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3801461f-2bc2-4432-b290-6f1ed03f85c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa81ad9-b18f-467e-bf5b-83f5badb30e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d43a75-a717-40af-b4b5-99b024608cdd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b4228b-949b-4398-89b2-f8b99112e52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d36a7f-9475-4860-b3a5-a3b5fe5ce3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfb90ec-76e8-4b48-b297-7340c5061395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20286c3a-7de1-41d0-a62a-291ed3d3dbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31bcb4e-8aad-434e-95f3-962582fae0b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14fe9b9-14a6-43da-8cbd-ba9c27b3a37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a17a1d-fd6a-4c28-9c9d-cf7f4336648d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41956e71-471c-46a0-94dc-a3e1059aac5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af41576-c6eb-4265-adc9-313db67a1676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f57f112-6b34-4920-8fc0-5567c9b672a5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0aa6f01-4c28-482d-8b24-f39198cb0f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36f93bf-b339-4a0c-b0b0-869ec95024e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53481efd-8216-4fba-945b-f45afb055e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f07aa75-1171-42fe-8984-583c925051e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759f55d9-0ae2-4305-b986-d87261a2bc33",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c0bffe-feaa-4d0f-bbfd-a57b0b5518fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1cd7e7-5872-418a-8121-88a8b8d818d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae2e851-d4e4-4644-a8c1-51949d405e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc7a9a9-8d18-4131-8781-f0cf22d2a37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f98c61-fd45-416c-968a-1247da81c56c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4bff7d-5ccc-4234-a8f3-de04d5c646d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b3f0c0-234d-45b3-900d-a7da1050e33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623c9fea-ca84-41bf-94ce-a3bcd907a5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3986e096-372e-4af1-9751-2794f3246ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958aba07-4055-4199-ab6f-990025f65086",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17a99c9-076d-4206-9978-3e49ee413ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f40fbcc-9677-483f-a2c2-3e9ec4011f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c29eb4b-3576-4ca1-997b-16ea82597476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767da11c-6e39-4d93-bccc-fcd32c8f193d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0055220f-a992-4d8c-bd96-bf6875aa8129",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c519f47-13b5-4eca-b57d-e4079bf72799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e44d693-bb4b-4d75-8d27-4d7016a718d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb377d56-d7c8-4cab-a66c-8abcdff36cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f8637b-a191-400b-9150-4fc658ba082f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b65c450-6b65-49fd-ba03-11fd275cb388",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1140ef-3b18-443e-bcb1-9a1f3de651ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af1af69-1776-4248-a5f5-62b305726393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfafc5b-70c8-490d-afe3-7c5036966c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b924a492-d224-4334-bf9d-8102e976b6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c01f48d-c2e8-4bf2-945a-44207029ef77",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aae9f23-f4e7-4093-b91a-9a06e4ccc25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d66bd80-5241-45ea-884f-933589f60458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6ff918-a7ac-449f-a96f-f39eb68e9306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06da5886-d1bc-4fec-b283-98f5d90efed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c995f7-2009-40ea-802f-5c0e9186b1ae",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d17c05-2105-435b-9560-5d349a1dd74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9909e4-247e-483c-bf9f-4c8d8c12523a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143e8365-5e50-4661-9c3d-3bfe8c65aa78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cbd6c0-e2d5-4b38-9c68-b3431c937237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b07df4-fff4-46aa-92f4-fd7516fe75b4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0238d012-e680-44c2-8f2c-0275ed448596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78f91f4-5c66-4ce3-b1cf-34221c34ef4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5d9c71-fe2b-489d-b7a9-45e1d4d7e4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8b71c6-6074-40e9-ab6a-f187fee45a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b6c41d-620a-45b8-b9d9-fcc321b3440f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93387d69-df23-4992-b265-fe4b04a9504f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81eaedfa-7695-4c55-b125-c29ca8319ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b153368f-1c36-4344-b13a-3aadbd6b4abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b399377-3514-4ff3-b92a-e2f50ba2163a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cec9eb5-5adb-4e46-a2f0-3a34ad80b29a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3adc2e-c85c-4e9c-9895-13b8b63b751c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d53e85-fd7d-4afd-8487-686bdbea7d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8b9733-aab5-4395-9933-d1037bfda66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb135cad-292e-46a8-aff1-6d98ea922f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb84737c-d586-4952-a379-68ec973684de",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4378d7a-200a-47e6-b236-04a538f30542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35dc7119-05db-4edf-b873-942870b20a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0c4a5f-d60f-4fab-8631-8b219f02a66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7478acb-1b2b-4342-818f-975e7789ee12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665af236-78a7-45d8-bc27-745cbd2e81b7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d878f4-d774-4ea5-bcc6-7e2709639382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f821cd1-b46e-4d0c-8f76-092813f60dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38aeafee-49f9-47af-b2ab-984c4c2ef336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624442d0-8222-40d2-848f-c285f9f300c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934c26a6-6456-4197-a606-0ead72a849e1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b800556-bc9f-4d39-972a-795097668673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37534e90-d28b-4183-85fb-3df9ee2509db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a708e0-13ec-4e9f-b81d-e4d5eabc4d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c663e9f6-aa75-4c9b-9464-a3e8bd6bc23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76daa649-8dcc-45c7-a744-77540b2fae84",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fcfbf2-7253-4343-a526-685f81196695",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8910ee5-4f37-4320-bcd9-98d2549bcfa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5ebd02-f821-4296-841b-5000c508acf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d7dd6d-fcf9-4d05-8281-570db5fbb43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ea211e-bac9-46ea-a6b5-a254d402d2b5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53eef67e-27e2-41be-a970-bb5d24ed3298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94106dcc-3f48-4ec3-9011-4c94e1d20151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b5d991-8ff8-4ad8-97d4-d7956203721f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c6e6d7-7a52-47d4-b6e7-dcc867595ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d8b2fc-d14f-4350-843b-46d7a6f5c3cc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435cef53-5437-493f-a8f0-b5f416ae12a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83798849-648a-4ff7-a439-a66e3ee7b7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33551d72-2f12-4fcb-91af-922ce213a300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2c1bb6-6ae4-4e36-ab84-69a2b34a7ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe3cb03-b747-450e-a18d-a9cdd39579f2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d7ea4e-eb3a-4858-83ed-6fc75991e149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcffddc7-1c14-42df-be32-0ebc7e7a2021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38a5cc0-8456-406f-a554-1ab1b50e1372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e84eac-2e41-4f8e-a442-70616f65fe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884dedfd-b988-4169-a13f-5cde7de39015",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4847a74-9ce6-47e3-8968-509608d5d9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23262498-b7c6-4aae-ab05-b9e1208af94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da10c74-db7a-4211-bca3-449fb3019b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71125915-2855-491c-8d84-6a3f24178011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de78342-0620-4215-aa2a-519ba8740aba",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b7e84f-51f1-49ea-a875-b67df6791385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d43d65-3be5-47b7-9b44-609d23c4f482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf5564f-35f8-4d83-856c-cf5bffc8587b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c743cfc-df5f-4bba-a329-d8d8b51018d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8a26b0-3a59-4c0b-9251-ac612178f332",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4b784b-0712-47e4-9092-1a368f31c98a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361c191c-399e-4b04-a6d1-9a93357139b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef0fed4-8ceb-4581-aa8e-50477c1e1984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5372ecf4-206f-4800-b466-d959945b6560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89ae7fd-cd06-43e0-aad2-3edfcbcbaddf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f4e910-ab6a-4405-ba00-0f0cf9898fa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b44ecdf4-16fb-4605-ad1c-76547486ad60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8c8e1d-957d-4e65-b67c-fe8a3a34424a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cdcbcf-440e-4112-bbd7-9bd7d6ecef61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e2bc01-3a23-4cf0-908f-68116c86dd06",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8785607-96cc-4193-9777-63317d2bcf38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3135806d-feed-45ce-ab35-2828fc2c0493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858c7ab9-4c02-4bcf-b17f-81cf8360fecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a7a083-95b2-4ebb-ab0e-4bfc5c0b329b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152097b6-2fcf-4b6a-a8fb-705cad5a49ae",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc263e0-c5b1-4c7c-bb17-7a076b473c8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3612c5-d890-43c9-8ad8-943dd809049a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df206bc8-766f-4f22-bb20-d7dd6bfa57b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74655211-c1e7-4b25-ad48-d3a1d8e839f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420d4fe5-532d-47cd-ba4a-610452b5b2d0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10285118-ac0c-4616-ac89-59c796434924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3183339-0e53-4b9d-996a-5850e74637ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86614f4-c4fa-4d9c-a299-6e517ea1802d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dabb1ff-607f-429b-abdb-1ab80f24c007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9381f8a1-1944-4b3e-b4fa-b942dc5a8284",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33db9ef0-f143-471d-8a3d-b6ae19de1404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f00f4920-d342-4173-8f30-d4f968c5715d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc93108-062a-4694-a08d-2f2cd0371465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404f95b9-9f42-4b66-9c72-dd27a9888fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabb82cc-d44b-4655-b7a0-a1283d25dc58",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200b533f-2ee7-4d07-a529-c0a8785698cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7253967-85f6-450c-a7b6-05a8207a513c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793fc13d-a6df-4b3f-881c-d4aa3a76ce02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d4ff4b-8b8c-4fd0-ab8b-329f45c71a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3143aa4-80ac-432e-a20c-2b466665427f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faab9838-b9c8-4fe1-ab87-d4ce6bc43ba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53126bc5-43f9-4033-9512-a4d203ed91ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181b73d3-9f42-4721-b19e-8265fc204f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c38a1d-cb08-4908-b9f9-66bb09b639fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9665fa95-732b-4e4d-8e42-97d245f19fc1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65e6a63-e35f-49c4-a65f-bef4392d5559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d143eb2-799b-4da3-a83e-011b36281ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef6b1e0-81ec-4058-9bd3-a2fc7b2c0ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769cf77e-088d-4aa5-a1fe-07cfe26ce236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2c7dbc-933b-4b3b-8a1e-5bd97186fa35",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784bb495-1662-4605-aec1-fa1df5efcc8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3565d46-6177-4fbd-9e12-28454727433b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8143f295-04af-49a8-9365-c279bf6be0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b47970-3ca7-4c43-a267-fcb3d5e76bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0109f1-1964-472c-901c-36f50e376710",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd43355-2a04-4df3-9d8f-9c0c7fceaf9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cbe8fbc-5e56-4d80-b817-1ba05f54532e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "594a1929-233a-467e-8acf-3a6ae3ece8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e1425-75ea-42a9-9aff-a2f4cc4f6e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e124bd-7579-45b2-8c0a-b8e44b45493b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd083a1-d430-4993-ad45-ea852e405e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256b0fcd-6986-47fa-9362-97794b63e0f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cbad61-3ab8-4c46-83e5-9166089dd9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4348f4d1-3957-471e-8af2-ab4e0a415e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16878974-f9e4-4341-852a-ce29d47b4e9e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32141d41-f8ab-42e5-9d15-063150c426a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41dd573-b4aa-4fb5-8c2b-87880eff7eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd34fdc-e049-45d1-98a5-886b1c32f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6d5e42-3fc7-4049-a4a2-bde63aa9d995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0427d087-c46a-4b70-a9dc-8ccb5da1f0a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf84533-abf7-4729-ab41-7872dd7a124c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5c09fd-9ebd-4f78-b41b-518f5edbb623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ffc070-680f-41d8-9bda-5795c9ad1d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2497e1ad-8081-4bdd-8321-f4549f21109c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f77a7ab-6ef0-47a2-891d-ffe722b62bcc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445234a7-fa86-4943-a286-7f213d3bfdb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cab5295-04db-4463-b1f3-25128abe1f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be73f1-5c65-4e40-9cea-43b92760757f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149b110b-9c13-4bf0-a6cd-f4e4002baee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d971a7-549c-4aaa-a9fa-176d5fef647c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ef5f58-934f-4107-86f9-a9a95a70c82f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06f54c33-d29c-47a4-aa7d-1fe002807097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f38b20-434d-4e6e-b2b6-6d5abb291581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092b4a58-ead5-4ebd-b45b-67a5e32c9d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ab47f9-e74c-42c8-9b74-ba0f22080302",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e150186a-a585-495e-9f4b-b76d32228f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52aed855-142a-439c-bcb6-181239fda888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577fa515-bee0-438d-8477-f267e5cc4652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccac32d5-71c0-4800-8a71-4e0312040375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31a54af-b164-43cf-a728-a01dfa71aef8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9401fe4b-006a-4468-91a0-d2f1be1eed08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc8c0fd4-4bcc-41ab-a661-7d82170bbdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a22d808-4c23-4132-ab4f-f8acd97b72e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4078c2-07b8-4b49-b21d-7eaedb95b1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dbc1f9-e20d-4268-aceb-c1488939416c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d802ca4e-da18-437b-927f-0019c743fb49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ebeef2-1612-4a23-8bac-e6cfe7b44e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20abab24-d803-4e61-9f40-e40b04b88453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68bafef-1664-4d99-b48e-8ce0edc243ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc46bdba-ae09-4f83-a6c1-3ae0f7e5d670",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddc6710-388f-489a-aff8-4eccb95a9f5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ee110a6-94bf-49a8-a2d7-a4ff5ef31648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7061d650-9374-4676-a75e-1784b469e37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75d6f79-c8d9-47e8-a398-e3a5314b5911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70e39cd-2e54-4365-9b7a-bfa6aad1b7d2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a8c0c6-cb4a-4a4e-aa85-01999b5397fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf6aed6-742f-4fa4-a9da-359ebfacc7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c90008a-f295-44e5-a8de-78fcc7cacc06",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e136ab2-1b31-4872-8e61-dec22213c9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c057cf4-0a4d-47cb-b971-25b18cc9b6d9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c61e0a-a5f2-4dfd-8f38-1e87d60379f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3ba814-8264-44f0-971a-9875262c2ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af76ec68-633a-47f8-9ab4-835b44b1f812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f0dd21-ed56-4d68-a4a6-e574c5e08e8e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da6dd382-6364-4b26-bb38-839a79946779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48503bcf-f14c-42c5-8a2d-b7f2c3586b9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a44a6244-08fe-490b-bbf8-d1641820a99f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "937201c3-64c5-4479-871b-874c87ebb27d"
                    }
                  }
                ]
              },
              {
                "id": "05d92f98-d545-4581-bc9a-f9391fd0d50b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc8bf1e8-e777-443a-8446-c7680c14cb69",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d507586-1c10-47ca-8be2-87d66321c287",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "332ced6b-1f28-4e1c-9d96-023d1e849462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32d0147-dd36-44ba-84db-246b686ef11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94677f49-c5d8-42e5-a6a7-7f2803196d96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f033c487-ab31-4760-86ce-714bf90f9c28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd903646-e222-4543-af9e-4dfce6076851"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae49fa4-278c-4f63-965e-ad162e66a459",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99e432d4-e7ac-4bcc-a8f8-91f84c183774"
                    }
                  }
                ]
              },
              {
                "id": "7a31b2bb-515e-4875-a1d9-ae0ccae15c78",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "258a1016-d841-4c66-bd17-bbceaa9a41a0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b070e4ca-2177-4297-ab6e-57787c5d05dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d9be02ba-c74d-44cc-8f22-a146212d8e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9720326-ec43-41d2-841c-b6a3faf5ed12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8418d9-eb55-42ec-9054-425fec76354c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "53fd03a3-6d19-42ec-87cf-7954725a01ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66fc6170-dc3a-4cad-8636-6b33c30bf4ed",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a520498-c7b0-4968-a591-a8d3df780cc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cbfe1bed-0334-4496-b982-100ddd75bcc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ef1019a-6449-4f97-b34d-b9a42e7994c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53540362-cf32-486b-9c12-051f4cb31442"
                    }
                  }
                ]
              },
              {
                "id": "721b2c73-d55e-4b44-a50b-c4caf3ea56a7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d5755ef-d2d7-4e6f-a2aa-f32395089ef4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5b86d510-8d01-4f93-96f2-f90eb474147d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "035ab6e1-e509-4f23-983c-fdaaabdca3e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fed1ea4-2589-42ae-ba60-65794959f4f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "996794b7-2c4d-4d4c-8285-7bd498a709a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "37417085-0d4c-4e36-aba8-96cd922ff15a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f20dff05-91f4-43b9-8984-57662ebf6059",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "571c7f02-83d2-4735-b4f3-0ba10da86285"
            }
          }
        ]
      },
      {
        "id": "c6446a76-c3ef-4d67-b579-5107bddccfde",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "97b1a1b8-2b45-44f6-975a-e905f4832f8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f8cc1fc-3b35-4d55-a2f2-cef4366b2b9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1f41d6d-92be-4569-8057-e8bb132080e1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cef459e-eb3a-466b-8555-97b645aa47d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94841e4c-f472-48d0-b67d-76fe4024ca4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7205c1-7203-4e92-a9f6-daa6ea0e0431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "237281b6-3d54-4f55-b4ae-73155a76d19d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ff5912a-23e9-40e7-96d7-59ec52198068",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e9a49d4-972f-45d9-b7d9-c48ed16c2faf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05ab5341-d758-4e2a-af97-4246d778f945",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94fd012d-769d-4da3-adc8-eebd52dc036d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a37bca00-9a35-41c3-9387-4161779af258",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73c7ae69-669c-4aa7-868f-7c61a00ca3f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0be74be2-52ff-4aae-8b4e-2bf57c973f78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3658127d-4121-425f-9e86-c7e9cf61e48f"
            }
          }
        ]
      },
      {
        "id": "980a7cd7-d69a-48fa-a58a-27e118e1a16c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "25e14697-f953-4fe1-a82c-f85df889c623",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6415e5b2-8536-4b64-9703-fb8ea2479827",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26025e98-538a-43ce-a1df-84a70cbb25ca",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f913b99-a388-4f01-94d6-dc4ccc57bfbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c913eda7-46f6-4d1c-bf60-2eaa3b4eb62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dd69cc-094a-4329-ac22-3bd745e1f4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34f1d6c6-8596-4452-9b17-33b3ee92119f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea1a388e-453f-497c-b43f-c940be238ee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "634b3ac1-cb15-4527-9bcd-c2e049988438"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30df88c6-1c50-40dc-8af7-79d0dbbb8b28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6146841e-cd3d-479c-b35a-d68d408fc44c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4b28337-46fa-4aa6-85e0-1848339b3d4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc1e2f7e-458c-4562-bdb6-c955d7f4406a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd7237db-b431-4d30-9dbd-ff8abb002523",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18c019cd-187a-4652-ba13-a3c1280e0a6e"
            }
          }
        ]
      },
      {
        "id": "e18bbe7b-3ad5-41c3-96ca-cc5d2bac5fd8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "07259bd9-c244-4a36-9f9d-d6e4b681821b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a489e0e1-fa32-40f6-9a9a-5ca1b5708344",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f1a8cd4-0504-4165-85d2-3662ce991199",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed17412-c691-4c97-b20e-864992d6e579",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83fda110-1bd8-4bdd-a058-38b85f72cd9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d6d5c3-9f8b-4b8c-ab28-152fa5fd404e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d1a0e86-39f4-4691-864f-83c223cf2403"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bec8ccc-e796-4e65-82bf-5b4aa3e87cce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acd55773-19c9-419e-ac5a-3214307f8394"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aba72f83-16dd-45ed-afbe-6b14b64b41a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35fe3843-c054-4a1c-823d-23f4dc0c36ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1360ef98-1174-4084-aa9c-ef11f1c99c87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9305d11c-9719-41a2-bf3e-6d466d578845"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6244d1dd-0c42-40be-ab9b-afe8bee1d148",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53c410c8-58c8-4244-bd2a-a6f99b929215"
            }
          }
        ]
      },
      {
        "id": "95792782-8018-44a9-b6f5-86bcb2baf8a6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8601213-36c0-4914-8dc6-6dbaf70ab1fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4127e3b6-10eb-47b6-a09f-5d8c09393815",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d7009bb3-1238-465a-b2a8-908565b78ae2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b5550ba-c23d-416a-9b05-fcdd232f94d9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "777100c9-f971-4bd5-b831-828101ce9ff1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.01403508771926,
      "responseMin": 7,
      "responseMax": 908,
      "responseSd": 78.75340023535719,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701995771663,
      "completed": 1701995799616
    },
    "executions": [
      {
        "id": "7b0fe725-3155-43d6-929d-4972090bcf16",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "19dd996b-b189-4065-9c4b-abc6fccee23e",
          "httpRequestId": "30f4ddeb-2126-49a9-9916-9be7fab9c94a"
        },
        "item": {
          "id": "7b0fe725-3155-43d6-929d-4972090bcf16",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "163d3c43-9f4c-4739-87e3-81c743030999",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "a3d99ab4-f190-448f-8c2c-066932703c04",
        "cursor": {
          "ref": "75ef0890-dc3d-49b2-9608-03f84bdc0587",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bda96aaa-254e-4230-b61a-8f6e6d264497"
        },
        "item": {
          "id": "a3d99ab4-f190-448f-8c2c-066932703c04",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8d01b29a-b3d3-46b4-a87b-3d6ca4504d22",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "cf68e456-71e6-47f6-85fd-409fb8bfe29b",
        "cursor": {
          "ref": "85ca83a0-4403-4ff1-8805-8c06ef35a3d9",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "85517c53-72c0-46d8-b17e-20e70b33f5b2"
        },
        "item": {
          "id": "cf68e456-71e6-47f6-85fd-409fb8bfe29b",
          "name": "did_json"
        },
        "response": {
          "id": "4b7e65a0-fc8f-4014-abdd-7a3266eb8d9e",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245d0853-ab09-4794-9f00-048d14cce3ea",
        "cursor": {
          "ref": "edc9adf9-ea4d-4b12-872b-cfb4a5aa08bc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44b4e01f-2cb6-460a-9e14-2ee985229e3a"
        },
        "item": {
          "id": "245d0853-ab09-4794-9f00-048d14cce3ea",
          "name": "did:invalid"
        },
        "response": {
          "id": "e367dacc-89b5-4397-9bd8-a6121c7b30b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245d0853-ab09-4794-9f00-048d14cce3ea",
        "cursor": {
          "ref": "edc9adf9-ea4d-4b12-872b-cfb4a5aa08bc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "44b4e01f-2cb6-460a-9e14-2ee985229e3a"
        },
        "item": {
          "id": "245d0853-ab09-4794-9f00-048d14cce3ea",
          "name": "did:invalid"
        },
        "response": {
          "id": "e367dacc-89b5-4397-9bd8-a6121c7b30b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9035a779-2b3a-4f11-ad53-0672f3608fdb",
        "cursor": {
          "ref": "1dd10453-ef76-4967-b309-ff918ba681e1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6f3827f8-c1d0-4800-b7b6-4478d5183c80"
        },
        "item": {
          "id": "9035a779-2b3a-4f11-ad53-0672f3608fdb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a1595363-3156-48da-b407-e8c3bbfae1ac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6a51c3-5d9b-4721-b479-435291933532",
        "cursor": {
          "ref": "6ba2e555-48f4-4a68-b962-127ffbccee4d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9dc340ec-ccc3-41fc-b1f5-710bd526615c"
        },
        "item": {
          "id": "5f6a51c3-5d9b-4721-b479-435291933532",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "623ea34e-7530-4f50-a880-478b1a81c20b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bb25c8-f320-43c0-9922-ef00109e2375",
        "cursor": {
          "ref": "1d032669-d0bb-44dc-8548-0b8d6c9c6d22",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "768a5799-7b94-4c3f-aae3-66db25619a2d"
        },
        "item": {
          "id": "84bb25c8-f320-43c0-9922-ef00109e2375",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "824eb6cc-e278-408d-b29b-5a60d9e88e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870de968-119e-4184-99f7-ab7526f376e2",
        "cursor": {
          "ref": "f21cddb7-add9-409f-8350-5740e656bc2e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f99c15c9-e905-483d-80e3-afda92a055c1"
        },
        "item": {
          "id": "870de968-119e-4184-99f7-ab7526f376e2",
          "name": "identifiers"
        },
        "response": {
          "id": "06aa6082-48db-4450-a72a-dd57e5cd3843",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29b76c6-eadd-4d2a-881d-8c89fcc459ef",
        "cursor": {
          "ref": "375b5a61-4c85-4143-b806-b87b97965fc1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "daca6f65-0d60-4f58-a814-7c6fb08005d7"
        },
        "item": {
          "id": "f29b76c6-eadd-4d2a-881d-8c89fcc459ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3ccce170-fb7e-4a05-b7e5-010ef448b3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610716c8-0626-4809-abe6-869940a88843",
        "cursor": {
          "ref": "da858db7-0974-4409-acb2-0f1d77ef671f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "48e0c7ea-7c95-40ae-93ae-16a455504c13"
        },
        "item": {
          "id": "610716c8-0626-4809-abe6-869940a88843",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7c4c0d2e-0988-4332-8f85-c0403a0b33dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6838d2c7-fb04-4cc5-912e-0442707cbce7",
        "cursor": {
          "ref": "3e2ff513-d03a-47ea-8372-cfd7fea7eac8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "053bd6d2-b2c1-4292-9dfc-8afac3e43caf"
        },
        "item": {
          "id": "6838d2c7-fb04-4cc5-912e-0442707cbce7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c2001bfa-0195-4b7f-bd96-49dd44d60e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488693f5-363e-47fd-a9de-021d00d93dda",
        "cursor": {
          "ref": "8febc685-a44a-49d2-a938-56979a7a30d3",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dcb1a373-ab0a-4180-beae-f3e3d0167ac0"
        },
        "item": {
          "id": "488693f5-363e-47fd-a9de-021d00d93dda",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "709f7454-362b-4078-9b1e-f1951e200370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975f1b1e-352f-4773-abe9-d9abb64a12f2",
        "cursor": {
          "ref": "ddd59855-37f4-48aa-a763-3bf15d662584",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c1509cd0-e91d-4085-8dc6-8eac79281561"
        },
        "item": {
          "id": "975f1b1e-352f-4773-abe9-d9abb64a12f2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "51085bd9-20ab-49ee-9fac-1bcdf7900ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ff6706-a265-46df-9311-0e4d0465440d",
        "cursor": {
          "ref": "e2ac658f-4296-468a-92c5-0c1c7550fa70",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6b9fae27-0a0b-448e-b6f0-25095b3cca33"
        },
        "item": {
          "id": "f1ff6706-a265-46df-9311-0e4d0465440d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ecad431a-f45d-4c22-9154-534355321060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81b7ec8-d34c-49e5-9c70-c2354b306ebb",
        "cursor": {
          "ref": "3da9c6de-2dfe-4f03-afdc-0c204390ed1c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "14ae2366-9724-4022-a123-14a9eb11cd85"
        },
        "item": {
          "id": "f81b7ec8-d34c-49e5-9c70-c2354b306ebb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "28f5d84b-f1d5-42b0-b1a8-12a5db2d25fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d073502-3059-4e31-b0db-a586c57d9c9a",
        "cursor": {
          "ref": "06c3792b-5bb0-48af-8930-ae874bbc2e49",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3706b8ab-bdb5-494d-b76c-f5946ae0186e"
        },
        "item": {
          "id": "6d073502-3059-4e31-b0db-a586c57d9c9a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8e0d23b6-e9d3-4bbe-8957-e7be8e5c2661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96a7481-a013-4bec-aa01-b21721da6760",
        "cursor": {
          "ref": "ff184620-394b-4612-9ed1-ab9ae2ce6064",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e8a9023c-07d5-4bfc-bbb6-b0505f8e0999"
        },
        "item": {
          "id": "f96a7481-a013-4bec-aa01-b21721da6760",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dd6884b8-54c8-40e8-a283-b4b0c8839b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba94a4bd-c6d3-4667-bc7c-f40621cbabdb",
        "cursor": {
          "ref": "8e0464d0-53e4-4a3e-ab2c-0cc0e8527d89",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "de53e010-2ceb-417a-98aa-e3b89ce5be4f"
        },
        "item": {
          "id": "ba94a4bd-c6d3-4667-bc7c-f40621cbabdb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2eecaf68-0ecb-4db1-b23a-ee37cc7c85f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc56aede-afda-4532-b201-e35f11cec77e",
        "cursor": {
          "ref": "bd743fcc-8663-41e7-9164-e03d9dc50efb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c0e4df33-d1d5-4119-a9b6-bd9439368abe"
        },
        "item": {
          "id": "fc56aede-afda-4532-b201-e35f11cec77e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b56ce7fc-0757-4237-b121-6449b0287bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0036ba-3e82-4168-a313-2aa23d43df5a",
        "cursor": {
          "ref": "ef4baee4-51f5-41b6-9611-f3e4c72e1cd5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f10c0cb6-c484-47a7-bebb-57312dc240cf"
        },
        "item": {
          "id": "7b0036ba-3e82-4168-a313-2aa23d43df5a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e28ad1df-6fb8-45cb-b611-a1953259ef8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807d109f-b8de-493b-bd5b-87bc6c81a383",
        "cursor": {
          "ref": "790198ca-930e-483d-bc3f-843b539193f0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "583ebe32-6fe8-4bb0-b521-7220d6bde83b"
        },
        "item": {
          "id": "807d109f-b8de-493b-bd5b-87bc6c81a383",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "39aa8b8e-f75c-4098-a65c-ef2db0e55efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18e6795-f0dd-4c3a-beca-03d714cef35c",
        "cursor": {
          "ref": "10736e66-7ce8-40c9-8f16-c0f881f52211",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f9991bf5-97ab-47da-9c55-5c3786e7f994"
        },
        "item": {
          "id": "c18e6795-f0dd-4c3a-beca-03d714cef35c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "42e60772-1675-48ad-b56b-a4adecc584ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a155cfe9-c79b-4cb7-abe5-be2ffec62dee",
        "cursor": {
          "ref": "ff180fa6-a75a-4b1a-a092-f172d5b7ba54",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "512939b2-5156-4a7e-bc3b-f286cff61ba2"
        },
        "item": {
          "id": "a155cfe9-c79b-4cb7-abe5-be2ffec62dee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e6b4562c-e233-482c-ada6-becfb5c1facd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae428aa-fb9e-4560-999e-7d58faf4396f",
        "cursor": {
          "ref": "8f731532-9e38-4830-a582-eecd27132fe1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "66d95190-6a6f-4835-b8b0-1e53da3ce99a"
        },
        "item": {
          "id": "1ae428aa-fb9e-4560-999e-7d58faf4396f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c464d6ed-7697-433d-8cc8-d9d84bf6badb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b5c07b-088c-4360-a6ee-e637fb1e023b",
        "cursor": {
          "ref": "6ab86c27-6324-48af-a941-40cdd4469e01",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9f930107-bba4-4dfb-84eb-1d9b574d83af"
        },
        "item": {
          "id": "96b5c07b-088c-4360-a6ee-e637fb1e023b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1f298b75-f936-4398-9ea3-89d905162f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b56acd1-c7f3-4346-8329-aefbeae94f45",
        "cursor": {
          "ref": "d5d552ee-f4b1-4cb8-ae41-5eac6ccdc20b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cfc63aa9-2633-498b-b972-88a6ccfda48d"
        },
        "item": {
          "id": "7b56acd1-c7f3-4346-8329-aefbeae94f45",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1c972dc8-6e11-44dd-8f12-00e23113411d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6a3b03-1566-4a7a-8119-4f7881865847",
        "cursor": {
          "ref": "ebf3d1c3-fdf9-424f-892b-6a8ad566f77c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "547b5ed9-a290-4afe-8af2-26ca6c389b57"
        },
        "item": {
          "id": "fa6a3b03-1566-4a7a-8119-4f7881865847",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bf509aa8-fdc5-4b87-9cc7-42d80a4dc867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8faaee-7bd5-4064-b2a4-7ed78ee94db9",
        "cursor": {
          "ref": "21e82b8d-8460-4c36-be9b-4856afd98a98",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "56bdf363-1481-4035-9fd5-69188e7fe0fb"
        },
        "item": {
          "id": "8e8faaee-7bd5-4064-b2a4-7ed78ee94db9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4c627543-32d2-4281-bde1-6d3b260a7389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f007ca86-a7b5-45c3-addc-452a12f034a3",
        "cursor": {
          "ref": "bad6750a-4693-4246-a256-951d38d3facd",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9582df29-a2fb-48cf-9450-6ee0297574de"
        },
        "item": {
          "id": "f007ca86-a7b5-45c3-addc-452a12f034a3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5c5f34f9-ab35-4f3a-9809-986fc4dd6d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1cbde3-cc0a-411c-99a9-6faf1d1a055c",
        "cursor": {
          "ref": "ed774ef8-f798-482b-8193-68372758afeb",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eca1fc51-1287-4e75-baff-3343c3f1ca86"
        },
        "item": {
          "id": "ef1cbde3-cc0a-411c-99a9-6faf1d1a055c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c5cf0968-c05c-4a6f-9d96-f5ba1e336702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b018295d-6a7a-4967-b8a8-67bbe4ca9c90",
        "cursor": {
          "ref": "a4c40d62-3373-411b-b468-64ea7636f955",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d34aa035-b58a-4328-93a3-6e54ea029593"
        },
        "item": {
          "id": "b018295d-6a7a-4967-b8a8-67bbe4ca9c90",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d2fa9ed6-adff-425d-85a5-42645b5169e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fe4e22-16f4-4161-8d57-c3dd663fee86",
        "cursor": {
          "ref": "f3ce9843-c7e4-4926-b476-e173a9ae6bca",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6d7ad5ce-e8ab-4676-8773-a8511c8a7aa5"
        },
        "item": {
          "id": "80fe4e22-16f4-4161-8d57-c3dd663fee86",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "695c03cf-ac35-4659-a4f0-4319dcddb8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7932f6-ba3f-4668-9a0e-278aa587630c",
        "cursor": {
          "ref": "9e494146-91c8-4d81-8755-edfe394fa868",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6338b3ee-56fa-4731-8abf-52e25e68fb94"
        },
        "item": {
          "id": "ed7932f6-ba3f-4668-9a0e-278aa587630c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "435f200e-e203-49e6-91bd-3b66e8c37819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8575b3-0645-44c0-9e95-61adefa26f5e",
        "cursor": {
          "ref": "8883832b-5a1f-4451-b296-d089a3572121",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d4adcb2f-38da-4e9f-bc32-b3f0becc6d41"
        },
        "item": {
          "id": "1b8575b3-0645-44c0-9e95-61adefa26f5e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0d55cd56-e22c-4508-a663-9a92625f4b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0aad0a-544e-4d7a-a62e-d0cd129d918b",
        "cursor": {
          "ref": "0857bfaa-4168-4c85-bf57-b30863e91076",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a8f292ea-086b-4925-9535-6dc0039f4fc0"
        },
        "item": {
          "id": "ff0aad0a-544e-4d7a-a62e-d0cd129d918b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0692047b-647e-46b4-9bf9-f366a1f92959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc651635-3784-455a-bb20-bc4c3842a8e5",
        "cursor": {
          "ref": "60cb7d62-76f7-4032-8618-413a678edfba",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b3d5462b-cdb9-494a-b88d-5697527ea022"
        },
        "item": {
          "id": "dc651635-3784-455a-bb20-bc4c3842a8e5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9c080727-c361-425b-8345-996cc97f35c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26498c66-6e91-4253-8767-542dd81ebb21",
        "cursor": {
          "ref": "382f3f0b-a930-42b9-a68b-0ffa231bac22",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66a2cb71-3cff-42e0-b507-54f5d2521798"
        },
        "item": {
          "id": "26498c66-6e91-4253-8767-542dd81ebb21",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8ca0fe08-81f0-430c-b268-8e21bb4b24fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb7f5ea-ebe1-4fe3-ab7f-8ddc11476c0c",
        "cursor": {
          "ref": "778882f8-d240-44e4-98f9-9feb6fa3556f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5950db5b-baa3-4af5-a10a-ae5eea0bb6b8"
        },
        "item": {
          "id": "ecb7f5ea-ebe1-4fe3-ab7f-8ddc11476c0c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bc95c3b6-072e-47ca-9ddf-42a40d258b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6168b5bf-8499-4437-8c98-f837c9a41ae5",
        "cursor": {
          "ref": "b3f67be4-d79f-428f-9938-2c91fe26dedb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "52a13794-e63a-4257-8c90-c44f89374de2"
        },
        "item": {
          "id": "6168b5bf-8499-4437-8c98-f837c9a41ae5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "436acb9e-3fc9-4024-a42b-f0f7d2709df3",
          "status": "Created",
          "code": 201,
          "responseTime": 908,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f4c49adf-c761-448d-af90-03858d239733",
        "cursor": {
          "ref": "8d74386a-d1a6-40d4-8b02-0f326ec6b87e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "997bcc17-c80c-401e-a21a-b76c9ae46e2c"
        },
        "item": {
          "id": "f4c49adf-c761-448d-af90-03858d239733",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1dcd51da-fa36-493d-874e-8f1510659306",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7ab3b64a-d835-4b91-9112-2fc9295e6ff7",
        "cursor": {
          "ref": "64ecf2ec-1e87-46ae-b100-6fe295398446",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "187c2543-74f5-4ea7-8168-d7232287dde4"
        },
        "item": {
          "id": "7ab3b64a-d835-4b91-9112-2fc9295e6ff7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6995dacb-9213-4659-9433-cb450737042f",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8f7c6a83-c5ca-41c6-9cfe-119aafec33b5",
        "cursor": {
          "ref": "92a6ff51-8296-46b8-b0a7-ab5eb8ecda8f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "671eefb0-2d60-4da9-8651-e9666aa15a19"
        },
        "item": {
          "id": "8f7c6a83-c5ca-41c6-9cfe-119aafec33b5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "25f03524-a3cd-4b87-8976-d1411dd4bf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e7338d-848f-492a-a757-f5e2034da8a2",
        "cursor": {
          "ref": "56e1738c-e312-4e17-ad1f-97c57f4649a4",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d5873d9b-a9f9-4adc-a8eb-e8d1ce56c221"
        },
        "item": {
          "id": "11e7338d-848f-492a-a757-f5e2034da8a2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e52c2236-9758-475e-902f-b74b165424a8",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "47c6e830-c969-4a22-a090-025bfe64fed3",
        "cursor": {
          "ref": "dbca0f4d-9456-41c9-9b27-d1998796f634",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff60f641-47b9-4a5c-9085-e53daf3a665d"
        },
        "item": {
          "id": "47c6e830-c969-4a22-a090-025bfe64fed3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e4a2917b-bd00-4c9c-a0e8-9500ac69a345",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "30195198-d5d2-4d73-a7a1-e026f594ba95",
        "cursor": {
          "ref": "17326e04-329e-413d-a226-4db81c2eca90",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a5a7688f-24d4-4f59-96fe-785f2183fca1"
        },
        "item": {
          "id": "30195198-d5d2-4d73-a7a1-e026f594ba95",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "86e9c817-29c6-462d-809f-234469b15ac1",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "15447ff8-85e0-4678-a490-96b394061032",
        "cursor": {
          "ref": "fd271b36-d99f-4b5f-a539-62eecf129c28",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be748c78-5e47-437b-ab81-586237d0c514"
        },
        "item": {
          "id": "15447ff8-85e0-4678-a490-96b394061032",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dcd51749-8b2f-4ec6-a643-f1a5ac6376a0",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "31dbf1e2-0784-410e-aaf6-3d4d7fb1bfe7",
        "cursor": {
          "ref": "4ade664b-8da9-4903-9190-72ec52036bf6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d40ee5c0-8c09-4a1d-8d36-8fdaa348d0c5"
        },
        "item": {
          "id": "31dbf1e2-0784-410e-aaf6-3d4d7fb1bfe7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1330f44c-cc79-42c4-961e-2f47d7ae1e16",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "17e0fd08-400a-4358-ad61-8a613ad9d96f",
        "cursor": {
          "ref": "8b9b6f03-fb5f-4f26-9afb-23ea6643a600",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15223cb8-8ad6-41f9-99f2-37c8319e4e7e"
        },
        "item": {
          "id": "17e0fd08-400a-4358-ad61-8a613ad9d96f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e4795ffd-3db4-474b-b913-37a58a4d3ebb",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bc5f9237-1941-47a2-b038-52ba0cb85b4a",
        "cursor": {
          "ref": "920a40d8-7e2e-499d-8473-c7cec182893f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "44f2fb57-d188-4164-a3e8-fbf1584b3479"
        },
        "item": {
          "id": "bc5f9237-1941-47a2-b038-52ba0cb85b4a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fe7ed0c0-9e1d-47a3-a29a-9e2359e569c6",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4d9f8e9d-79e6-4509-999b-271b9469e1ae",
        "cursor": {
          "ref": "98588ee9-0a24-43eb-b682-08841e85b159",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bcfe1c64-7c8a-48f8-ba87-aa5415b8f24e"
        },
        "item": {
          "id": "4d9f8e9d-79e6-4509-999b-271b9469e1ae",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e657dfe9-c9e2-42f3-a6eb-9616f29500ce",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f5ed3acb-6f9c-4628-8302-d18f295741c8",
        "cursor": {
          "ref": "dfe8bcd9-47c6-4278-95cc-8e6bd56a9205",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "384c68bf-0054-4e4f-94f6-65f5c16a7cb9"
        },
        "item": {
          "id": "f5ed3acb-6f9c-4628-8302-d18f295741c8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2dd5e9c3-a597-4068-bdb1-9c5dc64daa2b",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2ded52ab-fb94-4fba-8d05-ce5ff66ff658",
        "cursor": {
          "ref": "6079cf02-8dc8-4292-a269-5b55fe562f2a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6bf1077f-da1c-4086-a57a-341b90ec3a97"
        },
        "item": {
          "id": "2ded52ab-fb94-4fba-8d05-ce5ff66ff658",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e631caeb-e5bb-45ca-9a3e-5a1376a9d7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1346c4bd-d88e-4787-a6b0-6f6fa9c03cd4",
        "cursor": {
          "ref": "5aa02099-5e9b-48ad-bc36-91129e1c405a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cba607d8-03ee-4eee-8b14-7566cb4bf54a"
        },
        "item": {
          "id": "1346c4bd-d88e-4787-a6b0-6f6fa9c03cd4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8c8a8af6-eea6-4989-ace6-4ad2f71535b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9679b32f-c9e3-4212-96fb-2000f244bcbf",
        "cursor": {
          "ref": "c0b75f4f-89d2-472b-80b6-4cade34e29ea",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dff100b4-063a-427b-89c1-efc8869c2a86"
        },
        "item": {
          "id": "9679b32f-c9e3-4212-96fb-2000f244bcbf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9357b97a-6ac7-4e9a-8da2-5759db0206f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd15e13-03ff-44ed-832e-ee58dc829f8d",
        "cursor": {
          "ref": "50e8fc86-0bcc-4142-823a-3f8990eeedc6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8e738ac6-250f-46af-b246-ee24239c53ba"
        },
        "item": {
          "id": "2cd15e13-03ff-44ed-832e-ee58dc829f8d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "80f44651-f9fe-4a1b-af09-dbdad2768254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ffd8a2-0c0b-412e-bef1-c37e9d8dd491",
        "cursor": {
          "ref": "2eaa907c-b857-4d33-a3be-1860569d273a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3aa88f2b-564e-464b-b409-782c395800ee"
        },
        "item": {
          "id": "47ffd8a2-0c0b-412e-bef1-c37e9d8dd491",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ee4c1875-2e45-42b2-9442-da139ecb1e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696555ca-88c1-4cec-a2aa-eaecc22818d7",
        "cursor": {
          "ref": "303530f7-857d-41a1-bed8-b6d652d7c2dc",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e272eb25-b442-4816-941b-5fe3378307c5"
        },
        "item": {
          "id": "696555ca-88c1-4cec-a2aa-eaecc22818d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "facb85f7-6a7d-411b-9369-95a68fc84295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba7c616-9f26-48f1-95a8-1ee9a282fdc0",
        "cursor": {
          "ref": "edc5b268-b778-437e-8c27-86bf8e4c7c3c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cf0387ef-add8-42b0-8226-96d31560b391"
        },
        "item": {
          "id": "0ba7c616-9f26-48f1-95a8-1ee9a282fdc0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef89ba47-d2dd-4003-bce3-b302dc483d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6985a0b8-0d5e-4e2a-809a-823f27500b4b",
        "cursor": {
          "ref": "c248b548-e516-41fc-b712-731f4b9eaf99",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e897268f-3e1e-4a27-9cbd-833068d8ba77"
        },
        "item": {
          "id": "6985a0b8-0d5e-4e2a-809a-823f27500b4b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "07a07b1e-1f07-45da-9170-0a5acab9cbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afa017f-d31a-4a00-a634-b8ea3cc3285f",
        "cursor": {
          "ref": "1b816f56-2647-4f86-ab5f-4cfe3654fb99",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1a73232c-d892-4826-a07e-300abd2e2e9f"
        },
        "item": {
          "id": "8afa017f-d31a-4a00-a634-b8ea3cc3285f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bfaeea2c-a916-4392-b385-bef09d990ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40de470c-6031-4e55-97bf-afa7e2c4f55c",
        "cursor": {
          "ref": "5ce986c6-22fb-48d5-9ecb-40889209bcd8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "27560f53-7d7f-4c96-a56e-fcf9b71d491c"
        },
        "item": {
          "id": "40de470c-6031-4e55-97bf-afa7e2c4f55c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "652f79e9-6b48-4af3-9c76-736b172c5a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e591c8-c1cd-4f33-acbf-ee3a2c57981a",
        "cursor": {
          "ref": "c8ddac4b-dba8-45fb-b959-347d027c6c96",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f3239285-b8d3-47b4-8bcf-9510cbef8b94"
        },
        "item": {
          "id": "e7e591c8-c1cd-4f33-acbf-ee3a2c57981a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b41399bd-3602-480c-a251-6b4a35b85554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1def04b8-16df-4897-b5f5-1eec9ac0348a",
        "cursor": {
          "ref": "e98d852c-fa0d-40bc-bfc4-64b6c8fa9b2b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8506bd9e-2463-4ba2-b865-4835562c005a"
        },
        "item": {
          "id": "1def04b8-16df-4897-b5f5-1eec9ac0348a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "63684933-d74c-416a-9b6b-9e43a1b1cc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cf227b-7e4d-4d19-bc8d-2eec067cb9f3",
        "cursor": {
          "ref": "7c9ce7e4-ad82-4409-9180-b3ff70d6ce3e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d49b3184-2e8e-4165-ba55-1e3ac7432cfb"
        },
        "item": {
          "id": "b5cf227b-7e4d-4d19-bc8d-2eec067cb9f3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b93e82b2-3d26-4df1-b960-301194d7b2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f5959f-ccc4-402f-bbe1-40ced89cee6b",
        "cursor": {
          "ref": "e00e168a-e340-48d4-a2c6-dff2c8d80531",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f163b1ff-1ed0-41aa-89e5-99abec659b74"
        },
        "item": {
          "id": "03f5959f-ccc4-402f-bbe1-40ced89cee6b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "87ea9627-052c-4b15-a324-43d811d9886e",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d159a68a-aa75-427f-92f2-928916f7d3ec",
        "cursor": {
          "ref": "c30ee00c-0b94-48b2-bec2-216ccf958e3f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0b9693be-01cb-4ed5-867f-541d3b4379bd"
        },
        "item": {
          "id": "d159a68a-aa75-427f-92f2-928916f7d3ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fad6a1ee-efee-4216-8a28-9dbbd688adce",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c04c882c-407e-44ef-a8f6-e09648af73f5",
        "cursor": {
          "ref": "83d58669-2fd8-4edd-88d7-7cb14b7e7e9d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0eb09809-e48e-48ce-952a-5af607463a82"
        },
        "item": {
          "id": "c04c882c-407e-44ef-a8f6-e09648af73f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c8a0def7-4111-4d1f-90cc-b148b21611a4",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "64f4c303-5a16-42b9-857e-33ee9261736b",
        "cursor": {
          "ref": "76af81ca-b804-4255-8a49-8b5a830f9943",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7d603677-a973-4bb3-b4ae-67ae6b0c95ff"
        },
        "item": {
          "id": "64f4c303-5a16-42b9-857e-33ee9261736b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ea355f8-610a-423b-92af-4a9f968195f8",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5337dfdd-4643-43ff-a005-edbf4fee9e20",
        "cursor": {
          "ref": "bacba053-3a2c-4a3d-9f1b-1eb6886bc6ba",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fa6fc9fb-ab71-4fc3-b026-5d785842b895"
        },
        "item": {
          "id": "5337dfdd-4643-43ff-a005-edbf4fee9e20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c6f0e2a6-1d03-4989-b347-a7be0527630d",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "98c25954-7fea-46a2-b465-364ac6f91c15",
        "cursor": {
          "ref": "09801337-f12f-4581-8ee6-b894d399745b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4c80e6fe-ccdb-4c0d-aa6c-ee59ddbfe9cd"
        },
        "item": {
          "id": "98c25954-7fea-46a2-b465-364ac6f91c15",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "943f2ebb-8e29-4cc3-a74f-f5e6224bdae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e700b4f3-c081-40ea-8327-b80be8a0a0ee",
        "cursor": {
          "ref": "54077f12-3c81-43ef-88c1-fed8662454b2",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e28ab3a6-8b67-41ab-b0a2-2892c6762e00"
        },
        "item": {
          "id": "e700b4f3-c081-40ea-8327-b80be8a0a0ee",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fe0ddcc3-75fc-4cb4-b8e2-45b4f1690c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcde184-5340-4903-8824-8049c336a0ff",
        "cursor": {
          "ref": "26fe83d7-52c2-41e9-9bd8-de33ad540d5a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1f38889f-811f-4f14-aef3-eea0cdfaaa18"
        },
        "item": {
          "id": "1fcde184-5340-4903-8824-8049c336a0ff",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "95890afc-45c8-4ec9-8cff-0d814b4f97c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394e45ba-c194-4921-ae67-470b9e5d6def",
        "cursor": {
          "ref": "d31573d5-6468-415f-bc63-e0b364cb32ff",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "609677b0-68a1-45eb-91f1-e56043488710"
        },
        "item": {
          "id": "394e45ba-c194-4921-ae67-470b9e5d6def",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6bad6846-e069-4dca-bbcb-c00713ad50de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994a1396-3280-4a5e-9289-5901b44f1cee",
        "cursor": {
          "ref": "45433086-2a9e-4508-92c0-8b3d1f6cbaac",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ec2aec3e-2a92-4aeb-b268-507a9a2250da"
        },
        "item": {
          "id": "994a1396-3280-4a5e-9289-5901b44f1cee",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4a4c6ed6-36e0-4a50-a136-c0b61a88a8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b561850-2ed0-4e37-95b5-7c6a1b590f45",
        "cursor": {
          "ref": "6b1a1199-453e-4408-ac64-d5486fd19aec",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4d1b0bb0-efce-4ee8-bb39-e87225f4f99a"
        },
        "item": {
          "id": "8b561850-2ed0-4e37-95b5-7c6a1b590f45",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44dd190f-322e-4c59-8993-e75adce00e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd87f8d6-1643-40e8-8b5f-f78c594f0b40",
        "cursor": {
          "ref": "5c2f1cda-63ce-441a-8a18-271f8671f002",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a0652e8f-5815-42b6-ae2c-d9c1aa4f4b96"
        },
        "item": {
          "id": "bd87f8d6-1643-40e8-8b5f-f78c594f0b40",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ac414672-fe35-4bc5-9648-4fb03e53ce68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312a8bd8-a88c-4d7e-a6ba-22611e89eb25",
        "cursor": {
          "ref": "2d69da79-f155-484b-b53f-037bcb015bb8",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fc81cc9a-6897-4261-b982-7b7834b3fe88"
        },
        "item": {
          "id": "312a8bd8-a88c-4d7e-a6ba-22611e89eb25",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "943e615a-8789-40f9-9c04-7a4561682bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969579a5-e15d-4086-a842-f00f5f3916dd",
        "cursor": {
          "ref": "fe4b27bf-e826-4595-a142-05c778d449c4",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "94e43e88-81af-4135-a48a-de24800e859b"
        },
        "item": {
          "id": "969579a5-e15d-4086-a842-f00f5f3916dd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b3a0864-9a35-47d3-b70b-3fe6d9f30f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d07dfc-1c4d-43d2-ae6a-5b60c866d36c",
        "cursor": {
          "ref": "7a517fb7-a786-4f5c-8d0f-484418e8d0b8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "edaa80bb-75e5-425e-8593-4d3628baf1e5"
        },
        "item": {
          "id": "c7d07dfc-1c4d-43d2-ae6a-5b60c866d36c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eaf48455-ae09-4b46-82f8-df271c506e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ffd223-2afe-4c80-a736-489b0fafe7e5",
        "cursor": {
          "ref": "b2b2b624-e18a-45f1-9e6e-ebe93243a236",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7aabd19e-1c7d-4809-bb81-da853edfa096"
        },
        "item": {
          "id": "07ffd223-2afe-4c80-a736-489b0fafe7e5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1d0ed95b-041c-48c1-ab10-8e7a562443a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748bb380-9ba9-4218-966a-3897f65d7452",
        "cursor": {
          "ref": "e4703139-8805-4722-b0ff-750a11a96829",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ce41e512-5275-4b75-9d19-af52e2156240"
        },
        "item": {
          "id": "748bb380-9ba9-4218-966a-3897f65d7452",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "24bbf678-2257-4cbf-aa79-ccabf73865c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129c9a88-7c6e-4beb-b7e7-35508f123b00",
        "cursor": {
          "ref": "07da089a-9c25-46fb-b045-31a9d082cf42",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9a73b59f-ab2b-4348-b01f-46af65597012"
        },
        "item": {
          "id": "129c9a88-7c6e-4beb-b7e7-35508f123b00",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7b9f5841-ce90-49a3-be41-f915cea39200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29acaafb-a431-4493-b3b2-bde39f099ca5",
        "cursor": {
          "ref": "cd83d5d5-e92d-4479-9599-42833e274977",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "623d3d63-7466-4df6-823d-3f94b945ec79"
        },
        "item": {
          "id": "29acaafb-a431-4493-b3b2-bde39f099ca5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "33eccee4-d8f7-40b9-b96e-2c481106377d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee232c64-187f-480b-a250-86f2f3592216",
        "cursor": {
          "ref": "d3b72a37-866d-4b55-9a35-5d9dba9b2605",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "221aa0e4-3402-4ce5-87e0-90016fde44af"
        },
        "item": {
          "id": "ee232c64-187f-480b-a250-86f2f3592216",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a308158b-9746-46f9-9325-56ab5a21a68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a8dcb4-0662-40f4-8a8c-86cfca7749db",
        "cursor": {
          "ref": "df9ad6aa-575f-405f-832a-7d44555af1df",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a2d501d7-915b-4c7a-b131-5f7764408020"
        },
        "item": {
          "id": "96a8dcb4-0662-40f4-8a8c-86cfca7749db",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "97a61af5-86f4-4f50-8302-0696f2454020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd40d6d9-d800-4845-9c10-cb82b83eec70",
        "cursor": {
          "ref": "c817c00f-5dd0-47a7-ae1c-990fab9d7d3c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f2aaa071-5a40-4416-a004-c79cf378d523"
        },
        "item": {
          "id": "bd40d6d9-d800-4845-9c10-cb82b83eec70",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "34fdceba-d0ad-4e44-8360-0f8cfc07bb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba8f332-004e-4a39-bfa0-ed3554a47ddc",
        "cursor": {
          "ref": "a5246207-6230-4bf0-b876-49e19d56acb7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b09fe3f3-1947-476a-8cc6-eab3bf3941f4"
        },
        "item": {
          "id": "aba8f332-004e-4a39-bfa0-ed3554a47ddc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7831ad03-64b1-434c-a168-d9b7a93b23d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee2cf09-7d66-4f85-85e1-39b038e9861e",
        "cursor": {
          "ref": "c927a166-f99f-4916-b7bb-3ee0fe0102e9",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a2c78f56-a484-474f-b0cf-f870bfde68b3"
        },
        "item": {
          "id": "bee2cf09-7d66-4f85-85e1-39b038e9861e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8c8b763e-9013-4441-b0b6-143c3a89cbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfa96f1-71b0-4861-865d-64ae9896f327",
        "cursor": {
          "ref": "9babc183-e072-4683-9837-dc75ef3f1bb1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4f2f448c-97af-4539-afff-96a60d67ac39"
        },
        "item": {
          "id": "ebfa96f1-71b0-4861-865d-64ae9896f327",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ed77ebf2-7152-4687-9613-f995ac5ddb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3335ef7a-e0bf-4c51-9e78-b889a3da4183",
        "cursor": {
          "ref": "8f769eb0-7e86-4a0d-9370-744fea2e0789",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "525e1120-93f5-4acc-a797-9b9fae9fa81f"
        },
        "item": {
          "id": "3335ef7a-e0bf-4c51-9e78-b889a3da4183",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "09b8998f-259e-48d1-abca-33ea63b08888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb0d70b-931f-48e8-80ee-6e900a25b709",
        "cursor": {
          "ref": "f2bfc519-b762-4f02-8900-675480b43880",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a98eedf5-1e98-4826-8508-533d4f8e3b97"
        },
        "item": {
          "id": "4bb0d70b-931f-48e8-80ee-6e900a25b709",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "99e32302-7429-4275-8f0e-fae1958edaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49447383-0d63-4695-ac39-f54cd9776d81",
        "cursor": {
          "ref": "2e785a32-36cd-4dda-aeb9-3ca545250c70",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ea9ec0fd-ddaa-4e49-8779-d08fe872d5cb"
        },
        "item": {
          "id": "49447383-0d63-4695-ac39-f54cd9776d81",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "869bc70d-849a-489d-8242-fa3ca6dfec10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f9a94c-400d-447e-a750-2c13c16dbc29",
        "cursor": {
          "ref": "363b5d0e-c610-4f61-a73c-3eaf85f7a070",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7dc61c0c-6146-4fe8-8c79-aaf08efa6383"
        },
        "item": {
          "id": "77f9a94c-400d-447e-a750-2c13c16dbc29",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3d9e796e-2ba1-4d56-a5f6-53fc4310a5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb99263-ffb4-4cce-9965-e702950bd16d",
        "cursor": {
          "ref": "e4b8e78f-e3b8-41ec-be21-09f4cc929406",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "721b15fb-b93b-4042-8daf-ccc39d87829b"
        },
        "item": {
          "id": "fbb99263-ffb4-4cce-9965-e702950bd16d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d1a6ca71-d390-4f98-aef1-6a32b671f02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4090659b-a347-48e5-a1b0-d1363293690c",
        "cursor": {
          "ref": "5c965ca4-f872-4942-9d04-244b4d9f165a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ecddc709-282d-496d-ba51-0bf458b9353d"
        },
        "item": {
          "id": "4090659b-a347-48e5-a1b0-d1363293690c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3d4fcbfd-8bda-4385-b905-a6e1ede51dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6009aacf-865e-4f79-9e63-6828ad225a3d",
        "cursor": {
          "ref": "ffb78fea-fdbc-4220-b014-88b40cae9fd3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bd17d7fd-7d37-49ec-b46a-d5fb682ffa78"
        },
        "item": {
          "id": "6009aacf-865e-4f79-9e63-6828ad225a3d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9cfaa423-be38-4632-890a-8450dd366352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6511cb-b4f0-4315-bd69-fcc75f6d76e3",
        "cursor": {
          "ref": "81f0f0b3-7522-427a-838c-a8e227f10f9e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fcca462f-786a-4af5-8cec-2072110d6974"
        },
        "item": {
          "id": "dd6511cb-b4f0-4315-bd69-fcc75f6d76e3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1038b267-9117-4dce-8b4b-eff81b88988e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8488076b-8dab-4130-80d9-55d21bbb66c4",
        "cursor": {
          "ref": "a4263abf-065a-41a3-bfc2-0baabc0694a9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "61d0034f-97fe-4f26-9f4d-8f83f3595760"
        },
        "item": {
          "id": "8488076b-8dab-4130-80d9-55d21bbb66c4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "aa1f7ae6-65c5-4eae-a99c-74f7623cd1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b575013-e977-420d-97c7-b8a89cfdffd6",
        "cursor": {
          "ref": "51732ebc-cfd6-4d2c-8216-1837d7249c3f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4cc581dc-71b6-4133-ae31-b9fc435062a2"
        },
        "item": {
          "id": "9b575013-e977-420d-97c7-b8a89cfdffd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c8ed66d4-debf-4568-8faa-8fee366dc2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3e47ab-e79d-4a56-9d14-12f3bda12aad",
        "cursor": {
          "ref": "a55795c8-f0e3-429c-a160-2b74831d5925",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2e0b2fb1-ba1f-404b-ac48-8f6972e1166c"
        },
        "item": {
          "id": "7a3e47ab-e79d-4a56-9d14-12f3bda12aad",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "43d88b99-495a-4188-82d7-9d7f691d0eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d28fea6-89e7-4b07-9da6-ae26e1f41158",
        "cursor": {
          "ref": "8c68c86c-acd4-4dc2-a735-64306b912ba4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "90122fcd-617a-48ce-a99c-3c3bb39cf7dd"
        },
        "item": {
          "id": "6d28fea6-89e7-4b07-9da6-ae26e1f41158",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5cb6b072-5168-49e6-94e7-a2f843ba55e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08424d7-feb0-4a72-83d7-6bfab40c86a9",
        "cursor": {
          "ref": "351a7d28-7f0e-4cc4-b804-ad5a0f4744cd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1d6aa614-fce6-4492-a423-8a516a315784"
        },
        "item": {
          "id": "b08424d7-feb0-4a72-83d7-6bfab40c86a9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "bcdd98b9-ff43-42fc-99f5-741d278e2468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4c5f4e46-bc4e-4fb1-8bb0-52aef72dac62",
        "cursor": {
          "ref": "fe7ff9c0-22be-4590-8613-58f03ad785a0",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b975fee7-7a00-4321-b27c-1af7c9fae386"
        },
        "item": {
          "id": "4c5f4e46-bc4e-4fb1-8bb0-52aef72dac62",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4446a9ab-26ad-4940-95f3-c788a41d619a",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "43df40f9-b986-4c96-a769-608d1d20b2c5",
        "cursor": {
          "ref": "4f09dc31-d8df-4ec5-a8f2-a453d595b9ca",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ef9ae02a-db5c-4050-bd95-1d3e98cb8150"
        },
        "item": {
          "id": "43df40f9-b986-4c96-a769-608d1d20b2c5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5861694f-85a1-4b1d-90fd-1708699da2c1",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9ada12-2a13-4f13-a7a2-8758d638f5ac",
        "cursor": {
          "ref": "b649ef4e-899e-4ee3-962c-59044f170128",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6d1627a0-7d99-4c06-9222-1e2bb5d11b62"
        },
        "item": {
          "id": "ad9ada12-2a13-4f13-a7a2-8758d638f5ac",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ae32c62e-3100-442d-8314-37bbd23a9d52",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe0417e-8dfa-488e-bb61-314d56a33cd5",
        "cursor": {
          "ref": "56450dfa-1fb0-49c7-b5f8-827c9c55872e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "403e2f32-2096-41a7-861c-d64706f4a01c"
        },
        "item": {
          "id": "dfe0417e-8dfa-488e-bb61-314d56a33cd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d7cd522b-f0d4-49d0-997f-5343431b5d69",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec95cd1a-409c-471f-af95-7c89426363db",
        "cursor": {
          "ref": "3195c942-559a-4ad4-85d6-f13a52a25f77",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a4ff584f-a174-4357-ac72-1f0d1fb6311a"
        },
        "item": {
          "id": "ec95cd1a-409c-471f-af95-7c89426363db",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8d4114ee-3cdb-41f3-9335-4e5c36ea2018",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-08T00:36:25.878Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-08T00:36:25.878Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9598cce8-17b7-41dd-8456-33e9bad29875",
        "cursor": {
          "ref": "a24494f0-7ff1-4fde-9155-82c2be25a8b3",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0f0476c0-e870-4211-bd78-1a96ab241fcf"
        },
        "item": {
          "id": "9598cce8-17b7-41dd-8456-33e9bad29875",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5e25604f-2ddc-4508-a24e-7f2b32e82b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3585f5e4-6a94-49ae-9128-b822935c0838",
        "cursor": {
          "ref": "ffbb1cbe-3ad8-4cc5-b387-d9e0ae1b3b04",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1ae4d68e-0392-4d32-8d62-1973c73e7709"
        },
        "item": {
          "id": "3585f5e4-6a94-49ae-9128-b822935c0838",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "242b4e44-6e85-4cab-a736-0f1db4caf21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740cb810-485e-45f7-8af5-b052ba6902b7",
        "cursor": {
          "ref": "c85a4ad6-2f03-4f21-ab15-9d931cb0b9ba",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5489d8cd-c977-4248-8dc0-a105fe6fad73"
        },
        "item": {
          "id": "740cb810-485e-45f7-8af5-b052ba6902b7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f456ed94-a71a-4e39-acb6-d8223fb58531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e6d03a-2a1b-4c51-85a7-292f053be093",
        "cursor": {
          "ref": "29a91f29-f7bb-4524-b2b4-7b9b10aad9c5",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20ed6ab3-8db1-472b-ae67-04419613dd72"
        },
        "item": {
          "id": "51e6d03a-2a1b-4c51-85a7-292f053be093",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7b20482b-b57f-410d-b71f-b985a1db7c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90fc87c-d2e6-48f5-b86a-30fc464f32fe",
        "cursor": {
          "ref": "ee1f86c4-3b17-45b5-b878-2ca8208261f4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "47251c31-86bd-424e-96ac-d79ef82eee19"
        },
        "item": {
          "id": "a90fc87c-d2e6-48f5-b86a-30fc464f32fe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fc69645c-740f-4aec-b400-6519d82ec8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c85275d-62af-49e8-ad0b-921f06f116c3",
        "cursor": {
          "ref": "8d56a29c-bcd7-4097-8e03-293fb0aa79d8",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "53e60990-e799-4ab9-be38-832aee02bfea"
        },
        "item": {
          "id": "9c85275d-62af-49e8-ad0b-921f06f116c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "17d507ab-9ae4-4e2a-aa39-af7553cefbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e32635c-a9f1-4a15-81cb-ff11be7d46d7",
        "cursor": {
          "ref": "27cec0a8-faf2-4228-b00d-bcab7fd3f8da",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a31ec15e-081b-4ae2-aacf-9a50948a6b82"
        },
        "item": {
          "id": "5e32635c-a9f1-4a15-81cb-ff11be7d46d7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e7fb96df-ac78-4a99-a4c4-a39463090034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08b2a73-126d-499b-8622-30ddc6c5a047",
        "cursor": {
          "ref": "58da8186-884a-403f-8729-335643ba704b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a93ba04f-7163-4b75-b996-9bc2541c5d2f"
        },
        "item": {
          "id": "e08b2a73-126d-499b-8622-30ddc6c5a047",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a20602d9-0237-4481-9fc5-0bdd88509319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ba6b64-f323-4417-99c3-184b8daa5241",
        "cursor": {
          "ref": "c6bea834-2c1e-46dd-9329-3c8c53f84fd4",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4dde0af2-4fab-4013-9c80-cb6330f7677b"
        },
        "item": {
          "id": "02ba6b64-f323-4417-99c3-184b8daa5241",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e9ed865b-d116-4ba8-b6bf-1ddfdb9b6bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b67111c-fd23-445b-90b4-01ae094d4370",
        "cursor": {
          "ref": "63ea57c2-93d9-4962-baae-99e760175e9e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9475e147-00bf-4d66-9fc3-7f0b40ef9ac2"
        },
        "item": {
          "id": "5b67111c-fd23-445b-90b4-01ae094d4370",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "139ce7e2-2509-42c8-a209-45baebc1008c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8760589a-35e4-4e5d-81cc-6f36ae46fa1e",
        "cursor": {
          "ref": "0d35728c-0414-43ad-aba1-ef7e14b1a9a3",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ceaddd8a-b96f-4267-a778-6737e494e9fe"
        },
        "item": {
          "id": "8760589a-35e4-4e5d-81cc-6f36ae46fa1e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dc073df0-fcdb-4a4f-94b2-31449d4e0b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3f34d1-60f1-41ae-9915-2128fad0b626",
        "cursor": {
          "ref": "266d7e74-6131-4870-b96f-2736cfecd9fd",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "217c11d5-69e0-49d1-b18e-09bb6fbe99f1"
        },
        "item": {
          "id": "7d3f34d1-60f1-41ae-9915-2128fad0b626",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "846e9c8c-c1d3-421c-b648-5fd33b7a50ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dd381d-2e6d-45ca-8ea9-c4e407371ad8",
        "cursor": {
          "ref": "01993190-c022-4b13-882e-def0cae2e3c5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1f508d24-cf65-436f-8d78-e76dd0f92d51"
        },
        "item": {
          "id": "70dd381d-2e6d-45ca-8ea9-c4e407371ad8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bed59e4f-2462-47d5-bfa1-81be750f55e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1125b7fd-c9c0-4531-8779-a0c6bd130530",
        "cursor": {
          "ref": "81604335-1396-469c-bfff-7da88acd107e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d9f88d10-d311-4e73-a0a4-d57161942328"
        },
        "item": {
          "id": "1125b7fd-c9c0-4531-8779-a0c6bd130530",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "49623558-267e-482b-a762-c45ebeebc8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d2a954-12b0-4f11-893c-d9a814149aa9",
        "cursor": {
          "ref": "f0be7f33-4ab6-4587-b733-d4555ccbf046",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f938bbb6-2ef8-4674-ac34-a2351b810c3d"
        },
        "item": {
          "id": "f5d2a954-12b0-4f11-893c-d9a814149aa9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "58f78a34-5658-432f-b81f-a37d336d2adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63020145-0f5b-471e-bb1d-f409a8b7fb3c",
        "cursor": {
          "ref": "b1f0cb46-a1f3-45d1-86c0-34467bbfd6cb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "afb8a7e6-12e6-44e4-830f-744f07bf29e1"
        },
        "item": {
          "id": "63020145-0f5b-471e-bb1d-f409a8b7fb3c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a76d413-c2e3-42d4-aed9-18c9e4557ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29db5d7-b3e8-4f39-918b-7b5cb7285fd3",
        "cursor": {
          "ref": "c3687fe5-2ba1-4307-ad35-9c262672088f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "059d31db-4182-48b5-9812-559265910ce0"
        },
        "item": {
          "id": "b29db5d7-b3e8-4f39-918b-7b5cb7285fd3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3ab79f06-2309-4003-961d-4095ad2a89cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f1b771-e15f-4843-a6e9-433a870026f5",
        "cursor": {
          "ref": "d36c179d-ce72-4c37-8d32-cde045366f07",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "85725aac-e27d-44ef-9b6a-5a8fafff4811"
        },
        "item": {
          "id": "11f1b771-e15f-4843-a6e9-433a870026f5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8183cbd9-65ad-4998-8fe0-e6232151d255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcad4fbf-11f0-4fba-836f-822c2af75c52",
        "cursor": {
          "ref": "b2c14303-e676-40a2-abf7-6838f327ceec",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1ba5cd72-96a3-4c59-af71-7e3cccd55a29"
        },
        "item": {
          "id": "bcad4fbf-11f0-4fba-836f-822c2af75c52",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29746ede-fca2-4802-9794-ca8924a15e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe093f7-017c-4df3-969c-e0b223a26760",
        "cursor": {
          "ref": "569131cf-6e31-423d-9622-a6b62d2a5674",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ca4ebd45-a371-4a34-99b6-cd4602400fa1"
        },
        "item": {
          "id": "0fe093f7-017c-4df3-969c-e0b223a26760",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bfdd8287-02a9-4f16-bd5f-c21ebb4338d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c3033b-2781-4849-b40a-09f563403e1d",
        "cursor": {
          "ref": "22a1363e-f54f-4c1a-b853-704221d2a538",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "284b7da8-974a-45d6-9246-e13522a940b8"
        },
        "item": {
          "id": "59c3033b-2781-4849-b40a-09f563403e1d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ded1169f-7383-4e80-815c-e28c417a8cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e477981-a808-4a65-a8c9-e12e3e14350e",
        "cursor": {
          "ref": "71d616a3-1454-49e2-a3e3-ea39d02a4bf8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a190f5ef-d5ce-40f1-8cdd-5d729f7ed971"
        },
        "item": {
          "id": "9e477981-a808-4a65-a8c9-e12e3e14350e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b886e20c-87b9-43c6-91d7-354171ef4942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d173ce-844c-43b8-87d7-603b2d84b2e1",
        "cursor": {
          "ref": "904ded32-5eb2-4782-9c63-784a2a131af1",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8c5265d1-03ed-4592-a57c-86dabfce964f"
        },
        "item": {
          "id": "34d173ce-844c-43b8-87d7-603b2d84b2e1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "774680c9-11ff-48bf-bf57-8341e049817c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7217e2cf-6247-48ad-99be-bc73395dc428",
        "cursor": {
          "ref": "da792d82-8d72-4f01-8ab9-0650c3479d30",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "00284602-2a41-4ce6-a407-6af616562f59"
        },
        "item": {
          "id": "7217e2cf-6247-48ad-99be-bc73395dc428",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "65b91b78-3734-425c-8610-cbbdd9f25e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fe5dd2-ab3c-4b93-b96b-a35b91ad4414",
        "cursor": {
          "ref": "a787d54b-0eb7-47bc-bcec-dfe7bd13e1aa",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "54b9bdf9-9268-4851-937d-7340b4e976a4"
        },
        "item": {
          "id": "26fe5dd2-ab3c-4b93-b96b-a35b91ad4414",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3fa94874-a544-4450-838c-31acaa1ab5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb29b9-da06-4e70-8d8e-6524c294ad02",
        "cursor": {
          "ref": "98d00d21-4e85-4198-90a0-938d05ff5850",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "06c5a139-ef96-4c80-88a2-98afe94dfd24"
        },
        "item": {
          "id": "06cb29b9-da06-4e70-8d8e-6524c294ad02",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b9e7342c-cbfe-4767-a647-de3cc3f73997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fe2071-7be8-412a-a052-10695e1f0642",
        "cursor": {
          "ref": "8065aeff-f3a3-4646-ab4e-af1220d53fcf",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4d47fbc6-b014-4dd2-aa07-788391da7da0"
        },
        "item": {
          "id": "22fe2071-7be8-412a-a052-10695e1f0642",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5cd62bff-9cca-4e25-a74a-ac70b2323d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a582255-941a-4024-aa62-1baa4d8336d7",
        "cursor": {
          "ref": "b088df34-91c9-4393-8253-468b17484e23",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "98f77bba-51f8-40be-957f-5e62efcb998c"
        },
        "item": {
          "id": "5a582255-941a-4024-aa62-1baa4d8336d7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5301cf30-5ddc-4397-9a3a-d027e2be63f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d560b95-c6e4-40e2-ac5c-518c2a5a820e",
        "cursor": {
          "ref": "e17caf49-2e6d-4ea3-87e4-6d01134daf63",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "723c4352-9f9f-4459-bc97-6cb0c91de2c3"
        },
        "item": {
          "id": "3d560b95-c6e4-40e2-ac5c-518c2a5a820e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7b3d090-715d-4209-ae3d-bc45f4f53bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60771546-70ba-4bc6-8a0b-bb3f698342a8",
        "cursor": {
          "ref": "f61dba85-714a-44eb-8374-484bac7d32d2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2fcd8697-b002-4fb8-ac9b-f45c66abca59"
        },
        "item": {
          "id": "60771546-70ba-4bc6-8a0b-bb3f698342a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6b8746a2-5eab-4675-8e99-270bf49d3878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e541be5-f459-49d0-b562-ae2e2f509e3d",
        "cursor": {
          "ref": "5e18682a-6fdf-425e-af86-33ca59e5cb31",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28db8992-eeeb-44bb-bd49-3e1397a64cc7"
        },
        "item": {
          "id": "1e541be5-f459-49d0-b562-ae2e2f509e3d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eff3bf75-d34a-4903-b999-24dfe9b772e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473aab97-37a2-41b6-b913-c30074943b1a",
        "cursor": {
          "ref": "746fb233-0f40-4c02-a79f-f2514836687f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d701c339-f1a0-4ce7-9c07-67f079508367"
        },
        "item": {
          "id": "473aab97-37a2-41b6-b913-c30074943b1a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2862d72c-8d64-4f38-a788-1011954de23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac145d67-c97e-462a-9874-4caa1bcfa6c9",
        "cursor": {
          "ref": "b5768422-2d00-44fb-8fe2-05f196e63062",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4bae0d1b-e941-4de7-ad97-1be09404b080"
        },
        "item": {
          "id": "ac145d67-c97e-462a-9874-4caa1bcfa6c9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "71306c15-bef1-473b-a266-ac743f2145a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df62d17d-1db9-4864-b5d8-d79f4a34d59b",
        "cursor": {
          "ref": "bd3ba41e-3d2d-4ed2-b667-d197074e4b3b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "df200553-1931-4911-b060-0697b67a8411"
        },
        "item": {
          "id": "df62d17d-1db9-4864-b5d8-d79f4a34d59b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8fafac94-eb58-45d5-bd0b-6a5d4f6531f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82edd16f-30ec-4dd5-a0f4-182612f81906",
        "cursor": {
          "ref": "6cef771c-452f-4f9a-886b-36a27d1f5589",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b11e5fff-5c90-4d73-8395-2f1ae6eedfcb"
        },
        "item": {
          "id": "82edd16f-30ec-4dd5-a0f4-182612f81906",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6f374972-eb5d-4232-aed8-9d7b5970c442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f923b8-c259-435a-8d2c-1266e2f92ff7",
        "cursor": {
          "ref": "d0b49b27-4dd1-498e-b021-492e57944e9b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "24b3df8d-c34f-4da7-a30b-d8d06ee1b0e2"
        },
        "item": {
          "id": "48f923b8-c259-435a-8d2c-1266e2f92ff7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ac058210-b592-4c13-be1a-fddb1d4ac922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01f9e41-1c2f-4394-a31f-5ba1cfaed5b0",
        "cursor": {
          "ref": "7a00371b-4659-42c0-a048-8947168f9770",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "48cb5da1-c054-4abd-8601-10a9026a83ca"
        },
        "item": {
          "id": "f01f9e41-1c2f-4394-a31f-5ba1cfaed5b0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d5c27d8d-541f-4b51-913b-eb276d2fbff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128c0e82-1530-47f8-8d72-57ee22f4e6ab",
        "cursor": {
          "ref": "8130fe3d-121e-4d7a-ac74-ff6aeaabd69d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "05955a31-fd9f-4b90-a385-bf3f9cabc2d6"
        },
        "item": {
          "id": "128c0e82-1530-47f8-8d72-57ee22f4e6ab",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "18eccb1b-face-45af-9021-e5ab7d44dfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e6a977-d7b4-437a-be74-61ccd7fb5426",
        "cursor": {
          "ref": "f1661ced-0a29-4829-960d-295b3c68c7c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ac254236-b62e-402f-b909-7b65203af0bb"
        },
        "item": {
          "id": "75e6a977-d7b4-437a-be74-61ccd7fb5426",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a8108896-f921-4fb0-95f6-69fb91a03a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26572d7-12f7-40c5-b1ee-58aa875eaccb",
        "cursor": {
          "ref": "f41c17f8-8858-4fc3-bab2-88ebeba2b77e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7e9384e7-632e-42f1-8752-0839f29b8550"
        },
        "item": {
          "id": "c26572d7-12f7-40c5-b1ee-58aa875eaccb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "51a55d2a-9968-4176-b878-e7d719f9d2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d677a3-c928-422b-b4d4-d9e7d5e73296",
        "cursor": {
          "ref": "39c0015a-c6e0-411f-84f9-7214722dbb66",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f112279e-71da-41be-9319-bae8dc24d10c"
        },
        "item": {
          "id": "52d677a3-c928-422b-b4d4-d9e7d5e73296",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76928668-b530-47f8-ab83-4fd8ad90ef3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545b2f89-a685-4d1d-867b-602f8f9794cd",
        "cursor": {
          "ref": "70a5cbcb-1ace-4a1d-888c-55fe126fdeaa",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8151932d-7492-4991-8f8c-1f8b4bf5d479"
        },
        "item": {
          "id": "545b2f89-a685-4d1d-867b-602f8f9794cd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64e6f27b-6195-47b8-bb40-babb2dfb3b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ade4579-e054-4da5-8941-254d65257919",
        "cursor": {
          "ref": "b79905d7-b834-4432-b69b-fcab5e665f89",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6eefa4a2-bcb6-42eb-afc3-0dac17e35079"
        },
        "item": {
          "id": "4ade4579-e054-4da5-8941-254d65257919",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7de96092-d85d-40f9-8b63-8b743e35fd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1220b779-5f27-4b91-8f90-f1f3564f6b96",
        "cursor": {
          "ref": "78eb034c-122e-4a86-991b-0f9c6308e3d3",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0370cb1e-a19b-46f9-84c9-63865daa7d5c"
        },
        "item": {
          "id": "1220b779-5f27-4b91-8f90-f1f3564f6b96",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "db4c56fe-b485-4a3a-a4c1-e08af191e2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af8e099-ae0c-4ad5-bedb-5532a39bca70",
        "cursor": {
          "ref": "2aed834e-d0c6-4cca-b91e-5a0aecf313cc",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f9710d63-f522-4cab-b705-4aaea1ffd80a"
        },
        "item": {
          "id": "8af8e099-ae0c-4ad5-bedb-5532a39bca70",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7bd7063e-9d8e-464c-8970-0a7b2aa8f228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775d636b-1170-45fa-bf99-02eabc729653",
        "cursor": {
          "ref": "34fde835-c676-4191-8756-a129e49e2d2f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "142b380b-16c9-4241-934a-8f507af3b3de"
        },
        "item": {
          "id": "775d636b-1170-45fa-bf99-02eabc729653",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3dc578ca-b5e5-4e02-b193-5e8090c49608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd959f4-06ab-49f7-9f3f-e82d57a10146",
        "cursor": {
          "ref": "8cf8d77f-5b77-4ed6-9b2b-14fd63f792a4",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "71e81a8f-9b17-4c91-8a7f-5522813f7066"
        },
        "item": {
          "id": "afd959f4-06ab-49f7-9f3f-e82d57a10146",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bc815cfb-7829-42ef-b588-327d7a2dafc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e45b93-5328-48c9-8f9f-f15ae238ee55",
        "cursor": {
          "ref": "e0a8bb8c-ceca-497c-9f61-38f6ec5ec22a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b5ef2e4e-5abd-4791-8ad6-995475f699a1"
        },
        "item": {
          "id": "f7e45b93-5328-48c9-8f9f-f15ae238ee55",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "93cd6e1f-1ed3-46f3-b6bb-934cf0e1041f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4c8f14-c28c-4cf8-8d81-d37d9b4c4d74",
        "cursor": {
          "ref": "0cca7999-b836-4298-94c6-111365d087a1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a186f440-d116-4f50-9549-8fc253267166"
        },
        "item": {
          "id": "df4c8f14-c28c-4cf8-8d81-d37d9b4c4d74",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e4ffaafe-d548-4e7f-a7aa-2c021d2d9ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e18d99-aea3-4883-9cc8-694a0c7b8bf0",
        "cursor": {
          "ref": "28ec48b3-f07c-4c97-bfe6-6f3caf1ef57a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f23bcb50-893c-4773-bd4a-b0e507bf95ab"
        },
        "item": {
          "id": "29e18d99-aea3-4883-9cc8-694a0c7b8bf0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0bdffb04-83f6-4bc1-a6fc-ccf1c19ead31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61063ae-e48b-432d-8355-802ab172da91",
        "cursor": {
          "ref": "26dda056-a563-4751-9e4a-42cde8661f0f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "393170b2-e529-4ace-b0a0-7e43454a841d"
        },
        "item": {
          "id": "d61063ae-e48b-432d-8355-802ab172da91",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "024eb0dc-a22e-4a97-9495-94ef3508804a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5706a17-4758-4ade-af30-0ee7a3fcc119",
        "cursor": {
          "ref": "5acd4781-6060-42b6-87b0-240172098f12",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "70d2c1eb-5211-4c9c-9aad-5f4c78f24292"
        },
        "item": {
          "id": "a5706a17-4758-4ade-af30-0ee7a3fcc119",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60cbc71b-b58c-4a48-b867-1dbf300123c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e503f86-2464-4188-8c88-dcabe0c7e17c",
        "cursor": {
          "ref": "98c7e114-a10b-4d7d-8c42-36368a4d453c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a52c99a9-6527-439b-85c4-223525d80259"
        },
        "item": {
          "id": "6e503f86-2464-4188-8c88-dcabe0c7e17c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c1bda565-8673-4ea2-97bd-f9ea21d2ede3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ca4f2b-688d-480f-86a9-a6a3b64f387a",
        "cursor": {
          "ref": "09863735-f8e8-42af-9878-11e1f4e8a607",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2fa76711-9029-454e-afc4-140744d0c4be"
        },
        "item": {
          "id": "61ca4f2b-688d-480f-86a9-a6a3b64f387a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a7aae3ab-fa62-4d00-830d-06a2da47f27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd7788c-a541-45a4-bf47-71e5bf66baee",
        "cursor": {
          "ref": "210e61d8-d1eb-4712-bde4-5be96a4b1bc5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c2456730-f439-49f0-9d7a-f745eb87ef4b"
        },
        "item": {
          "id": "7bd7788c-a541-45a4-bf47-71e5bf66baee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "599a10d2-9cbd-4017-b2ab-d90a3b1732b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb32693-29ed-4172-9702-a5623c645c6a",
        "cursor": {
          "ref": "b44189a1-89f1-4986-8ed9-b66eefa77c48",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "50fd25aa-1381-4594-b803-f583b3def6f4"
        },
        "item": {
          "id": "7eb32693-29ed-4172-9702-a5623c645c6a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5d5210b8-9750-4c0b-87d9-83918c7b2ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9285c32d-288b-4fe1-b3a1-36e3ce6fb707",
        "cursor": {
          "ref": "1881e939-ceb4-40c7-961d-b8fbdf7b6bb7",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "68cd1d99-bcc9-4137-9101-91bcd9609e95"
        },
        "item": {
          "id": "9285c32d-288b-4fe1-b3a1-36e3ce6fb707",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9664bbec-222b-44b8-92c9-296f1c955822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f343880-b1d5-4c6d-80eb-d634e99505c4",
        "cursor": {
          "ref": "8b886bb4-13bc-447b-9d6d-bfa489256a7c",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f6711217-c63d-4557-abba-e278647360dc"
        },
        "item": {
          "id": "7f343880-b1d5-4c6d-80eb-d634e99505c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "80ed8791-425a-4f3d-8c03-70fbc1e54235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d24d332-1225-40fd-9a03-17e996033f8b",
        "cursor": {
          "ref": "4da88ed4-c8bb-4286-b85c-ca95c3536c4f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a2a00b4f-1c98-4d58-a09a-34263ddb29f6"
        },
        "item": {
          "id": "1d24d332-1225-40fd-9a03-17e996033f8b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8a1dc4e7-ed7b-401d-9a09-1ff8b0c72563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dda60e-abd4-4e5b-a0eb-ed3110160f45",
        "cursor": {
          "ref": "f206bfae-6de1-4bb1-8e89-28a825c719e8",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "73825d44-5e13-4ad4-a3e3-e8a50706ea86"
        },
        "item": {
          "id": "64dda60e-abd4-4e5b-a0eb-ed3110160f45",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c2689e1c-c3a6-4f0b-b4f1-bc36c0816f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ebec87-bcb4-4fae-868c-5bdb2eb60bdd",
        "cursor": {
          "ref": "61616da1-7f1d-4814-82ce-313b8fa1311a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7c1ea440-3bc8-447e-b9d7-9007b0b2b32d"
        },
        "item": {
          "id": "d3ebec87-bcb4-4fae-868c-5bdb2eb60bdd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "06550cd0-eaab-48e1-b3c1-62d95f47e518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edf0845-a724-46af-87aa-c1589d0c02e3",
        "cursor": {
          "ref": "0932f664-1b70-4a94-a93b-4bf2fc5236d2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "538d2373-bb3f-470d-a7ed-872464c1b5bd"
        },
        "item": {
          "id": "5edf0845-a724-46af-87aa-c1589d0c02e3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "84bfc7b3-16e6-49f0-bda8-d294a5712790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8fd94f-67b3-43d3-9cdf-670f2a2a6c30",
        "cursor": {
          "ref": "708b311b-9d64-4233-a0dd-de0f75dc866d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1a315829-26f2-4f50-8e15-de8e0028f3f2"
        },
        "item": {
          "id": "0b8fd94f-67b3-43d3-9cdf-670f2a2a6c30",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "196c2f80-c57f-4be1-90cc-b8d3740b060c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e758465d-4b9f-44a0-92c4-c491a047a4a9",
        "cursor": {
          "ref": "767e715a-fa82-4002-9966-53548ed08227",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a5e29822-678b-4455-8db5-977a99bff4e5"
        },
        "item": {
          "id": "e758465d-4b9f-44a0-92c4-c491a047a4a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4666643e-0146-491c-96c7-ab9fe55df81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb13ab9f-9bbc-4229-9b87-3daa8056dfc0",
        "cursor": {
          "ref": "df496a9f-bc46-4ccb-b788-1dddf9c37352",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "155d4e1c-0faf-4858-84bd-005fa0d2083b"
        },
        "item": {
          "id": "bb13ab9f-9bbc-4229-9b87-3daa8056dfc0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e2ef6b37-7d1e-4377-b5e4-ef11d8b00f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c51dcaa-6456-4289-b236-574818c10306",
        "cursor": {
          "ref": "a2e2db90-d9e1-499f-b391-63ab17fbe77f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c1570ac6-404e-445a-95a3-40f6b1a21f5a"
        },
        "item": {
          "id": "5c51dcaa-6456-4289-b236-574818c10306",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "09068450-03f3-463c-be82-d38861bb691b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74967dbd-8c9e-4c98-a0d9-b97489855846",
        "cursor": {
          "ref": "1f9691dc-db67-4cba-a650-346b692e2315",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7006cd1e-c6d2-4824-b88d-9c34c383f077"
        },
        "item": {
          "id": "74967dbd-8c9e-4c98-a0d9-b97489855846",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "654cc2cb-3df0-4b3e-b7a6-f37bca3a9693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78836a4-62e2-4fc8-8f8c-a8e51f088ab4",
        "cursor": {
          "ref": "cf8cad7b-2cbb-4663-8a15-f734e4d8219a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "da542ca7-2963-4b3a-ae5d-b5d0d7d6d6df"
        },
        "item": {
          "id": "f78836a4-62e2-4fc8-8f8c-a8e51f088ab4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9bfa3650-92ec-489e-8f20-a8b777c5a8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfd8470-290d-49c3-8bf2-83c07325d89a",
        "cursor": {
          "ref": "5c6a1efc-4faa-4b36-99f6-94f00d25d267",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cbf27d1e-378e-40ae-9009-296b2719e800"
        },
        "item": {
          "id": "1bfd8470-290d-49c3-8bf2-83c07325d89a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "95b9e98f-4bb2-4311-a7cf-4bb03401959e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba17212-12b7-4d52-b9da-2b12635016ea",
        "cursor": {
          "ref": "3e76e330-9995-46a7-b837-cb719bb38875",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "281ef956-1763-46f7-bc30-f51b13b9fc40"
        },
        "item": {
          "id": "bba17212-12b7-4d52-b9da-2b12635016ea",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ea3ec123-8135-4d95-a720-497bab171433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5f18fc-bcbb-4415-a881-20f23516f80e",
        "cursor": {
          "ref": "07248293-c6f3-4154-8a43-3155e4a91067",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "10ea8f98-39e5-49d9-8eaa-b833018ab711"
        },
        "item": {
          "id": "4e5f18fc-bcbb-4415-a881-20f23516f80e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4f163147-bb71-417f-8bf0-2d7958be6386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8719a90d-8700-45e6-a20d-b561335ff938",
        "cursor": {
          "ref": "0f29520d-8ccd-42d9-8e2b-28a4555508cd",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "10bcd5a3-cf8e-454f-b01f-81382b737835"
        },
        "item": {
          "id": "8719a90d-8700-45e6-a20d-b561335ff938",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8510c4e4-327e-4266-9ad3-5a8217c23a1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52819619-0d2b-4f9f-a9a9-f79a3e85ec97",
        "cursor": {
          "ref": "c3dea72d-4d68-4e01-9198-c02195688409",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7434f544-c3b5-482f-9f04-20e66f2f0658"
        },
        "item": {
          "id": "52819619-0d2b-4f9f-a9a9-f79a3e85ec97",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5b75459b-3158-4ddd-b959-4777beb000bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f4d42f-4d19-452e-9405-3b67fd4403a6",
        "cursor": {
          "ref": "db2824bd-73a8-4138-9817-4830bf873fae",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bdd45878-8f02-49a8-9d8a-34a92841682c"
        },
        "item": {
          "id": "d2f4d42f-4d19-452e-9405-3b67fd4403a6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c676cb3c-d774-4404-9601-eae09ecde079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e135fb3-bc3e-4e6f-bce1-b4b39da65f3c",
        "cursor": {
          "ref": "90d4410e-5e89-4b63-aad9-8fc48d3979bf",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "87effc67-09ac-413f-881d-7b26142214f7"
        },
        "item": {
          "id": "6e135fb3-bc3e-4e6f-bce1-b4b39da65f3c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2840487b-65d6-4154-96e8-934225a76fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1e05da-a48f-40f5-b1ea-129fe38c5253",
        "cursor": {
          "ref": "73a18716-4af3-4076-8d01-18916025dec9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "58ce2076-2982-4d72-8c2d-4203c7ef6096"
        },
        "item": {
          "id": "7e1e05da-a48f-40f5-b1ea-129fe38c5253",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "67c45a24-731d-4f5c-9e55-d742dcf4e088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef1ddb-8e11-44ff-9975-777d8433bc69",
        "cursor": {
          "ref": "df860f92-bfe3-4529-adf2-8e054c40a301",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4f36dc9c-61fc-4e31-a249-8b4d5f25803b"
        },
        "item": {
          "id": "0cef1ddb-8e11-44ff-9975-777d8433bc69",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b80159b4-2e5d-4d5e-8073-66e925015515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d0eb60-94df-477c-89ba-42564b9cefad",
        "cursor": {
          "ref": "c74515a2-3ce1-4c60-90c2-e26f0ca8eed8",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4d6bd7df-a1f9-4211-896e-d2de70093b1d"
        },
        "item": {
          "id": "24d0eb60-94df-477c-89ba-42564b9cefad",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d14fd56e-5cf1-47b3-a457-5301fdfe0df0",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "17242490-6f5d-4772-8b05-fc18aecd300c",
        "cursor": {
          "ref": "26684fd9-8a28-4868-86c1-0ab23cc8b051",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e3b16ff9-5bf3-4307-b1ba-82904162bc2a"
        },
        "item": {
          "id": "17242490-6f5d-4772-8b05-fc18aecd300c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e4e9dd6d-7e31-42b1-af76-804ef7d42852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac147c5-297b-42c9-89d8-8d09041718fb",
        "cursor": {
          "ref": "217afd27-f0b9-480d-904f-3541def2a296",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1fe8668f-d922-437c-a2ab-4e1ca843b557"
        },
        "item": {
          "id": "fac147c5-297b-42c9-89d8-8d09041718fb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8c169fac-ac2f-4ea8-9bea-76070ba65f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c506e4-4a5b-4c08-8663-57d03b4b2b6a",
        "cursor": {
          "ref": "cd089e45-3b51-43de-bea6-3dab3b7d96f8",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8cdcfd43-1052-4804-b44a-64485147a036"
        },
        "item": {
          "id": "53c506e4-4a5b-4c08-8663-57d03b4b2b6a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "aa1b0029-a34d-4d8b-bd66-0a0e90d1f67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c87321-b1a6-490a-bcb7-71ad733fc618",
        "cursor": {
          "ref": "403bb8cc-1b5d-4943-b9fe-edb84c449634",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "89a386e2-b13a-4eaa-81bb-90b30cb9cbd5"
        },
        "item": {
          "id": "08c87321-b1a6-490a-bcb7-71ad733fc618",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7a8521eb-de5a-4941-8eb6-8d5a5386536b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82063fd7-6e67-4dc7-8bbe-9d20c568cb0c",
        "cursor": {
          "ref": "c66df574-a316-4dd5-bd28-061e64af541a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e5174ac6-7d85-4c35-9cff-b6c680ec9dcf"
        },
        "item": {
          "id": "82063fd7-6e67-4dc7-8bbe-9d20c568cb0c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a71b7409-a6ca-46ca-9637-a31dabd41d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcddb136-5325-4d8a-b31e-75d79fcb315f",
        "cursor": {
          "ref": "f5969780-ff16-4166-a737-c28ac1d4133c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "279f7558-f094-4bf0-bb71-8d520d584775"
        },
        "item": {
          "id": "dcddb136-5325-4d8a-b31e-75d79fcb315f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8a949b41-e544-451e-a02b-b062a03b0dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6762cace-ca3c-49a1-890d-df199888f1d9",
        "cursor": {
          "ref": "18d8af47-0a70-4067-a63a-34cbcff28454",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "38d6375e-9fa0-4295-ab11-32cc8731a108"
        },
        "item": {
          "id": "6762cace-ca3c-49a1-890d-df199888f1d9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2cb9aff3-d4f2-48d9-bb1a-fd068c0e2a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222fe818-8023-4016-a8e0-8f544b6ac2ce",
        "cursor": {
          "ref": "35dc2778-081b-44e5-9733-23ab0fba8308",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6aec74ad-8fe9-4627-85db-8215437ece56"
        },
        "item": {
          "id": "222fe818-8023-4016-a8e0-8f544b6ac2ce",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c756c091-afe5-4fee-815e-9034cd3e1344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af70ebe5-906f-4e20-9b6e-f06e6d0d1ffa",
        "cursor": {
          "ref": "52e35582-2874-4552-abb2-ea4b916c797b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cac18124-e822-4fe1-972f-ac8aa82e8f94"
        },
        "item": {
          "id": "af70ebe5-906f-4e20-9b6e-f06e6d0d1ffa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2202806d-8b11-4d8e-9c82-da2e87b4592a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b915e0d-1c1d-4d42-a3b0-db80b3cbc897",
        "cursor": {
          "ref": "bd83aa9e-8f45-4e3f-800d-1e4193638431",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2750f760-54be-42d7-8db4-57dea0631532"
        },
        "item": {
          "id": "5b915e0d-1c1d-4d42-a3b0-db80b3cbc897",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "05205834-cfe8-4f46-97d6-380addf07042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecb78c0-78d9-4011-bb0d-79fbba000fba",
        "cursor": {
          "ref": "b9e22df9-756f-4610-9c24-bc2b7a3acab1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0eed34b-3e0a-44aa-9a12-0f2b3b9535c3"
        },
        "item": {
          "id": "2ecb78c0-78d9-4011-bb0d-79fbba000fba",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ddd4c04d-fb89-42bc-86ac-6a2f4b003abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639eb1a5-58f1-427e-bdf8-1cd0e26f65f0",
        "cursor": {
          "ref": "a7b15d2d-ca94-4856-b78c-dced7e84acf5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "46806ffd-09f7-4da3-8531-9bdf8c69b550"
        },
        "item": {
          "id": "639eb1a5-58f1-427e-bdf8-1cd0e26f65f0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9b42e35a-09ee-47b8-9e18-ae2ab646b60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9675c17b-b61f-4c32-95e6-3395cdf620bc",
        "cursor": {
          "ref": "609637df-732f-49a7-a0cf-f0d528a181f8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ec1ea86-b3d8-45f4-85b9-0ee834b8e356"
        },
        "item": {
          "id": "9675c17b-b61f-4c32-95e6-3395cdf620bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cc660ed1-4198-46ff-8134-06049b7e0f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27921a38-83f7-4b02-be1d-23aaf9d7617b",
        "cursor": {
          "ref": "596e7e4d-98cc-42f7-937b-831c773d82c6",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c6d6ed7d-e97f-4c60-a53f-3b64c2bd26a9"
        },
        "item": {
          "id": "27921a38-83f7-4b02-be1d-23aaf9d7617b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "703fa7db-da4e-46e5-a994-4b272f84ed73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed746ad-8bf9-4e2b-a7ee-9be2ab526f2b",
        "cursor": {
          "ref": "44739763-6016-4f93-ad9f-1618dc96e1cb",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8f7901f4-c1f3-4393-8f54-b354dce36f1f"
        },
        "item": {
          "id": "aed746ad-8bf9-4e2b-a7ee-9be2ab526f2b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e72e13c3-cee7-46ca-801a-bc09e9d150db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca410779-04ab-45d5-bbfa-ad73e30bd95f",
        "cursor": {
          "ref": "ce7eef50-0262-4cec-ae44-76eaf3a7599a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9470d1c7-70cc-40ff-966b-c09fa2b492c6"
        },
        "item": {
          "id": "ca410779-04ab-45d5-bbfa-ad73e30bd95f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d7d65c32-a399-42d6-83c8-685c290224ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d159766-7423-416a-914f-31ed6d0ecff0",
        "cursor": {
          "ref": "999631e2-bc40-4af2-8f75-0acadb4a09a0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "513f0e4d-2e77-4943-9374-44dcd6a22aab"
        },
        "item": {
          "id": "7d159766-7423-416a-914f-31ed6d0ecff0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "303c2fbd-d447-47dc-9f9a-223324036f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083ebf54-a46c-4b51-b625-2839ec380649",
        "cursor": {
          "ref": "76d515e1-98d0-4880-b9db-158eee8c5fc0",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4471c162-6471-4c2f-977f-eaab0136e90b"
        },
        "item": {
          "id": "083ebf54-a46c-4b51-b625-2839ec380649",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad49013d-5e51-4baf-a596-67a3b375fe68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa1f5f3-07d7-4aaf-878c-4edd6095100d",
        "cursor": {
          "ref": "9d9f53cf-8e15-4fc8-8dad-5fae976fffdf",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed373e74-908f-4659-934d-59f18c7debdc"
        },
        "item": {
          "id": "1aa1f5f3-07d7-4aaf-878c-4edd6095100d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fcb60f22-7023-4b45-ac0f-e5a251b43448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef81d3e9-fa03-4021-b248-66649449fc33",
        "cursor": {
          "ref": "e70aac2d-13a5-47f6-bcff-7fcb7e5cb04d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7c584808-1c09-4127-adb9-0e5a5dfd4b12"
        },
        "item": {
          "id": "ef81d3e9-fa03-4021-b248-66649449fc33",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1a924e42-0e2f-4d17-b101-e73066ce8bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d485fb5-9319-407a-8bf4-2963669b8f41",
        "cursor": {
          "ref": "a4881de2-6416-4fff-80c7-a155fc5d522a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "dfd52333-ff5b-408e-8f1b-a9e6aaa4b3da"
        },
        "item": {
          "id": "5d485fb5-9319-407a-8bf4-2963669b8f41",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2a30007f-7415-4255-bc3f-e658e5d52bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f20a7e5-9669-4ee0-befb-d26969d9ec45",
        "cursor": {
          "ref": "b2efcf8d-5fa5-4591-8634-84b9b8af64b1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3434c389-54c2-4cb6-afbc-58842ff0544d"
        },
        "item": {
          "id": "1f20a7e5-9669-4ee0-befb-d26969d9ec45",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a123cb59-daf8-4f5f-ae2e-785d61060788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37670bbe-0ec7-40a7-87ab-fd0c73d95909",
        "cursor": {
          "ref": "df29f18a-9c45-4e45-ab8d-6f7da4d71fde",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24c5e2a6-bc31-4250-bc6f-a415d4472669"
        },
        "item": {
          "id": "37670bbe-0ec7-40a7-87ab-fd0c73d95909",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "958dfee7-e2dd-4e94-9b98-5ebcd3438ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f0ad6e-626d-413b-9c8a-aa51a0565815",
        "cursor": {
          "ref": "ad14bb2f-fcca-4521-985d-54258abb2806",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0b6dd22a-bc51-4b7b-9bb5-278cb9aa641d"
        },
        "item": {
          "id": "29f0ad6e-626d-413b-9c8a-aa51a0565815",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fa1c9dd7-7fb7-45d6-aaeb-8a19ac7d1c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef3f78c-c06f-44ac-be49-ca1f7e9c89a5",
        "cursor": {
          "ref": "03e6bc27-dc3e-47ae-8c94-8374f4471117",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "81cd3b75-c47e-4f4d-8e5c-233520d72e6c"
        },
        "item": {
          "id": "aef3f78c-c06f-44ac-be49-ca1f7e9c89a5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fe9f5f4f-8c84-41f9-8873-7454f6e6818b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8acd84-ee5b-466a-b7ff-d8f99d7878e6",
        "cursor": {
          "ref": "c63755bb-128a-4643-8cf7-8096942a67d7",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b315cfb-25b8-4963-8308-c58d020b3f56"
        },
        "item": {
          "id": "9b8acd84-ee5b-466a-b7ff-d8f99d7878e6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1025eca0-8bd8-48ad-86ee-b630f448d86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002f834c-4e56-4f49-ab3e-8062d732a432",
        "cursor": {
          "ref": "f36001b4-40e6-4417-baea-554bd9053c9f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a7654c18-dc2d-418c-9043-a959f894a7d8"
        },
        "item": {
          "id": "002f834c-4e56-4f49-ab3e-8062d732a432",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "97d2d7c4-d464-42bd-85d2-6cbc43e8b972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9497695-4d27-4f71-b8e7-08acf1516483",
        "cursor": {
          "ref": "b587826a-4449-4904-a76f-42dce6a9eaed",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b96394c0-a369-468e-bfae-f1d4f2ca0bb1"
        },
        "item": {
          "id": "f9497695-4d27-4f71-b8e7-08acf1516483",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c2ba1d9d-0de4-4195-8cbc-ba78714053d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59f92a6-0135-4a72-bc0e-de782d38b63f",
        "cursor": {
          "ref": "10d2782a-6127-4264-81fc-cc522cf45994",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e8aa20f8-18e7-410c-9ac8-0d281cf99155"
        },
        "item": {
          "id": "b59f92a6-0135-4a72-bc0e-de782d38b63f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb8beaff-8b5c-4f55-a137-a9b0a1278db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9385fd84-b369-4a23-a609-216a1b07b6b6",
        "cursor": {
          "ref": "d060ff45-c35e-4158-9b01-108f5e1e665d",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9ddad178-ead2-4ce2-936d-a5d72643832f"
        },
        "item": {
          "id": "9385fd84-b369-4a23-a609-216a1b07b6b6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "02225f2b-e8cb-44f5-812d-129a1e2a7b91",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e67a67e2-0846-4eee-8984-ea89d45dae92",
        "cursor": {
          "ref": "63efb0e3-a361-4db2-9c13-3fbfafacbd5d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "59b5fcb0-68d2-44ce-96c2-8b11c17ecc70"
        },
        "item": {
          "id": "e67a67e2-0846-4eee-8984-ea89d45dae92",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "28aa5eab-4c61-4085-8c1c-237e5483114c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "bb902ea9-4139-4d14-b206-bf1e94cef6b9",
        "cursor": {
          "ref": "2c6e429f-7da8-4008-9e9d-47af80e72b5d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c1c43b6a-47ab-41f6-bad5-9381cc0e00e9"
        },
        "item": {
          "id": "bb902ea9-4139-4d14-b206-bf1e94cef6b9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "704b979c-01ca-4105-af0c-0d05209bb667",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6bc69f71-9d0d-4b1e-a7c2-8cb43ba15190",
        "cursor": {
          "ref": "d754fd4a-26b5-43f5-82ee-88edc9dafc11",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b000153d-2e78-4528-9472-a062dabcbcba"
        },
        "item": {
          "id": "6bc69f71-9d0d-4b1e-a7c2-8cb43ba15190",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fb51a73f-5e9b-4c9f-bf70-1b9046e506e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3154310b-3a52-4be0-bde8-564f2d6a8118",
        "cursor": {
          "ref": "e4546880-8ac4-42f7-97a6-b0f6b803549b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "56643b7c-afbd-4891-b3b7-e23ffa49011d"
        },
        "item": {
          "id": "3154310b-3a52-4be0-bde8-564f2d6a8118",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7f654dca-44ca-40bd-a333-fbf544fe4166",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1733eb9d-3583-4bab-a209-a4e331fe21e6",
        "cursor": {
          "ref": "85d5a58e-bfaa-4c7f-9d3a-3124305e2ce6",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "306763f9-6bbf-482e-aaf9-2f483e6eb53f"
        },
        "item": {
          "id": "1733eb9d-3583-4bab-a209-a4e331fe21e6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "58f81e2f-79dc-44c7-be7f-fd5d6da1bf43",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d595c160-6062-45dc-a1ca-f9afa0656e55",
        "cursor": {
          "ref": "9145eb99-dcf8-441e-b997-bfa1833f39eb",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dae683f0-3228-4a55-9e44-1fafb8585100"
        },
        "item": {
          "id": "d595c160-6062-45dc-a1ca-f9afa0656e55",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fb8f9b2b-a081-42d1-b136-76dc5fa9c4ed",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2470363e-c800-4c6c-9740-ce5dcb64fa69",
        "cursor": {
          "ref": "f46ebb87-8cb4-4787-a7dc-31004cddff2a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f0715a59-7a9a-417b-9451-b877d82ed346"
        },
        "item": {
          "id": "2470363e-c800-4c6c-9740-ce5dcb64fa69",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a20c0c0c-0df3-4063-b226-2c512bc739f0",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fedf9d21-d846-4d39-8040-7fbb14535730",
        "cursor": {
          "ref": "608be8de-1a20-4ce0-868a-d634b02d087b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8625b00d-4bd5-4758-92af-fc909fe260e1"
        },
        "item": {
          "id": "fedf9d21-d846-4d39-8040-7fbb14535730",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "347743e1-ad39-42c1-a21c-497c453613f3",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e536f6b9-554f-4f6d-adaa-69259b3270e9",
        "cursor": {
          "ref": "4c78d899-9d21-4a47-978c-60a8277d1d47",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "04f08727-07ad-4b6c-9bfc-b2e64ec6f25a"
        },
        "item": {
          "id": "e536f6b9-554f-4f6d-adaa-69259b3270e9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "648b4048-cdaf-4871-a016-479c7b2da45a",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "75e22325-5537-43c3-a49c-66950c0661b8",
        "cursor": {
          "ref": "00121339-9b0d-4517-9295-80af8fc2a137",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cd8ed097-9836-4638-ba66-ececd0ea605e"
        },
        "item": {
          "id": "75e22325-5537-43c3-a49c-66950c0661b8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aa76266c-f2e5-436b-9ef5-cf02454ac705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698feb7b-3f45-4c96-851d-8e5c51dbe0b6",
        "cursor": {
          "ref": "a179afb5-6cf3-4d25-af03-3a429ed3a2e7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "025157d0-cc7d-46c5-ae27-61aa5d34efc2"
        },
        "item": {
          "id": "698feb7b-3f45-4c96-851d-8e5c51dbe0b6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fe7d88ee-cd09-4213-bfa6-7de58a34248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2750e2f2-9017-4d16-a410-788ad523019b",
        "cursor": {
          "ref": "4373ed1a-0044-4906-a53a-9d5f26c5c7e9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d50b3d59-62f8-4eb8-9bb8-603dcf56c4d0"
        },
        "item": {
          "id": "2750e2f2-9017-4d16-a410-788ad523019b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b8af1bfe-a6af-49f7-95c4-15ff910b0e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8257ff-96f0-4961-a624-ea6c8aff0c93",
        "cursor": {
          "ref": "faa11020-965b-4aee-bc28-17d1f8347c21",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "35f1802d-d0b9-4824-96db-5d5f95bd79fd"
        },
        "item": {
          "id": "3f8257ff-96f0-4961-a624-ea6c8aff0c93",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b4e34556-3e2a-4609-86d1-53e15411de4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0cce14-7a13-43f3-b117-6ecf0b382046",
        "cursor": {
          "ref": "f3853b5a-6f28-493f-b29f-105de9324950",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a95389be-c46e-43cc-86d8-d2eec160d8d6"
        },
        "item": {
          "id": "9f0cce14-7a13-43f3-b117-6ecf0b382046",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "649f7ae2-9b27-496e-b7e8-7e5ac059896c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce5f812-2662-4acb-a173-dd08cee15b2f",
        "cursor": {
          "ref": "14f4ae3e-3c9d-40f1-a527-29ff47947bc1",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ef3298b4-f30b-4bb3-835b-57f473001057"
        },
        "item": {
          "id": "2ce5f812-2662-4acb-a173-dd08cee15b2f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c93bce81-3383-4006-80a9-d4afe4d53bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6d29f0-a931-4275-9125-635b029b1dce",
        "cursor": {
          "ref": "ba476aa2-7754-4b2e-b8cc-c0b4349180ca",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "69179108-23d3-4c97-8b40-b7b39122e7f3"
        },
        "item": {
          "id": "ff6d29f0-a931-4275-9125-635b029b1dce",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dc02da8d-1c0e-4fc6-968b-453daa38722f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb17d1b-0b67-401f-ad27-d8bf363c6008",
        "cursor": {
          "ref": "e91b3448-6813-4cbc-86c9-bf0876e45c46",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5896316f-bc66-4232-9104-78f7216f58b9"
        },
        "item": {
          "id": "2fb17d1b-0b67-401f-ad27-d8bf363c6008",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e1f225de-db8f-4fdb-9df4-3b4dc02fa2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d43a75-a717-40af-b4b5-99b024608cdd",
        "cursor": {
          "ref": "73f563ec-5f74-4de5-8fab-a3a01c7dacfc",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "291d287e-46bc-49d3-a311-bff6a3b97315"
        },
        "item": {
          "id": "91d43a75-a717-40af-b4b5-99b024608cdd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "063d436f-d520-4c82-a698-a1392e6b59e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31bcb4e-8aad-434e-95f3-962582fae0b6",
        "cursor": {
          "ref": "271e2aae-a31a-46a0-b3fd-8f34995a1f02",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "aa8228e8-af24-4eb7-8e18-5f7bb2e6bf14"
        },
        "item": {
          "id": "a31bcb4e-8aad-434e-95f3-962582fae0b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "729be3b4-454e-491d-a5e8-e38bac1bf434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f57f112-6b34-4920-8fc0-5567c9b672a5",
        "cursor": {
          "ref": "bba81b46-02a3-4bf3-8446-badaf3a7964f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "46b3c987-2ba4-44ef-8e7f-9251b56bd45b"
        },
        "item": {
          "id": "8f57f112-6b34-4920-8fc0-5567c9b672a5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2062f60c-1afa-4618-a303-962e411a6839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759f55d9-0ae2-4305-b986-d87261a2bc33",
        "cursor": {
          "ref": "b749a39d-5f44-494f-aae8-66ab218728ae",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a01cb22c-d755-43c1-991a-3cac4eb50b75"
        },
        "item": {
          "id": "759f55d9-0ae2-4305-b986-d87261a2bc33",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "41c20eff-61ef-434b-aa12-cd3317f5d684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f98c61-fd45-416c-968a-1247da81c56c",
        "cursor": {
          "ref": "8d2df27e-2f1b-4b2a-8b15-642a9d1a167a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2501111e-87b8-4fcd-9ef9-94d63590c070"
        },
        "item": {
          "id": "d2f98c61-fd45-416c-968a-1247da81c56c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c805368d-d038-4f0a-bc5d-e849c78f2f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958aba07-4055-4199-ab6f-990025f65086",
        "cursor": {
          "ref": "326759c0-f1a8-43a7-a3f8-e66c40391b02",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eb3df208-520a-4530-b2f4-a2ee3b73ea69"
        },
        "item": {
          "id": "958aba07-4055-4199-ab6f-990025f65086",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6c6f0ff7-6508-49e8-bab5-641c78850a83",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0055220f-a992-4d8c-bd96-bf6875aa8129",
        "cursor": {
          "ref": "6aa2d1f5-a762-4a88-bb63-2668392cfc0e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d2fc7114-6ebe-4fb8-bfbf-aee5fb3ab348"
        },
        "item": {
          "id": "0055220f-a992-4d8c-bd96-bf6875aa8129",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "710b826d-e66e-4765-86a9-2d73df3d6ca5",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4b65c450-6b65-49fd-ba03-11fd275cb388",
        "cursor": {
          "ref": "479a53e1-3a70-416e-8d7b-e815815bb623",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a875f82b-5b39-40fc-b684-9ef55c6da527"
        },
        "item": {
          "id": "4b65c450-6b65-49fd-ba03-11fd275cb388",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "23244071-d6d4-4b6e-b074-bfa97610df6d",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8c01f48d-c2e8-4bf2-945a-44207029ef77",
        "cursor": {
          "ref": "e0013ab6-2657-45f7-9d7d-cd27e9014a17",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cbd7a9f4-d096-4850-86db-deec327c55ec"
        },
        "item": {
          "id": "8c01f48d-c2e8-4bf2-945a-44207029ef77",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "01e299f1-161f-4de0-bbea-e6b595a277fa",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f9c995f7-2009-40ea-802f-5c0e9186b1ae",
        "cursor": {
          "ref": "aa13c7bc-8e4e-4d5c-adee-f68c9257be36",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2a16fa09-37a4-45fe-9a30-f26b9402970d"
        },
        "item": {
          "id": "f9c995f7-2009-40ea-802f-5c0e9186b1ae",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f782b2e-4dc8-42d3-acdc-17a0f50114a3",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "02b07df4-fff4-46aa-92f4-fd7516fe75b4",
        "cursor": {
          "ref": "8e40ebe0-66c7-4136-9568-67e30d2a6f02",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a80d1aa-2e23-464f-847a-d934d5aeac64"
        },
        "item": {
          "id": "02b07df4-fff4-46aa-92f4-fd7516fe75b4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dfc62f4f-1c7e-44cc-af28-bc776e2fe052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b6c41d-620a-45b8-b9d9-fcc321b3440f",
        "cursor": {
          "ref": "c2b2abb8-21ca-49bb-98df-f05d62ca61e1",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f5fdeb68-9234-4680-b5cb-739220462c68"
        },
        "item": {
          "id": "71b6c41d-620a-45b8-b9d9-fcc321b3440f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "775f69ec-cf11-4e54-a756-0219ec526f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cec9eb5-5adb-4e46-a2f0-3a34ad80b29a",
        "cursor": {
          "ref": "6e46c3a5-04c1-45b9-993b-811d50f280be",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f3d1c960-49b4-47a8-bf5a-355df426ffcb"
        },
        "item": {
          "id": "4cec9eb5-5adb-4e46-a2f0-3a34ad80b29a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e197bf4e-ea95-4901-ac74-19cec835a6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb84737c-d586-4952-a379-68ec973684de",
        "cursor": {
          "ref": "33f27b91-ffc3-4d70-9619-6ad3c42bab25",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28891eaa-085d-45d9-aefc-5c81b0b14825"
        },
        "item": {
          "id": "cb84737c-d586-4952-a379-68ec973684de",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ef446b7f-c269-4b6b-b6bb-e7946ec2a647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665af236-78a7-45d8-bc27-745cbd2e81b7",
        "cursor": {
          "ref": "610f087a-734c-4f22-8a2e-f245a5e0d392",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b9172840-1eef-41c0-a5ac-eeb4d728406b"
        },
        "item": {
          "id": "665af236-78a7-45d8-bc27-745cbd2e81b7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2e6f2a0f-139e-4682-a2af-9fa79f369dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934c26a6-6456-4197-a606-0ead72a849e1",
        "cursor": {
          "ref": "b04920e4-2626-49d0-b3c3-f19c4cfd53d5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "43dbab5f-b624-4dcf-8c1d-93fdbb163407"
        },
        "item": {
          "id": "934c26a6-6456-4197-a606-0ead72a849e1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b57fcd3e-950a-4942-acfc-44596d4cd637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76daa649-8dcc-45c7-a744-77540b2fae84",
        "cursor": {
          "ref": "a8205683-2a1f-42d0-b31a-d7d61dbf50b3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "17f3bd92-99c1-4974-9933-30d12fcd63c2"
        },
        "item": {
          "id": "76daa649-8dcc-45c7-a744-77540b2fae84",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b0757c09-f721-4b11-8224-31cef28892bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ea211e-bac9-46ea-a6b5-a254d402d2b5",
        "cursor": {
          "ref": "986aacda-0591-43b1-8845-01a3fff36424",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6cd66288-341f-4b78-b2c3-48ff4d921e58"
        },
        "item": {
          "id": "43ea211e-bac9-46ea-a6b5-a254d402d2b5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b3d48334-38de-48cf-ba7b-00f6af8514bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d8b2fc-d14f-4350-843b-46d7a6f5c3cc",
        "cursor": {
          "ref": "78c67726-8aed-4288-9ba5-94f545a23b3d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8c411727-1b54-4064-bccd-30c705be072e"
        },
        "item": {
          "id": "27d8b2fc-d14f-4350-843b-46d7a6f5c3cc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ca5e274f-0d28-4b9b-ab9d-1da4990198dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe3cb03-b747-450e-a18d-a9cdd39579f2",
        "cursor": {
          "ref": "028f7dc5-08d7-4c73-80aa-7853cd5a0813",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd31f882-a3b0-46b3-ac43-897dbd9109c3"
        },
        "item": {
          "id": "dfe3cb03-b747-450e-a18d-a9cdd39579f2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e6328acb-4f3a-4ab1-94e2-0b29d25fcc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884dedfd-b988-4169-a13f-5cde7de39015",
        "cursor": {
          "ref": "66754790-8b20-428e-99f9-e38a48fbe66d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3661b457-0fb3-4deb-8609-95d1c770ec57"
        },
        "item": {
          "id": "884dedfd-b988-4169-a13f-5cde7de39015",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b995a172-8a57-4a73-a2ea-8ece442b4112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de78342-0620-4215-aa2a-519ba8740aba",
        "cursor": {
          "ref": "74867091-6030-4a40-b91c-63aed486e301",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f1870e69-e144-4e1d-9c3a-5a9dce0a5e3f"
        },
        "item": {
          "id": "8de78342-0620-4215-aa2a-519ba8740aba",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "03eb2185-680e-4c29-b085-87d130e87c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8a26b0-3a59-4c0b-9251-ac612178f332",
        "cursor": {
          "ref": "c4b35a56-f1d6-4645-b12d-8d68fbeed088",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5a601064-d203-4490-a534-b1bf4cb99bad"
        },
        "item": {
          "id": "5a8a26b0-3a59-4c0b-9251-ac612178f332",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6d646d19-7f17-441d-94f7-363b24b734e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89ae7fd-cd06-43e0-aad2-3edfcbcbaddf",
        "cursor": {
          "ref": "7929abeb-4294-4524-910e-538b1fe468ea",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3ffc8c60-1316-4eee-92b8-ac567d1cde6a"
        },
        "item": {
          "id": "e89ae7fd-cd06-43e0-aad2-3edfcbcbaddf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50335723-ff57-4a3f-9ad1-426ac612a46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e2bc01-3a23-4cf0-908f-68116c86dd06",
        "cursor": {
          "ref": "bbaf4f7c-dbb1-4aa7-8a70-381aad8fad14",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0271c7c1-e890-4904-874d-c18e30ce7774"
        },
        "item": {
          "id": "75e2bc01-3a23-4cf0-908f-68116c86dd06",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c40f2218-62cb-4314-b153-701c8cbdbccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152097b6-2fcf-4b6a-a8fb-705cad5a49ae",
        "cursor": {
          "ref": "ad100148-8705-40c1-b989-c8b56dda96eb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a3b38281-8398-4d0e-bddd-d99b0f22a6de"
        },
        "item": {
          "id": "152097b6-2fcf-4b6a-a8fb-705cad5a49ae",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7da4ded4-2654-4620-81d5-2a61bdd2df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420d4fe5-532d-47cd-ba4a-610452b5b2d0",
        "cursor": {
          "ref": "31e1e447-81a8-489b-a966-2183b43655a8",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8e831634-1f5b-4b95-a132-c1c14805972d"
        },
        "item": {
          "id": "420d4fe5-532d-47cd-ba4a-610452b5b2d0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ef14e68f-55cd-4312-a24e-49aa8db0a6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9381f8a1-1944-4b3e-b4fa-b942dc5a8284",
        "cursor": {
          "ref": "cc6cd4f9-d286-4c6e-8fd5-b1d0d29dc39d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c9b5da7f-a8b2-4a53-89e5-5a9375549925"
        },
        "item": {
          "id": "9381f8a1-1944-4b3e-b4fa-b942dc5a8284",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f810e577-6928-4578-9240-7147d66a2a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabb82cc-d44b-4655-b7a0-a1283d25dc58",
        "cursor": {
          "ref": "9af567be-9aae-4c0d-a355-038be2ca04b3",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f6f86c44-747c-484a-adde-f3f318dd297b"
        },
        "item": {
          "id": "dabb82cc-d44b-4655-b7a0-a1283d25dc58",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6d4d5a7e-c791-440e-94e3-6e12e4af7c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3143aa4-80ac-432e-a20c-2b466665427f",
        "cursor": {
          "ref": "c7a154de-fa5d-44ed-ad6d-87dafe3872aa",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "abd0dc01-867a-421c-994c-04c7af819cad"
        },
        "item": {
          "id": "f3143aa4-80ac-432e-a20c-2b466665427f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1cca8cc7-30ac-4cf1-9d2c-62d49371ea6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9665fa95-732b-4e4d-8e42-97d245f19fc1",
        "cursor": {
          "ref": "419bed1c-196e-47b2-9185-27432c7ccaea",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9fb5876-24bc-4626-8754-f115293e1361"
        },
        "item": {
          "id": "9665fa95-732b-4e4d-8e42-97d245f19fc1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eac97533-df35-4aa6-98fe-cfe4e7322c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2c7dbc-933b-4b3b-8a1e-5bd97186fa35",
        "cursor": {
          "ref": "8735ed01-ed0f-451e-aa2d-ae9cfa20c388",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b1865b55-3905-4ee1-82ec-327a6b3ccc5b"
        },
        "item": {
          "id": "0f2c7dbc-933b-4b3b-8a1e-5bd97186fa35",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0e7f13d6-6043-4f68-92d4-b18e1131e5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0109f1-1964-472c-901c-36f50e376710",
        "cursor": {
          "ref": "53507707-67a6-4045-8831-e9fd28304e2f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4fb772fd-4a7c-4b72-ba52-2fed1d17a1c0"
        },
        "item": {
          "id": "3c0109f1-1964-472c-901c-36f50e376710",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eb275ba3-d0f1-4cc8-99ff-8f6d9c9b99f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e124bd-7579-45b2-8c0a-b8e44b45493b",
        "cursor": {
          "ref": "7d8bd880-0862-4912-af51-ce591f3d4261",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4e3e65db-8a72-4da6-b018-fd7e36ceedd3"
        },
        "item": {
          "id": "59e124bd-7579-45b2-8c0a-b8e44b45493b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0ec6f1bf-0d57-401b-bbeb-29dbfa873b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16878974-f9e4-4341-852a-ce29d47b4e9e",
        "cursor": {
          "ref": "26cf36c2-97da-4ad1-a7bd-2ec588154a1c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0c88a1d6-fdf0-4cbd-82be-44398abfa0ee"
        },
        "item": {
          "id": "16878974-f9e4-4341-852a-ce29d47b4e9e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a2e8c279-3e44-4147-ba34-e04869ff151e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0427d087-c46a-4b70-a9dc-8ccb5da1f0a2",
        "cursor": {
          "ref": "81f7ea4d-161d-42f4-98a7-e5c6a5f45237",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7c27ee86-c725-4109-882f-57378c2d4f55"
        },
        "item": {
          "id": "0427d087-c46a-4b70-a9dc-8ccb5da1f0a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cc2d49f4-445d-4aba-bb72-92f501af0ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f77a7ab-6ef0-47a2-891d-ffe722b62bcc",
        "cursor": {
          "ref": "fb6d7622-fb9f-49b2-a63d-176e86c4ca05",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a8d85980-54a5-4c11-898b-debb4fd91d6a"
        },
        "item": {
          "id": "4f77a7ab-6ef0-47a2-891d-ffe722b62bcc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "033f17ca-8fb1-427a-85bd-d17129ab986b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d971a7-549c-4aaa-a9fa-176d5fef647c",
        "cursor": {
          "ref": "e10d92e3-16c5-40aa-a558-eed05dfdee24",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f13b5df5-dd0b-45c7-8ed9-4a21f00efa44"
        },
        "item": {
          "id": "95d971a7-549c-4aaa-a9fa-176d5fef647c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1bc2d85f-a0cf-4314-bd47-4b53db64bc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ab47f9-e74c-42c8-9b74-ba0f22080302",
        "cursor": {
          "ref": "68a85240-d799-4d17-8e99-d73418e3a277",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "249a46c2-867e-44f8-911f-cec57cb5aaff"
        },
        "item": {
          "id": "31ab47f9-e74c-42c8-9b74-ba0f22080302",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "57fb8d54-174c-4fbd-b527-c610775841dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31a54af-b164-43cf-a728-a01dfa71aef8",
        "cursor": {
          "ref": "37fc00a6-e63a-4ee9-8512-403238419fb9",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f0806545-3dee-4f26-a1c8-b831531ee409"
        },
        "item": {
          "id": "b31a54af-b164-43cf-a728-a01dfa71aef8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7c59e7af-d3b8-4739-99c2-2460c0dac256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dbc1f9-e20d-4268-aceb-c1488939416c",
        "cursor": {
          "ref": "591eb391-182e-44b8-bf0b-7ccb6ec86ba0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c0340c2f-5fe6-4a21-8070-c4b46a5b8e7d"
        },
        "item": {
          "id": "18dbc1f9-e20d-4268-aceb-c1488939416c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "db616bc8-3106-41c6-9352-aa4ee7d4b14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc46bdba-ae09-4f83-a6c1-3ae0f7e5d670",
        "cursor": {
          "ref": "c74660b8-8bc6-40da-b3bf-6c7f0a33a19a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9225a0ee-2c1b-4e6b-9663-beea8a7d8d71"
        },
        "item": {
          "id": "fc46bdba-ae09-4f83-a6c1-3ae0f7e5d670",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "849c6ae4-c83c-4d6b-8be5-2f4cc0974212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70e39cd-2e54-4365-9b7a-bfa6aad1b7d2",
        "cursor": {
          "ref": "58df40d1-c34e-4e8d-ab93-8095ad039f1d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "dce7322c-b461-4ca2-8fa2-59e76dbb6c2c"
        },
        "item": {
          "id": "b70e39cd-2e54-4365-9b7a-bfa6aad1b7d2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7bcea99f-b7b2-442d-9084-593e2fb27386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c057cf4-0a4d-47cb-b971-25b18cc9b6d9",
        "cursor": {
          "ref": "9217a798-0246-45c3-9689-ac3a2f5576f2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bceede4a-aa4c-4825-b8a6-5fbf787720be"
        },
        "item": {
          "id": "2c057cf4-0a4d-47cb-b971-25b18cc9b6d9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4136a781-c84f-4489-9db5-ac2120b62b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8bf1e8-e777-443a-8446-c7680c14cb69",
        "cursor": {
          "ref": "f239abc9-0572-48ad-a2c7-62d8a54a4205",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6489e561-a9bd-4509-92d7-fa5c4ffd6432"
        },
        "item": {
          "id": "cc8bf1e8-e777-443a-8446-c7680c14cb69",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6c34922-4eba-443d-ac0d-506755add22d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258a1016-d841-4c66-bd17-bbceaa9a41a0",
        "cursor": {
          "ref": "0357fd49-eaba-478e-a0d8-b76cbbbc61f7",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "bd4ef588-9313-4702-98d6-7fbc8e9ed37e"
        },
        "item": {
          "id": "258a1016-d841-4c66-bd17-bbceaa9a41a0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9f3c0ed4-8d91-4c12-aa02-f36ff5520094",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "66fc6170-dc3a-4cad-8636-6b33c30bf4ed",
        "cursor": {
          "ref": "0a1f8050-3b70-4315-acce-1cc38814c137",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7945d907-885a-4f95-be22-b0864ea47420"
        },
        "item": {
          "id": "66fc6170-dc3a-4cad-8636-6b33c30bf4ed",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b2e4fb00-3240-4240-966e-f01a168f1fc4",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "721b2c73-d55e-4b44-a50b-c4caf3ea56a7",
        "cursor": {
          "ref": "bea0a548-c9b9-45b3-a0d1-4fe68807c773",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "79331ed8-b565-41d9-ab28-0f6651ec37ec"
        },
        "item": {
          "id": "721b2c73-d55e-4b44-a50b-c4caf3ea56a7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "54e4d6aa-0080-4e9a-ab30-0bdd0face4d9",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f41d6d-92be-4569-8057-e8bb132080e1",
        "cursor": {
          "ref": "2f5fa4d9-e1d7-4970-9157-d975306c99ce",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "afe7f069-9b90-437e-b357-0bf6e4688021"
        },
        "item": {
          "id": "d1f41d6d-92be-4569-8057-e8bb132080e1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5c2145a-f8a7-4ad5-9856-dcfaf6c3397e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f41d6d-92be-4569-8057-e8bb132080e1",
        "cursor": {
          "ref": "2f5fa4d9-e1d7-4970-9157-d975306c99ce",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "afe7f069-9b90-437e-b357-0bf6e4688021"
        },
        "item": {
          "id": "d1f41d6d-92be-4569-8057-e8bb132080e1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5c2145a-f8a7-4ad5-9856-dcfaf6c3397e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26025e98-538a-43ce-a1df-84a70cbb25ca",
        "cursor": {
          "ref": "a785bbbe-7e92-4c7a-a508-5f86a99c743b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "605844be-fe8e-4a59-877d-75208fd473c0"
        },
        "item": {
          "id": "26025e98-538a-43ce-a1df-84a70cbb25ca",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d5e672f4-0c8b-40e6-9cbd-76bf60c90e5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1a8cd4-0504-4165-85d2-3662ce991199",
        "cursor": {
          "ref": "86f54f82-0ca5-44c0-a33a-1aaf64538df2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ea068ae4-be27-4428-acc9-ee6b0e3db6a5"
        },
        "item": {
          "id": "1f1a8cd4-0504-4165-85d2-3662ce991199",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "64a6191f-aa36-44c4-b206-00b8d21882c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}