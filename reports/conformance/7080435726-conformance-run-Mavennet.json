{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9b4b09ae-48c9-4628-9ac8-0a25c2a99099",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5acfe9d8-69da-45fc-ba76-de1530f7a442",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dbbaccf-c338-4ca7-afc2-a7f74607d94e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5bbf1181-365c-426c-a5a9-097d5221ef63"
                }
              }
            ]
          },
          {
            "id": "6058bc07-7418-4e5c-aa09-eab50a44ab47",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27c32a8e-2f3e-4506-bf28-d97fc26959b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5796ab21-75e3-4bee-90ec-f8f812db9a3d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "69b562ff-bb46-4ef7-9720-aa7286f3e6fd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0185f714-95fc-4029-859e-addda99d7c81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4235db81-9ddd-4208-aeac-b3c6a175aef2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "813a8811-649d-4303-a1ba-0ab05ca56208",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05b3811d-b933-44fe-995e-d72bd67611c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f367fe65-42bd-4b5c-9ead-db1943b67e9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fada9f52-ccb8-4516-a028-1827cd39d2c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "694fc770-3d6d-44d9-a385-d5da73aea1f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3fc8bf94-b47f-494f-a977-19e569970c98"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a7137d7-53db-4542-9901-41240e82f891",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "adf6d658-8f95-4636-b276-2660d2122bbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a724418-48f3-4fb7-b195-f8b6f8a8e57d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea81eca1-4791-400f-9ae4-d46a77d3ebcc"
            }
          }
        ]
      },
      {
        "id": "fac59999-fbb7-4a8e-8d20-22aa3e26cca7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "23323164-1e67-458d-8953-a4fc8882a250",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0220951-4586-4f2e-aa4a-a7a5ef0b5706",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b06076c-f491-4701-b1e6-29c7e896a5db",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdc4ed2-fca0-41fb-b22b-4c9d7addb8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e7ab707-1f27-4dfd-8830-7f5ebe9a5534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecbe323-105d-411f-945c-2c1fb7dc05cf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13216c8-400b-4d3a-9182-ddef05c0cb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "309bafa1-d9db-4338-acbf-2155cf3fa33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca962db-bc9b-4f79-8fce-dcd43d70633c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2163a34b-7680-49ba-a143-fcf4c2f8cca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad9da313-d543-44fa-b5c8-d9f3b969f45b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "634e49bd-2746-44ca-b5de-4eb29463efa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d17a5b9-7eef-4d70-b39a-0b78a33cf3ad",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e28d84f-04d1-4919-8119-1996682d63f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "063e1e2e-9923-4881-8b7a-8c62b43ead34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c1afeb-5553-45e2-ab8e-90886fa0d736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0ea448-7828-4b48-965e-b34780b30318"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0bfe077a-cf4e-4b58-922d-3554733b7497",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8caff5f2-b530-453c-bbda-649121a93319",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "711a0a61-0801-4687-a3b5-f3ed98cf6711",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "159878ef-f120-44fd-abb0-425f2e74e10c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2df37444-73db-4c40-ba42-b146f3138291",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "12f0ce3e-8f90-4655-8e1f-3d284d2c2384"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "746c3b5e-b40d-4469-ace3-dc81928b27b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c6e3244-d992-405a-bfb7-e7814bd5c8d2"
            }
          }
        ]
      },
      {
        "id": "e39db117-e61d-4c07-8ae8-3db8153115e3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5ec27360-f3ad-4b8c-827b-5e45f24b7c74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5088feda-efa1-4648-b7a2-1af5ba4f928c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f414eb0e-7cfe-437d-9392-68f36854463c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e61bad-4766-43e8-b4ad-734e765ce6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd518fb-c059-4ebb-92b4-50650120874a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e615a91-4455-4268-8af7-4b29939d4595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe30b3b6-5550-4fd1-8c73-d2734036bf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fc1f2e-d97a-4698-858d-4cda9d4ee6a4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21879980-332d-41b5-b156-b8f921b4fffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18953ed7-9bc3-4a67-9972-06bcfe68acdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560dc848-c7c5-441e-8a9f-5e4865cf5fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76416128-6af3-4c09-b682-118931b33c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423efc8f-93ae-4f2d-8d3e-d5ead035d63a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dd3515-2629-4839-b2b1-2415bfcb82f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8c3bf0-85de-4a4c-9405-45124f8294ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d2c272-9e4b-497c-9e06-c37934669f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84670377-cc9e-4259-86b4-6a7cded7923a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c2405f-68b0-4491-aa4e-7bdff47dd926",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11efcec7-5692-4d29-8cd9-ad89378cd86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a7f5e3-e53c-47e4-b03e-b798586ecf31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c7769f-9d34-4073-8639-86d608124526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7883eac8-78b0-4cd7-9eec-669190ab702c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e75d12-5333-4827-8e32-1f3d6073983d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db20a5f-b7b6-4ad2-88c7-37c5cbccb1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583158b1-2fb7-439c-9fb5-0b0c6db3888d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886d39b9-540c-46e4-9a9c-bbf24073bff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc49d9e8-b9dd-4a21-83df-12e4d84b4636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f50de0d-296c-4379-b3bb-86e737b5f75f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af80da89-d847-42bb-bd5c-cca2f776bda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd072b29-fe5d-477c-91af-df5d17989be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c823c7-b310-4011-afc5-d6937ad0a60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f04c7a9-b769-49fb-a383-aa7779fde495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93fa84e-368d-464b-96bb-e2e0f724136f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e594b725-ad08-4007-9d2d-ed3e8a3b3fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e6f75a-2a00-4741-80f8-2ee9b9fbc13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a05288a-ec60-4db5-a717-eb6c1791dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7bd981b-97a7-463f-98f6-58f556f03862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8895dc3-dce0-4a0d-912f-60e48c8f0ebe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c5b1d3-a553-415f-8dbd-9b424c35ed78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981173e8-621b-4b81-9161-56aa789950e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbe944e-6271-4c04-802d-f06a5c7e3f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6face75-4a6c-407a-884b-500e24d3f628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4b3075-ebd3-43d5-9315-a089863bbf3f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c87234-ee28-4ad3-bc76-a4c39944ad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85a21cd-d3c8-4801-88f9-a33751a9e757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34af74a-b4a1-4eee-9b42-0d5011cf3daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f84c211-1c80-47b2-9a2f-7fe838c096c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ca8c1a-9c0c-4471-83eb-1d1fd39d0211",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65caf412-a36c-4140-b816-10094a33d2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20fd261-b98b-42a7-8a8b-82d505038166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8496419-784d-42cd-9673-fe1e7d71e5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2891af12-42a8-4f56-b933-79a3044d28d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47917adf-1b65-41fa-9f8f-174d6dd2f91c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a51344f-22a6-43e8-a891-1c04e69c4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5899e52-086a-4fa6-a4cc-741026098b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4653646-4054-4f4d-8c65-74b5ba38e3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a2f2b93-82e8-40f5-a785-412ddc54999e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481a7e53-297d-41b8-bbcf-9d903d9e5310",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e326ac1-ba72-4caa-a0ba-8979f54d7b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee319e28-f08e-4ced-80c6-8bcf7f1d4ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5785f523-3153-43a5-9022-0bbd1546e05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a9d0401-79da-4f8d-a4a9-88da31f5ed8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803befe8-4ee0-4d7a-90dc-682e216676b6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fae6f3c-e963-4ac8-a40d-f39595eb0f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47accd6-7d37-45f2-ab2c-74a7eb5b5a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab05176-89af-4ff6-81d2-9bfca5ce1793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9253463-2bf3-4306-9c2d-07ff8a9eb050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deea7066-5914-47d7-9204-1a1013d88eb8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a940ba5b-56f0-4544-8dd8-27c8897b4c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a7e964-72f4-4dbb-b3cc-94c7bd517c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936cd7ed-391d-469e-b47e-b0643765ef46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa34b6d7-fad7-4273-8d8e-1b9fd2ff4433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fa2153-d004-4d30-aff2-49494f326c75",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63edfd76-cc9c-481d-b1b5-dfc772bb96c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c80d9e-3c05-4899-adcf-0a8194c06de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21acadac-1aba-4c74-910f-22e50845995b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cc3e324-ecdb-4782-a181-ef4b75ae8c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f2cb91-dc12-4d6a-b2fc-b92a192fe4dc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000b5321-f528-4a44-bfda-e502780ae419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8d62fd-40f6-4cc6-8d4b-e18993e1a734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40df3ea9-3de1-4ae6-8c29-37b4f68cf55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62cf2fd7-4ce9-41ef-b564-7bf7050370bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19530b87-d77c-4033-b84c-d8158aeafcf7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a77da5-8df7-40d2-8c10-2b643b739c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1539270d-82ba-4dbd-9d70-48d4a03e6c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ced664-d266-4097-87fa-7c01163e6d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "540a3c13-4e2e-4c87-a243-004e49c53c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a403b084-79fe-4f89-986d-6956ed146427",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1162663-4f6b-4254-91a5-53489ad34601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35035985-4b75-4184-9fe5-32982dd9b7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8a9b62-b75b-440b-9665-26744963106e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a18992b6-19bf-4b9b-b303-91fd957b1a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882ab259-ce53-4f76-ad06-472a381d53ea",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe195bb7-df06-44e5-afa5-9dd9b2d2382c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d4a5bb-2dc3-45e3-9ad1-e3c90d2537ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe9d369-77b7-4e71-8d1b-e7e2d74b1d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25961823-3bab-4c2b-ad31-2f6ad525e21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1a1fa1-bbc5-40b1-b6da-bdc0ae9f78c2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2aea5f-60ce-4af8-bb01-d875356ca30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07d2a9e-f62a-4abb-a2fc-04aa4fc11a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83673562-c63c-416d-bc33-c3dbbfd03cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "309270f1-628d-45d1-b617-72a3f26076c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535a5038-9e92-428e-b018-5dcf6e5bec15",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ffb391-1570-4b5d-9a1d-bb902c17a182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54de35ed-120a-4461-8029-390c1b173f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e9e1af-1c13-49c6-bde1-c61ac3eeaa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe68563-72d4-4eeb-a484-72a74f23a93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1b8d5f-590d-4ff0-b1a4-2ebc13d50d96",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b302f513-5ea6-4c44-ad2e-de9bb32b8250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c901367-25ab-4fcc-8569-d58094dbac0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba984a7e-7d79-4c4f-9ccb-239b19b3adda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e547cefe-e8bb-46e3-a926-d72a0999667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad105d47-f18b-4ae0-bdc3-3f3a050bb7a7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af73cb7a-5ac3-4455-95bd-018a3a1d1b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e32a18-abeb-4bc2-a727-c7bba6a1d545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd4350e-c24b-46d2-bfce-b8643f2689c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58e53bee-fccf-4a11-8de3-da12ca21a661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c68e72-8f90-44cb-a197-2851067473f7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0061685e-6da6-4851-8f60-15eeeeb52ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab5a929-8fbd-42c7-be0e-1f5b5a2bf628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5a6f3d-be39-4b96-a8c7-8465a54a0b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "892fc504-1a66-4e0e-93d8-9be6a8fac572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b06fe-f99e-4f85-b79d-56d03c921230",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0762ad7-4f10-41d6-9400-827b5faacb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5473075f-fc2f-4075-90e0-4d7351f2ad21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08aecd84-cbf2-41e8-901e-5512bf63005c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "169f7eca-eea8-45e6-9bb4-c27151fa5c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a8698-c356-4368-9f36-e66c285e8ea8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db4d37a-4462-47d7-aa69-c2572a9664c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6effbf56-ec6d-47ed-a0b8-653fe1151968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61de8e32-54b1-42a9-9a47-d361260ebeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f888fe-2864-452e-8de6-33fd12f677cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd2bb68-488f-4ade-914b-4cee108f88b6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce35893-2226-4b97-981a-72b84f4f6b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788b427e-3c79-473d-9131-bc864d55327e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca23c61-7a2c-4aa1-a26c-9045d2c1d0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25c2c0cb-aa45-44f6-888f-1a4e961d22a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a70442-1e1c-4434-bcdc-e5b436a6e0e3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2d0f0c-6fbc-4b32-841a-614e0654a161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496d5079-0e2a-4d2c-b211-77129d3dca4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c3cb3c-8b04-4b35-8403-257d4b3d9a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6dfa793-2b5a-44e1-8118-fe4bbb4670bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba84ecb-c6c2-45ab-9734-b734bb497dcf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0a854c-0ebf-4e43-af6e-73c13013500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09aaf83e-3ce3-4849-b428-eba74a70d842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff69e549-ab3b-4add-8ca2-7736fe1b7e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1c5c43-c145-402e-8d71-ee733ae7f780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efae1726-35db-4974-8b72-cd0556785cd2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78106ad5-9785-4bb3-8c5c-6f4f0e6a8683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6750cc-3f8f-4c59-b103-c1f35abade42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f278a95-1679-48ed-aa61-84e95b5d252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "090c8c90-0f99-4fa1-b901-4559b50b25e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d99271a-9235-4335-8640-e2f659b18297",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0d933c-70f7-431c-9a87-fcffc489362e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa174de-6a72-4792-adbb-f304fc27c22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4842ce-a1bd-446a-86e9-2289895cf548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f89c0432-f8ee-4327-886f-f7a35f6cb65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afec1b76-4808-4daa-8a6d-9d8d915dcffd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80ad330-2af5-4e5c-ab62-1aa86fe39ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd783853-0ad5-410a-a0f3-4709a2a6b2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de2c02f-c7ef-4ff6-a774-7bd794d84459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5e241d-f676-451f-9210-5230f24a6664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5a32b2-ebcb-4d45-b57f-c4c7a1d3adcc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36ef291-5436-492c-9577-65083948c81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f233bb-94c7-4487-8caf-7341d3892566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399052f2-4379-4df5-b64c-b097cf51f436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bd6b33-56fe-4552-be86-3966a16c7c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02636292-59e9-4fac-8378-6c202e6a4aa8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de15c451-ca6d-4401-a79c-9224c3f9ea64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f18798-cb10-4dcd-bb28-c19f0ca21179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b6515d-65e9-4da9-b897-6c72e59c10ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6e8b1b-dace-40c7-8a84-b4c0cfcf50bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285f04ff-0642-4d95-9672-cf17941bd8d4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0801da4-1ec4-40c4-9664-dd573585ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35da3339-8a9c-4cbc-a99f-50c8a25a8aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba96b1c-8ef3-49b5-8e9d-51922acbc24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10240f5f-4ef9-4dd0-a63f-e3a4b8a66bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff36c3cb-29b7-4584-a796-5d55d1b8939e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49d42df-2190-4f55-8337-8fd4dd9e90ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4578c2a6-6e4f-4694-983f-ed979f53be16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3024fa77-7a91-495e-b09e-7cf42c37972b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "046b6171-91ed-49e9-9edd-4ff07d79a8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaf3d2c-013b-40fd-821e-95e53dc0a5b8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8d6fd9-2990-428a-b20c-58c4cd8c745a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97a1eda-8b10-40a6-abf4-7f1f9ef25ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f2328a-bc93-43c2-a194-19b893c3e2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a37d49-a5f2-4c93-ac9f-836418044237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db5553b-3171-4080-b72b-3e6e8a6612fb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdac3a99-76fd-463d-97d4-d48e283c0d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f3147fd-2f24-4ff2-b354-f4cd504e5951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29e128c-6e53-4e50-8ab9-c86b341b9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab36933-6f95-47a2-a4ae-91c5bccd0f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c53c5f-9fe6-4dc2-875d-711d91f52ea1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4267e3d5-87f4-4a73-b0ba-31fd5e6f2283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e02ce5-8cd6-4c3e-9279-5cb9e17c0e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcb4fc1-84af-4e5f-a013-e98d543bab0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4de499-24db-468f-b147-f2dda5bc51fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47d5e7b-8552-4d3e-854a-86b19c4228f6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4e0365-32da-46e9-8ab8-d1c3009069b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4eda613-f6bd-41b9-90d7-3505131ed6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8af55a5-1d05-474f-91ef-268c4507ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "426b9006-e060-49bf-af84-e8be4038aac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b4039e-9bc9-4bc2-a295-c08e15fd394f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41588a18-e0e1-40dc-a5be-7958f59885db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc6dd61-703d-4db6-96cb-277a95720d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38ba612-a35c-43d1-9057-d23d507ec56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4800bb-efc8-4d96-98b2-d2459298c638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d81d625-2974-4c73-b85e-cbb9779decb7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe6b65e-fa42-473e-8810-eeab9ffddb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf82c31-3b19-458c-92f5-84768108791b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206dbcc7-9ca0-4c56-ad97-a9f6e1972500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "77b92a26-5424-46f6-970b-f54782f3e1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e399b-3cbb-4a6e-baa3-a0f3c92f1ddd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b05974-d7fb-4fc5-a578-698d75461004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649318ce-3e38-48eb-a26f-318eb223f6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602247dd-26c8-4811-939d-55589e1421f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "de30dcb0-9589-4fc1-b194-7b0d2786b1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935088c1-b2e2-4bba-9407-1b7e739e44df",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6ead6f-0b58-4855-a627-d57f334ff9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64c5492-6018-488f-8e90-ed6cd7e04e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179aec6f-f0cd-4e7d-856c-55c7eb33213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d54c4e-db1b-46cb-9017-16e932265797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262687f7-9e0e-4d0c-80be-0d5ad9b05868",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee223fa-12a2-4be7-bb37-864574ef8cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba1f932-6ec2-4e4e-9192-bfb8288f88da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0fbccc-73cc-4cf3-aa7f-c3f0e06410e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a095627-dacd-4a54-886c-9dfb06c92b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543318ad-6f27-4ebe-bd50-c04c42be3db5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd7eae7-1be3-4779-a050-969ac51a4402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0970907a-7009-4d59-b0e1-972036d3709e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82cfb27-affd-4948-8449-8ca6eae1a284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a61bba2-0687-4fa7-92f1-a3f24b8e0a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ec6e3f-ca10-43d9-95a6-362ed8991065",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f30c7e-227e-41e9-80e9-5bf3ad100a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ef7889-468c-45d0-8158-b49854e2e233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bef137e-7a90-4933-a9c0-14e8ef009e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c182a6e3-1290-46af-8b6c-2fcbfd91e309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafb45d0-18e2-40d1-b8c5-12d5f177e0a8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500f544c-02a6-4bee-861d-28d35969fe3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be178a0-da00-4d1d-8f5b-6117389a5c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d02691-495b-4b17-b7fd-5e2f82e32fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b513bb9-9daf-4f47-ae00-233c87bea70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b91744-18d3-44a6-8c58-3841cb95bb01",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a24833-f1a8-495b-9814-af519ecf19e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1dc412-859b-4aec-aa0e-cf6a17dedde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b268e3-b9c4-4719-83e1-6f02e876be8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03d717dd-dbde-4b7c-bca7-fd1e3de46c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55977422-fa4d-44c4-a9da-6cac9448dd39",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526a4e5b-e479-4a46-aa21-af64e0b8bfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01dd1cd-e28c-4960-862d-2c9066890279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a0f245-4bec-4f1b-b0a2-225a3db3a672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c767d651-0c24-42e6-ace5-69682e11bcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a42a1e-00b3-4136-8e54-fd77be003ec2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49845919-6b68-4244-94d5-5509dd3f5a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a94be2-6697-4f8d-b4d4-5d9c42fb6bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7018b40-cf6f-4c0c-be17-8421955f380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2f233e-d3fc-487a-b124-42988e96b4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a427f78-89c5-4145-9fdf-17f155780cdc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77528404-4dd7-485d-a4fd-f4516a927dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f582ec2d-d900-44fd-a832-8593bbc9214f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6157100c-af9b-4f68-8664-ca76e031907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca6ba9f-1c76-4744-8c74-78ebe1272d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca5099b-7fa6-441f-92ff-d9418cfd79e3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6755a0d3-2560-4876-95bb-5f1f9569c6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e132d98-c870-4524-93c2-74ad60bf0644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4fc170-1794-4c9a-b0cf-efe7c4123d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7698e86e-acd2-4ed1-8375-77c9fdc23f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52dcb78-321d-4cd3-a243-043f48b8b001",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96186249-2f98-4fe1-8695-1e3ac6c0e1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283ce753-81ee-4065-8718-f32a230fc5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f09f88-5bb7-442e-8d3d-a24024ee9bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72005001-cab8-42ec-8e9e-00371106dcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf0b522-4272-4417-9c76-0876fb65ba81",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e790d09-00d0-4e96-8e12-8ed0ddb0bf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f855b9e0-ecbe-4f98-be72-63207738658e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a05dc14-fae7-4b25-8d8e-3ec9ceb4760b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4527541b-9a8e-4072-a107-a641e0819d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3e2ffb-6f01-42fd-a23d-c9dee0f1057f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a69f556-e5df-41b7-9482-0f78aebcf293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df03cee4-d3fd-4d1a-a0c2-e346b0917ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90942b0-3b29-4d4f-9ff4-d851ae6adaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd368f8-ca65-4c99-85e9-e18a3232330f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b689b5-be35-439b-9bc1-e68eb68fb022",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f7b9a3-8712-456a-9e1f-e4ef7f232e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596f4903-c68b-4681-9372-69cbe464f7b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d3e891-c317-429e-af49-186b3dd2f473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d571ad53-aa0b-499f-ae46-64f154f7507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c0c2e1-59c9-43bb-941b-e58bbca49234",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690a0b5b-93b7-4713-b25d-6906ee7dae39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94f7d96-7c04-4e39-9c51-8b0050c0c25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879ef683-975f-4054-96c4-cd6537ffe043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac29c2d-f934-455b-8326-187119031f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e36871c-2709-454c-8b2f-5b3f113679ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f4ab59-d72c-4c1a-bb17-b020692ae7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e862488-d82e-427b-acaf-d5ebbebb6c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c7f038-3ac5-4b27-a2b2-0d10fc2de1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f82b4250-7330-414c-a46f-651219106cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ae4a8e-1eb2-4145-988b-46ff41dc5b5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d87bb0-9ba2-4809-98f5-4b5d997e0ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9eccd1d-e744-4e0a-b1e5-e1ab2a610286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9c2cb1-48db-4350-b899-524fc49d9b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b03ae6-cb42-4bb3-a6fc-0f209a16be88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23edea3f-86e8-4225-a13c-6e2d4082912b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5d8713-5d98-4c7a-8584-5b9b8e13d7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141211e8-73bc-44e0-b6e9-6b03dd0cbee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3d7a11-2838-481f-8f0f-3df42362d9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d65840b3-ff4f-42c9-995f-25a6352ada23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573719f6-987d-4e1c-9925-95efe1f46b43",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483b1be2-422c-402c-ab6d-213ebd384dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10da3f1-4cd8-4865-9d7f-f0bc2acd3ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9c5de7-1dea-40c0-b75c-263b206d51c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e3d570-7d17-4882-9e95-9c8fbf29a085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b931812-8747-41ce-a6e8-52b7af5bac0e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf09429-6d8d-4f54-b24d-9013834077c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfe2f0b-af1c-4053-8d98-4b65595c3df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5cd032-a889-4805-b81f-d96568f9d2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "03539c79-2a7a-4a88-abcb-df30b0f1fc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cb415a-494c-46b2-b66c-98f961180f8f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe00aba-a08f-4b57-9763-6e59f7edb368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b461d65f-139d-4da8-a985-e861f56da1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acae7b0-1b5a-4de8-bd3f-7e6e6a495514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e23b63-fe50-437f-851f-9c6db23d4794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a66b94-deb5-4bd9-9dd3-ca54274ba529",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7d046f-f880-4bc5-b12b-a64a2e11a355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff929390-2f03-46d6-bb11-d985fd6be5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a95bf3-ae8a-49d5-9d6d-8295a45cbb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c50a8fe-dfde-4282-8540-a47984a4b2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23bda1ef-fb4b-4532-b3b9-ea30b2a1e3fd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c9a6fa-b1f2-49dc-8a45-a1dc8b6d151f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723613f3-8b6b-42bf-ba8e-6f2981772dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bed6354-f5fb-48b0-860e-0ec2ff7a8984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27e4108a-f869-4eb3-8e8c-8635af5bc8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aaf108-bdd7-47f5-8cb6-d77458d08d59",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f792695f-cebc-4737-b791-56beffb74bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd58d2f-6f09-4a18-b05e-efd1ebd80dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c0f5e4-2130-4c48-8485-daac7c0f34d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a073ac13-80bb-4b93-aa94-4842923fc18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27580755-2643-43d4-abec-500d4e59e5f0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68acd4db-9e56-47bd-99d6-cc37489485e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d82603a-7b62-4c50-a02f-245a3a6b4568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ed5e03-1159-4bf5-bc5d-6471bdaa31a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "94593f2a-7f9a-492b-926f-7c491375e376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4278a50d-d870-4f46-95d3-5ded4f4ae6ab",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee2dd9a-af30-424d-a258-cd745ad7fba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65722bb8-8e7e-4dc2-991d-4001be973f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05d2c00-0070-490f-aab5-964251abcc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78601391-ade7-400b-bf1d-1b658adb4180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a987ff-a7a1-42f1-92ff-f2a0392f6da2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf962e7-0dd9-4212-9b8c-4b5e9423e605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc709c5a-0705-4a29-829e-68da7ef779b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6890b1-7b5d-44dd-a5c5-1e80a8999f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef640c2-b291-4e8d-9aa8-581022911ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2c4769-8e7d-4169-81bd-98ec2f13acb0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fccdba-5e55-497d-b268-0a15e3563141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04583e9f-71b9-4e1d-ba34-dc8070754eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ebd011-90eb-4c5a-965c-24e4805a4989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6615ca-df13-4b86-9cc8-fa3540325b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e192e0b3-79e6-46fb-9e51-50b962e1eb70",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0feb12-6d28-4dad-a719-7a9e7fc22ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b85a74-9f6f-4b24-b838-ff2ddec3a995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2979d4-6f4c-4469-b126-30dc8540a65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdf7d34-8d48-4488-a8e1-311c40fac089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e881e2d-6de2-46e6-92c4-6d5515464765",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7357a1-8838-4d7b-90f1-d42fc110334a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfeb454-f025-4b0b-b45d-a6abf17c2c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930756ad-7847-463f-b29f-932e146d3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83cae727-3a00-4bf0-be5f-2337f055ac09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b841e-07ec-4bfe-bb35-5644e45d2e36",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fda153-5400-453c-aafc-052840099241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ddc4a9-0b8b-441c-983c-f7224092ef5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e07ebde-89f6-4bf2-afeb-dd524292e57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74f8c8c8-a239-451a-8f42-5abb167c49a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f379a34-b2e8-461f-a169-bdb76d383d1f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dee975-a427-4496-bf4c-79f62a01e1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ee478f-bdb8-428c-84fb-70f7f2b23b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeb12e5-26f1-43c8-8be6-691356d7f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "385f7f79-0f18-4e70-b44c-9bbd7df76151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aa50dd-e50e-41b2-9dd9-c8e88d8393dc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7c3719-ea81-4ae8-9d87-17cba36fd59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3691998d-7949-4623-9f7f-2adfb71196c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1fb9a1-1ca8-4ecd-96f1-ecfe53a70db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73076669-810b-452c-91e9-2437ec733124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8000c0be-92ee-4410-8d53-05455c41c436",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4cf3fa-4048-47d1-8c8c-4bebcdf22bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e6cdcd-35ba-4db2-91ad-39ecc38fc193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7c8c86-7993-4d77-88ee-26bfaee07596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e1cfe8-a396-447f-a82e-e52211af9ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1637e88-ee30-4beb-a0ae-88476904938a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7feeaf-8d57-43ce-9df1-46cfe293eb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f32e4d-8c56-494d-a470-38e94c70e98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad119f6-f53d-4bf4-9ff2-72d3af294fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26183bbc-eca9-421d-a0b4-f3cbc071b88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0282163d-7039-47fc-bb4d-5b0acfd644a3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94b73b0-3521-49ca-9df9-6cfce016ac9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fec9b6-d0a1-478a-a803-d3a1d32c1629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3692d3cd-54fd-4116-9a87-39c0f0c4831e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e804bd94-d270-4454-9afa-9ff40b7cd473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e16ad1-f584-4e5d-8885-0e2b46bd3792",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4509d23-a83e-4f2f-abc1-9cb2929e3ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066fa7a1-1bcd-4198-81d9-51d3c76ca594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcd9d76-4257-422c-b385-e37c28fa92ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da5feb29-fc3d-4228-971b-20387104f812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612702d4-6012-47cb-98c5-b92064d58f9c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8378ebbe-7ce5-49e9-ad42-57a660a0b37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dff45c-6d63-4025-a5eb-230adbc11b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6fb7f7-929c-4715-9a0b-875c5023df41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f84ec006-d6cb-43c2-b7ca-0882cddf5553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a04a39e-99f8-4418-8416-3d1946f16e63",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3443b4a5-0b5d-40d0-af48-5817a99e1873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca999ea-125d-4f53-b5dd-dcef15cb964e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2733cf-5b95-41d9-a485-375a8e19af38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2b9428-f86a-4742-b403-41692b900b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af9200b-4e31-4b56-8f30-519aa314aea1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440a6eaa-6419-4bb6-a103-a93fa6241fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5c8bcf-b2d1-4c3c-b0c3-8c5ad2845dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfdcd66-96bb-4e01-bc6c-9fcfc21a715b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c8cc02-22ff-49f9-9a14-7834e27c3bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7418e928-f124-4d6a-8fc5-f4ab9c7b3c33",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036a5f7a-406f-4272-839c-7942b8115b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6cc4df-d497-4a75-ab7f-f77855123ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821c80a7-8d54-402a-a520-d580c5169683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48437867-b7ba-4498-af38-ba07bf059b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910a50d6-bbcd-42be-b488-fb3792388350",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cbfc0d-0fc4-44a6-a01c-3aa6e41d8d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343f10f6-27b1-47fc-9459-e17a886c0e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c25697-fe46-4aea-bc91-fdf6ac829e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed59deb0-ee74-4fab-8330-a218e34bb0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa3df9c-7e00-4846-9603-762cef1db258",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb229b54-d083-4c24-9688-b8e7105279af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43945ac-42c6-4272-9fa0-e8d7373ffd4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5536c3-3859-49c3-af20-8b47ae1b080d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10aa2a4d-1215-4338-b42d-b8ef3b4bd4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb724607-0a89-4b15-a1d5-7ec6f0d558e1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81cbc04-1622-4851-9d82-8987aa6a6355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b1c032-57fe-46d2-a22f-a6f9a5858147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0126ae2-6d51-47c0-8303-f4cf27e5cc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "68dcf596-69a5-4287-b473-f2839202576a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3861d10-84a4-457d-8c2d-e02bab787f2f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824aeb03-9b66-4ced-a1a0-ddacbe63e663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a88fd1-42fb-423d-ae7c-273cf50f9ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3a9772-1f4b-4593-b573-14b4f8c5352a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a096207-14f1-47b3-9f72-da708626f376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580f7b5a-88dc-452e-8892-0e7ea025ab87",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df5697d-652f-490f-ab0f-826c387054e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fcef7d-228a-4a3b-a5e7-8f527eeb2e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccfa777-cb3e-4aa6-b44b-4e3edc2ff9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd71b167-07cb-4777-9945-437a0c66004b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018229ff-a0c4-46b9-84f8-2f07319ed140",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e35399-2ff1-42bb-8d2b-f52048691b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adcd5c7-16f3-4f1c-a62d-33b290bdf593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6115bec-9a47-4e83-a1b5-46988ee182bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69bdf0af-a586-4dc0-972b-5c4759a2b5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2cf3f7-f022-44bb-ae76-80b9cf22fb65",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3834a6-4a93-443c-9d9e-0dd515236fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a865ed-5ddb-4720-8536-fdf9b46140ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65633148-edb8-4339-ad12-d7b08ad986fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6307d336-8910-4582-8b85-2dd8ac968ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7334ca5f-d79d-4551-9e1d-c668071b6aec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5692f2ff-3f31-4346-8766-243708290a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "82cb15aa-b7f6-45b8-bb53-63717a08d453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e2be9b-1962-440f-9e09-1f26e4fa55af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b00f72ec-6d2d-409e-955a-8683ba7317ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb245c64-867d-4d07-9690-85021129528f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "290c2304-cf5d-4c0c-8ff4-3fa9a9d3865a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327455ce-0ff2-4e53-adca-234a728cca1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17d948a7-4a7d-4e76-95d7-80b1e8e00d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fb0b92-8e95-4522-a23a-3ca3fbbc45c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b5782a2-d4f7-488a-abee-e9739f0c06b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31895467-ed79-4e35-a126-8f600043b0b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "402e2005-ba24-480a-a529-40dd4e5c644d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45a8f557-0fb7-429e-b64f-f3880cc62f22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e44ee7c-a73e-4505-95c3-44da8b651e00"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d52156f-6f82-450c-b022-a66124099f71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "338488b2-f216-4692-bd3c-e06b0d67a49d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6bf1110e-2020-4f1c-ac27-a32f8a781c45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dae2791-8b80-4dad-a13b-1ed12fe1b51f"
                }
              }
            ]
          },
          {
            "id": "6815857c-870f-401c-9a9a-aa9094029083",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9299c198-dc10-49f1-83e8-82154ec16b33",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "301f3792-3308-40e7-aa05-be3818897e20",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c8c76f-f353-44a3-8947-750864c7df33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cbcbf37c-e640-4b13-919b-d5f3a0468d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1753eca5-c895-4378-ab92-69a1c0aadd59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655af916-8767-4513-a948-8fff19a3a86a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6db01ea1-2a46-4776-a28a-117d1ae7b86c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efa3f036-2ee3-49e3-bbf9-903b01e6a5dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51c2c21a-6653-4897-939c-374a77289c20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1545b048-2166-4cc4-b885-58e160f5cc6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "353d9aeb-fd8d-4f62-97e2-b4692587a6fc"
                    }
                  }
                ]
              },
              {
                "id": "d710914c-6201-49fc-b7bc-9db9e947bb00",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc489da2-8134-4022-8040-29fd12e11546",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b025132-a1ee-452e-996f-6849410dfdc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e63dcc-f851-4845-9830-18406b08dbb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e559a2ff-74e1-4654-be14-207a7df8e89d"
                    }
                  }
                ]
              },
              {
                "id": "6bb936fb-a7e5-410b-be4b-620a84bd1cfb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32578066-82b1-46e3-bcc3-3a47fffa6906",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c71a712-7317-4073-aa0d-5e0f4bd71e44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88c07d9-65ae-4ad5-8658-330d35bc4e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc7936ac-e10e-4c5e-86ad-373411d94cf5"
                    }
                  }
                ]
              },
              {
                "id": "eafc1104-cab6-4032-afed-547accc95512",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a68f4c0-b012-4e18-89ea-d742ea44bac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6ca8f20-13f4-4290-a0c4-bd9924d81bef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fcbba64-990e-477f-aba0-e29e1741adf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e1d54b43-41e7-476e-b22b-2e9579112ed5"
                    }
                  }
                ]
              },
              {
                "id": "4a02dae0-2c2d-49f6-970d-792a6bbaeef4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f209784-c32f-4980-a46e-df93130d871e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15cdf74f-6284-46f8-a37d-4d379e1a2bf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1354a51-1fde-4015-9c65-470957b9c485",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1b8871eb-1db8-454a-a0b6-44de1c3988ab"
                    }
                  }
                ]
              },
              {
                "id": "7f004568-c1e5-41dd-bd1e-35bc963ff899",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e02d724-ca14-49d2-9197-f972a028774a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1af7a497-de61-44bc-b7c9-5414efed4b16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd4b92f9-3186-45a7-b1b0-2f2cffebca48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "319f6ec3-644f-44f6-8191-cd815c8d4296"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bac5599c-d08c-4c0b-8a61-c326d149a787",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31b75001-1476-4afb-be74-bedb870ab76a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b482e0ca-91e6-4484-a213-31e8289d3dab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae09fcff-308c-47d7-909a-0cf43d4fba13"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e41f71cf-915a-458c-baeb-7ed036f8ddf5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0856fb79-8c0e-4964-8ce4-3528ddb9237c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "277de988-5c1b-4f40-a443-c22df9ffa90d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "531a4d7a-ee04-4015-ba61-2e157a0ac245"
            }
          }
        ]
      },
      {
        "id": "3c742b98-4197-431b-a69d-3de8e99b3703",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "31e12df5-0bc4-445a-bdb4-e0a845194b92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0491b0b7-bafb-4950-8cbb-efe9ed2cf08d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71c8605f-f4bf-42bc-8de2-bc5d95eee213",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56017c45-afd4-4a86-81b8-7d229ec8a1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f49c1f9-0fec-4959-88c2-4847a7e0cf11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fcc426-2356-494a-8d14-978d9ef71c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b16a069-849b-4347-8b76-2389bed1df6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2fc7a9-3cc9-4fb2-b8c5-f74ad44c3358",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ff5b0d-7245-4f36-8468-d84fb619d304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec305e8-cb78-42ce-bdc2-ec5143f08f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bb72b4-fbbd-4c7c-b52a-f227cc2c66d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af01a02a-4537-4c0d-adbe-7783bc32189b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a842234-02e0-458f-a075-a9fe2d28b913",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e59e88-1506-431b-b067-36a6d17f9834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea80cb06-4298-420a-ba2b-44db98eb5749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02122be7-3118-4098-983f-7fefb98c9e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef12179-54c4-4ee9-8ff9-ca48b14776f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e76854-ffdf-448d-b982-3c24dffe2f04",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd3bc56-5092-4f26-8475-ffc94fa02276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a9fef5-4edb-4771-832a-a011c8a42358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9799c81c-3aeb-4ef9-99ec-56a28c0862c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e97401c0-3705-49aa-9b3b-c3d8110f7ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1580786-4ec8-40d1-b705-a39361cda65c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fea981b-c030-4251-9cc1-1a1706163b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead28f8e-2161-4525-ac37-e90fe0404a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17950b96-d789-4077-9258-8bda53dea522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88488cc3-5daa-45db-832b-b8fef41e1165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf982e37-5d95-4f3d-8cff-bec8731c5c4c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5354e4d-e46b-449d-914d-2cc777a3f891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60e03f3-f491-49cc-8597-a396cb1d3565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746a37a9-eaa6-42bc-98b9-b9d8f78b5621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38e49d56-c955-4e06-91e9-dccafa30afea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29eb6a6-c863-4661-8f52-ec0e9756e55b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa703fd1-e7bc-4acb-a5fa-7f59234fc81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a250e846-a4d5-4fba-9160-75686ff5d1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0525025-bfa9-409b-aa5c-e0b2e838c512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd8913f-eec8-4a6b-a809-d420940290a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d7e093-b537-44e5-a060-2f5ae6b631ee",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d5a41d-c184-4500-acfa-dee12b061397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4530a0-93f9-4649-a349-789e039d23a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90fac78-199b-4089-b396-8fa59ce2e792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f25281d-cef4-4cdc-add7-663d4cb000da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3e5eaf-ae95-4c8a-ae56-2d6bd429acb6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21aedec3-7ea9-4d85-b4a0-886a5d88dfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04d099c-b6b1-47fd-93b2-3ca5b7403a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5230580a-6459-4214-a93d-faa69ff13243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9678a648-ee4c-4194-8d0e-3c2e5bdcc874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977c8fe4-81b7-49ad-b461-a8771b9795c0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fe3578-5578-4a65-8f98-ba7938ff9e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf19921-3196-405f-a2bb-10c2be376b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa1d453-620b-425a-ad5a-34bd421f6c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e754d6-2f1c-4818-887b-7f497eacd65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d408c102-b4d1-4ca8-9203-284b600b62e2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e713469-d187-4803-9bae-37b1958d77ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2eb85a1-730e-405f-b073-dd4356ebae05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9610df-4617-47c7-aae9-757f35795ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8b9b55-9ea3-4b17-8601-3f0358aefc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa12968-fa1c-4a6d-abf7-735f12b5b573",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c483d0-4f9f-44a7-87f4-f7a2c2d76788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8debc0b7-81ea-422d-9094-4f122958d703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740060a9-a7d6-46bc-b1f2-b82c30b21fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb018e67-68a8-42ed-b92d-06eac612cbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153c574f-3ea5-441b-bbb8-4851fe7d1f5e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb13551-0694-406a-80cb-da6b080958ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308e89fa-5ad4-4cde-88df-8077cfdd5f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b020472a-1ee4-4773-a140-35b8e471bdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05c24900-68e5-4cf0-92ed-7342191040e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f756641-facf-4609-82a2-422f54c9e0f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1235813d-2f06-45da-ad3a-e3b1d1440d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ddf2ca-a2f8-42ed-a18c-e2f5125f25bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eb597d-7dc3-42fc-9890-796d486f76c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7fef0c-0e61-4f4d-9cc9-6efa62af7c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285712f1-67bb-4874-9554-7086083fc899",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e293ca1-7d66-4f9c-8f73-624d89c8d0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2d903d-7c99-4439-8081-a5a8dd0a5422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffa016a-697f-48eb-be1a-b7d8ed30401b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "05cf2b31-f1df-4b2e-b7ec-b189fc1cd3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2867585-f910-4cde-8844-689542ab7ffa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e36c61-f546-4ec0-bf8d-30405f180689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c153f256-cd3f-420c-81f6-35a79a9f479b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4de5bd-74f3-4fae-bd2f-f27bf6179ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "77991b47-8daf-475c-8f74-ba1d14e46f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c76e6f3-e35f-4cad-8842-354066f0391a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88af79f-7890-4f71-924d-dad921e2887c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101f0c81-e24f-43fd-844b-c39472549a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b06c68-f939-4cc0-884f-7b86d61c2c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4edad779-5363-4cbe-b3a7-cf0df1e82308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6284bc-2453-4b87-acf0-21abc99dcf2e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dc776e-ceb2-4c6f-b117-4de7a65b0a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e70cb5-8d4e-4ab4-8dff-f02a21cb63c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fcb15c-afb6-4de5-a824-a1e07024b99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eef245b-facf-400a-9610-c227c37d6dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6877fc29-9a8f-4e80-99cb-7d6a42d43cee",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbe5300-c8e4-40d6-93ed-17bcc0e01564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b938c0-9f97-4041-b047-45d76fc0eeff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb47587-adbf-458f-b70d-dfbbe1579196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79bbe8e5-160c-4600-a301-8604903abbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf982dd-9aeb-4565-a53c-8aaab2419b82",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8474450b-1ea3-400d-a2e0-e38c888b8c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25fee46b-71a9-447a-a307-e7c975793694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cbee9b-d19c-4ffd-9f7d-67a01c471680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4292f01-4d8f-4131-878e-987c1959d763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e966c872-8c21-4e06-bf95-8d5c138e8a7c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f107fa81-92f4-489f-af3f-bf2b463d0520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5b3595-6e9c-4556-9f34-5689377d4a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d15ac2-46e9-4e06-b3ae-8afdfbfcedad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "906694bb-c578-48e5-a948-44d15783fd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5ca593-ccb3-425d-b392-7557cbb6c7be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32f52c0-d4d6-48f8-a4fa-fb7c5790fe46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53bd8d03-8f1e-4ef4-b61a-388d572b8462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae1f8e-f723-4e8c-9f2c-82d15d81f02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef8e70d-a830-458d-9b6a-6ea2e2577239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7167b161-7a72-4bf5-b0ee-9feaf3ecf5bf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c343ee3b-d2eb-4e22-a5e9-261fffea1b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbd4259-76f4-440e-9bbe-f44ce772a8ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7baef4f-7c07-4f1d-972d-fe754cded5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25bcde13-2a45-4e93-9a9a-cc54957f6a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d69b2ef-5055-443a-a19e-416a0111c594",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387f8e66-5fa9-42d6-bb50-5d505acda367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d17381-539e-4b00-8d60-38e5decbdd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0672468-5025-48dd-a965-617d2824c277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "195dd1e4-bbf6-4ce2-900a-2e9c98d5e6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08e766b-5d0a-480b-8edf-3532e1988765",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3636b515-5a0a-4c25-ad89-ee6ff55e1e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c939990-4c03-4e98-9226-becec9148e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c571f76-7ccf-4251-8a8d-3eb42b54c86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8aa808-e011-40ca-895b-0175722475ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68723f5e-6553-4964-9314-cc226b7dd935",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7ec8b1-b961-4134-86cb-6722dee742de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ea57dc-4c65-4faa-bb00-6f78f545bddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc7bcac-2c1a-4972-90dd-9e7c6c1dfe9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd81611-105f-4fe2-90ae-9360400e3dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae5d413-4ae7-4ed3-8d03-d17c046b6087",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eec8c3-e866-4637-8c3f-a1db4cc5caa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83c6841-d8ec-43d7-88f3-94ccedae4ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16cc915-98dd-4d11-9874-eba14f0918c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ac85db-0dac-4c04-9b7a-7bf0ff70618b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecd50c0-35f2-44aa-9ec0-3da990bf716a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40729d9a-7d38-40e4-8305-aba899451340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5808b94-1fa9-45f4-a107-3447b69ab04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150679f5-e41d-4880-bb95-bbfe24ca2ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35af7d6a-9a89-431b-8232-b7fbcac131a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68331cae-439b-44cb-a398-403309dcea47",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748d0c7d-f171-457b-be7e-04b8563824fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464d2e4b-8adb-4c46-a7bd-5491d642a244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ff8b01-2c82-40c0-85e6-0a095d8dcb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d56d146b-3557-4f23-9817-377a513ad611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62133cd8-b9cf-40f9-a44c-8f53677543c3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cedc9d-3a6d-4264-8463-76dabb44e203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fcf919-56bd-4702-8cad-76dfb2f0e0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df07d3f-40b7-4f8c-8d95-bf289300ad82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8d0e83-ca7c-45c8-a3e5-d3bbfc437e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f592fe-2087-4e24-807d-116a363d5825",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fa9b70-7912-4be2-9878-a3dce08a5b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785930fc-fc51-4da7-a3fb-0e4191d2a5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245bd270-1288-4fce-b08a-d08d5bf769a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ffe588e-b2a8-42c4-8d51-f4e4fba48c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb7eb2c-3688-4854-b3cd-e5877a3b2eb6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7177a3-b092-4e33-a133-f67129f38285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f18caa-35ce-4547-94b9-04ef5c3a08b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34502814-d34e-4ed2-9ed7-d13cb0c2f6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb41718-fdce-42ec-8327-91344580dd5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f958316f-58c0-4fc6-ae93-5b4f5acace5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f04dedf2-c7f8-4764-bf8d-d11dbbf1b7b3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6510107-2fc7-45a9-afc9-66ecc8a083f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "68e3898d-06eb-45c0-952e-2ed105dd104f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8103c8-e2e7-4089-b3ab-dda5abf4d098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "859e676a-2643-4d68-8a93-b82b2caecbf6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "457932c4-41ab-40df-9231-cebcdf39d82c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74ba8932-98af-4b2a-a441-9ab72ab275f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93bb7d3b-50df-4394-ad40-b49bda4a64df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc47489c-cbb2-4eb8-a275-4d49c6c279af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b519c572-f86b-493c-8df4-cef96054d211",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0163d471-00fd-4e37-99a7-1aea593af77d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "129d9c27-37d7-4d48-ae8a-534720ef67f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "478abb18-13f6-4faf-8c6a-bf340b8dc9b0"
            }
          }
        ]
      },
      {
        "id": "40734395-6328-4918-a545-874ca86bc31c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "46e02431-4736-4a0f-b9a5-c576d2739857",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a4069bc-8a52-467b-9a02-b4bdcc895392",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "adad3c6a-8e06-445a-923f-1b7dbc3f3f2c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8dce83-0227-497f-8621-8c15cec2a2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b05893-79b8-44dc-b907-92c2bafcc015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25fea0d-0928-4252-bdd3-0096ca92b36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "598f2a1a-848d-4d9f-9915-d9cae700d4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b018cdcc-4b49-44fd-ba97-4d617a80a560",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d810688-9bee-42bf-9d5b-68be54f38aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0007786e-f174-49a7-abae-f757b0ed64c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7fc3d0-9dae-469c-81fb-261cab530f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e86072-a210-406f-bceb-1abfc33d6206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457c1b31-60bc-4598-a68e-18daa23928f7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21aea786-44a8-4c9a-9315-61401e2d429b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d88290e-1252-4a41-8504-e4395f73cc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff52ce4-db2d-4b6b-8b70-1b20e3f4b700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf5d3a8-ef5d-4680-aa4d-08bbd149c737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00186e94-6006-4f73-a376-77b6edc6f351",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda1614-c559-4da6-9aa5-fd7ef614e3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1fe21d-7ec6-470d-aa35-a7134d94f2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95b79b1-66e5-46bd-8825-45fd88d19da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c52467db-b5d9-4d63-b6e4-748fe16618bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b512fc22-709f-4b3d-8127-e3f2f03d3540",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c354a2a-88e0-4d9e-baba-2c591fed9dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2617cff7-5ea2-49a8-9bf5-e5cef2dde62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8dac47-f418-460a-be39-e09c3bb62b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "123c7e20-c984-4745-89f1-3075bc8058bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc535d4-981d-49c4-a220-3bec082e0dda",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6390505-0b65-4d1e-b7e3-3de4cac6114e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9820e4e1-1c1c-4c85-a233-ad732fa622e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ddcc24-d28e-4fed-af15-11057667d724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54f266be-9d16-410f-90c6-5340d7fd53f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5720f304-ed1a-4c68-9245-80f73492269d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade022d4-b8bf-455d-910a-e2a97cab5961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef08d0e-5cab-44c9-a7ba-129155a7f64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69518bdf-adb0-4228-a980-29655b129383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "506607ad-e687-49dd-b00d-31f69fabfc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30239b7-ca68-4942-bf6f-e323efa7bc8f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c30879-5115-44f6-99c7-3b654046cb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2570909-8cd8-4c60-a66f-a0178305e6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0162341b-07b6-4f75-8186-13b51660c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2030ab-fff1-489a-b6a7-b62c0b565ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e298138-c00f-44d1-9691-c00a663075b8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63319c33-6998-4d92-9147-3f20172ae729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5e0609-e358-4db7-a0a9-d5dcde415fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a0059-1a06-40a1-85d1-796b6aefcb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac453d92-7d4a-4090-b92e-b33e89957914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b39d69-8ef0-4794-ad2a-1b579b7e5488",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc098cc-5e15-4e12-8405-d336e71dc1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fcd44f-f4d3-4c66-83ca-e49cb5be8c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c593d80-96a2-453c-b4d8-105bfe00f2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "925a0889-74d4-40dd-9eb8-0f741be2f5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912368a2-2a23-47d0-9563-f8d9b473e162",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed74f909-ecb5-4592-b2b2-97b52e7644d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32406506-f2ec-4c68-abb1-b7f84c3ffa70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e756f326-a5fe-4d64-a042-8a2e2cd2d007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f278ee2-66e4-43e1-8f24-6340aad6f6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72a10e2-bb2f-4260-b212-9e8518008c20",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0167641-aae6-46e0-ba58-eaef3737ac0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3939b9d-7929-461e-a2f0-a85484912904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97d7e6b-4a59-4e2b-8e68-2ec637088430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90d412e2-7977-4cf9-9f46-fb54a2378839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57bf836-0e42-4528-9836-700bde0c3ee5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b122c20-c08e-4642-aa9d-18d7f7353368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2473b142-c604-48d5-8b3e-ba1117815457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffdc033-053a-4117-8de6-9f4341976ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4595820-7a4c-4890-8a46-2fb5c3ba5353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5a4fc3-b037-4bc0-8eea-83a858081600",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63726e05-8f06-4a24-ad85-107caf747b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5131b0f9-b62e-40ca-ad63-1c13feb7857c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56a7f8b-15b9-44b7-b938-0bf0f563345c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0603a4e3-16b1-4745-aa57-1dffcbe74aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6f2ea7-a475-46f8-9ef1-059ff95b3d8a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d96ec78-ba98-42c9-a3ab-ec3d080b566d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7e59e6-0931-46cb-bfb4-77bd9f820a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7db8191-0c47-4810-b7d0-effab2143d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3431476e-1253-4cd1-a101-0347debadbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f707e3-bbf1-4fb4-ac97-36470ff115b8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7721904-8c51-46fd-bf1b-8fedb8f6cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86a90e4-8b5c-461e-b5e6-ac1dffde94aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8deb5df-0cd4-4140-8183-363c26e3f096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f07e7c1-612b-412c-99ca-68ec3c5c6a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe79a4-5ff9-4c54-985a-431b909e376e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76155480-d067-435a-bb0c-6bf3f73405f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c1ec54-9aa5-4893-bda4-d7cec3d5c6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4722ea-851a-4452-a132-1f13008c92cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3efa1bd7-46ef-4421-b276-37b96347a5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49a32f2-775f-432a-a94e-88ebce3580ce",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e751c39-3d2a-48a4-a877-e5ab4467976b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0be635-185b-4f9a-bbb0-8d9104b1e133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64154bd-2eaf-41ee-ad71-7a209ab3ef19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ae6be0-4e90-4c9c-963f-396465fba0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e20b34c-09be-45ad-bf4e-7f969938dd50",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16cd3b1-51c1-4121-94c7-b9d7000f3cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fbf3d7-55e0-4b3e-9a5d-b3c55ab35c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aae1a4-4925-42a2-8059-0b4ee46baecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb29219d-016f-44c3-b436-c5263c493561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df4fef3-ccef-4dec-8256-e5e9557e76ea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6ec60b-4413-4b9f-a27c-1b1859e53462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3184961-8bb8-442a-92ac-9301cb5db10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745f1b2f-32d3-483e-a77a-ab635a5e55d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26401aa4-488a-4573-83ff-8d81c4b5587c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4b16b7-36fd-4968-9304-120f475bc4af",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438e32af-3cb2-41cd-a233-c1913e21b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f45b6b-4c50-4de3-ad96-9b5c7e89ddcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac82401-ab3d-4929-8153-d80905a8301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "387715af-a08d-4c3b-8aea-1d0b797aac18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217589f7-fd2c-45d2-ba77-9d7405415715",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e9c70b-a368-462f-b1f2-5fc36eca0e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3e7fc5-3da2-4955-a37e-27a06a169a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db86e16a-5e23-43c6-b7d3-7124bc85538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5c76b7-0d8c-4360-98fe-879488628d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ba32ab-9703-47ed-b8ef-c76f1501e85b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa790263-de17-4b19-a27f-512a00ace273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4319c16b-4358-4181-b2ef-1edc85b12a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d90c266-d7d7-49c0-84c7-f5f5d996fad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c27a99-9070-4b41-bdc5-271bea547706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69aca476-360b-48ae-a789-09782386ddfc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea8c6c9-c530-4473-9f51-59252cd0653e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd69ef5-b639-48e2-bccf-af2514b1315d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c00c982-8481-49a6-b06b-21eadbd82bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad73c0df-ce0d-4d2f-b995-f6db79d3289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301c4962-8f17-409f-bbc6-a3aaf2fb93a8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eaf17d-6df5-443c-8b91-578ad4030aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef14b185-58bb-4a90-a31e-d273431d3ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5193260a-df47-49a5-8834-1100728bc4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1345c08e-d99f-4713-a4a6-cb667d5b4662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473f4a14-3778-4103-a9d2-0440164e809c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158c9c32-329f-4c5b-b3ec-64e16371beca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a505ac-f0e9-43ab-8238-39ecc52a9a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7cccd9-d1db-4b6a-9f25-dd3fb7991e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab98585a-318d-4b7c-b43b-9bf94b72cf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53204d97-ca6b-440f-87cb-172779852b8b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27551380-4bf0-4de1-acf4-c31ef8ad43ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1be0fcd-ef65-4c3a-be44-92afe55048f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b48da12-0069-4f23-a22f-60e0c19f9b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3034b7d5-9898-459b-aac5-398462ee0be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1cd95c-b520-4422-9458-3b999ea80273",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e257bc3b-95fb-426f-85fc-8d861fb6ee9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb59fd7a-b559-45fa-bb5d-283eef14e65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da75395c-0b14-40f3-9c9b-2eb19dab1bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4d07bf-51a7-48b1-a846-b20de2d49773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2e488e-a5e4-44f0-ae6d-fea0ca452949",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ddb8b1-2d2c-41e2-ae71-122cc9e980ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f03d3c-6c93-453b-9f7a-38b402a0bf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650450ef-3418-4be4-acc6-f398f6c593e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f50a43-1514-4acb-83d2-93f94f33f830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ca3b99-2020-4bab-ba3c-1b4bdb4bee38",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9999dbdd-e4e5-4dd2-ac03-71c7fb0b81f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35882503-ca97-471c-b47d-7887cbe136d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9b8c10-c1c1-4a33-8cdd-c40aeaae428e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b15f00d-a13e-4ab0-a35e-fec6fbd8ea72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52512fff-e613-4cab-a51e-0d7b05fa705f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edbab08-0a4c-41fb-952e-21a55d4772fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5261a-7cbd-4692-83bf-2ed68248556f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f7bdf4-cd75-49eb-9fd0-7829cdfe333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d13947-a2b3-49e2-9f62-feff8c9d6c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8709de-ce58-4ce3-a042-d80042c45c05",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de93295c-712b-4ba9-9f05-f2e42aa7112b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a331df3-49a7-47c9-9b0b-7e7a755aebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2249c7c5-640f-4a5b-883d-2f5e93a92905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d51a818-2d09-419f-937c-3b7b3e530c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65282ebb-3939-4a89-a862-74d889e409c0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c8508d-352b-4493-9475-ddd28f0fd0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b23c78-a920-4683-b28c-987b3563aa36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01260dc-e854-4d98-be82-6648498d8f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d6ad5b-05fb-47ab-8c4b-b6bbfca19eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d118573-05cb-495a-8449-8a7d555fa184",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c8a25e-5b49-45be-a148-8f2b7fbbbc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b5378a-0d0a-49e0-98c5-e9c078ae0e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2646fb9d-ddd9-46f9-b0ce-5ba4512ab893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad198d85-d0f3-405e-a372-b96cadffbad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bc7894-3a6d-4de4-b04d-53b50b607b8e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4427b93a-5efa-48da-9ae3-b0b09b1ca9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614e8469-c35a-49e8-a330-66c917e43cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826cae43-2dab-4a26-be30-bfa0841959ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0230db16-415f-4957-a477-e07df1c69ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e117c9f-fe5a-473d-b302-fd13cfaf170e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beee775c-be0b-438a-910e-e0344dc592bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5e7954-31a0-4c97-b2ea-b5dc76b834ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250dfacc-953d-4836-8591-ed4a8cc71061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df53ea4-2e30-4599-9b0d-d97052575c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebadfcb6-ea21-483c-8cb3-064675d3d32a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bc1ede-49c8-437f-ba3a-992e6900e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af10759-ea5c-442f-b5a7-7979987c34bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcc8960-21a1-44f7-a474-7571a97c00fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a32d49d-4636-41f7-aaf6-0aff98fe905d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb38894b-1530-4604-bf97-1907354865e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7b6008e-a550-41c8-94c5-280a8b12c8db",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f928cd58-90f5-47f7-9251-478be2c0f8d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "423ac769-d598-4678-8160-246f656af018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207cbf5f-fa23-44a3-a3d2-628713e80549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61011ebb-1967-458a-a05c-3260105ab114"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7887a20d-a035-45fd-9540-65ae5c14b4cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a7922d0-689a-4c78-8e6c-be771dbb7666"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dbf39c9-5e72-46c2-962d-43162455d718",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "361325b3-4997-4f8f-9cff-7d9abe45619f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24961a8a-a2ac-47e1-a019-8e07ad18d021",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9a93996-a7bb-4331-97e1-2e47eb6250d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82a92c3e-2a5d-4a16-8836-8eccdcd2522b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf40d2b1-2d7f-4837-93d2-e6b5473edf76"
            }
          }
        ]
      },
      {
        "id": "bf034eb8-c124-4598-9a98-72574c2f7133",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3627401a-827b-4bd2-a341-85525245d0f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9e616b5-02c0-4403-8f15-0774afd46d5a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e7bb974-4092-4e71-888d-3a433e57dd37",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611e2288-24ac-40cb-b513-ffebb3055452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f353bcc7-e95a-4956-8600-5391880ff806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd40c8c-2b45-40df-bca3-d998db126a20",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b765e437-0fa2-41dc-823d-a13990f73634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63aa87e-3b92-4ee4-be33-556335cb5139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce12bdd-db83-41b4-a03d-08d8268a9d77",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0ed07e-6fb9-4383-b175-f6dc659cd170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80890c57-bd19-4097-9b9a-eb004fff8623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e9dee5-ff5e-4de5-b6c4-cdef8b5588ce",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510e52c3-9d17-4a1b-b58b-970f69934d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3390704c-dac8-4636-8602-d110fde4ecf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ea180b-f3fe-49ee-b2ff-bb6db853ad42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2989111c-afb1-4e2b-8307-c42310db1263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0efeee-544e-456d-854a-49001cb99e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9798259b-23ed-4688-a4bc-51fd56fb2816",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02579d18-ba02-482b-bf31-bcb064d0deb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bb53c8-02bf-4ba9-bff7-be7a99096e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ad0e7d-b8ba-4341-a125-e1a79cc49b2a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4ec5e2-8d2f-4a51-8fb2-2fc4908235d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a135fbe-e6fc-4790-adf0-3329529ead36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e3a145-f5f6-475d-8311-2324c15c7f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fdf397-5b35-4bb3-871d-a05496fdf5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b558cae-c9c4-4261-9d81-aee6e2aa0671",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f235f21f-5e4c-404a-bf9b-abb929f3bbae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78778da3-302b-4f1b-a070-36c3570c24d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be87cc23-a5ab-4584-a710-f5a4823c1d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c034c88f-c55f-4dd9-bf58-8d7542a0ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ddc760-8607-4da0-9e16-38596c94564a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62c9753-f036-4da7-9b69-3f324771d1b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6fd5bc-faa4-410e-baf9-979330699345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c5f744-d6e3-427a-86db-7f46e32c970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d38214-2698-4a0c-b615-3968352604f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be88b968-9601-4dee-87f4-4809d0867fbb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89431777-6640-4257-b550-99a46972fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b7bdde-5251-40de-8da4-6acaf7764e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b51046b-36e7-40cb-9f1e-7f0bc3fd3e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500b8eb4-d01c-43f1-af43-7c133b2d1feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4785b2b9-f469-41d4-ade5-7a2d655138e4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf6f0de-3bcd-49a3-8acd-3c91aff25e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7907c3-fe4f-4a96-9710-fa96c6e26729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dee2c7c-96a6-47ce-baf8-29d625e3b842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae623b1-a422-45e0-8a06-57f71cb00288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b65a273-ea5a-4107-bfb2-13cf9932815e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1735cb63-c67c-49c4-b07b-28ee98b5f50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40889c2f-69c1-4630-89c5-2ce67ed7718f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae13e9a-4eef-44e8-aac3-b5a176679073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4fa8dc-8b84-4260-84fa-b6afb5c4b38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdddb6e-46e9-4e1c-ad25-e1ae446b5eda",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23775b5b-1d07-4833-a005-16c4bed0875c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ff65a8b-b382-4dab-b7fc-895e0183749b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b294f4a6-39c5-4d98-b8ca-e6a6f7daf974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27769e7b-1a66-4f1d-8dc3-75630339a954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ec608c-cd4d-49ab-b54a-23c95cbb65a6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635a991f-7d5e-4975-bd5a-e42bedfe9d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb2a6d5-6960-4a8a-b31c-db42f6806a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034fb6ba-ec8d-47cf-a59f-f945a56b1dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2833a7-818a-4cf2-8ed9-72f92e93d2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed664a4-8d6a-4f5c-9355-610868b3e0db",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5c6e1a-fcea-4ab9-85bc-0593c4a7e07f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e622e579-57bd-45d4-aced-2a0523b97cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c633ef7b-6394-4c3e-8821-d2b94736df53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d01bb6f-5968-4bea-a58b-188c92387e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19353eae-6775-4e60-b145-fedfab44204a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17136a18-e853-4352-975b-94c92730bd0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4de47f23-30c6-4a29-9ac8-32175d8a1425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ca00cc-0820-4ccb-9dd4-8cb46d43a288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa940b50-13bf-49f3-8007-ecdd9287f45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415f72e9-0ad0-4813-a6e5-677dcedfc520",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0ac131-435b-407b-bd1b-2431d81ecca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a68624-5ae5-4336-8054-2cb38eef3bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b18915-29ce-461d-8276-ff6d56951c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2723ebc-74b3-48c6-8b4c-d3a28b9cc6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2894d576-9f1a-49c3-9393-f683423b0f4a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30119fa5-48d9-4ae4-83b3-abf5cf9a33a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a2813f-c046-4053-bd7e-d55cbd713b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c42361-c1fd-4666-bdd1-752ad3721601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f728b0-9dfb-4b31-84a0-befa732e5899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaef32d-ea82-4806-b630-8882f07ec33a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfd0a4c-43a9-4cd2-8c4c-c89550c0f918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bff0ce-973a-4789-acf4-64f38124b000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5b37a6-622c-4c44-87f6-f84e57c74745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6692274b-3cf6-4a9f-8d08-fe63844d8d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133a290b-a508-4204-bb6c-7d21568faa0b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81af661a-748b-4a0a-9f1f-987656ea6e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9286e9-38f1-47b2-a59a-eff985fb5dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce8d537-64d6-4036-b8dd-bb7592f619af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ceefa53-708e-4a76-8995-e4ae155f4fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69218a7-ad7b-432e-93c1-c279e74a826f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a16442f-34ee-4fff-a815-d3dbf2144230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56003d73-bc24-49e0-9c57-89ad2c687a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3732842-f0e7-416e-8977-f5bacd6a8f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733da962-3080-4513-b9eb-32d2f3ee9cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531c50bb-d9c6-4ffb-b5f3-e73699cc6b27",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ce96e-14af-4dbf-8ca2-7a34afb71237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba077a07-cc4e-49ae-a0be-5711f908fd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf4417a-55d1-4637-8f94-3a1b896f4ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c29100a-10a0-41f4-86ff-ab649b898264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512c66a5-b372-43e8-bf5a-84f2a71daeb4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ba3132-0f8d-4c72-91f5-d80caa41ffca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ebd529-280e-4d6b-b805-ae560e8626e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6448194f-98c0-4799-a668-2ca7e608b1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90ea6dc-136d-4195-bc5b-ed66d8049f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dda6423-05c0-41a6-91e5-ab69c655bf57",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d77f01-5188-4be9-a595-1a3757de72fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6763d23-986b-43fd-96a2-8cd80e83cda0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434bbdfb-b23b-463c-a561-fee2a3df4f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde87243-fa87-4684-a3be-84feb9e7446e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edf6e96-848e-4363-a370-a8b6f17725a4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf914dc-6174-467b-84fe-c3353f952b17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3941d89-725a-43f4-ac5a-71fd56ac461e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a04fbf-bea7-4202-8dc6-4a7245e676f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f865ae2b-792a-491a-8288-20d61851fd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739fc91e-cced-4a26-be2f-55c0ad1893f5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e92cee-fdf5-4b32-9a3f-b8619a84d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4a1d4b-88c4-4dd9-9f4c-54d057c16772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff2000-03f2-473d-ada8-ff0138f724e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2a224e-2e48-4c99-b3cb-568462f58f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f43b4d-e0b3-4a03-b875-a0cfb3c25335",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa99438c-a470-4a9d-a88a-f888b010adf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4c737d-a6e2-4b45-a01b-c107cec638d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3829f5-6754-40ed-8f6e-258aa60a8124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0ceb34-f970-4e59-ba48-cccd8c5dd326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c475a6c1-8f94-443c-83b6-57a66e4d93cb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536ac826-485f-49db-8bbb-a7db6ca25865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912ff090-5d31-4eb7-9824-0565ae4c64c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa01bf1-4d34-42e3-a6bd-cae4a790f432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414c73b3-b35f-42ec-883a-bb0d7b510819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed3b8bc-4a98-4e96-ab56-78cbdeed1d6c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa10ea7-f134-4f36-ba11-5cf2ca0eeb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40c4810-def7-446a-8b7a-a291e54af1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4d206e-b483-4103-8cf7-1ae2596a52b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78d1332-2952-4998-9d98-f0bb8f2d6bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a631c83-c0a8-4c60-bdca-b8a629a66f85",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f20b9ee-c6d1-4160-83d3-a931ad52a85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53250ca-192d-4a18-830c-718ad5161c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f89445-8164-4e3e-a778-05c606ac3e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc23b00-ec6c-4605-b9b6-3abeddf5c7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda0a50d-c9dd-4e62-bf50-264b17827faf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b817f86-2297-4aab-bdc3-de02bc789acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a67682b-a1a5-4d8e-a2b6-2cb81377447d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ea12ae-1b01-4ff3-b63c-b16374eedf28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19334066-2653-42e9-9e00-9dc4695791f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dfd909-3ec9-401a-af2b-d89063fe7047",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107c70c3-d594-4295-b68f-8940e2328435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628aecf6-c4da-4313-a896-2d577a14dac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a2f002-922d-4014-a406-325f675c360b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfff01a-2b41-451a-b22c-6d7cec46ac4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8238ada4-ddb2-4f01-83de-167fd0a69eb5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d78af7-0620-40c0-b3f8-ccc5a7c602b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f64802b-30ca-4605-b450-86553be76407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9eca69-9fe4-4102-b497-bc11f2a219ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709460eb-6da2-4b7b-8dd1-31545786d8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1446c64f-af13-49f4-810e-bdc2efcfa316",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954a5923-388e-43e5-bd98-6543d7857701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5e8af2-32ef-42b3-b2cc-73839c47da38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b4f390-e7a3-4aa4-946c-0fe27ad1fa24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9ec13f-2c95-44ff-a785-6748b17d8c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9925b753-495d-4a95-92d1-f3d0dc7beaaa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc9b4da-0657-4f52-9e55-0a3c874f8fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4be23e-c1b2-4664-9797-f65d4e65d7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eff7b8-7886-47b6-afe9-fe851f7069c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ab78cb-bd28-4a92-976c-e72c273de6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aae7808-b122-43ed-af9e-7b963f44cae0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272eb31c-c760-4b2f-b159-bcd6f16f1131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d8a4ea-729f-4436-a28e-8c83afb1353e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7bdc7a-2c67-4a67-b7ad-b6c2481be9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f0c27d-afa3-43db-9767-5064c9dbaaff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a46d423-e1b4-49de-be73-fe9353a433d9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3997fe83-d50b-4fa3-a212-06b5897c21b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a0c32d-f059-4546-a30c-d8dda421648b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d73068-c1d2-4737-baec-40c3055833d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f032f23-321b-49ae-b756-c4ea2532a736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34faff2e-41b1-4731-ad18-800bff424eb4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9977b60-63e9-4a3b-b7e8-466f8df574c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fed28b8-ec15-4b57-be47-4499e2d4a42e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d11f93-1147-4500-aade-03693ca8a951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca212dc-700d-4a43-8112-33ed34bc90c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcddfd2-f2c0-4fd4-8705-e383c0ea1cbb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc62cd6-6db9-488e-b37a-38c2926c6a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97bb77fc-c704-46f9-aefc-9adad45818f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a99c19-1f90-4423-ad10-f00f65bcb34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1482041-ff09-410c-a2ef-34073a1fb555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa81f9e-db83-4e60-977a-4a4e71f29877",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef96d61-fe89-4eb1-a3b1-ff9a057f2c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e94fdad-a41f-482d-82a4-09898a6301fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297f077f-f146-4f1d-98b2-27c43c55a824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a551a616-66d5-4c3b-8330-ed405a70f13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83c3d5c-d496-4ea5-a929-c45457257fbd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb9b63-c399-43fd-8d25-19f7d7e72a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8094499-edee-4ec8-8475-968533f56979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f4c9f9-9583-45c5-acb1-d00f9e9cc118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c50971-ee53-4c7b-ab8d-a341dd03e645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbe5cb4-8599-48cc-b2d7-4c8481a48e4e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c89570-1fba-4041-9b6d-4402b702c993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d56b543-124e-4368-8df1-47d3cca2818d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b867b469-a8ab-473b-a348-2c99d48640cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddb6360-b647-44cc-a1e3-dd572c400af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3250b63-5229-4cde-9ca0-ddbd25f2f6c5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70dd22c-fe9d-41a5-986e-b1a56bddf940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591a1ad1-718d-4fea-924d-573c09767111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae75107-c9f5-41df-866e-d425e3087198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8999db5-3df6-474c-b00a-2753108cd384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fd7956-6fa1-4a1d-8fbb-1ff26fb1468d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee78d285-c8a4-4e61-a3a5-50a067c69275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8674da39-f09c-4543-a638-fd0a9905e01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14a87f3-ea36-4498-839e-0bc6d24c6872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0b5259-cce1-458e-8eea-1a17066dd483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdf529e-3b01-416e-8aaa-cd8a0aa6e5d6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420ee515-b459-44d9-bf0e-5609ea9e8601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f5b9b9-6e0d-4e67-9fc1-26d2979f75d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2578d7-f6e0-44c7-acdf-d405bb4f9cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6523317-fde3-4178-b44d-92a4545cbed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58838ba8-2d22-4742-b2df-7403c00a2cf8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f478af-006d-4dad-913f-3356aaf72076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b09511d-e8ae-4c02-a5de-9b8e473a8155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18a8f33-2064-471e-8cc8-398bfb216a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330c6606-38ac-43c8-8fd3-d093f39bb3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8ae09f-caf5-4a10-b94a-85ea32d9d595",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04526a5f-629d-4201-a2b6-30248050d6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708fea0c-ee2d-4476-a58c-82bc23625c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0adc0fd-6e5b-4692-9a75-eaddb14232c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531e6567-0e0b-4b7e-8cdd-2001135a14bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f07744-4621-49c1-92e7-271435cfceee",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8402d28a-0bac-453e-9806-ed18bd16319c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d2e656-0479-4ea1-8fe8-932fbd8fbccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf827dd-d35e-4f9f-b323-9d3a7424cc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3697af1-91f1-4c1e-bef2-5e91b88c8ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efb1b09-5b0b-429b-b218-7214a2df2a75",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29366dc3-4dec-4d6f-ba71-b671fad1b51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed80d278-5655-43a9-a3cb-1075aad17f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a914497-4ec1-4122-ae1a-3b03cb438f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500edfb2-9ab2-4446-895a-3d5ef9ccd3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6aec7e-e36a-4d61-9199-644fd3bd62f9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1e1299-6931-40bf-be91-6c725638c201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb0646b-2638-4f87-b316-6141bbddb715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8082c3-eb53-460a-a43e-dd55e99616ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b31672-f285-48ea-aba7-cc251547e48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdccb53e-5078-4302-88c7-ed8030a3ac68",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d49f85d-7720-4f22-8a49-b5beca137d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4bce83-15b3-4f80-b0db-1448dc070103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b33414a-accb-4216-9ecd-46e94d3049fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2fa2408-e419-42cd-9f1c-eef535fb98c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c856f64e-221a-4a92-8306-2023d3cee4b5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c827d5cd-937a-49e1-88ce-65001f96b288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dddfb6c-89a3-472c-ba70-5dddc1e52330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8d74bf-9a13-4bb9-81f1-36f103c9c73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b862e807-49ee-4105-aa44-957a6a64fc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff4ba0c-3e5d-4174-9de4-9ffc9e450ac4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54172ef-a4af-4ee2-a08a-00c76869efc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcb88ce-9bba-415f-85ca-bf39291dd71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3401e1-335e-42d2-be2f-8e9cad37d2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fa8658-8200-409d-8e5d-011e9981fd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c64f35-d781-4d13-ac48-d4e3e84baa79",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d458e59-f542-4d88-a093-3c5386ef10bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4f8cc9-facb-4c85-a5e5-cffec4174fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b33fdb-e974-4538-a293-1f779f21adee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9367941f-329a-406a-b966-fcde88684b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa1ab24-c30d-4ed0-bb12-a3ab37307865",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6a0b03-0cc7-4034-a6cc-4f33a35feca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5817aa0-15d1-4619-a7ea-130be5dd4cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fc122a-446a-4035-9afa-a0388f764fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6e4447-3a40-43b1-b298-5378753d71cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0274f358-5da4-49f7-a5e4-293e001d60f2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9e6671-d6f5-45d5-a69f-beb7e4a615b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37b74b9-664b-45c8-bd49-046b63c95d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86b7176-dbb5-4944-85b6-a9a79ef5b66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f4a980-f00c-4d0c-bbb5-7fd7a4ef1cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8674dddf-f313-4a44-8bf5-950d82385e14",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298443a8-27b1-4dca-bc02-10d8ac835f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b787e9a0-1e53-4ce0-b8cc-f8bdd51a17a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d2abc-e969-455a-849e-28b939fbf16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "facda0fc-e7cd-4789-9562-afb738269173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ab45a5-7d52-4369-b34c-7c01e255ed82",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969b66c3-3480-4bcf-80a8-7486ec0ad031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4244653a-3642-40e8-ac9f-630b13a5199a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef3070b-7af1-4f73-84ac-43d96743d0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5c4ba7-4640-4842-8312-7ed5ffc4ca09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea6cab1-0e81-4f6f-b9a8-a7f7e26253eb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713bf72e-2771-47d9-88aa-20112a7a094b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e204cb5-00f5-4f11-8892-860873dbd6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aca8aa0-e4e3-4f20-8352-1cea3f57f988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf125776-bbde-4520-bc68-23cacbf018df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da2f2dc-b2e0-4565-9c24-3536ed8fab3d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06352be6-ccc9-4183-b0d1-45a88d5235e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd8e496-3aab-4cd0-af11-c6d962d0b86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ee570a-bc43-4f5d-b028-da7b5dae20b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7f290d-2b87-4bd0-8d43-9f22018e9ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56879a3-6252-44b4-bfeb-a78b8aff7a17",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71468815-9b59-4565-95ff-532bfb404ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83c0cc7-e084-4305-a416-1df7370349f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf75b3-f5a0-4643-986b-59b6a9e7e9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a09955f-ca0b-44ef-b2b6-f21ee5fb6566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9084569-0d6c-4ee2-bfd6-32feaefee664",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c689bf-8548-4db0-97cb-0e97cd434c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6083e85c-387c-4f46-8722-7d4ce4f0859a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced9756b-2af4-480d-b948-ced33b1012e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c24e5dc-dfbb-4ddb-8842-9be122579c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c3cd20-0b72-4437-9910-9c14bd0dcb37",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dd6e68-7ebc-4a05-8a89-52895b71632f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7c6cd8-47fe-48d2-a5e2-f7fcac8387ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5700023-277d-43ed-8906-e11696b35e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6623887b-1d7d-40c0-a3c8-0d138fb4fbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5173ab9-f60f-4b5a-8140-454d16eafd80",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbfd48c-baf0-45e8-b8eb-f2ae6c4401a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a6896e7-1e8a-42b4-847d-8d1eef320b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c39be40-2a02-472d-8e66-69d9e35944ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa11dd8-ae41-41ae-92e7-b19e96d5ef2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8254cf-6157-483d-80a1-ec9ccc29a106",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6b618e-02f4-4c6a-aa14-4e4de52a48ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86a4f8d9-e78d-48fc-8cce-77a00db9e9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed32bb71-d3e0-4582-a50b-0eb55e8df8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65a65f4-1178-428b-bc2b-b4ad040dc6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9962e02c-d52a-4cd2-baf6-a2bdf95fa718",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f9b67f-50bc-4f17-a91c-c1bdcddb0976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c56169b-892f-4ca8-8169-95b93ff1903c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e09b56c-7961-43c9-8554-a492ef2b6f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fbc0ea-1b03-40d1-87f5-f6f9ca82acf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bfb38d-24d8-4800-b9b0-b32e04bc50e3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adadae0-b087-43f9-bebd-339a5ba63d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18161d75-59bb-40ab-afdf-f443bfe3cfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58a81a9-2a70-49c3-ab93-66eecff31eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b872b07-dfe0-4a7d-a07d-b6089886ac89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3e6e43-8125-483f-a605-75ae8c2f8729",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51802e9-2897-4189-a34a-d62aaa72bd23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8442698-69f0-458f-bf17-f288423c0a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aece9c45-be5e-4ac7-a16f-bca7bc58a798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54946126-2040-43df-aa7c-7b586970e07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a4f2d5-8893-46f6-8742-947c4c19f8fe",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838e5460-e01b-420f-9b6d-f959182d5952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ec9fdc-9b5c-430c-9b1b-7f89b6ade1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd8085-b5f8-4270-a7c1-872314a7bf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfc1cd9-9133-46c2-8601-0de3d4abf394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401900b2-7a1f-4b2e-8fb4-7470ee7172ed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf1d30-d186-4061-8f3c-d9ff38ee5cd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68b73f1-61af-43e6-8830-5b5705e88a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb55ac3b-a1c4-4211-b7b1-49bc5ec5ab76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871a63a1-6cc4-4166-a854-4237ad90398c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526c3f4c-9077-41ee-886f-861f6e064b8f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1711dca3-9af4-4d11-b84a-99e41b671332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc538126-faf3-4ce5-9f89-40e46d3f8486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5d4795-8a25-4694-8e9b-a2a9b17ee25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41d9f8a-fb30-4881-a9f0-5a1e851c526d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8d8884-c9ff-47b2-89a3-11b70bc7b4ad",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19892350-0f6c-40b7-a601-b9dc5eead625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68114c30-74a2-4827-a271-b4df951e697e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d2d769-3216-4cd3-bef0-5f278fa4de8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bcc117-93d3-4a6f-8f17-bccf2676fb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8709caa6-a2d3-4393-a4ca-c745d1d0e504",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c85fb76-ac2c-4f90-a1e7-512dfdf4af7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6338d6a8-c60a-43a1-bee6-49e0cca9e1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3555b300-6cf3-48b6-942c-aee15fc95dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dcd3af-05bf-4274-a988-16829da7f9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd2a9ba-9c44-4762-a7e2-05112b6d94c8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a539e323-f8ba-4ca0-b044-1d136c1c2c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273a915b-28eb-49b4-a83d-21fe1e860dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86bcc17-397b-4738-af3d-f93fb4a2f685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee361c0e-f120-4dba-b75c-a872cfbdace7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384381f5-c4eb-4cf2-8fde-b99f63bdbc1f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8ef1d6-a80f-4db9-bfa8-c3cc7c047be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783413e1-a2e3-4353-888a-e670b4c01bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67d038e-ea78-4384-a898-72315078fc0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8e182d-1a48-410c-835a-8577d1eff97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92f7e50-dd70-43bf-bf93-030275c10e0a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0aaa7c8-9dcf-448c-8589-a18bc17f3844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2681cc16-7fd1-4044-a119-5dfb83554718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e23d6e7-0149-4ff4-9d9d-b79a29e0fbfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca34c39-2835-46dc-a3f5-33f963c01cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d62194-78b4-4b55-bbcf-cadd3e17c150",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c8c311-3499-4578-9640-47f099b96190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84e15079-7b44-4297-8ef0-b7bb80193ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b078a063-4488-47f1-8936-8d560ae85e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3358bea-723c-4278-a0b5-7aab47180ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25e668a-c9ef-48a5-bd8c-1ac6089bb1aa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecfd4f5-2ebd-477d-b911-923262b53ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59f98d1-945d-4de4-972d-e688153c3a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed25325-f068-4bf6-8096-6beed6a6f672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb144dd-6186-46c0-aa46-3635ed5b3ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2e2465-ea38-4e4b-9478-f222933579c1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af0c28f-7178-4e78-a1a3-e3feeca544ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15fa38c4-1b4b-4ca0-9de7-bac290397f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933f2efe-ecef-4229-b8da-c33c32ad381e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a26c26-d03a-4923-92c0-2ff2b294c402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb3d268-a379-4f69-8d40-b4d138ac1f67",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b811cd-cb85-4f3b-a445-943591b1f4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768f9c5b-3717-423f-be86-27ac88299efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5197fbb-0287-45b1-8081-df90cd1f59fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c44753f-25d4-4619-a3e4-40c0903ad42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586fe883-ade7-4b12-a5c9-c4fae3d7bed3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23313b15-4c71-4a1e-afbc-40bf8d40c7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c098d4-2a46-4fc0-9ec3-0b92f195a5d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329dcde8-40e4-4e60-97b5-3bc038acf5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f020c903-7b6b-4eb2-a861-2268e4ff7eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4979c65d-73a3-42f5-85be-ae3b5e135485",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa295870-4ac7-408c-bb6f-b3dcb53923c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e61d527b-489b-4217-b799-7e4bc62acf1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eef022e-a236-48a7-b8a7-71ec37061b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f0216b-cde4-4030-83d5-c19c571ae757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbff33e-da66-4d43-83ba-2389cd4c99ab",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d31429-9318-46b0-9937-a4c64b76dbda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07c5ebb-4078-4488-b599-67efb2546d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1229609f-9bd9-46d9-a2a0-2e09e353716c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3060c281-c805-424e-86b0-a9d085f976cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7a8957-8933-4caa-a4fb-bed52b8648de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9411d1bf-0ded-480b-8b09-32af04eb0d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f57f79-1555-42d3-b599-0fb229c20628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756880fd-a33e-4a90-b60a-568c3ae5f935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e341d31-9663-43ac-a799-0ed980ad34ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f56d861-d26b-4f44-bea7-fa5216e5a1b4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f688f45c-95b2-42fe-8cf4-7b0f1f7276e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70a48105-776b-4413-ab91-f3b4c44f5eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a256dcc-5c28-4c75-a451-04e9c013b227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f4e6dd-fdd0-474b-94c9-41a1862528aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a72aca-659e-4a90-8322-7b5c6789a163",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222bda47-46e7-4f12-b995-94455282b2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c92edb4-1436-4ab1-b498-ec0e9db8f6d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36e7ac0-f6e4-4b25-9fea-3685efaefaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064e4d87-911f-4249-a781-4da2d873dcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805f61b9-e59b-4644-817b-d03774f4fd03",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5647edcd-9fea-4093-b8bc-ae4c5e0bf94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87dfa3a5-e290-4be5-918c-09c9ae70e8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcb05f7-7240-466d-a56b-7c707759c185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e54ec7-1944-4931-a80b-d6708e4fe571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9220b2-b75a-44b6-af82-1e0d98aa78a4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1097c4-b6e2-47e6-bb6c-74401c249ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e6f85ca-b410-495b-bf43-e22e162e94b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd52b87-8d0e-44f0-a089-1e12f57d4d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1807b093-210a-4aba-b608-3947e1966b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b327ad3d-df29-4cf3-a003-ebcb47c8c00f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a89dfc6-d7f3-4021-aed3-6b8712a53723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ab6d8f-52df-48b5-80ce-0fa8167da209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0a3e04-9e57-491a-83aa-62ad8ba88389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86267191-369d-4215-bfc3-8e0f90500c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f6741a-67c5-4259-b357-2ef31a68fdf4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2b7d01-adb4-4ba6-9ac5-c426eaefe20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d7ba31-d001-473a-92b9-1f55002c58f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268b6a81-f34e-4168-b1bc-67d975436e10",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a22f011-5c90-4160-b99c-3f91a23fe120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5853b9cb-112a-42f8-aacd-4c6d364d755b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50dfbcc-1654-4a21-851a-6bb332e0281b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772d99e5-ac0a-43b2-bd6e-5d0764191ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86c77a4-af0f-4dbf-baba-9a6b08b56641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f454f2b1-ee7f-4c71-b4e5-d526c7a5e73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ea4082-8e58-49e0-8208-07e1ce2b511e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7baf09-e1f5-4469-bef0-cafb7e6a06aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df16a0dd-d099-4fea-a745-461c06b12b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53143724-42fe-4ddc-a10b-fbd7d291c1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b5f553-38e3-4755-8812-06fd08394cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3864767c-9154-48ca-a2ef-40e247dfc21c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d82d31-7827-4117-b7b4-3ffeff2f3fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88736a6f-667b-4a7c-8e49-37ade57ab11b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4567a7-9d14-443e-bb4c-8aa7d499793f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9440c0da-c426-4bf3-8dd2-0cdee1b9ca84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12670b70-4001-44ff-abec-b1917eda04fe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969c41ff-742b-4d75-97e6-9ccb62e94958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e883d9-9110-4e1b-a7c3-f1d81dc73dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a380c2-8651-46f8-b921-c6498a0ce945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd34fe30-b46f-4f03-9276-5d8ba6c58771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7178ada3-c745-41fa-acc5-9b7693dc221e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22011926-90b0-45d0-8135-5f0e2252a0da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c88346c-cdba-4225-b451-3fd55b5b1d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5292c8-1860-43b3-a2e6-2cf98f55445c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efe4452-59cd-4574-a2a0-7f7c68cc46f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9e0138-f540-4db0-a669-c4610b0fe8a9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aae2fce-8a8e-4636-808e-c994922f7cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178401ac-b648-4aad-b61b-955a2efbb09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041a85f4-2eaa-4d8a-87ac-32375ae3ffdc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d9338e-0687-467c-b5fa-9afd26bf74fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e238dca-f5fa-43e2-a379-1a74184048a8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd062a0-8062-4928-aaf4-95b772b512ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c02ca6b-3dc2-4cdd-84c4-0f5c06466399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262318e1-fe02-4f25-ba86-408f25cc89cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c20d38f-a998-41dd-838c-8cbb0cf4036c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e770073-4e5b-40b2-b8ae-6633db03f7b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abe87138-74d1-4e66-b851-6359d8527e36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e00dd713-df0c-4335-aaec-eafdff8c9857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "251f5116-5572-4e6f-b26c-b67bd60a4b15"
                    }
                  }
                ]
              },
              {
                "id": "339b6098-908b-419d-b56c-ce90254dfe9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39272711-5d90-4259-a45a-2ebd30bf6edd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5839a427-7ae0-4f94-add8-afa1910c2f43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4937d0f8-d3e6-48d4-a40b-ae183bf4d8e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c580e92-b4ab-47ed-a8e3-7b8f07e71ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afbb889f-9803-41f7-88f9-52bb5d95da43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a941ebb-7859-425c-8be2-6b13d22cf8df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f873cdf4-03bd-45d7-8853-15eead4feaeb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a534b5d-6d57-419b-b043-75888d01ab62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a3ea89e-7d56-497c-9cb8-8b96b2334ab5"
                    }
                  }
                ]
              },
              {
                "id": "8e7b9ed6-adf1-44dc-aac1-603f814cc720",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d2f9c6e9-16b4-4bb3-8e82-372ec036b676",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3525705b-34e7-4c16-b7e3-61895449d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "49b1807b-6bae-47c5-8e78-0259dda23f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6ec0f1-6d8a-45c6-b0ab-bc14514b758d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fada2d38-c445-4404-a8b8-35ee3029da63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8806b2d6-ce80-4da9-b6a3-5e815b3d3db7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff07c7ca-7957-4710-ae08-b26f63966a69",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b5495fc-9caf-460b-b421-7a7783edcbcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dcfe3d02-9d54-447f-882c-e6d5091d0a68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d117d40-fb9d-41a8-973c-fd37519feef5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "614dbc68-ff7f-4bbe-a3eb-9754e7ff5b8a"
                    }
                  }
                ]
              },
              {
                "id": "bc2ba5f7-2dec-4b57-a3b2-df9226e451ac",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77487dfc-7143-45c5-b5a7-33b13aad8d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa27a4ff-8ebc-4b61-8960-34274d3feaa0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3191acb1-f129-4177-9054-9d9553425581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5581416a-6392-4268-ade9-9b7e16460bd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6474ffd-b726-4b5b-bade-9e04f5e8c9e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9e6041b7-1931-46e9-8bdb-0ae82fe707f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f30dde6-ffeb-43f4-a3be-1d79b912598f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef942bf5-c3ff-43eb-b741-50cd64e756b7"
            }
          }
        ]
      },
      {
        "id": "49278ab4-e0c9-4cdb-a284-5de72b36f8ea",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8ce52bd5-ec23-4cb0-9368-bd8ded395345",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7c80bf7-519d-4d63-84ad-b5af3c8da852",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05159e93-f64d-4d33-9749-b6a93e18aec2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ce3d29-38e4-470f-9666-a9f3f55ad67f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0070fa86-03c0-473f-a692-048a70bd04f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880b07f4-b180-4e9e-8556-849da9e65f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b78e654b-503e-480e-9402-3cef0824253a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22fd0263-c7a6-4f74-9424-2fcf5f2140b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd42b77c-2218-4c6a-9d96-cccb3ba02f93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec7acc3e-69c0-4594-9db5-12b6723562dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a048abf6-16f5-4921-aad7-96c302e43c96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "463f08eb-13d4-4782-8d7f-89cd74d92b7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "56daf310-63c3-4787-b6bf-39d61e954daf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40bb222d-745c-4fbb-b227-f591c1ba1c22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7db88754-5f1b-4860-a366-60195ca2c2b3"
            }
          }
        ]
      },
      {
        "id": "b23626a6-e322-4f86-8029-cd975e31cb62",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f7e6e340-a461-40a5-8fce-42d1db3d3386",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca153283-2365-46b1-a422-30bdd897af09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f075ea8e-8c16-48ff-89d1-7f9457881841",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b130cada-f084-4fab-87b0-354eefdd5e6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "738f8dcf-9341-46fa-b2da-6e626f018853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbfb048-bcec-475a-b1a2-10b1e2003a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87c311e8-2e56-4f38-85e4-05a9e0ed90d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41ebe13f-30a7-400f-ad10-9a1dd064f70c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fda753a9-b7dc-4a2e-9da9-84ab6ed33d50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4885bd85-1bdd-4356-a05b-90d7caab6b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc8263f-d810-41ef-88da-748b4f0bab08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f74fd9dc-3eee-4a25-9ab4-a9a890e7b51f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9be44fb9-ac74-4aa5-a86e-28654a98dd1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d35f281-1e7a-4685-9467-ea2977b3757a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5470791-6f21-43e1-8b09-09267b391dc1"
            }
          }
        ]
      },
      {
        "id": "68743966-261e-43be-8c4f-a5b03fd05a6d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7c34f8fc-d1cf-4b12-bc92-cae1cfbba3fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e0f9f80-c1a9-4982-be79-f7acdea65556",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0cae63d7-f470-4925-9b1a-3cb1ae98d7cc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dba60b2-ac61-4d27-b803-c4a37c763af1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4a620f6-3ef5-4169-b751-37b479adef1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "668b29f0-f246-4d03-a778-3b48967aa2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3003bbde-e41c-4602-aef9-d2948343f155"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bde357f2-f283-4b3c-9234-2249059e8fc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8efff5b3-4a03-47be-861f-a1ceefa50b88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ec7142-2997-4e6f-9bf1-b92aa504c216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "829f560d-8508-4964-ba45-d2eed643ebb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "725e8c9f-6be0-4a68-880e-74a020753b46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1970b3d-7c11-44ea-8407-dc07aa4fe8da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14c60ae0-2888-48f7-b547-05d4bada4313",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5838025-066c-4c1f-8804-56019506413b"
            }
          }
        ]
      },
      {
        "id": "7bbbac6b-7c65-4cae-af09-fef6aef11b78",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db7cfbab-6e8c-4677-bab6-063c5cda6774",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b39779a-8230-4c0d-bfbc-db0cd95c704e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "496eea43-db6a-4911-90b5-e22d6e5bab55",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09618cde-6307-4a6e-a8f7-4890966b0c13",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66140e92-e89c-4b27-8e91-fa7bfb2f98b0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.26666666666668,
      "responseMin": 9,
      "responseMax": 609,
      "responseSd": 68.81660686285663,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701650186810,
      "completed": 1701650213867
    },
    "executions": [
      {
        "id": "5acfe9d8-69da-45fc-ba76-de1530f7a442",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "43d8f153-2e62-4b27-8ebf-896647c768f4",
          "httpRequestId": "0b71c9bd-af27-471f-b8b5-311e9d2133ea"
        },
        "item": {
          "id": "5acfe9d8-69da-45fc-ba76-de1530f7a442",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "63af11a8-18c4-436b-b86c-6ba46ee5cefc",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "6058bc07-7418-4e5c-aa09-eab50a44ab47",
        "cursor": {
          "ref": "390517be-ae05-4635-9ff7-0ef2ce379bb0",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bcec034c-177b-4c1f-9b61-c3f6c33bf238"
        },
        "item": {
          "id": "6058bc07-7418-4e5c-aa09-eab50a44ab47",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b2da6da3-48c9-4717-811d-f7165f735d41",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "4235db81-9ddd-4208-aeac-b3c6a175aef2",
        "cursor": {
          "ref": "d3a9f3e5-2bf0-4b6d-b8a8-5663e52b72cc",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8e7e54de-bfbe-41bd-8bb4-688b9dc7ce4d"
        },
        "item": {
          "id": "4235db81-9ddd-4208-aeac-b3c6a175aef2",
          "name": "did_json"
        },
        "response": {
          "id": "5ac4e612-7718-42fb-9a39-e067aa78b0a0",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b06076c-f491-4701-b1e6-29c7e896a5db",
        "cursor": {
          "ref": "4c09f3ac-aa1b-404c-89fb-8e587604be0d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d35f405-0e35-484f-98da-5eb4ae5fd12d"
        },
        "item": {
          "id": "6b06076c-f491-4701-b1e6-29c7e896a5db",
          "name": "did:invalid"
        },
        "response": {
          "id": "86df7876-88af-458c-9c42-83480416df2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b06076c-f491-4701-b1e6-29c7e896a5db",
        "cursor": {
          "ref": "4c09f3ac-aa1b-404c-89fb-8e587604be0d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d35f405-0e35-484f-98da-5eb4ae5fd12d"
        },
        "item": {
          "id": "6b06076c-f491-4701-b1e6-29c7e896a5db",
          "name": "did:invalid"
        },
        "response": {
          "id": "86df7876-88af-458c-9c42-83480416df2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecbe323-105d-411f-945c-2c1fb7dc05cf",
        "cursor": {
          "ref": "ed0234a9-ef8d-4104-acc5-3698ddff3a9e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5215538a-6855-42ee-ba52-5561b5282a67"
        },
        "item": {
          "id": "aecbe323-105d-411f-945c-2c1fb7dc05cf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dc82e0b0-5e7e-4f1d-b963-3985055f1ec3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca962db-bc9b-4f79-8fce-dcd43d70633c",
        "cursor": {
          "ref": "644b9050-8841-4105-9dc5-8d587c53912c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5626935c-3a22-4a93-8f2f-caf77f7ccf36"
        },
        "item": {
          "id": "2ca962db-bc9b-4f79-8fce-dcd43d70633c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "de81c0d9-afbc-4e64-b6b3-6850bde00f19",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d17a5b9-7eef-4d70-b39a-0b78a33cf3ad",
        "cursor": {
          "ref": "8185771a-0a92-43c2-ad21-5b3ff7e60bd1",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "309a2c03-c3b0-4484-9ccf-2653047471ec"
        },
        "item": {
          "id": "2d17a5b9-7eef-4d70-b39a-0b78a33cf3ad",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "add13ec1-7ad9-4c1b-8787-f6669c0a27a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8caff5f2-b530-453c-bbda-649121a93319",
        "cursor": {
          "ref": "9d6fcd0f-7e74-437f-a955-d22d44d3b57a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c3269e61-92d0-4631-83d5-02959fe5a888"
        },
        "item": {
          "id": "8caff5f2-b530-453c-bbda-649121a93319",
          "name": "identifiers"
        },
        "response": {
          "id": "9509f522-8cca-4986-b251-aad0bf7a6fb3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f414eb0e-7cfe-437d-9392-68f36854463c",
        "cursor": {
          "ref": "78793a62-4f94-44be-b8d2-c04b5f52e710",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "52e0b262-23b8-481e-a815-1e41ce5a2e3f"
        },
        "item": {
          "id": "f414eb0e-7cfe-437d-9392-68f36854463c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0ab250ba-397b-4e8c-82b6-653ffd580d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fc1f2e-d97a-4698-858d-4cda9d4ee6a4",
        "cursor": {
          "ref": "f612c756-5fa8-4da2-b884-4d62d6cd6e63",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ad02d9fa-3300-4863-ba60-bfeeeaa3a298"
        },
        "item": {
          "id": "d9fc1f2e-d97a-4698-858d-4cda9d4ee6a4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3151e630-13fe-48dc-aeb4-861cfa861319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423efc8f-93ae-4f2d-8d3e-d5ead035d63a",
        "cursor": {
          "ref": "6bf7a96e-1a05-4d9e-9844-c38fddadc4b9",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d49f8d74-f210-407c-bf8e-e41c1cb4177c"
        },
        "item": {
          "id": "423efc8f-93ae-4f2d-8d3e-d5ead035d63a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "adb8c20d-bd2b-43d3-bade-78e7cd834216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c2405f-68b0-4491-aa4e-7bdff47dd926",
        "cursor": {
          "ref": "dcb6a73c-1346-4b7f-915d-5faac2774c07",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b555fdb-28c5-4be9-b572-408666bffb46"
        },
        "item": {
          "id": "c0c2405f-68b0-4491-aa4e-7bdff47dd926",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3e58de35-918d-4c03-8010-fe067a015c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e75d12-5333-4827-8e32-1f3d6073983d",
        "cursor": {
          "ref": "3e710e10-9058-4e73-bfd4-0019e2aaf5b8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6b407c04-e9d2-4ea4-94ae-87b2b79a4256"
        },
        "item": {
          "id": "23e75d12-5333-4827-8e32-1f3d6073983d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b8fb928f-cd7f-460f-8b94-99ef7cd5aae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f50de0d-296c-4379-b3bb-86e737b5f75f",
        "cursor": {
          "ref": "3eb7a80c-eff8-45f1-9547-96eaabc6d4b3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a0b54cff-c7c0-4a2f-b08f-6ac89ebabf69"
        },
        "item": {
          "id": "5f50de0d-296c-4379-b3bb-86e737b5f75f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6b87c2c6-a31e-4061-b3af-29f0f2f441da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93fa84e-368d-464b-96bb-e2e0f724136f",
        "cursor": {
          "ref": "15423482-5071-455c-b1ef-1da9678d22f7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c2d4d202-40d8-4d12-97be-3ff0f5a07fba"
        },
        "item": {
          "id": "c93fa84e-368d-464b-96bb-e2e0f724136f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fe2940cd-ce2b-4b87-8c4e-3ac368b46a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8895dc3-dce0-4a0d-912f-60e48c8f0ebe",
        "cursor": {
          "ref": "156f4637-346c-4dfa-a6c5-fe0b506a49c6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8f30ef05-1362-4922-b270-9f6dae4ec521"
        },
        "item": {
          "id": "a8895dc3-dce0-4a0d-912f-60e48c8f0ebe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fb51829f-7b2b-4875-a2b1-ab41204fe0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4b3075-ebd3-43d5-9315-a089863bbf3f",
        "cursor": {
          "ref": "fe91f4dc-ca0b-46ab-bcb9-5769d5030edf",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1d449efb-aaee-42ec-a8e5-9228e7c38b43"
        },
        "item": {
          "id": "7b4b3075-ebd3-43d5-9315-a089863bbf3f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "92de5fb5-a724-4ebe-9997-4ad11e59ff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ca8c1a-9c0c-4471-83eb-1d1fd39d0211",
        "cursor": {
          "ref": "c624dab9-f8d0-4c0d-a813-3fe7379c85f9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3ac59187-0591-4828-9216-351a6a21b54b"
        },
        "item": {
          "id": "f0ca8c1a-9c0c-4471-83eb-1d1fd39d0211",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7fc5a57b-4f7f-4b64-8f44-8b22c787f38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47917adf-1b65-41fa-9f8f-174d6dd2f91c",
        "cursor": {
          "ref": "6ce3b527-a8d0-425b-a68f-15b546256660",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4aa6e031-5340-4add-ad2c-1213382513eb"
        },
        "item": {
          "id": "47917adf-1b65-41fa-9f8f-174d6dd2f91c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47451122-27e7-4b9e-a767-753a31f71467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481a7e53-297d-41b8-bbcf-9d903d9e5310",
        "cursor": {
          "ref": "49608b7e-8c91-4bd5-a63f-ad87937fd6b1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e747a702-ba2a-4ced-bd60-8281bf9c7b0b"
        },
        "item": {
          "id": "481a7e53-297d-41b8-bbcf-9d903d9e5310",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9266a6be-44db-4717-8de5-15c7bb10f495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803befe8-4ee0-4d7a-90dc-682e216676b6",
        "cursor": {
          "ref": "e039a0c9-3eaa-40bd-8141-54bd0d4ab6d7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6bb80321-9bb1-4b48-a2f0-b52dbc319e6f"
        },
        "item": {
          "id": "803befe8-4ee0-4d7a-90dc-682e216676b6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2a080daa-0cb3-4acf-9f2a-0a9e1ffbf02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deea7066-5914-47d7-9204-1a1013d88eb8",
        "cursor": {
          "ref": "047e22b6-6a6d-4fb8-b144-d27aeeae8c8d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f620fbfd-3193-46c0-b72c-cac8ab6451ba"
        },
        "item": {
          "id": "deea7066-5914-47d7-9204-1a1013d88eb8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3f8733c4-3762-42d8-95e5-c8e5ce273af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fa2153-d004-4d30-aff2-49494f326c75",
        "cursor": {
          "ref": "72f6af37-d4b6-45fb-a9ee-d93e03f04867",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5122afc9-7472-4077-9d4c-3033aa1e9040"
        },
        "item": {
          "id": "d3fa2153-d004-4d30-aff2-49494f326c75",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "659725d3-292a-450f-8095-ae5ceba80143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f2cb91-dc12-4d6a-b2fc-b92a192fe4dc",
        "cursor": {
          "ref": "6b8407a7-a01f-47c3-a437-e65b7e141616",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e5e00483-c333-4788-8fbe-38ab47a7713b"
        },
        "item": {
          "id": "42f2cb91-dc12-4d6a-b2fc-b92a192fe4dc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2df16b1a-3ae2-45b7-83c5-bcbfb018ce65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19530b87-d77c-4033-b84c-d8158aeafcf7",
        "cursor": {
          "ref": "2a4bc720-ae95-4b3c-a45a-04a91b9b5165",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "eae369c4-d2b1-40f1-9b0f-00fc0a454b97"
        },
        "item": {
          "id": "19530b87-d77c-4033-b84c-d8158aeafcf7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "464b4c6d-1e4f-4841-b5b3-da3117e5f4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a403b084-79fe-4f89-986d-6956ed146427",
        "cursor": {
          "ref": "2233f960-8887-47f1-833a-af7647acd6d7",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6765a5bf-084c-406e-9c5b-d85391d6a72e"
        },
        "item": {
          "id": "a403b084-79fe-4f89-986d-6956ed146427",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "35868d5c-9b14-4c8a-a543-ad693b79250d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882ab259-ce53-4f76-ad06-472a381d53ea",
        "cursor": {
          "ref": "049e2f34-4766-4a3e-9d9b-96cdbd22e65c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b91b9e9d-86c2-40a4-8fa1-f5d21e71db96"
        },
        "item": {
          "id": "882ab259-ce53-4f76-ad06-472a381d53ea",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "09ba398e-5020-472c-a233-fff1a3f36e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1a1fa1-bbc5-40b1-b6da-bdc0ae9f78c2",
        "cursor": {
          "ref": "bf67fb06-fe38-43b3-b178-d18bef2b531c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8e323f26-b28b-4712-b85e-4d9216eab9f2"
        },
        "item": {
          "id": "be1a1fa1-bbc5-40b1-b6da-bdc0ae9f78c2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "049930c8-daef-4052-a181-f35de00bd781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535a5038-9e92-428e-b018-5dcf6e5bec15",
        "cursor": {
          "ref": "34676531-8b06-494c-9276-4600b4506ab6",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "202b71a9-0650-4507-acd5-f18edf5bba8b"
        },
        "item": {
          "id": "535a5038-9e92-428e-b018-5dcf6e5bec15",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2d7ecf70-9c99-4c99-87e7-1802015e8840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1b8d5f-590d-4ff0-b1a4-2ebc13d50d96",
        "cursor": {
          "ref": "b2c58fd8-179f-46c5-ab5b-34924cb2bf6e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "054655e9-5427-4fcf-b3b3-63646469bf46"
        },
        "item": {
          "id": "af1b8d5f-590d-4ff0-b1a4-2ebc13d50d96",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1587eae4-1850-47f4-8141-57e3b56e6275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad105d47-f18b-4ae0-bdc3-3f3a050bb7a7",
        "cursor": {
          "ref": "33db96cb-8b7a-4d16-a261-c810bd83a5a9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b44ddf11-14c7-4ba8-a950-5eaa3f8e1d2e"
        },
        "item": {
          "id": "ad105d47-f18b-4ae0-bdc3-3f3a050bb7a7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e475a29a-d589-4fd4-beae-2fe8e66a9c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c68e72-8f90-44cb-a197-2851067473f7",
        "cursor": {
          "ref": "d23dac5c-7f33-4f98-8b1d-96cfb73192f0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "870a02bd-bb5d-43cf-b4b6-a591c4beaf55"
        },
        "item": {
          "id": "52c68e72-8f90-44cb-a197-2851067473f7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b5399081-27e0-47fa-98fe-26764b39248e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339b06fe-f99e-4f85-b79d-56d03c921230",
        "cursor": {
          "ref": "8b7229cc-babe-40b9-b1d4-df49eb4b4c16",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dadb4894-72bc-4801-90cf-2707eef508a2"
        },
        "item": {
          "id": "339b06fe-f99e-4f85-b79d-56d03c921230",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "24d1e0bd-3d76-44ab-9e76-7b15c30b868e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a8698-c356-4368-9f36-e66c285e8ea8",
        "cursor": {
          "ref": "7b69e24f-1c90-4bd1-92d6-75e775542da8",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f8cb1d8f-3bdb-4e8e-9ab8-80d0970fe53d"
        },
        "item": {
          "id": "a40a8698-c356-4368-9f36-e66c285e8ea8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0430169c-8af0-424b-804d-2cacd92af23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd2bb68-488f-4ade-914b-4cee108f88b6",
        "cursor": {
          "ref": "b720d0d2-3309-4548-bb9c-fa8c5ba4d133",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "99003c88-0faf-4b15-9482-c8bef1b792b8"
        },
        "item": {
          "id": "cdd2bb68-488f-4ade-914b-4cee108f88b6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c6ab07eb-cd27-4cc2-b5cb-be472d183aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a70442-1e1c-4434-bcdc-e5b436a6e0e3",
        "cursor": {
          "ref": "87b32eab-603c-4026-93ca-a84a0ec99870",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa0de2ec-04c1-45b9-9fe9-9b9155233e61"
        },
        "item": {
          "id": "81a70442-1e1c-4434-bcdc-e5b436a6e0e3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f4a7b266-ad6a-41e9-8b14-0d04a8adfb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba84ecb-c6c2-45ab-9734-b734bb497dcf",
        "cursor": {
          "ref": "85db21bb-8437-4c83-8f05-f48375c62c70",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fa93a873-61f1-403d-ab27-e05830447f66"
        },
        "item": {
          "id": "9ba84ecb-c6c2-45ab-9734-b734bb497dcf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bc9f1403-93af-4375-abf7-9e5cd2665c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efae1726-35db-4974-8b72-cd0556785cd2",
        "cursor": {
          "ref": "83f965be-75f9-4472-a8e2-7763464bb213",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "35bbabdc-73cf-4a2a-867b-f8ee9a544c8c"
        },
        "item": {
          "id": "efae1726-35db-4974-8b72-cd0556785cd2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e24ed6a0-9393-42f2-887c-17958f61a0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d99271a-9235-4335-8640-e2f659b18297",
        "cursor": {
          "ref": "8ef92d59-8bc8-4eeb-874e-2fcf584c56fa",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e78836ac-8160-4afd-9464-5677a5ad9068"
        },
        "item": {
          "id": "3d99271a-9235-4335-8640-e2f659b18297",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "02d0a053-6192-44ec-997c-64b3951c945f",
          "status": "Created",
          "code": 201,
          "responseTime": 609,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "afec1b76-4808-4daa-8a6d-9d8d915dcffd",
        "cursor": {
          "ref": "f5558fc6-195b-4386-9fa0-7b52fa9e24d6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1552f558-b9bd-44d2-a5cf-7976ebd246c9"
        },
        "item": {
          "id": "afec1b76-4808-4daa-8a6d-9d8d915dcffd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "89ecb6c7-e569-4a01-a52e-4a748c0193f5",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "db5a32b2-ebcb-4d45-b57f-c4c7a1d3adcc",
        "cursor": {
          "ref": "b4848283-a93a-4987-8b71-e8f77a51dc32",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d1a1a5de-87af-4676-bbf0-54e9a4e27b60"
        },
        "item": {
          "id": "db5a32b2-ebcb-4d45-b57f-c4c7a1d3adcc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1e742578-b630-4837-9655-a28f4128d2b8",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "02636292-59e9-4fac-8378-6c202e6a4aa8",
        "cursor": {
          "ref": "6d47716a-c25c-431d-ba53-1b614e6c616c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ea2a9e7-4223-436e-92d1-7d581967b0aa"
        },
        "item": {
          "id": "02636292-59e9-4fac-8378-6c202e6a4aa8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1630f3f4-71d7-4f8d-bed4-7d24260ffdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285f04ff-0642-4d95-9672-cf17941bd8d4",
        "cursor": {
          "ref": "87278fc5-67bc-4d32-9e2c-072974f8d5c9",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d35440a3-1de4-4be1-bbaa-411dde5ab550"
        },
        "item": {
          "id": "285f04ff-0642-4d95-9672-cf17941bd8d4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3d76f8a5-0f3c-4007-859c-abb424636b12",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ff36c3cb-29b7-4584-a796-5d55d1b8939e",
        "cursor": {
          "ref": "dd5d7d9d-4f58-45b4-9024-fd61e33c8ed0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fc670844-559e-43fe-bd53-b2960c8d4c73"
        },
        "item": {
          "id": "ff36c3cb-29b7-4584-a796-5d55d1b8939e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b960bdfc-c2c8-4228-97e5-3b4db645db8c",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3eaf3d2c-013b-40fd-821e-95e53dc0a5b8",
        "cursor": {
          "ref": "94b80844-018e-40c5-bd11-fe6461549333",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d9617a66-f4f8-43f9-b9f1-9b8011c8cfb4"
        },
        "item": {
          "id": "3eaf3d2c-013b-40fd-821e-95e53dc0a5b8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6624877c-037f-45f1-87a3-cae3619b4721",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5db5553b-3171-4080-b72b-3e6e8a6612fb",
        "cursor": {
          "ref": "803d10d9-586f-4d68-998f-025f03675d06",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "93fb5899-d7f8-4b77-b35c-618247ce8b2b"
        },
        "item": {
          "id": "5db5553b-3171-4080-b72b-3e6e8a6612fb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c74c893a-4ad5-4ab8-b1ac-03dedd05c222",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c5c53c5f-9fe6-4dc2-875d-711d91f52ea1",
        "cursor": {
          "ref": "364a7e3b-eaed-44a8-b1f2-f07e662942ea",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2d6de696-9982-4554-844d-2cd889f9b65f"
        },
        "item": {
          "id": "c5c53c5f-9fe6-4dc2-875d-711d91f52ea1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "46fcee0f-dea4-4684-9659-34aafd7c0a3c",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c47d5e7b-8552-4d3e-854a-86b19c4228f6",
        "cursor": {
          "ref": "6bb13c15-ab2a-40a3-ac2c-5991037b1511",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e141208d-f7a0-424d-9385-ce45e877aabd"
        },
        "item": {
          "id": "c47d5e7b-8552-4d3e-854a-86b19c4228f6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7d148531-8baa-40ea-93d9-152d88c10470",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "00b4039e-9bc9-4bc2-a295-c08e15fd394f",
        "cursor": {
          "ref": "7a793b8d-bbe1-4de1-af71-4f3d8d3dc2f4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b4d83e4a-0bbe-4690-9435-afdef76c4bc8"
        },
        "item": {
          "id": "00b4039e-9bc9-4bc2-a295-c08e15fd394f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7db27ef8-31b6-4aa9-a3fe-1ce1f142fa6e",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8d81d625-2974-4c73-b85e-cbb9779decb7",
        "cursor": {
          "ref": "7d84a33e-d7da-41f4-a8a3-f380b7255eed",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "914eb471-5ed0-43e7-b8cd-fba334cac965"
        },
        "item": {
          "id": "8d81d625-2974-4c73-b85e-cbb9779decb7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e3304d9e-ff43-4780-9a92-cad97ee88588",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "535e399b-3cbb-4a6e-baa3-a0f3c92f1ddd",
        "cursor": {
          "ref": "61e2d13f-581f-4e83-9092-d777bf9f02c7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a61645b0-fc65-4d5d-832a-4fc865128adf"
        },
        "item": {
          "id": "535e399b-3cbb-4a6e-baa3-a0f3c92f1ddd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3ed4bf32-7178-43f4-aff9-a6c21be4f2ab",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "935088c1-b2e2-4bba-9407-1b7e739e44df",
        "cursor": {
          "ref": "2acf9643-400b-41d0-8003-c367c32314ea",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "25f5c8c1-baf7-441b-a147-f7f734df0db6"
        },
        "item": {
          "id": "935088c1-b2e2-4bba-9407-1b7e739e44df",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c6d28965-a406-4571-8a6d-e2c9b8d47f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262687f7-9e0e-4d0c-80be-0d5ad9b05868",
        "cursor": {
          "ref": "7f0bf8c5-e482-4756-8dac-c26bdbbefe67",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "faabf049-3e26-4df2-97dd-95870ff5f6ca"
        },
        "item": {
          "id": "262687f7-9e0e-4d0c-80be-0d5ad9b05868",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0fc5f0c1-d87c-4df7-b62b-99c326dc95c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543318ad-6f27-4ebe-bd50-c04c42be3db5",
        "cursor": {
          "ref": "8da30193-cf84-4247-a863-a5db3c621adf",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "52a5bb7b-193d-4da3-94a8-512005fb6864"
        },
        "item": {
          "id": "543318ad-6f27-4ebe-bd50-c04c42be3db5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7a1405cb-8a3b-4ab7-859a-b9dee033ea59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ec6e3f-ca10-43d9-95a6-362ed8991065",
        "cursor": {
          "ref": "b44a6667-711d-4c81-8fd9-6c60de79c9f8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6a52059f-ed6d-405e-8c7b-0f1597511a16"
        },
        "item": {
          "id": "34ec6e3f-ca10-43d9-95a6-362ed8991065",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3642794f-d46e-4a77-86c2-928e7df710e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafb45d0-18e2-40d1-b8c5-12d5f177e0a8",
        "cursor": {
          "ref": "1de64021-4049-467e-90b9-1105006e3bde",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ba4cf0bf-3d17-447a-9dd2-ab341fc27012"
        },
        "item": {
          "id": "eafb45d0-18e2-40d1-b8c5-12d5f177e0a8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ce0cb78c-3220-4810-a257-567798971cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b91744-18d3-44a6-8c58-3841cb95bb01",
        "cursor": {
          "ref": "b7a278d6-e021-41ae-84b7-2c7f51c45f3c",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "356f65cd-8b31-4158-a399-63d0043a6d04"
        },
        "item": {
          "id": "c2b91744-18d3-44a6-8c58-3841cb95bb01",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "82f559ad-59fc-42dc-aecf-7fdf2fe8ba1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55977422-fa4d-44c4-a9da-6cac9448dd39",
        "cursor": {
          "ref": "087a192c-e8c5-45b7-9f6b-bd70c5234b16",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f25f1ad9-01b6-4d7d-aa5f-260797e6977c"
        },
        "item": {
          "id": "55977422-fa4d-44c4-a9da-6cac9448dd39",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0ada6d13-ef9b-4954-ad45-764a31acb073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a42a1e-00b3-4136-8e54-fd77be003ec2",
        "cursor": {
          "ref": "3e622244-b33f-4d0f-9d95-811050c67292",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "412de579-01fe-44a2-993a-bfc257281653"
        },
        "item": {
          "id": "33a42a1e-00b3-4136-8e54-fd77be003ec2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0ed1ae1f-2925-4479-86df-ceae665aa8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a427f78-89c5-4145-9fdf-17f155780cdc",
        "cursor": {
          "ref": "f3019d9f-6b23-4629-bcaf-ba53516bc004",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e16f7d6b-68d3-4478-bd45-3e2503ae393f"
        },
        "item": {
          "id": "5a427f78-89c5-4145-9fdf-17f155780cdc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fe8a4940-866a-47d1-bf99-2651e29df03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca5099b-7fa6-441f-92ff-d9418cfd79e3",
        "cursor": {
          "ref": "0d04e400-21ff-46bb-ac8a-0892fd42461d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c6bf9030-1249-4b1d-a44d-c731499e7f2c"
        },
        "item": {
          "id": "bca5099b-7fa6-441f-92ff-d9418cfd79e3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "efc83cee-2452-44c8-a6a7-a4af3da73cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52dcb78-321d-4cd3-a243-043f48b8b001",
        "cursor": {
          "ref": "1537ae6c-0b9c-4505-ba00-d7c8f06815b6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0e912c9f-e894-4794-8405-02314e833b4b"
        },
        "item": {
          "id": "a52dcb78-321d-4cd3-a243-043f48b8b001",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cc185a52-9234-44b3-83e0-8738201c262a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf0b522-4272-4417-9c76-0876fb65ba81",
        "cursor": {
          "ref": "f5155765-033f-44b3-9a4e-770db5651c38",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "abfa304c-228d-4023-b8c6-dbb58a5faa2f"
        },
        "item": {
          "id": "8cf0b522-4272-4417-9c76-0876fb65ba81",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "937f3f33-e907-4bca-831c-dea3348c7dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3e2ffb-6f01-42fd-a23d-c9dee0f1057f",
        "cursor": {
          "ref": "0dc5deb0-c384-4044-a013-8367c6b1226e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2930ccbe-4df8-4994-9c74-1197f8426273"
        },
        "item": {
          "id": "4a3e2ffb-6f01-42fd-a23d-c9dee0f1057f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "14b5071d-2bbd-4344-8ea5-43f43b84cbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b689b5-be35-439b-9bc1-e68eb68fb022",
        "cursor": {
          "ref": "60bba0f2-0d08-4f58-996e-57bce57d3694",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a19a7470-24e2-43c5-aaa9-34d1bd49ef21"
        },
        "item": {
          "id": "c1b689b5-be35-439b-9bc1-e68eb68fb022",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d7c59b4f-0122-4e20-91a0-8dd5ead7083f",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "20c0c2e1-59c9-43bb-941b-e58bbca49234",
        "cursor": {
          "ref": "61dca8ac-7f44-4c22-aee4-7acc3f69ba81",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bc1ce433-73d4-4eb3-8590-bebaeeaa45d5"
        },
        "item": {
          "id": "20c0c2e1-59c9-43bb-941b-e58bbca49234",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "80a56b04-170e-40cd-8a55-9dc0f3039020",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2e36871c-2709-454c-8b2f-5b3f113679ad",
        "cursor": {
          "ref": "b6595da9-193f-44e9-af31-c5ec78cdce54",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "59af6a46-8f87-4beb-b9d0-606fef3c8832"
        },
        "item": {
          "id": "2e36871c-2709-454c-8b2f-5b3f113679ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6255e4e-a065-48c3-9349-e974a51e547f",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "61ae4a8e-1eb2-4145-988b-46ff41dc5b5e",
        "cursor": {
          "ref": "1f944de1-1871-494b-8c82-ee00c1cdb212",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a06ec003-9d3a-45ea-9dda-bfd0d195b01e"
        },
        "item": {
          "id": "61ae4a8e-1eb2-4145-988b-46ff41dc5b5e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8efa97a3-7593-492b-a778-7c86abbd09e3",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "23edea3f-86e8-4225-a13c-6e2d4082912b",
        "cursor": {
          "ref": "1404e8d8-4377-4335-9a38-a9d0515a26f1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "75f75b8e-4fc1-43d0-9aa0-ea26f26b3d26"
        },
        "item": {
          "id": "23edea3f-86e8-4225-a13c-6e2d4082912b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b28e5df3-b5c3-4935-98e7-6c8202c9516b",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "573719f6-987d-4e1c-9925-95efe1f46b43",
        "cursor": {
          "ref": "0ca98e7e-1f0f-4964-bd04-9a7eebd838cd",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1ebe41ab-1c3c-4b79-b5bd-4db752e82c72"
        },
        "item": {
          "id": "573719f6-987d-4e1c-9925-95efe1f46b43",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e43e0ed1-90c7-44ed-bd70-e9d80b850228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b931812-8747-41ce-a6e8-52b7af5bac0e",
        "cursor": {
          "ref": "60cd40ef-e4f6-4c53-bca1-a6e1e18bf868",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c398606b-3654-495e-a5ec-3eae64e6b1d2"
        },
        "item": {
          "id": "3b931812-8747-41ce-a6e8-52b7af5bac0e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "033d4c94-40f5-4ef9-8a2f-22f4bbaf7712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cb415a-494c-46b2-b66c-98f961180f8f",
        "cursor": {
          "ref": "1a4b1b36-af21-41c9-a998-55e73f341c1c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8203a908-609f-4de9-9a99-c806d1ce2058"
        },
        "item": {
          "id": "d4cb415a-494c-46b2-b66c-98f961180f8f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7adcff96-72cb-43c9-a1ad-7e2682c72348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a66b94-deb5-4bd9-9dd3-ca54274ba529",
        "cursor": {
          "ref": "baa33662-1db4-48a2-a4f6-598866a196a9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "feeab4d8-d112-4b67-b72c-0a9d6fd586b3"
        },
        "item": {
          "id": "e7a66b94-deb5-4bd9-9dd3-ca54274ba529",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4ce1a807-ca54-49a0-8445-5d0a67164457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bda1ef-fb4b-4532-b3b9-ea30b2a1e3fd",
        "cursor": {
          "ref": "0811ca28-2545-42d6-9fe7-2bea5708a5cc",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "951f44c9-994c-4249-a39f-2bb4a5ae0315"
        },
        "item": {
          "id": "23bda1ef-fb4b-4532-b3b9-ea30b2a1e3fd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "251e5016-f675-4afe-8eee-01ce07b287cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48aaf108-bdd7-47f5-8cb6-d77458d08d59",
        "cursor": {
          "ref": "8e53b849-9440-454d-8935-d13f949a3f1b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "73a16918-b55f-4208-b0ae-19bd66e5e7bf"
        },
        "item": {
          "id": "48aaf108-bdd7-47f5-8cb6-d77458d08d59",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ee922126-6672-46d8-adf9-a104fca82260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27580755-2643-43d4-abec-500d4e59e5f0",
        "cursor": {
          "ref": "650cda3b-6f80-4011-8dcb-3b68e378375a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1290964-7085-4bdb-bfa7-0acfce959c13"
        },
        "item": {
          "id": "27580755-2643-43d4-abec-500d4e59e5f0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "48686101-3da8-44a8-ab7c-0f092f622e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4278a50d-d870-4f46-95d3-5ded4f4ae6ab",
        "cursor": {
          "ref": "cb003ef8-e4b2-4583-8573-3da91738fd9d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "816738ad-0405-4cac-be3d-0068991f9766"
        },
        "item": {
          "id": "4278a50d-d870-4f46-95d3-5ded4f4ae6ab",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ed733cfa-3748-44d4-8a72-833708dcad70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a987ff-a7a1-42f1-92ff-f2a0392f6da2",
        "cursor": {
          "ref": "1547db36-cde6-40f7-8cd5-a5e3d5253f4c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fe3e3b22-5575-4cdc-9f31-7d1540a375f7"
        },
        "item": {
          "id": "a7a987ff-a7a1-42f1-92ff-f2a0392f6da2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3620cfc6-4a6e-4d1d-b1ce-a38c374a4335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2c4769-8e7d-4169-81bd-98ec2f13acb0",
        "cursor": {
          "ref": "00846575-ebe1-4b6c-b610-a3c4507066d1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cae6a437-b145-4d3d-ad8b-e30ca81bb45b"
        },
        "item": {
          "id": "3d2c4769-8e7d-4169-81bd-98ec2f13acb0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8415c86b-15d2-4e40-98b7-28a518e8d439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e192e0b3-79e6-46fb-9e51-50b962e1eb70",
        "cursor": {
          "ref": "f43131eb-f49d-4e1b-b1ee-4fce5a0e0248",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "647a3d6b-7881-4783-ba6b-777449e94da2"
        },
        "item": {
          "id": "e192e0b3-79e6-46fb-9e51-50b962e1eb70",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1bd9dcea-8531-444f-94da-92262e6931a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e881e2d-6de2-46e6-92c4-6d5515464765",
        "cursor": {
          "ref": "d9c31ffe-a16a-47e7-9c7f-0680e7d5be84",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e9428dfd-dabf-4bf5-81a5-a7dd2f94a85b"
        },
        "item": {
          "id": "8e881e2d-6de2-46e6-92c4-6d5515464765",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "098dd6f9-7656-4af9-bfcc-a7f7f18d4b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5b841e-07ec-4bfe-bb35-5644e45d2e36",
        "cursor": {
          "ref": "8508ff53-ed0f-498e-8164-b6506e3a3dfa",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0f867040-6b2d-4ef4-8c60-4a36b00962b6"
        },
        "item": {
          "id": "7f5b841e-07ec-4bfe-bb35-5644e45d2e36",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0afc05c6-87ca-46ed-9727-cd746f3a5bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f379a34-b2e8-461f-a169-bdb76d383d1f",
        "cursor": {
          "ref": "0371b329-572e-4276-9f39-5a1e1cdd789c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6b884d60-9b24-4378-8df3-8eb5b42cde03"
        },
        "item": {
          "id": "6f379a34-b2e8-461f-a169-bdb76d383d1f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c871adf6-d0a9-437a-87df-e0df7b456436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aa50dd-e50e-41b2-9dd9-c8e88d8393dc",
        "cursor": {
          "ref": "23b1734f-4123-4615-b647-a990fcca241c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bd9e8f73-99f7-497e-8cf5-b454fcf5a88c"
        },
        "item": {
          "id": "58aa50dd-e50e-41b2-9dd9-c8e88d8393dc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b732afea-90bb-484d-bd9f-5475f620a5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8000c0be-92ee-4410-8d53-05455c41c436",
        "cursor": {
          "ref": "aa48961b-1565-46ec-8758-e1ffea728c0a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d38c998c-e35a-44a4-bd32-f6c868db2a19"
        },
        "item": {
          "id": "8000c0be-92ee-4410-8d53-05455c41c436",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "25cb49a9-f243-4cb0-b33c-fe6aa3a20a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1637e88-ee30-4beb-a0ae-88476904938a",
        "cursor": {
          "ref": "b141f011-c09b-4b58-bbe2-32e239cb6b69",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68d2f4c2-c607-4ecd-95b8-fc3ab82a31a2"
        },
        "item": {
          "id": "e1637e88-ee30-4beb-a0ae-88476904938a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9aeec938-6309-4f17-b706-4d61380aec9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0282163d-7039-47fc-bb4d-5b0acfd644a3",
        "cursor": {
          "ref": "e390994a-cd6a-4600-a7ab-2a6db3cb6aa1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d75376b0-1c7a-4964-875d-fba2bec3522f"
        },
        "item": {
          "id": "0282163d-7039-47fc-bb4d-5b0acfd644a3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c245e0a7-770e-4288-a997-6e1699220a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e16ad1-f584-4e5d-8885-0e2b46bd3792",
        "cursor": {
          "ref": "b5912e1e-94f3-45d1-8884-179be8281606",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "41f7dee9-2b34-45e7-b96d-1e3bba960546"
        },
        "item": {
          "id": "d5e16ad1-f584-4e5d-8885-0e2b46bd3792",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c685c507-347a-4369-bbf4-4b4004f25f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612702d4-6012-47cb-98c5-b92064d58f9c",
        "cursor": {
          "ref": "e473843b-c5aa-451b-a94e-4c2558c21730",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8c3e1e3b-699b-485a-9c09-e021dacffef3"
        },
        "item": {
          "id": "612702d4-6012-47cb-98c5-b92064d58f9c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bedf13b9-bfa8-48c5-a12f-55aee644d58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a04a39e-99f8-4418-8416-3d1946f16e63",
        "cursor": {
          "ref": "909ce87f-a5cd-459c-85c2-0c93e4084e2b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2a79d374-6f91-43f8-81cf-9841f8c406bd"
        },
        "item": {
          "id": "9a04a39e-99f8-4418-8416-3d1946f16e63",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b1f0dbc4-c459-40c9-a65e-6cf4cdfaa774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af9200b-4e31-4b56-8f30-519aa314aea1",
        "cursor": {
          "ref": "b9b608ff-c2a0-412e-8f73-e4a06aad71a7",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a24d8a4f-fdd7-45fb-ae9b-05df000d8c28"
        },
        "item": {
          "id": "4af9200b-4e31-4b56-8f30-519aa314aea1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c343b85c-9f5e-4f76-916f-54b008002834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7418e928-f124-4d6a-8fc5-f4ab9c7b3c33",
        "cursor": {
          "ref": "76a7f629-d03e-482d-8e47-e3900888c94b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8fd03d8b-44b4-4fa6-8cab-c9872a2fb561"
        },
        "item": {
          "id": "7418e928-f124-4d6a-8fc5-f4ab9c7b3c33",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "27fbc68b-777a-4172-ae52-ccd02e28aaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910a50d6-bbcd-42be-b488-fb3792388350",
        "cursor": {
          "ref": "57d569b2-fc95-4370-9b3d-1a5748fad1d8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ef7990fb-b8dc-4b7b-b68f-3b061617a8bf"
        },
        "item": {
          "id": "910a50d6-bbcd-42be-b488-fb3792388350",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "55c7a9e7-03f2-4eca-a1d4-40065972cc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa3df9c-7e00-4846-9603-762cef1db258",
        "cursor": {
          "ref": "172ead86-c17d-485f-a2cd-50fd51a53bb2",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f7ca561-40ff-4e33-b08e-14b3688ae44a"
        },
        "item": {
          "id": "3fa3df9c-7e00-4846-9603-762cef1db258",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2803dc14-fa96-4ffa-a5d9-a4c3a7270125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb724607-0a89-4b15-a1d5-7ec6f0d558e1",
        "cursor": {
          "ref": "72be9b88-b927-4e09-8454-d9faf8f5af24",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "65117f72-da77-4663-a6cf-d93bdf94e5a2"
        },
        "item": {
          "id": "fb724607-0a89-4b15-a1d5-7ec6f0d558e1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "42dd09ad-8b2a-4e18-af8b-3630e9c4c74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3861d10-84a4-457d-8c2d-e02bab787f2f",
        "cursor": {
          "ref": "82b257c8-b8aa-4674-83f8-d708833368ab",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e61ed2e8-231c-4242-8013-38ebf7d21a47"
        },
        "item": {
          "id": "d3861d10-84a4-457d-8c2d-e02bab787f2f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7a0202b7-b7b7-4d67-a52d-7f65803eba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580f7b5a-88dc-452e-8892-0e7ea025ab87",
        "cursor": {
          "ref": "9252c049-8ea5-444f-beee-f69d3e8d9d67",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "adc16f8e-a700-4ab8-a5d7-e17f67ca6422"
        },
        "item": {
          "id": "580f7b5a-88dc-452e-8892-0e7ea025ab87",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4057e47d-ef23-4902-8c6b-620ea9ef1447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018229ff-a0c4-46b9-84f8-2f07319ed140",
        "cursor": {
          "ref": "6f42971c-ad87-41f1-9de4-9a49fe62fd08",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "232ac371-380a-4f92-9738-466a92492794"
        },
        "item": {
          "id": "018229ff-a0c4-46b9-84f8-2f07319ed140",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c8ba881a-6b34-44b5-bd19-739d1f800460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2cf3f7-f022-44bb-ae76-80b9cf22fb65",
        "cursor": {
          "ref": "c6acff14-9a33-4838-aac3-79c0dcfa7216",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3fa3a4e5-31d8-4432-a9a7-f390d7a804cc"
        },
        "item": {
          "id": "ee2cf3f7-f022-44bb-ae76-80b9cf22fb65",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "380de6d1-daa4-4ca3-8fb2-b75e2324fc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7334ca5f-d79d-4551-9e1d-c668071b6aec",
        "cursor": {
          "ref": "8938e3cd-f312-458f-9f42-99aa6a837b7b",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8b3386fa-7234-4967-80b7-83b0c5843a1c"
        },
        "item": {
          "id": "7334ca5f-d79d-4551-9e1d-c668071b6aec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e044a6ab-2f71-4857-b7f2-9c77a60754c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290c2304-cf5d-4c0c-8ff4-3fa9a9d3865a",
        "cursor": {
          "ref": "81d81077-ea09-4870-bac6-2b801da4cad8",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91344267-cfe5-4817-8294-a7f32d31b300"
        },
        "item": {
          "id": "290c2304-cf5d-4c0c-8ff4-3fa9a9d3865a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "59e9f21e-d072-4757-91f1-5165e87e21d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301f3792-3308-40e7-aa05-be3818897e20",
        "cursor": {
          "ref": "3093b7c3-a6b0-400a-9aca-40b5909ac878",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "79019d92-412e-4012-b6d2-2fbbf46fc674"
        },
        "item": {
          "id": "301f3792-3308-40e7-aa05-be3818897e20",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9490989b-02cb-4438-969d-8196abc23321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6db01ea1-2a46-4776-a28a-117d1ae7b86c",
        "cursor": {
          "ref": "2e8df54d-7373-4ce5-941b-e3ebac151349",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ecdb245d-ca7a-4a54-ab90-5f4b704d6c33"
        },
        "item": {
          "id": "6db01ea1-2a46-4776-a28a-117d1ae7b86c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bc5f45c5-c17b-40ca-9e1c-435566f8fd4b",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d710914c-6201-49fc-b7bc-9db9e947bb00",
        "cursor": {
          "ref": "0fef241d-b152-4290-9eb0-8a7ff9f7115e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9c986b49-9715-4cb4-aa93-53a71e14a5a4"
        },
        "item": {
          "id": "d710914c-6201-49fc-b7bc-9db9e947bb00",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "de4e213a-d776-4062-9c59-b59ebe748d18",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb936fb-a7e5-410b-be4b-620a84bd1cfb",
        "cursor": {
          "ref": "7ec0cdeb-5bb3-4d0d-935a-3d5c18b685e7",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ba93cb9e-b248-40da-af48-2012193d028a"
        },
        "item": {
          "id": "6bb936fb-a7e5-410b-be4b-620a84bd1cfb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e96ea33a-3bd9-472a-b3dc-8b75c94fa92e",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc1104-cab6-4032-afed-547accc95512",
        "cursor": {
          "ref": "f26f1823-4700-48f2-a3cd-15f8903d0fb2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "84e32a1d-282c-4634-9690-bc829ee42eb6"
        },
        "item": {
          "id": "eafc1104-cab6-4032-afed-547accc95512",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0ea555d7-6e46-4751-a354-4f786fb751a8",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a02dae0-2c2d-49f6-970d-792a6bbaeef4",
        "cursor": {
          "ref": "fa040f35-5966-4df6-abf9-cb3bc485bf9b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e7ac337a-3ee9-48c7-997f-4ec7b8f1f4d2"
        },
        "item": {
          "id": "4a02dae0-2c2d-49f6-970d-792a6bbaeef4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "95fc30da-c1bd-4e59-8779-3ca86a0a4c13",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-04T00:36:40.328Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-04T00:36:40.328Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7f004568-c1e5-41dd-bd1e-35bc963ff899",
        "cursor": {
          "ref": "8647af52-f011-4077-9019-3c7889063a97",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e940d604-ffe9-4b57-a876-d4c6a7837f20"
        },
        "item": {
          "id": "7f004568-c1e5-41dd-bd1e-35bc963ff899",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b7412493-679c-4ad7-835e-91b866a5ed68",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c8605f-f4bf-42bc-8de2-bc5d95eee213",
        "cursor": {
          "ref": "e9152411-efad-4dfb-a8c3-5be16be4d526",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "37796e27-8b1d-4210-b4f2-ca287570882c"
        },
        "item": {
          "id": "71c8605f-f4bf-42bc-8de2-bc5d95eee213",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "99d159e2-dcc9-4c0a-9d15-baae72c7a8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2fc7a9-3cc9-4fb2-b8c5-f74ad44c3358",
        "cursor": {
          "ref": "f75b7665-9e01-4d5f-8a3c-b504c3b98167",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "06336f8f-01e9-43ed-b45e-da6b4af98302"
        },
        "item": {
          "id": "ad2fc7a9-3cc9-4fb2-b8c5-f74ad44c3358",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cb77fccd-cc6b-42a2-a07d-457b95eb554e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a842234-02e0-458f-a075-a9fe2d28b913",
        "cursor": {
          "ref": "4b08bbbe-55fd-4a5c-9381-ea89b6da018d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "70fd6c0d-c88e-4601-b291-bec55d393051"
        },
        "item": {
          "id": "3a842234-02e0-458f-a075-a9fe2d28b913",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b23aa86f-9b11-48ae-ba08-3b01a1ed1003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e76854-ffdf-448d-b982-3c24dffe2f04",
        "cursor": {
          "ref": "a663fd19-98b6-498e-9521-2829723f767f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9658029d-8d54-4144-b853-e49f5503e83e"
        },
        "item": {
          "id": "82e76854-ffdf-448d-b982-3c24dffe2f04",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a74bcb52-3c37-4344-b3ff-4954897b114a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1580786-4ec8-40d1-b705-a39361cda65c",
        "cursor": {
          "ref": "becf9ab6-6fc7-4121-bad2-c1d79a0cdc2b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0339ccab-567b-410a-b56c-f60e4a4ecf19"
        },
        "item": {
          "id": "a1580786-4ec8-40d1-b705-a39361cda65c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4c72fa3a-3f13-438e-9bf7-95baf4e79d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf982e37-5d95-4f3d-8cff-bec8731c5c4c",
        "cursor": {
          "ref": "54dd1621-d572-4e42-aca2-6fe435b53bc6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "150c6836-d52c-4379-a916-0022ea462c8b"
        },
        "item": {
          "id": "bf982e37-5d95-4f3d-8cff-bec8731c5c4c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "11941538-8fab-442d-9a98-c17f00db18e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29eb6a6-c863-4661-8f52-ec0e9756e55b",
        "cursor": {
          "ref": "f2076c92-2348-4b7b-a404-46c1f62ff477",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ff5b95d7-5aa4-4a29-8206-dc16d9989867"
        },
        "item": {
          "id": "d29eb6a6-c863-4661-8f52-ec0e9756e55b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0263172f-c671-4d5e-bdcd-6f08cee00691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d7e093-b537-44e5-a060-2f5ae6b631ee",
        "cursor": {
          "ref": "618e5754-7f4c-4630-876b-e4961b095dc6",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "15fbb47d-769c-4d2e-b724-75bb16d8ba1b"
        },
        "item": {
          "id": "d6d7e093-b537-44e5-a060-2f5ae6b631ee",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0576291d-6a24-4c48-aa05-ad8a8d1bfa7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3e5eaf-ae95-4c8a-ae56-2d6bd429acb6",
        "cursor": {
          "ref": "9ab1608c-1447-42b1-805a-7f9ef618387c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba607b84-02ac-4fc7-9074-91f03f3bc2b9"
        },
        "item": {
          "id": "dc3e5eaf-ae95-4c8a-ae56-2d6bd429acb6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "13e6d89a-f5ea-4600-9bb4-6a4c9bc00645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977c8fe4-81b7-49ad-b461-a8771b9795c0",
        "cursor": {
          "ref": "4f77c723-3f29-434e-bd9e-8823f317ce1c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "75c30f5c-1f63-427a-a793-474fcd14208d"
        },
        "item": {
          "id": "977c8fe4-81b7-49ad-b461-a8771b9795c0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fe2addb3-fd99-4e8c-8d69-c13a07c10342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d408c102-b4d1-4ca8-9203-284b600b62e2",
        "cursor": {
          "ref": "cbf8ffd9-85dc-496e-a47a-57b46d93d812",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c6251d45-4f1f-4dba-9882-8099a6ac80d9"
        },
        "item": {
          "id": "d408c102-b4d1-4ca8-9203-284b600b62e2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ee6b13a1-fa30-4ae8-a42f-aacfbfefbbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa12968-fa1c-4a6d-abf7-735f12b5b573",
        "cursor": {
          "ref": "fc178cfe-af69-410f-a208-ca8f2fc56007",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "27da9223-0e4a-475a-bb74-f1cf3d183cba"
        },
        "item": {
          "id": "9fa12968-fa1c-4a6d-abf7-735f12b5b573",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d928ed51-e008-43b5-8a8b-21fbe43daf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153c574f-3ea5-441b-bbb8-4851fe7d1f5e",
        "cursor": {
          "ref": "22e80dd1-5d2d-4c46-a407-e793fc7cf583",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "41995a37-b06c-4a4e-b665-9bdabe781505"
        },
        "item": {
          "id": "153c574f-3ea5-441b-bbb8-4851fe7d1f5e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4f0a81ec-2e30-4953-a90e-f4e12d56dbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f756641-facf-4609-82a2-422f54c9e0f1",
        "cursor": {
          "ref": "26780200-a0ab-47d3-ab0b-2a7156407ccf",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "03d9e0d7-91e0-4ae1-a335-a7782d001854"
        },
        "item": {
          "id": "8f756641-facf-4609-82a2-422f54c9e0f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5939255f-ae52-4e98-b240-c4ae5366878f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285712f1-67bb-4874-9554-7086083fc899",
        "cursor": {
          "ref": "445ad6f1-7f45-48d8-9a0b-fb4f44ff36de",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8cf01898-dbb1-4beb-8116-0ae13bc5007c"
        },
        "item": {
          "id": "285712f1-67bb-4874-9554-7086083fc899",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6d43e397-addf-4a06-a53f-6e90a2b0277f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2867585-f910-4cde-8844-689542ab7ffa",
        "cursor": {
          "ref": "5370ffe0-5899-431c-bc6d-86a64eb34f5f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bb2229a4-d526-4325-8efe-20528f7d4dc1"
        },
        "item": {
          "id": "f2867585-f910-4cde-8844-689542ab7ffa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "09c54e22-3ee2-4936-ae10-828f28d5e27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c76e6f3-e35f-4cad-8842-354066f0391a",
        "cursor": {
          "ref": "0a9b5e91-c3ab-4f3e-adbe-8bc6cd8c3078",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e5fa548d-2129-499b-8218-944c4bb3dc17"
        },
        "item": {
          "id": "2c76e6f3-e35f-4cad-8842-354066f0391a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b18b8406-8171-4914-a365-fae20fe50876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6284bc-2453-4b87-acf0-21abc99dcf2e",
        "cursor": {
          "ref": "f50f29b9-cbb5-4e15-8493-6ea5920d1b12",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e39823f4-c4a3-4438-8e60-5d17ce4d43d0"
        },
        "item": {
          "id": "3f6284bc-2453-4b87-acf0-21abc99dcf2e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "17707362-442c-48cd-862d-1a39cd8fa06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6877fc29-9a8f-4e80-99cb-7d6a42d43cee",
        "cursor": {
          "ref": "015871ed-874e-44de-b4a0-27a5e772083f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "553dc332-3181-4f17-b76c-b068f815c9fe"
        },
        "item": {
          "id": "6877fc29-9a8f-4e80-99cb-7d6a42d43cee",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1c2cf5fe-861c-4aec-b5dc-35b6706c3d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf982dd-9aeb-4565-a53c-8aaab2419b82",
        "cursor": {
          "ref": "b637fa82-ab64-4000-a983-ece751cac823",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "27d2304e-a90e-4bcc-a61c-ee6d80652b1d"
        },
        "item": {
          "id": "9bf982dd-9aeb-4565-a53c-8aaab2419b82",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c49bac91-f6bf-48b8-8518-550bc88b1783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e966c872-8c21-4e06-bf95-8d5c138e8a7c",
        "cursor": {
          "ref": "c14e6a83-cc2d-49d3-8836-0c839b9ed6df",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c04c8914-63fa-453b-9ed8-0acd76022509"
        },
        "item": {
          "id": "e966c872-8c21-4e06-bf95-8d5c138e8a7c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa4e6eba-dffa-4782-b059-97f5fb88ae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5ca593-ccb3-425d-b392-7557cbb6c7be",
        "cursor": {
          "ref": "b8205ee9-3af8-4913-8220-434a18900482",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1fc6a8fc-a9ac-4862-9d7c-c72001a808fa"
        },
        "item": {
          "id": "7e5ca593-ccb3-425d-b392-7557cbb6c7be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "563fa224-87f8-49b7-9471-bcdadf521e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7167b161-7a72-4bf5-b0ee-9feaf3ecf5bf",
        "cursor": {
          "ref": "b6868f53-e23c-470b-9344-1c8f02d84b9d",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7b55bca3-b3b9-4a27-ac2c-964c9fbe3218"
        },
        "item": {
          "id": "7167b161-7a72-4bf5-b0ee-9feaf3ecf5bf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0b0bb19f-5515-47e8-8f94-2a50ca2f2b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d69b2ef-5055-443a-a19e-416a0111c594",
        "cursor": {
          "ref": "3d25f90f-3a9b-47c7-91bb-04983771827b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9db6c8ba-fcd0-4613-9b13-af338ebb8e65"
        },
        "item": {
          "id": "2d69b2ef-5055-443a-a19e-416a0111c594",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "73f65332-f260-463c-952f-d286da065726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08e766b-5d0a-480b-8edf-3532e1988765",
        "cursor": {
          "ref": "14194c50-acdc-4bee-8263-d5659ee24438",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ff46c735-efd0-4e64-bc52-bab214be11f1"
        },
        "item": {
          "id": "f08e766b-5d0a-480b-8edf-3532e1988765",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08639228-2fc1-432a-8a37-61fb90202a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68723f5e-6553-4964-9314-cc226b7dd935",
        "cursor": {
          "ref": "19d14c4f-0cec-44b8-ac50-4b76b62e2801",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b7b30ebc-7a19-4036-9956-ea3f9c32d648"
        },
        "item": {
          "id": "68723f5e-6553-4964-9314-cc226b7dd935",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e1159e24-51d9-422a-8d31-bf093ed4d29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae5d413-4ae7-4ed3-8d03-d17c046b6087",
        "cursor": {
          "ref": "4a0cf745-473d-4860-8cda-60c3e517d873",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0cf5b802-5a30-49bf-9ebc-35c48580c8e6"
        },
        "item": {
          "id": "cae5d413-4ae7-4ed3-8d03-d17c046b6087",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "809b3771-ceb6-485d-a130-d481f71b2721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecd50c0-35f2-44aa-9ec0-3da990bf716a",
        "cursor": {
          "ref": "91de1e5d-e677-4dd7-825c-cc33cbea2a3a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b6d60fc4-c45d-4c97-b8d8-6088e0980a7a"
        },
        "item": {
          "id": "8ecd50c0-35f2-44aa-9ec0-3da990bf716a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ddc026be-e35b-448a-ad3a-f8c8e3a4b0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68331cae-439b-44cb-a398-403309dcea47",
        "cursor": {
          "ref": "a157fe78-1a7b-4d79-aaa1-40939a60f5c0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4e78328e-0540-4218-8d6c-65ec7713e8ab"
        },
        "item": {
          "id": "68331cae-439b-44cb-a398-403309dcea47",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1355a87d-e32c-46ae-ad16-31968cf48ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62133cd8-b9cf-40f9-a44c-8f53677543c3",
        "cursor": {
          "ref": "f67c4323-f762-4025-95b3-608c050cb74c",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "60972ae0-d583-4c56-b86d-042063d2d5ed"
        },
        "item": {
          "id": "62133cd8-b9cf-40f9-a44c-8f53677543c3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "33af5af3-d5a7-4366-ada1-ab152435da06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f592fe-2087-4e24-807d-116a363d5825",
        "cursor": {
          "ref": "802b7aac-dc4f-45ab-9393-cf33d624e5c4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0a885798-2105-4cb7-b447-b166160afe24"
        },
        "item": {
          "id": "b4f592fe-2087-4e24-807d-116a363d5825",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "89ec5d9a-ef68-44c1-a4df-2bdfd82c9d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb7eb2c-3688-4854-b3cd-e5877a3b2eb6",
        "cursor": {
          "ref": "f646f1cb-2975-4f27-bc76-fcdcff0abe2f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f86b7058-c086-4ad7-8d08-2489c0b5606f"
        },
        "item": {
          "id": "4cb7eb2c-3688-4854-b3cd-e5877a3b2eb6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2581e606-a663-4319-b321-c6197dd41aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04dedf2-c7f8-4764-bf8d-d11dbbf1b7b3",
        "cursor": {
          "ref": "fe307239-0723-43c7-a6f9-ee83cd695ddb",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "48665b58-1de4-42ab-ba91-e974cfc0e7e4"
        },
        "item": {
          "id": "f04dedf2-c7f8-4764-bf8d-d11dbbf1b7b3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e6e26a50-931b-41e3-9558-0788553837fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adad3c6a-8e06-445a-923f-1b7dbc3f3f2c",
        "cursor": {
          "ref": "114f5439-bd7b-49a1-b477-a69c043cdcd0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b3ee4973-9a7f-4829-9195-38a24c21ee72"
        },
        "item": {
          "id": "adad3c6a-8e06-445a-923f-1b7dbc3f3f2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "87229621-0f64-402d-8fab-eb6558cf30c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b018cdcc-4b49-44fd-ba97-4d617a80a560",
        "cursor": {
          "ref": "872afde7-c7d7-4f72-bf69-1bfa1bf184ee",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eb0e78d9-6cb8-4293-bbb4-3c5b8f18242f"
        },
        "item": {
          "id": "b018cdcc-4b49-44fd-ba97-4d617a80a560",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7d9d167b-f598-467a-9c70-bb8db8cfb26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457c1b31-60bc-4598-a68e-18daa23928f7",
        "cursor": {
          "ref": "7839476b-b5a6-40b4-874a-4e7133ae356d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c16a7b2-e77c-48f1-a2b2-f76d7750b11c"
        },
        "item": {
          "id": "457c1b31-60bc-4598-a68e-18daa23928f7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "40bc07fa-242f-446d-8ba9-e38a6b0ad577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00186e94-6006-4f73-a376-77b6edc6f351",
        "cursor": {
          "ref": "74fc0294-cb46-49de-a323-be5e5cb5f205",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5bc8bc53-0efe-4afb-a807-24793feed494"
        },
        "item": {
          "id": "00186e94-6006-4f73-a376-77b6edc6f351",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9a0d5e14-e183-4bea-b76b-fbd21e5a63b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b512fc22-709f-4b3d-8127-e3f2f03d3540",
        "cursor": {
          "ref": "5c0da7a6-12d8-4d63-ae25-257949dea6f1",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a248d283-70d5-494b-a758-1565a1587d81"
        },
        "item": {
          "id": "b512fc22-709f-4b3d-8127-e3f2f03d3540",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "33840358-201f-49d3-bd4f-168c6d974f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc535d4-981d-49c4-a220-3bec082e0dda",
        "cursor": {
          "ref": "30fdaeb4-17be-4d74-b8ed-f44c1c538153",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "626daa5a-56a0-4e09-960a-93a75659b823"
        },
        "item": {
          "id": "acc535d4-981d-49c4-a220-3bec082e0dda",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "89d413b1-51b9-4679-9655-6b228e84060d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5720f304-ed1a-4c68-9245-80f73492269d",
        "cursor": {
          "ref": "54a90ccf-87bf-43e4-8295-be7aac33bb99",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c767ffdd-b50c-46d7-889a-697c3233eda2"
        },
        "item": {
          "id": "5720f304-ed1a-4c68-9245-80f73492269d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b6bb7095-96fb-45b9-ab9b-8ba4279da617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30239b7-ca68-4942-bf6f-e323efa7bc8f",
        "cursor": {
          "ref": "4017dbef-7bba-4e73-a08e-011c8860c4a7",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6106d3af-2da2-4d39-a769-f4bdf2d55af9"
        },
        "item": {
          "id": "c30239b7-ca68-4942-bf6f-e323efa7bc8f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "aa8757a5-5567-4d91-a352-8bd0c8879581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e298138-c00f-44d1-9691-c00a663075b8",
        "cursor": {
          "ref": "0dde5f72-5c77-420a-9012-ff521dd787a1",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a980be8b-7514-453f-82ff-83f49a0598c7"
        },
        "item": {
          "id": "0e298138-c00f-44d1-9691-c00a663075b8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d57a5986-e76a-4d9b-8302-ab907d9871da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b39d69-8ef0-4794-ad2a-1b579b7e5488",
        "cursor": {
          "ref": "6500141d-6421-4560-94d8-3e649f58bf19",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8cb40439-10fe-4b91-80d6-cc45d80f2ca7"
        },
        "item": {
          "id": "38b39d69-8ef0-4794-ad2a-1b579b7e5488",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ab4e2c92-6a4e-4dce-b72e-0def96056097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912368a2-2a23-47d0-9563-f8d9b473e162",
        "cursor": {
          "ref": "107b15ea-bbf2-4ec5-b80e-52412d4b0b3a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "92c63535-08ec-429e-81f9-42c12dc4f7a5"
        },
        "item": {
          "id": "912368a2-2a23-47d0-9563-f8d9b473e162",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f011c653-fcbb-4946-854d-e50ebc14a60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72a10e2-bb2f-4260-b212-9e8518008c20",
        "cursor": {
          "ref": "00c114f8-57e3-4d5b-a3f4-2c44aab35b6d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dbe3c53c-b1d9-46d7-9faa-b6eb28605351"
        },
        "item": {
          "id": "a72a10e2-bb2f-4260-b212-9e8518008c20",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3947917c-0f8b-49e7-8c1f-4cb34f7fa538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57bf836-0e42-4528-9836-700bde0c3ee5",
        "cursor": {
          "ref": "d8669119-72f3-4578-9884-b8d39675da8c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "70ad43b1-d45d-400f-999c-679266d3a8e5"
        },
        "item": {
          "id": "f57bf836-0e42-4528-9836-700bde0c3ee5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "02379551-04d4-4dc1-9373-e01508de973d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5a4fc3-b037-4bc0-8eea-83a858081600",
        "cursor": {
          "ref": "743626eb-5edf-4017-a841-af55930825cd",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "35a5b170-8a92-4da6-bff3-d8defcb0f140"
        },
        "item": {
          "id": "9c5a4fc3-b037-4bc0-8eea-83a858081600",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bb89e234-ef9d-465c-b662-ee8e59cb3590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6f2ea7-a475-46f8-9ef1-059ff95b3d8a",
        "cursor": {
          "ref": "5f845f01-ad8f-4fad-bd18-82d54976e991",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "35ed530e-1d22-46b0-be4c-0d767f60fa1d"
        },
        "item": {
          "id": "ea6f2ea7-a475-46f8-9ef1-059ff95b3d8a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "191bcb20-1fea-452a-9078-bec23fadd79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f707e3-bbf1-4fb4-ac97-36470ff115b8",
        "cursor": {
          "ref": "3991663c-a9a5-4438-be2d-d893918a5ddc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4f3f1e76-2eda-42ba-bbf2-3788266d22a7"
        },
        "item": {
          "id": "c6f707e3-bbf1-4fb4-ac97-36470ff115b8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54cdbfef-8a2d-4669-8962-e7bc27bfacbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fe79a4-5ff9-4c54-985a-431b909e376e",
        "cursor": {
          "ref": "872803cf-09e2-4709-9224-e4cf697367b2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "253a75a1-cb52-4008-adf9-3a5b8aa5002f"
        },
        "item": {
          "id": "80fe79a4-5ff9-4c54-985a-431b909e376e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11b70790-2050-458d-ae6d-4a154d00a6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49a32f2-775f-432a-a94e-88ebce3580ce",
        "cursor": {
          "ref": "81dedc46-6de9-4896-a226-7a318413a71b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "59dc46dd-000a-4868-bba4-4386881d74d7"
        },
        "item": {
          "id": "f49a32f2-775f-432a-a94e-88ebce3580ce",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "08c0a02e-c10a-4dfe-bcb8-0f202a7a9262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e20b34c-09be-45ad-bf4e-7f969938dd50",
        "cursor": {
          "ref": "53ef5161-b2e3-4c97-a3d1-69ae1ac405f4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3b69a9a7-b0e2-4eb6-b2ea-5a41d47a8e0e"
        },
        "item": {
          "id": "8e20b34c-09be-45ad-bf4e-7f969938dd50",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d37fd83d-7244-4f13-977f-922c1b9bdfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df4fef3-ccef-4dec-8256-e5e9557e76ea",
        "cursor": {
          "ref": "0abda44c-1915-48e9-aa3a-55386dc66c5f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "561648c0-7e21-4ffc-859f-329d1cd7a99e"
        },
        "item": {
          "id": "3df4fef3-ccef-4dec-8256-e5e9557e76ea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9bcfdfb0-e60c-4463-ab5b-6b14b584cd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4b16b7-36fd-4968-9304-120f475bc4af",
        "cursor": {
          "ref": "d85ea896-ccf5-411b-b9a6-e79104e0a7b5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6afcf518-262e-44e9-bac8-575cc48422d2"
        },
        "item": {
          "id": "3b4b16b7-36fd-4968-9304-120f475bc4af",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "29cf5a4d-847a-4ef0-b378-ba76ac396038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217589f7-fd2c-45d2-ba77-9d7405415715",
        "cursor": {
          "ref": "56b8754f-72a8-4324-bd35-995d2d3402f4",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7ae86306-e9b8-4c81-89b4-889ad737f50b"
        },
        "item": {
          "id": "217589f7-fd2c-45d2-ba77-9d7405415715",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5aeb18af-55f0-42b0-9c41-bc2fd07bd4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ba32ab-9703-47ed-b8ef-c76f1501e85b",
        "cursor": {
          "ref": "97884255-f005-47b2-aeb7-f4314db10ff5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "58d256e4-c98f-4578-ab1f-c732d6052e0d"
        },
        "item": {
          "id": "99ba32ab-9703-47ed-b8ef-c76f1501e85b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6e1ce03f-88bb-42c6-995f-cf3000a65fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69aca476-360b-48ae-a789-09782386ddfc",
        "cursor": {
          "ref": "957f459d-74f6-4b62-bc4c-0d1076aa053a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c89c0c9d-7a66-4af1-b18b-4b0c244b1b33"
        },
        "item": {
          "id": "69aca476-360b-48ae-a789-09782386ddfc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8ef9a8d0-eb62-424a-b44d-bd24c1ec5eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301c4962-8f17-409f-bbc6-a3aaf2fb93a8",
        "cursor": {
          "ref": "7156248c-5406-41c7-b7d3-82308fc93ea3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1e0b5f7a-b2fc-4722-a9b2-72bcb01254cd"
        },
        "item": {
          "id": "301c4962-8f17-409f-bbc6-a3aaf2fb93a8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e18f5b04-e724-450e-8a54-59bafacefa50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473f4a14-3778-4103-a9d2-0440164e809c",
        "cursor": {
          "ref": "cf4ef319-b1cb-4a5d-b11a-9eba8f8bca4f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bcb51a87-d8ca-4484-aabf-e1f30078e8f3"
        },
        "item": {
          "id": "473f4a14-3778-4103-a9d2-0440164e809c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f02bcada-2f0c-4cb0-a06d-31bacf0513e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53204d97-ca6b-440f-87cb-172779852b8b",
        "cursor": {
          "ref": "a225270c-c2d0-4fe0-9bf2-4a4cba80c6f6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "72b3945f-75ba-480b-b6d0-42a2bac4e92c"
        },
        "item": {
          "id": "53204d97-ca6b-440f-87cb-172779852b8b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f2b3a78b-54d4-4e6d-b612-4b60bddc40a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1cd95c-b520-4422-9458-3b999ea80273",
        "cursor": {
          "ref": "7f2f8a42-e2ab-4b18-8b14-c96e6260e039",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7f430817-a382-44ad-9ba5-f4c389edc03f"
        },
        "item": {
          "id": "dc1cd95c-b520-4422-9458-3b999ea80273",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e02b9473-88d5-4069-a995-b60592dea7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2e488e-a5e4-44f0-ae6d-fea0ca452949",
        "cursor": {
          "ref": "48098d97-fa02-4d4f-bde9-7b53c71338a1",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4513373d-e725-4238-ada4-8696de826245"
        },
        "item": {
          "id": "7d2e488e-a5e4-44f0-ae6d-fea0ca452949",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "33572dcc-8fa2-4200-8191-2b0f7180f9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ca3b99-2020-4bab-ba3c-1b4bdb4bee38",
        "cursor": {
          "ref": "b511c479-3760-4c23-b14c-bf1336a7b413",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "acac5419-5c01-4f5b-ae7e-72e0acfdf6d4"
        },
        "item": {
          "id": "f3ca3b99-2020-4bab-ba3c-1b4bdb4bee38",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3c1c8cb6-f476-45d8-9eec-2a29f35352ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52512fff-e613-4cab-a51e-0d7b05fa705f",
        "cursor": {
          "ref": "1475e41f-38fc-431c-ad92-ce0f3001e0d6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c7662dc8-6207-413f-809b-8fd749da6dba"
        },
        "item": {
          "id": "52512fff-e613-4cab-a51e-0d7b05fa705f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ea7a223a-3129-49cb-9061-b53b2ae93da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8709de-ce58-4ce3-a042-d80042c45c05",
        "cursor": {
          "ref": "e3bd8e07-f70a-441d-b2c6-ce06a08a93f5",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1c0e09c0-a245-4aab-b9d9-15ed0d836f5b"
        },
        "item": {
          "id": "2f8709de-ce58-4ce3-a042-d80042c45c05",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2cf48eca-f43f-4c5a-8ac7-2d294350754e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65282ebb-3939-4a89-a862-74d889e409c0",
        "cursor": {
          "ref": "d6ab5b2c-761b-4be0-891b-d8c312d14547",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fdecf15e-bda2-42f9-b84e-b5ffd7ecf411"
        },
        "item": {
          "id": "65282ebb-3939-4a89-a862-74d889e409c0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3aa2d177-ca3a-4e1b-a753-2548083ffcf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d118573-05cb-495a-8449-8a7d555fa184",
        "cursor": {
          "ref": "8df35fb1-c521-49a9-a89f-49f0c41f2e28",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "de52bc79-59b0-4389-b7ad-f87021f50c6d"
        },
        "item": {
          "id": "2d118573-05cb-495a-8449-8a7d555fa184",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4f4638bf-2d52-40ce-8faf-369a1b9c564a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bc7894-3a6d-4de4-b04d-53b50b607b8e",
        "cursor": {
          "ref": "941c4fae-50bb-478a-b52a-3d7560dfe1b3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b4255672-9c67-4db1-a6e8-55e79ad6abf8"
        },
        "item": {
          "id": "96bc7894-3a6d-4de4-b04d-53b50b607b8e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d84be106-ca9d-48bb-bef3-54f99319408f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e117c9f-fe5a-473d-b302-fd13cfaf170e",
        "cursor": {
          "ref": "791d6c43-7419-47f9-ad3c-783a62c0f348",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "36c1c0da-1ce1-41b1-944e-ff92a763fd68"
        },
        "item": {
          "id": "2e117c9f-fe5a-473d-b302-fd13cfaf170e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d8e23613-72c2-45fa-a291-da9864305ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebadfcb6-ea21-483c-8cb3-064675d3d32a",
        "cursor": {
          "ref": "f35ae2ff-160c-48a2-9ecc-33a4b9dbded8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ea9e26cf-c292-4870-8724-b4817c401a7c"
        },
        "item": {
          "id": "ebadfcb6-ea21-483c-8cb3-064675d3d32a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a221e24b-ac56-420b-8de4-4e77735843e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b6008e-a550-41c8-94c5-280a8b12c8db",
        "cursor": {
          "ref": "91a2f44d-4eab-4c01-930a-348e100a8ea3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2c514727-5454-4798-8768-287b7d87f892"
        },
        "item": {
          "id": "f7b6008e-a550-41c8-94c5-280a8b12c8db",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1042d481-c787-4703-9fe0-73f417274de3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7bb974-4092-4e71-888d-3a433e57dd37",
        "cursor": {
          "ref": "76f1486a-8046-4328-8475-2bbabc4091ed",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c2a6af09-33af-4fcb-8c35-d1d0f2b3195a"
        },
        "item": {
          "id": "2e7bb974-4092-4e71-888d-3a433e57dd37",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6838d52e-133f-40c0-854f-6e15c08382ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd40c8c-2b45-40df-bca3-d998db126a20",
        "cursor": {
          "ref": "94bb05b0-6047-4bc1-9014-187f50a1d35c",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "716af313-eace-4ae3-be68-e93ec2851d39"
        },
        "item": {
          "id": "bbd40c8c-2b45-40df-bca3-d998db126a20",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d1aeefc8-39bc-4cd0-8077-117646424912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce12bdd-db83-41b4-a03d-08d8268a9d77",
        "cursor": {
          "ref": "57bdc977-9647-412f-a538-0a3a1570e71e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a9e287ca-281e-4545-a830-8026edbffa81"
        },
        "item": {
          "id": "4ce12bdd-db83-41b4-a03d-08d8268a9d77",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "12285690-b9e4-4f78-9947-7b8ad8fd8c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e9dee5-ff5e-4de5-b6c4-cdef8b5588ce",
        "cursor": {
          "ref": "19a4f21c-9d57-4808-91c5-86fa2ce07847",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5f40366e-db6b-4a7d-9cca-b5f77e541212"
        },
        "item": {
          "id": "06e9dee5-ff5e-4de5-b6c4-cdef8b5588ce",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "896fb827-7847-454a-b331-d4396d6811a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ea180b-f3fe-49ee-b2ff-bb6db853ad42",
        "cursor": {
          "ref": "9bee3954-fb91-44bf-9a07-3de430581a54",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4656adb3-fd4c-469f-9bfb-f3716e255109"
        },
        "item": {
          "id": "c2ea180b-f3fe-49ee-b2ff-bb6db853ad42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0d6670ea-b05d-4756-9546-b3c2fcfd7003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9798259b-23ed-4688-a4bc-51fd56fb2816",
        "cursor": {
          "ref": "5a2eff1f-bf9b-4001-95ff-066d5bd24f02",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e9beba05-66ec-41b6-9aa0-63595c079ad6"
        },
        "item": {
          "id": "9798259b-23ed-4688-a4bc-51fd56fb2816",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3b910130-63fc-40b2-b325-95fc8dc3f6eb",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b9ad0e7d-b8ba-4341-a125-e1a79cc49b2a",
        "cursor": {
          "ref": "8b42845f-fd65-4193-9eda-c85e414105a2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cdf53298-0910-4b21-81c9-6736fa0921d7"
        },
        "item": {
          "id": "b9ad0e7d-b8ba-4341-a125-e1a79cc49b2a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9a7784cf-ee68-41f7-9402-ec39d9f40620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b558cae-c9c4-4261-9d81-aee6e2aa0671",
        "cursor": {
          "ref": "8415cbed-b17b-4e00-8f8f-222c72ede942",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fb924d53-0d27-4989-9e19-5a11dd5ad83e"
        },
        "item": {
          "id": "5b558cae-c9c4-4261-9d81-aee6e2aa0671",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fbc87337-41fc-4437-ae5b-9ce2504576e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ddc760-8607-4da0-9e16-38596c94564a",
        "cursor": {
          "ref": "741e46b8-e609-42de-a642-ec3314c0ccc2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7cf0aa4d-a515-4029-8c99-8f6f5b476617"
        },
        "item": {
          "id": "c1ddc760-8607-4da0-9e16-38596c94564a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "68165eea-1c29-4e70-926c-8cc12413415c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be88b968-9601-4dee-87f4-4809d0867fbb",
        "cursor": {
          "ref": "1407ef49-c9a2-4204-9eff-a4a1f08c8f06",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d6ee6a47-99e0-4006-a6d0-9525c465dd12"
        },
        "item": {
          "id": "be88b968-9601-4dee-87f4-4809d0867fbb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "be3ab190-476b-401d-816b-13b3a11591f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4785b2b9-f469-41d4-ade5-7a2d655138e4",
        "cursor": {
          "ref": "55248c3d-1d64-4cd9-905f-76231d041b02",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "71f55dfc-49a3-4846-9abc-8e3d19251626"
        },
        "item": {
          "id": "4785b2b9-f469-41d4-ade5-7a2d655138e4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8dee0e69-5647-484a-a851-37200a03d429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b65a273-ea5a-4107-bfb2-13cf9932815e",
        "cursor": {
          "ref": "9515db10-e6ef-4c18-99d1-980638cda70b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "93231f64-31fc-44f0-97fe-10b546b289a4"
        },
        "item": {
          "id": "9b65a273-ea5a-4107-bfb2-13cf9932815e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "422295cd-6a04-45c0-9175-58a3ea5e1f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cdddb6e-46e9-4e1c-ad25-e1ae446b5eda",
        "cursor": {
          "ref": "d8e25182-14d2-4754-8d6d-227c90ba559d",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f46f7acb-209b-4367-876c-0ec83f679528"
        },
        "item": {
          "id": "2cdddb6e-46e9-4e1c-ad25-e1ae446b5eda",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6ed5b47d-298c-4fe1-884a-096945e745ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ec608c-cd4d-49ab-b54a-23c95cbb65a6",
        "cursor": {
          "ref": "54f1ec1d-0959-411c-825f-b4de5182450b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "89d8b824-33fe-4254-b55e-9c7e7b41b5dd"
        },
        "item": {
          "id": "39ec608c-cd4d-49ab-b54a-23c95cbb65a6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "10f1235f-f0b1-407c-8063-46676af3f593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed664a4-8d6a-4f5c-9355-610868b3e0db",
        "cursor": {
          "ref": "ce4ed94d-42aa-4f32-861f-9a2b64a1b29c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1684d0dc-81f3-43fa-91f8-73fab7b7ab6f"
        },
        "item": {
          "id": "6ed664a4-8d6a-4f5c-9355-610868b3e0db",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58979e86-e8bc-4b9f-96de-125acb33e4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19353eae-6775-4e60-b145-fedfab44204a",
        "cursor": {
          "ref": "dc1d0e9a-ab7b-4775-bbd9-a2aee4f53aad",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "59f6285d-9622-44c5-9674-671c9bbfe166"
        },
        "item": {
          "id": "19353eae-6775-4e60-b145-fedfab44204a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e85f7f76-d4d3-4830-a03d-9e94f2485327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415f72e9-0ad0-4813-a6e5-677dcedfc520",
        "cursor": {
          "ref": "767b249c-d068-4f86-92f8-34cf85407040",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "94429a33-14d3-4d2b-9069-5e5092ac0cae"
        },
        "item": {
          "id": "415f72e9-0ad0-4813-a6e5-677dcedfc520",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e979871-68ee-4c26-9a3e-637842337391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2894d576-9f1a-49c3-9393-f683423b0f4a",
        "cursor": {
          "ref": "094dcf2d-483e-4539-8d48-b50e2b6cd143",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e253d5ed-aac1-4f58-814d-8ea9516a5fa2"
        },
        "item": {
          "id": "2894d576-9f1a-49c3-9393-f683423b0f4a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "79140676-7669-40c1-9524-09ce1d530c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfaef32d-ea82-4806-b630-8882f07ec33a",
        "cursor": {
          "ref": "eeedacc7-0cb4-4880-9565-03dc01645163",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5c114aed-2906-482b-9056-fc706654ad1c"
        },
        "item": {
          "id": "bfaef32d-ea82-4806-b630-8882f07ec33a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cd7c38fa-412d-4bf2-acdc-ec17601d5e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133a290b-a508-4204-bb6c-7d21568faa0b",
        "cursor": {
          "ref": "14789416-0355-45f0-9ad1-fa308c165b43",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "30888a52-72f9-4a49-894d-2e1009f6beee"
        },
        "item": {
          "id": "133a290b-a508-4204-bb6c-7d21568faa0b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "202518c4-d53f-4849-8709-ea8bb77a7faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69218a7-ad7b-432e-93c1-c279e74a826f",
        "cursor": {
          "ref": "193353e1-d726-4a0e-9af1-b6aa84b5b776",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "181a7f64-3af6-40d6-a673-9fe5aedc4a45"
        },
        "item": {
          "id": "b69218a7-ad7b-432e-93c1-c279e74a826f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "48a4821c-c325-4337-a71a-ebd064892533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531c50bb-d9c6-4ffb-b5f3-e73699cc6b27",
        "cursor": {
          "ref": "f53c7c87-972b-41f7-8455-d0d1986a071e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cc2d9795-bd89-457c-8fa7-193650298e60"
        },
        "item": {
          "id": "531c50bb-d9c6-4ffb-b5f3-e73699cc6b27",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ba41ab4-44c2-4d79-872b-15a9d03ba04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512c66a5-b372-43e8-bf5a-84f2a71daeb4",
        "cursor": {
          "ref": "52503e51-d96b-48e0-934c-9f99f5293bc6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a84d68cf-8bed-4e9a-8c9d-60e06694b6cd"
        },
        "item": {
          "id": "512c66a5-b372-43e8-bf5a-84f2a71daeb4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "25a07d1d-a095-45b5-bb47-fb00e6729b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dda6423-05c0-41a6-91e5-ab69c655bf57",
        "cursor": {
          "ref": "19c0c835-52d3-409b-bd34-59ef628a89ce",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b88a6f9a-e822-4164-a714-ac80a914010e"
        },
        "item": {
          "id": "1dda6423-05c0-41a6-91e5-ab69c655bf57",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f31b9ffe-adef-466b-8a5b-d426cbdcd675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edf6e96-848e-4363-a370-a8b6f17725a4",
        "cursor": {
          "ref": "a1f37b47-ab93-41a3-aed6-8f1680d4d611",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c16dcb94-885d-4638-b975-88821adb51f1"
        },
        "item": {
          "id": "8edf6e96-848e-4363-a370-a8b6f17725a4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fba1fdac-560e-4eba-beba-358e585b1fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739fc91e-cced-4a26-be2f-55c0ad1893f5",
        "cursor": {
          "ref": "80cb525e-03e2-4cef-b246-42f2caa14afc",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5656ebaf-326c-49ac-a2b7-622294f8a316"
        },
        "item": {
          "id": "739fc91e-cced-4a26-be2f-55c0ad1893f5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b683b8a8-f713-4245-a38d-27b94256b9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f43b4d-e0b3-4a03-b875-a0cfb3c25335",
        "cursor": {
          "ref": "8f4ae4c7-c9cd-4ac7-b638-42a87f2bfd02",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "04fa8f7e-45bd-4c80-9cc5-8b04b255a0c7"
        },
        "item": {
          "id": "42f43b4d-e0b3-4a03-b875-a0cfb3c25335",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6e25a26d-4133-433e-83cf-c02408573803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c475a6c1-8f94-443c-83b6-57a66e4d93cb",
        "cursor": {
          "ref": "0a96b04d-370b-4196-add2-db3e83135a42",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "edc65ae9-1903-49ed-8197-4a3a82fa4d9f"
        },
        "item": {
          "id": "c475a6c1-8f94-443c-83b6-57a66e4d93cb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6c9667f9-5b10-4801-9480-45e257c837f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed3b8bc-4a98-4e96-ab56-78cbdeed1d6c",
        "cursor": {
          "ref": "04662a47-1738-42ce-a0a3-ee4c119b1fd4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eaddc87a-35f9-48fa-b64c-2664a1bd0345"
        },
        "item": {
          "id": "bed3b8bc-4a98-4e96-ab56-78cbdeed1d6c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d338bd29-5896-4876-82f8-95c27d5e40ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a631c83-c0a8-4c60-bdca-b8a629a66f85",
        "cursor": {
          "ref": "7589d0f1-53c3-4193-9bbe-314f9740c565",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "55f9da71-1101-4244-ae9e-2a0b6abb7b09"
        },
        "item": {
          "id": "5a631c83-c0a8-4c60-bdca-b8a629a66f85",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1d0f0147-689f-4dbe-a685-3aaef543fcf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda0a50d-c9dd-4e62-bf50-264b17827faf",
        "cursor": {
          "ref": "a91eb898-955c-4a0f-a08f-840a2f097efe",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "92e3a7d8-d398-4527-87c7-38e994c30fb3"
        },
        "item": {
          "id": "bda0a50d-c9dd-4e62-bf50-264b17827faf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a49f336e-5215-4b5a-ad58-6adda5ab2c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dfd909-3ec9-401a-af2b-d89063fe7047",
        "cursor": {
          "ref": "c3ad79b8-3e99-4659-bb50-cc2439a003e0",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0fe619b1-22cc-4fad-8dbb-731f27a1f0e5"
        },
        "item": {
          "id": "71dfd909-3ec9-401a-af2b-d89063fe7047",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "89da7295-1d74-4bd0-ab15-5e84c92559e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8238ada4-ddb2-4f01-83de-167fd0a69eb5",
        "cursor": {
          "ref": "0301697b-aa39-43ea-ba52-7a9d8cd3ac8d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b4b7db95-3bf4-4f39-b47c-ed6a3a743f5f"
        },
        "item": {
          "id": "8238ada4-ddb2-4f01-83de-167fd0a69eb5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b23e19d2-207b-4c90-bb07-209c238318ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1446c64f-af13-49f4-810e-bdc2efcfa316",
        "cursor": {
          "ref": "e5486e8e-6e88-44f1-aeba-f6c07921c720",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b290a031-5cf6-440c-bbd8-a6b5a6bb3265"
        },
        "item": {
          "id": "1446c64f-af13-49f4-810e-bdc2efcfa316",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0cabba60-9f0d-4904-9ac6-2c6df2573592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9925b753-495d-4a95-92d1-f3d0dc7beaaa",
        "cursor": {
          "ref": "fc931687-0688-4f33-848d-91167df9806c",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0ce42c29-b83a-4945-996e-3e0e74b9e3a2"
        },
        "item": {
          "id": "9925b753-495d-4a95-92d1-f3d0dc7beaaa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fe1be0c7-f2b3-45dd-90e9-974d633fcff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aae7808-b122-43ed-af9e-7b963f44cae0",
        "cursor": {
          "ref": "14a20349-3586-4a2b-b3a5-8c6bbae6b0e5",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28146079-5559-4bbc-bd1a-8771fae865ea"
        },
        "item": {
          "id": "6aae7808-b122-43ed-af9e-7b963f44cae0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "397a66de-7cc1-4f3b-b84a-e38cc0f84026",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3a46d423-e1b4-49de-be73-fe9353a433d9",
        "cursor": {
          "ref": "751dc459-7fe2-4864-bbed-05c1fadb8c20",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "63964c06-0788-4978-826a-b920d2239bdb"
        },
        "item": {
          "id": "3a46d423-e1b4-49de-be73-fe9353a433d9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3c965d56-c530-47df-93e5-a55b2e1d603e",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "34faff2e-41b1-4731-ad18-800bff424eb4",
        "cursor": {
          "ref": "18e84b28-d3d0-421a-806f-e080173430d3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9e4c660c-0193-4f9b-97e7-e44d20db5907"
        },
        "item": {
          "id": "34faff2e-41b1-4731-ad18-800bff424eb4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1047f5ac-2ee2-468b-8479-8cd0d16ee328",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bbcddfd2-f2c0-4fd4-8705-e383c0ea1cbb",
        "cursor": {
          "ref": "5ca2ff1c-5598-4971-bc76-e9a2a0d1ed14",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b3f704aa-f0ba-4120-aa62-e569e4cd2212"
        },
        "item": {
          "id": "bbcddfd2-f2c0-4fd4-8705-e383c0ea1cbb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "819366bd-97c8-4039-a1e1-118ee1f919ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa81f9e-db83-4e60-977a-4a4e71f29877",
        "cursor": {
          "ref": "6c4d47c3-2411-48e6-946b-5762f1a84a0e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3d257be0-30ee-4b63-9c0e-dd00c4b2ac94"
        },
        "item": {
          "id": "afa81f9e-db83-4e60-977a-4a4e71f29877",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6b1fa524-dae9-4d17-b3a7-c5bbab844710",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a83c3d5c-d496-4ea5-a929-c45457257fbd",
        "cursor": {
          "ref": "4192938b-0e1d-4c9b-a8b7-724b20325511",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d4212581-a657-480e-af3b-a69a33ef589c"
        },
        "item": {
          "id": "a83c3d5c-d496-4ea5-a929-c45457257fbd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "50a77e38-a7c5-4150-a2b8-f6c0e5c6c6ba",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3bbe5cb4-8599-48cc-b2d7-4c8481a48e4e",
        "cursor": {
          "ref": "a2cb55a2-2e44-4381-9aae-ca3bf726b182",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d78b3213-f84e-46be-b53b-3ac54e30a2e8"
        },
        "item": {
          "id": "3bbe5cb4-8599-48cc-b2d7-4c8481a48e4e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "70d50fb1-2821-4121-a8b6-ce52877296f5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e3250b63-5229-4cde-9ca0-ddbd25f2f6c5",
        "cursor": {
          "ref": "f0eaa754-ea16-404e-b644-1567e42cc192",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6a53fca3-019f-48ff-9415-3e15f9a3e1f6"
        },
        "item": {
          "id": "e3250b63-5229-4cde-9ca0-ddbd25f2f6c5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "28f586c5-3fbe-4acc-95cd-10d1920d0010",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d3fd7956-6fa1-4a1d-8fbb-1ff26fb1468d",
        "cursor": {
          "ref": "d71967b0-6359-4f9a-8746-1f4bc28d43cc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0ed5380b-43fc-4224-a35a-dde4d0abf9da"
        },
        "item": {
          "id": "d3fd7956-6fa1-4a1d-8fbb-1ff26fb1468d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec319bc5-be80-4705-9f9f-36b945292b27",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9fdf529e-3b01-416e-8aaa-cd8a0aa6e5d6",
        "cursor": {
          "ref": "d0cbf81c-571c-4acc-8431-866c1faa57ae",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7ca365a4-4c2c-4f23-b939-06ab126dabed"
        },
        "item": {
          "id": "9fdf529e-3b01-416e-8aaa-cd8a0aa6e5d6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4ef1036a-2c64-419d-81eb-35d4dab422cc",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "58838ba8-2d22-4742-b2df-7403c00a2cf8",
        "cursor": {
          "ref": "a0cdd1e5-bc70-4100-9832-3438ab7c6a23",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5aed9736-f76b-4702-a96a-c9f61265a2f8"
        },
        "item": {
          "id": "58838ba8-2d22-4742-b2df-7403c00a2cf8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6691cecd-fa48-4e7e-bcbf-0256c52edb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8ae09f-caf5-4a10-b94a-85ea32d9d595",
        "cursor": {
          "ref": "a2f6eee4-7e3a-4dc7-9ffa-46193ed45b27",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b81e5279-aa15-4461-97ac-a5c16d93268b"
        },
        "item": {
          "id": "ed8ae09f-caf5-4a10-b94a-85ea32d9d595",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "67593573-0485-488f-b094-a06803e1ac0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f07744-4621-49c1-92e7-271435cfceee",
        "cursor": {
          "ref": "607f263f-befc-4bb2-a013-806a392f6f88",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ae5afc03-dd5e-4186-8c03-74776facb0fd"
        },
        "item": {
          "id": "94f07744-4621-49c1-92e7-271435cfceee",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d85bd474-c727-496f-942b-4bc13a09b3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efb1b09-5b0b-429b-b218-7214a2df2a75",
        "cursor": {
          "ref": "fbe17356-6bf7-413a-9d98-39fee0686b36",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "31ca923e-e000-4b7c-bb86-f4d7146c6ebe"
        },
        "item": {
          "id": "8efb1b09-5b0b-429b-b218-7214a2df2a75",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aa1fa368-144d-4859-9275-9917ca8fa708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6aec7e-e36a-4d61-9199-644fd3bd62f9",
        "cursor": {
          "ref": "c4556ea5-7431-4f26-8ed5-2b5c11c32a32",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a84e8b10-8843-4de6-b485-5fa8a13840ff"
        },
        "item": {
          "id": "cf6aec7e-e36a-4d61-9199-644fd3bd62f9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "90f20757-df52-483b-a80e-7ff5c1146867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdccb53e-5078-4302-88c7-ed8030a3ac68",
        "cursor": {
          "ref": "b9268ed8-61ec-4495-bbdd-21de4a377375",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "80a2e1af-9e92-4568-8b9c-59d95e5d0e04"
        },
        "item": {
          "id": "bdccb53e-5078-4302-88c7-ed8030a3ac68",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e8a530d7-32e5-4c71-8b9d-d6d468406cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c856f64e-221a-4a92-8306-2023d3cee4b5",
        "cursor": {
          "ref": "3cc47267-60ee-4eab-afaf-574ec422542f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8c923c2e-2c88-4b38-a7d2-50d0bfbe9a5c"
        },
        "item": {
          "id": "c856f64e-221a-4a92-8306-2023d3cee4b5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0517220f-ba88-4b02-8bfc-21165d976b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff4ba0c-3e5d-4174-9de4-9ffc9e450ac4",
        "cursor": {
          "ref": "0eb92c77-e5e4-4033-bc16-dc03fc280006",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1cca40ef-3375-4e13-aea1-e6c4e0226ad7"
        },
        "item": {
          "id": "7ff4ba0c-3e5d-4174-9de4-9ffc9e450ac4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4cac443e-c472-4627-8cfe-3526905a78a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c64f35-d781-4d13-ac48-d4e3e84baa79",
        "cursor": {
          "ref": "72039320-ecfc-49b4-8d7c-bac320825324",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "876b7aaf-3f81-4d5f-ad64-6f0e0c2eb7f0"
        },
        "item": {
          "id": "31c64f35-d781-4d13-ac48-d4e3e84baa79",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7381afda-b72f-49bb-992e-5e460d778b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa1ab24-c30d-4ed0-bb12-a3ab37307865",
        "cursor": {
          "ref": "d866d978-94f5-4a9f-8f04-639645ba24cb",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e9beabc-6e88-4fe9-b523-605200f94121"
        },
        "item": {
          "id": "efa1ab24-c30d-4ed0-bb12-a3ab37307865",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "22e0e4c4-afe4-48f8-ad56-cbdf00e59dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0274f358-5da4-49f7-a5e4-293e001d60f2",
        "cursor": {
          "ref": "2179b431-13f8-4659-8565-4c2ba9583601",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ddee0f87-197d-49db-8ca2-258994054562"
        },
        "item": {
          "id": "0274f358-5da4-49f7-a5e4-293e001d60f2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a79fb8b7-601e-45b6-9c70-b0052b616f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8674dddf-f313-4a44-8bf5-950d82385e14",
        "cursor": {
          "ref": "e61f747c-ee96-4f39-a1cd-6cbe92ed0e9c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "44903900-1e3f-42fb-895c-58de433ef377"
        },
        "item": {
          "id": "8674dddf-f313-4a44-8bf5-950d82385e14",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5faabaac-6994-49c1-88e6-0c691be28f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ab45a5-7d52-4369-b34c-7c01e255ed82",
        "cursor": {
          "ref": "8098cda5-cd23-4837-b2ce-6cbbd85dfb78",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "39119987-2387-4d26-b8cd-b808069eb1c0"
        },
        "item": {
          "id": "93ab45a5-7d52-4369-b34c-7c01e255ed82",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cbf79135-584f-4223-9d2f-121fd6c780b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea6cab1-0e81-4f6f-b9a8-a7f7e26253eb",
        "cursor": {
          "ref": "443d02ee-f476-4453-957c-dc4acc39d881",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5d671712-a5d3-4b1c-b028-97c10dc466c1"
        },
        "item": {
          "id": "eea6cab1-0e81-4f6f-b9a8-a7f7e26253eb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a7ae88ad-bce1-4312-bd1d-90cf5d41966c",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2da2f2dc-b2e0-4565-9c24-3536ed8fab3d",
        "cursor": {
          "ref": "9b5c6079-a846-4ab9-804a-57dd16d81de7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0a859feb-c20b-4b3b-97e0-cb0de1ced9a8"
        },
        "item": {
          "id": "2da2f2dc-b2e0-4565-9c24-3536ed8fab3d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b62d1c75-bc30-4561-96ce-9539cdf22fcb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e56879a3-6252-44b4-bfeb-a78b8aff7a17",
        "cursor": {
          "ref": "69b7414d-e85e-4a47-9c55-ce3a6b80f224",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "722f826f-938c-4ad7-bddc-8900772febc9"
        },
        "item": {
          "id": "e56879a3-6252-44b4-bfeb-a78b8aff7a17",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a69ca983-4be8-46df-a3b5-de76a4984abb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f9084569-0d6c-4ee2-bfd6-32feaefee664",
        "cursor": {
          "ref": "34be88e0-8c84-4330-bdc6-3bd542b9b95a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "15834988-e3bf-4d64-901e-1df0711d3425"
        },
        "item": {
          "id": "f9084569-0d6c-4ee2-bfd6-32feaefee664",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "35343659-f76e-484f-8aff-82f6a19128f5",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "65c3cd20-0b72-4437-9910-9c14bd0dcb37",
        "cursor": {
          "ref": "8be1d146-a90b-44f8-9e96-d175f81904d7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "49fea3c2-86c8-4f6c-b3c0-928b0221134e"
        },
        "item": {
          "id": "65c3cd20-0b72-4437-9910-9c14bd0dcb37",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a1946929-1587-4def-ba78-6650a1a9b39a",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b5173ab9-f60f-4b5a-8140-454d16eafd80",
        "cursor": {
          "ref": "3a7b4804-6731-40d8-9526-48dbf7cfeb09",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bd7a6913-20b7-4b33-a7e0-9608c62f80b9"
        },
        "item": {
          "id": "b5173ab9-f60f-4b5a-8140-454d16eafd80",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c78435aa-c369-47c8-968e-5d031fc520fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8254cf-6157-483d-80a1-ec9ccc29a106",
        "cursor": {
          "ref": "d7ba7f1c-6fbb-440d-bf19-8a15f3657b06",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c585d594-cb78-49f8-829c-265dc31219a4"
        },
        "item": {
          "id": "6b8254cf-6157-483d-80a1-ec9ccc29a106",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "112cfa77-62a4-451a-a728-a80a7b83dada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9962e02c-d52a-4cd2-baf6-a2bdf95fa718",
        "cursor": {
          "ref": "89bbd3c0-3e61-4fd6-9f17-8884f8fe43d9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2a5ddbed-317f-46d9-8caa-240420aeac1c"
        },
        "item": {
          "id": "9962e02c-d52a-4cd2-baf6-a2bdf95fa718",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2579f510-0283-428e-b4f0-b150271a9f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bfb38d-24d8-4800-b9b0-b32e04bc50e3",
        "cursor": {
          "ref": "a95a6b03-8ae8-47ce-b2b1-cb824fc278ab",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "92627987-0bcb-42ff-9da9-86c77e7bf119"
        },
        "item": {
          "id": "18bfb38d-24d8-4800-b9b0-b32e04bc50e3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "83d61630-ed13-443b-99ac-593ee6f9cedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3e6e43-8125-483f-a605-75ae8c2f8729",
        "cursor": {
          "ref": "e9696bb2-d570-4a23-8805-e755ea5ebdaf",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f124d15e-0475-490f-a06c-6cd75a165b80"
        },
        "item": {
          "id": "5c3e6e43-8125-483f-a605-75ae8c2f8729",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "04706c10-dae0-4a3e-a69e-8a13d30caedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a4f2d5-8893-46f6-8742-947c4c19f8fe",
        "cursor": {
          "ref": "01768ea5-4790-4217-8e7c-da5c3d5cd62f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96848479-556f-4b13-a002-224d1ebcbfdd"
        },
        "item": {
          "id": "b4a4f2d5-8893-46f6-8742-947c4c19f8fe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7e8d9837-ed1f-44fa-9c13-694de3eac7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401900b2-7a1f-4b2e-8fb4-7470ee7172ed",
        "cursor": {
          "ref": "63141702-c1b4-4ba9-8c2e-dfb8142fac15",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc949d81-fcbd-41c8-bcab-b3fcd977ec4c"
        },
        "item": {
          "id": "401900b2-7a1f-4b2e-8fb4-7470ee7172ed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "668f6985-9647-4971-ad4b-9de2772a9d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526c3f4c-9077-41ee-886f-861f6e064b8f",
        "cursor": {
          "ref": "a93cadc8-ab91-404a-97f0-34068d2dce17",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "51dfcb0a-ef3a-45b5-941b-fcf02e2ed381"
        },
        "item": {
          "id": "526c3f4c-9077-41ee-886f-861f6e064b8f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68c04124-e114-4e34-a6f8-a2daabfbca85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8d8884-c9ff-47b2-89a3-11b70bc7b4ad",
        "cursor": {
          "ref": "4ba1d1b5-2969-4ee6-846c-2342c7094973",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1a510459-1115-4cd9-9e53-07c7a4c8c439"
        },
        "item": {
          "id": "6f8d8884-c9ff-47b2-89a3-11b70bc7b4ad",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bf3983c4-0f24-45f4-8cf4-5302266a898e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8709caa6-a2d3-4393-a4ca-c745d1d0e504",
        "cursor": {
          "ref": "e62de2b9-0cd2-4ce3-8986-03c5275f5ddf",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1e510dd4-04e5-46c2-b5df-5091aa22f856"
        },
        "item": {
          "id": "8709caa6-a2d3-4393-a4ca-c745d1d0e504",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ab13c25f-2789-4ad4-9459-fd74fbfc5d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd2a9ba-9c44-4762-a7e2-05112b6d94c8",
        "cursor": {
          "ref": "9227d525-1784-48c2-889c-0ab210e424c1",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e1f0ba4c-39a3-4c5d-83df-34d7f6c6e018"
        },
        "item": {
          "id": "2dd2a9ba-9c44-4762-a7e2-05112b6d94c8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8bc7f35a-7fd4-4e7d-8554-adaf5fc15e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384381f5-c4eb-4cf2-8fde-b99f63bdbc1f",
        "cursor": {
          "ref": "c1b2dd75-8019-447f-8fb8-47c3e1dee65a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "13d662bc-ed56-4940-b31c-9227d36ee47e"
        },
        "item": {
          "id": "384381f5-c4eb-4cf2-8fde-b99f63bdbc1f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5ced9711-2e68-45e5-b5ec-850c8989657f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92f7e50-dd70-43bf-bf93-030275c10e0a",
        "cursor": {
          "ref": "85f1b156-dc53-43d1-8ad1-91c9bf049ae0",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0c8446e6-4ac6-4489-af2c-a00340750b1c"
        },
        "item": {
          "id": "d92f7e50-dd70-43bf-bf93-030275c10e0a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d989bae5-d21e-4d88-a8d2-a0359859078a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d62194-78b4-4b55-bbcf-cadd3e17c150",
        "cursor": {
          "ref": "ab64c2b0-9e9d-42c8-be45-22d22bc1a6da",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9e967339-0c1c-4b7b-b35c-ac39fe36204f"
        },
        "item": {
          "id": "10d62194-78b4-4b55-bbcf-cadd3e17c150",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c8c0dd87-d0f7-49ec-9a1c-51cc36350fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25e668a-c9ef-48a5-bd8c-1ac6089bb1aa",
        "cursor": {
          "ref": "24fc7433-d72c-4731-bba4-d667bf191caf",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "628f5a00-1519-4884-86f0-e02deb0f4e4c"
        },
        "item": {
          "id": "e25e668a-c9ef-48a5-bd8c-1ac6089bb1aa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2dda8ad6-6c08-48d2-800d-7964681f86a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2e2465-ea38-4e4b-9478-f222933579c1",
        "cursor": {
          "ref": "814d91ee-093c-40ad-b0b3-70e2413fc13d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2370032a-637c-4a65-8938-0d87ce9a5d57"
        },
        "item": {
          "id": "9e2e2465-ea38-4e4b-9478-f222933579c1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "328ec84a-99bb-4ecb-adea-9aac6a43dd0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb3d268-a379-4f69-8d40-b4d138ac1f67",
        "cursor": {
          "ref": "4efaaa9e-8fc8-4811-bd86-a463c5aaa6cd",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "287e738f-c1bd-4a98-a94a-93e92989a2d8"
        },
        "item": {
          "id": "aeb3d268-a379-4f69-8d40-b4d138ac1f67",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8143aeaf-9288-45e2-887e-31d387447d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586fe883-ade7-4b12-a5c9-c4fae3d7bed3",
        "cursor": {
          "ref": "b9c9f2da-fbd3-485e-bae5-d2e18efedbff",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "58c03fdc-dcb0-440c-9fe5-84db35fa99a3"
        },
        "item": {
          "id": "586fe883-ade7-4b12-a5c9-c4fae3d7bed3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "51e240d8-be4f-4103-b604-6c66defa7393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4979c65d-73a3-42f5-85be-ae3b5e135485",
        "cursor": {
          "ref": "7804d216-7231-4a8f-a67d-89fe4fb129f8",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d299950f-ab98-460d-ba6f-8f955150fbdd"
        },
        "item": {
          "id": "4979c65d-73a3-42f5-85be-ae3b5e135485",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5ed2eeec-0693-4df3-8cfc-5b679ac5c5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbff33e-da66-4d43-83ba-2389cd4c99ab",
        "cursor": {
          "ref": "2ea09889-71a3-4dfd-aa08-bbf1f809ad24",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6ff278ad-d4c2-40e3-accd-cb062b6458d8"
        },
        "item": {
          "id": "7cbff33e-da66-4d43-83ba-2389cd4c99ab",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "883e1041-76ca-442d-a5b0-8943b46f0c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7a8957-8933-4caa-a4fb-bed52b8648de",
        "cursor": {
          "ref": "f580857c-c35b-4f23-96a8-5e021ecc33a5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "217cbc5b-8fc2-4320-a1f6-0ede111fc80c"
        },
        "item": {
          "id": "7a7a8957-8933-4caa-a4fb-bed52b8648de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "619130b2-4fd1-4340-99e3-168581094e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f56d861-d26b-4f44-bea7-fa5216e5a1b4",
        "cursor": {
          "ref": "19330884-bf54-4bb9-9b26-b4a07801875b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ae9882f4-b1a0-424e-a7db-224bafb00da3"
        },
        "item": {
          "id": "1f56d861-d26b-4f44-bea7-fa5216e5a1b4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1e617df9-287c-4c23-b109-684104096ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a72aca-659e-4a90-8322-7b5c6789a163",
        "cursor": {
          "ref": "87605326-e36f-4ab3-acfe-becbba9c0055",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a449d568-0fdd-4aa1-a515-ef4545e48852"
        },
        "item": {
          "id": "e1a72aca-659e-4a90-8322-7b5c6789a163",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9c89cf88-50d2-45fa-9015-8ab6af6fc989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805f61b9-e59b-4644-817b-d03774f4fd03",
        "cursor": {
          "ref": "ef96b704-b5f2-4271-849c-34d346a2639c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a8441745-899b-4af2-af29-dbae4d5c1e4b"
        },
        "item": {
          "id": "805f61b9-e59b-4644-817b-d03774f4fd03",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2f486f47-5a20-4b15-9ab6-2756a4a4ac40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9220b2-b75a-44b6-af82-1e0d98aa78a4",
        "cursor": {
          "ref": "d11ce735-8d3a-498d-96d9-0eae206c3b0f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2dc42599-649e-453b-baa2-aa3dd0b8c9b8"
        },
        "item": {
          "id": "6c9220b2-b75a-44b6-af82-1e0d98aa78a4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f1631e1a-08e7-4eb9-a1b7-88e37ff00422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b327ad3d-df29-4cf3-a003-ebcb47c8c00f",
        "cursor": {
          "ref": "5d336553-ef42-4e51-81d6-186833c62254",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "33b15bc9-345d-4e11-af76-edd0a64afdbe"
        },
        "item": {
          "id": "b327ad3d-df29-4cf3-a003-ebcb47c8c00f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "12c55203-7c1b-4348-878a-06938c402f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f6741a-67c5-4259-b357-2ef31a68fdf4",
        "cursor": {
          "ref": "ca381510-5f7a-4144-9702-9700a556f169",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "01bdf5b4-56d8-491e-b369-fb41e73edd47"
        },
        "item": {
          "id": "45f6741a-67c5-4259-b357-2ef31a68fdf4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f8343ffa-771e-4506-8b0f-b603183fe393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5853b9cb-112a-42f8-aacd-4c6d364d755b",
        "cursor": {
          "ref": "4cf33f45-c925-46a9-a95a-ad64d7300aa3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4eb4d749-8895-46be-af02-c2ab2d1ac6a6"
        },
        "item": {
          "id": "5853b9cb-112a-42f8-aacd-4c6d364d755b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e5970c01-e661-41c7-a9b2-91a8333ccff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ea4082-8e58-49e0-8208-07e1ce2b511e",
        "cursor": {
          "ref": "f7f80ba0-0728-4bea-bf78-af6eb3736fb0",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "77bfe97e-a0e1-48ff-a544-af2060071b93"
        },
        "item": {
          "id": "48ea4082-8e58-49e0-8208-07e1ce2b511e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "36b07030-78c9-4cb0-b066-22ea73cbf43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3864767c-9154-48ca-a2ef-40e247dfc21c",
        "cursor": {
          "ref": "4de403b5-4e60-4949-8edd-464d1898a9ce",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "da15e0a3-365a-481e-b8d5-b0f6a3de4381"
        },
        "item": {
          "id": "3864767c-9154-48ca-a2ef-40e247dfc21c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bfbe0dad-d3bf-4cc5-bc88-3fca4dbfb2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12670b70-4001-44ff-abec-b1917eda04fe",
        "cursor": {
          "ref": "a6e03b46-4388-461f-8622-18ade0cbb34c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "66f6c0b4-fea3-4fb7-a096-28b26e4cbb56"
        },
        "item": {
          "id": "12670b70-4001-44ff-abec-b1917eda04fe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7ee0f644-5710-472a-bc2a-e67397b645b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7178ada3-c745-41fa-acc5-9b7693dc221e",
        "cursor": {
          "ref": "05fa7013-0c79-414e-a5af-b0c2e7fb7f8f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "fe80fd5d-b489-4b7b-95df-5cfff6a69d4f"
        },
        "item": {
          "id": "7178ada3-c745-41fa-acc5-9b7693dc221e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b29498f5-8371-4607-9f88-a930fcf76c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9e0138-f540-4db0-a669-c4610b0fe8a9",
        "cursor": {
          "ref": "f36d8a8b-33c7-492f-bd85-33fbdee54621",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "91ae6cc2-e8af-4f9f-bd57-70a0e33da11c"
        },
        "item": {
          "id": "4c9e0138-f540-4db0-a669-c4610b0fe8a9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "33368b30-200f-4879-b522-4f560270adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e238dca-f5fa-43e2-a379-1a74184048a8",
        "cursor": {
          "ref": "4645a1ad-04e9-4604-b954-ed12fb8d03db",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "775987c6-c5b7-4b31-8ab6-dfe12200b6ac"
        },
        "item": {
          "id": "9e238dca-f5fa-43e2-a379-1a74184048a8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6dc19811-5b58-49a7-b65c-404ebcf91123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39272711-5d90-4259-a45a-2ebd30bf6edd",
        "cursor": {
          "ref": "b0ae38f7-de19-4115-b729-ae406e71b83f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c989fdf3-e012-4a7b-b512-faef9d467576"
        },
        "item": {
          "id": "39272711-5d90-4259-a45a-2ebd30bf6edd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "54082f1a-278f-4740-89fb-7d152f28456c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f9c6e9-16b4-4bb3-8e82-372ec036b676",
        "cursor": {
          "ref": "253b8087-e596-4e14-ac92-87c25f7b109d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0008c8a9-5c7e-4de9-96be-623320c2cd26"
        },
        "item": {
          "id": "d2f9c6e9-16b4-4bb3-8e82-372ec036b676",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eaa5a070-f2ed-452e-a066-be26dcf3f2ed",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ff07c7ca-7957-4710-ae08-b26f63966a69",
        "cursor": {
          "ref": "a6d45eaa-0c5a-4c27-b91a-7e90ab3d8a5d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c566a532-098b-4cd2-bcc4-29dfe4b4cae3"
        },
        "item": {
          "id": "ff07c7ca-7957-4710-ae08-b26f63966a69",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bb27d255-c4d8-4328-a506-75b356392a37",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2ba5f7-2dec-4b57-a3b2-df9226e451ac",
        "cursor": {
          "ref": "a5b0c3ee-5cfb-4b41-9b1b-01c8c7bb5e42",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "35333096-7f65-4466-a814-ad5047e36887"
        },
        "item": {
          "id": "bc2ba5f7-2dec-4b57-a3b2-df9226e451ac",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "95dbfcee-adfe-4bc8-8f1a-a17a04de4cfb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "05159e93-f64d-4d33-9749-b6a93e18aec2",
        "cursor": {
          "ref": "f59d71da-9c52-437a-bd5b-523c477b011a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "79903eb1-1f29-4d81-b966-50621b19c714"
        },
        "item": {
          "id": "05159e93-f64d-4d33-9749-b6a93e18aec2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a95f660-19ae-4d6d-8c71-960b1a396ccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05159e93-f64d-4d33-9749-b6a93e18aec2",
        "cursor": {
          "ref": "f59d71da-9c52-437a-bd5b-523c477b011a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "79903eb1-1f29-4d81-b966-50621b19c714"
        },
        "item": {
          "id": "05159e93-f64d-4d33-9749-b6a93e18aec2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a95f660-19ae-4d6d-8c71-960b1a396ccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f075ea8e-8c16-48ff-89d1-7f9457881841",
        "cursor": {
          "ref": "d91608a0-86f3-49e7-b77b-e1985c7a9714",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f0dd921d-7d20-4473-9be6-c41586626d42"
        },
        "item": {
          "id": "f075ea8e-8c16-48ff-89d1-7f9457881841",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d153173f-1148-4320-867f-da0e8b6c0d3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cae63d7-f470-4925-9b1a-3cb1ae98d7cc",
        "cursor": {
          "ref": "f866289a-b3f0-4739-90c6-68b348945e0a",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "97f08d85-dd3c-4462-82b0-a715c3a6d91b"
        },
        "item": {
          "id": "0cae63d7-f470-4925-9b1a-3cb1ae98d7cc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a5753694-b6c1-4701-895c-5d03c34ee5ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}