{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a94190d3-9af9-4891-9e9d-b4b2a1d76dda",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ec13b62f-dc93-426d-899b-775c2d8d79cf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d931a703-d3fc-4391-9f3e-c65ed7bbf71f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0cc2c7f-6465-42ab-946c-791130674f94"
                }
              }
            ]
          },
          {
            "id": "b8cc5e5c-d239-4198-875a-4ae548f91b5b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b3ef894-c326-4f9b-8a6e-bc1553ff4d8c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "57bd284d-dc5b-4d0d-8601-b1d11697b87b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a83ae758-4ed3-4e30-88f9-d8eaf9f0b601",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "52c2dc75-3126-4217-9d92-46fa140f026d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73a42f62-5268-45e1-9917-a3927e8641e5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01e87479-7089-4e06-9da9-db55ce7c3bad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97ef2170-f273-4bbb-9385-257166bc3675"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58dc0e33-2df4-47a0-b2bd-70b4b897f2fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c46088a-6105-4453-a9b4-02721157bd36"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cffe928f-443b-4a4e-8bd4-2510f5fae34b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e009c1c-1506-4750-9d7f-dc2365049e83"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44d48d23-9dcb-4e50-b262-d564b8cec289",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b43dc2d1-1675-45d7-b3c1-113aa6d8e934"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "113c74ee-18cc-4915-b36d-37ed04dfbcd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e914621f-d56d-4e68-bd7a-12989b0619a3"
            }
          }
        ]
      },
      {
        "id": "c0638ec3-25f3-4506-a1b0-56dcb2a4e951",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "277045fc-21e1-4479-b380-a4e5db99bf46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73ea2ed6-dcbc-41fa-97fb-e7a99f0ca7e3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e4bf1508-4ade-42ef-976b-9c5d0d19e7e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f28efd-25f7-4482-9be4-2105c3715be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddcbc61f-35be-439e-ba8f-a77b2c7d6eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436968e8-d3bc-4e16-94ff-fc2056fd43a5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66295d57-fc83-4ae1-b18f-751f579511c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c711d5ca-9c56-47f7-82f7-e7baa1f2e13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8e111d-4422-4c11-a895-caf3d6b106bc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e209fbe4-251b-4f95-a3bf-0b519eb2bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f2c9a73-9abb-4e77-8478-680983fd0eee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25764e5b-3291-435d-ad99-8155e5e68db1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe1d353-e72b-4efa-9a35-b007e6d36757",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb520eaa-ec0a-433c-a55f-8c495685daf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc5447e7-dd3b-4653-b56e-11552006e72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad31b1c-e425-4f94-825e-60bb068430cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443aa066-710a-4da7-9a08-e6be0f807611"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8f34f3c3-ac2f-4ab4-9418-e78a8cd98d67",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1321717c-9b64-4347-b29c-4812bc36a20c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "020f50f2-2f41-401f-ae27-52be66256f4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "33e2a6b1-363e-495d-b3f5-38861cd6f6fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80d8dd6c-129c-4cf2-b62d-05e226e857b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0ef04ba8-6130-4da6-bbdd-dbcab41994b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31d3db8-8237-47ef-9fba-c4514df43b3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c16a67e-f47e-424b-a42f-49448f9c2042"
            }
          }
        ]
      },
      {
        "id": "74fab952-e240-4880-a5ec-252fc3f75178",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "11f53a3a-5ec2-4d29-9b27-88e8144b9554",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10185225-33fc-46c5-876f-31c9c6846a3d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "537f240f-4161-46e6-be57-7ef3e56a7eeb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b343be-a860-4c72-af64-9abdd5ab0c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c885e2df-6864-4d98-a03d-a8ff3115d74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8281f605-c712-475a-acbb-cf68e5d1afdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4b48c76-8d35-428c-a442-a87a1c239045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961c6a35-8b7e-49c6-9470-ac39e4e2793d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3246c252-a173-4ac4-9c00-db16d4907add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47fd3f3-40a8-4705-83f0-57b20c708ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8609af-2ddc-4c49-8c24-09fbfb2d75cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42fe46d9-a346-4644-ac0f-1cb0a1a9b958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d02890f-e1af-4571-bc7f-b34d3ee5f969",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09af324-96ce-4732-9d9d-b452cc00422b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc07bb76-c815-4560-b8da-fd57a70baae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31c7120-9d00-42d5-b89b-ba59dc2bb004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da27d986-4660-444c-877e-aa8c199741ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bad7826-2dd7-4216-8575-202dd79e3fa7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d79afe7-e099-4765-8d27-4015be569e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ba471a-4b03-4459-96ec-c68b478f146d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c75949-f050-4d8d-8b81-56d605b7e8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a114096b-2b19-451b-bab2-6e1bca6ce333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4290b95-f4b5-49f5-99a1-30f775878238",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06255a3f-98b7-4505-9182-6eef213259da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea8565-372a-4110-bf27-e5e327d80c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e950a1-082a-49ee-962a-9fdec657e812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4de65cb8-678c-4643-bb79-f1cbbae2c62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c55854-3fce-405e-8875-aed1b7e2ac12",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef09884a-aaa0-4772-a79e-b6867a493bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af4bfe8-80a2-4dee-be2f-af62ac96e2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4f97b2-e9a0-4cb9-a779-c757c5990b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4efa8f84-ee87-4246-a65f-47af78ce5214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f73a18-24b5-4daa-b201-2c3d3942f46d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab695258-0573-4d17-b8c4-0776a1314359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af75dee-7f14-427a-9d7b-5ef19611c9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60dc623-2992-4d39-8ac9-523b5ed6b0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "413bb9a4-0d5f-4bd1-bb57-2457a66a064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a63adb3-d74f-44df-af68-8fae2d340f7e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59773db-4279-4ba9-ab63-80e2f93b1478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4339b1a-f560-4a2f-897c-8878a33ebabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49fc6c8-b4ed-4a81-af64-5a0a0cf84fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ba29bc7-a3ad-4f91-aa0d-ce9fa4967279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2b6c8-6641-441e-8432-8261aad5bb3a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd1e6c9-f067-44b0-923a-468d3a504e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347e0300-ad43-4c95-a4fd-63dd2f579a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968c5c28-4941-413f-acaa-e09b7b1d43d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7caa92a1-d0e0-4b41-b3bd-046c7b60bfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4847cb0e-7037-4535-81f4-92e0a7924a13",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855fab35-36a5-4388-9be4-cd427ed90685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20206062-2bda-459d-b6a2-a9a8c044b9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5e09fd-a2df-4763-bc8b-8475b66ee55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f630f2f6-fe1f-4716-9f57-9102eec50539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acf036f-e528-449a-bdc2-86156dd89c7e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ae8f71-2e15-4d3f-b123-6105edd45a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c85bf2-fba6-4ba5-8be3-9857936f05b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae6cbd6-0965-4eec-9824-288c79bda36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d32babd-f97a-4b65-9322-d785b1a553a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bdc662-582f-481b-bc33-7e7bca791d1a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ccfcb3-486e-47c1-846b-49964b886fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6e0100-370b-4ea6-b4b4-cce28c73ae75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85805922-16b6-45df-8c00-437e33374830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ca828a7-d25e-4dd2-b085-9288bff81802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a21d23-57d1-4a99-8ddd-9aef228361c9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a0f163-3fcd-4ec4-9875-741d96a0d204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8432e829-f62f-4156-a5ae-06356b85d22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94c4edb-85e1-486a-93f7-b11ce8efe05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de84caa4-2875-4a0f-bfcd-d9098dc46690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb506a4-7590-4e49-9907-003d2c7f01d2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c314ec19-7f82-4332-99bb-e278bfa637a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03f800b-84f8-4d06-b738-b65eca205fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4a9dba-7055-4799-b653-54602d29b952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "475a1d38-be06-4684-9dcb-57592e36456b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afefa64-c448-4ba0-9661-e49d2287e49f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fde6ff-d47c-4726-972e-4c12fc4a8c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6009fcda-4837-4272-9109-655a16a64647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12c0e19-9ea2-43f2-84e9-e0e90500ad14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1409cc4c-66cf-4f07-a6ab-3c8fd8ce1b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e52b8a-e13a-4307-b818-4f5da49da36d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efd387d-664c-4072-a2ea-04fc6ecf5920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab1b2e6-7803-4c3a-9170-5afa9a601f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e054c80-ca49-4c0c-a890-e2736e60375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e545424f-6014-469c-bf7b-de7750cd2c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b31aca-d43d-4abd-a15a-989ffd60f821",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f3e83e-0711-4b3e-9084-cbaf1ab7b8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d06d5b1-7c50-4d15-8226-df1d5da04bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e3e83d-e12a-4e8a-8105-0c93c2557a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1e36155-61f8-47fe-84b1-d5344313694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a5438c-cb36-49c4-9c19-d03ef6ef12f6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0488f-72fb-4807-9b26-b5a092812be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a708757-c151-4aa3-84d6-6f95d6a57082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c86f56-dd9c-44d7-b238-280da5e3ddb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "75b356ee-5871-4875-ac10-76a98d8a58a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bda0dab-621b-42aa-ad66-df1c5a2ef2b7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c5288b-1a33-4eb3-bae0-262d18762ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f191126d-ae1e-44ab-8ff9-e19483336bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e6b372-91e8-4f61-8ee0-55331951675b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e3b67d-9607-4c5c-bdf0-914dda8f07d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e11da9-0b9d-480c-99ea-3339d042e03e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593673c1-dd3f-48d3-85e6-ce19dd1751a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d572af-6c87-4b7c-a1c6-3a6a9bd02e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ce4a77-31a6-411d-b7ef-9afa7d3ffe84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e285c471-a778-4abb-b759-f57be21b0c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c42aaac-b617-45e8-83e0-31c39e3996eb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec5cd41-8bb7-4113-b783-95dd0c0b4882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655ad017-8f81-4471-8ed8-c5fc4b172b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eb131c-ce6b-4c64-a65a-6e4683eac758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d97f5a58-24dc-4adc-8f91-0695ee96638d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c935944b-9d5e-4cd7-ac40-d7c0954d2e25",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6851fa-059f-476a-8149-75cc8072b6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40e0ef8-6155-43e8-8090-1fa898d00b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526a854d-fb5a-41ae-a9a3-14f8b758fc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a65eec2-cfa4-46e8-9802-72b74abc8ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe0ef4b-a150-48f1-a49f-d7a7d747a089",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c0098c-f91a-4313-a835-754e5d53425d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea0afc2-3289-47b0-96f1-db80e15a119b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a6768f-22a6-4d01-81ff-a7a7c780ecca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db7aa05d-cfd4-4b5d-b211-dc1c972f9b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9ca5f4-7ee8-41d6-9eda-3907da617fdf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5462350-e3d0-4aab-8ac4-6b4973f0e750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a07354-9d52-40ec-ab62-7cde8089d826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1530f5e-19f2-4b39-a73a-7b4ec6c46d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "11325818-b821-41da-a16e-4d4b2f66bb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c116ab2-0e82-4e37-9820-0e07a3c9c31a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b362807c-fe47-4c76-bf54-d7a8969889b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e22a60-b3b5-49a6-841c-6c6e62e988e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7d4d6d-6a2f-4867-a14e-4c72e8d02380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a100b3c7-ea98-4874-a6c1-374a53572d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9c7b73-fd1d-4851-89cd-2f3fcfc077b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2bf2a6-fe58-4577-b676-376f98e9f47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb5c237-ff0f-472e-b5b8-5a89ee1a2c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33f044a-5613-40c7-9a61-0249556851f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c57cb19-3807-4c16-9558-f84cea34a35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75ce760-1036-4cf3-8fa8-983d68f32234",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014355d4-1302-4b3c-9952-66fc364154a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f881c596-b95f-45c1-b134-ab514f2a22a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d112adf5-2bd5-434a-abc4-df3f691791d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "535e91b8-9b63-4b23-9bc6-c9abc831ff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372da495-e9f0-4e84-a205-5c3be5030dd3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417b7dbc-552c-4915-8c04-1cca796f9792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf34b938-47cb-499d-9a1d-33557a698bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d966e157-9e1d-4cc7-a23f-a7a41cb25f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "659f2ccd-f50c-483f-973c-75b0acca26d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862d94f4-5a29-4c83-a1da-2063cc09ce19",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53748c91-333e-4663-8597-6736f46e4f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39528af5-d421-471c-8f9c-3286c0c60786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771363c6-dfab-4542-aa7b-1917edcd8e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67fb4757-af87-4b69-8c6c-0e7a657cb6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a84f0a-99e9-4729-b4da-872eb4689b74",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6baa9f-27a7-4698-9c22-cce8c345b1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f909798-b1a8-4db7-856c-ba63c190bcf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a8c33a-7ecc-42c8-9d2d-a276819af9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f28e3c61-aa19-4b37-afcd-178ad79e6413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee5519a-1079-42f6-a1d0-ff63e09155c6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d610a-6a99-48e9-8788-a97dd997e6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc632f05-ab96-4368-831a-bae6ceaef9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b324ca52-cc02-417e-8453-bc7df8899545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0694398a-dba3-4807-b50a-6afc6a046ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f1750a-beea-48cb-a4ee-b0dd4b1bfbf5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b1c823-304a-4e14-bb61-e8ba7f239afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5d0806-7a3c-43f6-8efb-de27d8b9bf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabacc86-360d-46e1-9cbb-dfce9d43b44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "588cc5b0-9154-46ce-8972-b4460f58a698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8183876-fed6-464a-ba52-5acceb0484a1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c585accf-0dc5-401f-bfd7-422bc20910e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc8597b-cf81-4c6b-b128-83fb8264155f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc5a48e-a9c7-4e20-b9ad-775bc2f6840e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d093f2e-a0f0-4610-825d-80600fff4c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb0d54f-c178-4152-b288-9fb663a95f4d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21dc81c-e6cf-4b4a-903e-6cd7964bd80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4549c0-3923-494f-9769-ea2c745eba81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e22a3a-283b-440b-ab4f-cb048305acf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ba4058-a670-4d6c-bd28-145bd703b809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f927fccc-3766-4daf-9a43-f69fce343db7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dbc9f5-08e3-4050-9ca1-ea0a4c7e5fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8383bd5c-d5a3-41bb-823a-c67fde0b05e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93b5627-fef3-4290-94ab-8aae14f55041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f6627580-19bb-442b-9f87-088668c53686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bcb57d-2b3a-409e-872a-c95a2b2870a6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faaebe4-b0ac-40c7-9139-4ea2b9b2fd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f73d478-5996-46c9-b92c-ad2d6044213c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb91ac9c-5883-41db-8520-5927e4add497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b97947d-f723-4070-bd8c-bf335c682c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383d24cb-b420-4931-8027-ca9b1e773ff6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b8e9cb-25f8-43d8-8c63-40e5522d2d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57030ac9-99e9-4696-8073-3c5ee9129d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5342f1d-cd6b-49e2-a140-93832c215de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c558f252-fb56-4aea-928d-9bce82cea182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78bdfd0-691a-4b5b-82dc-98f841a241f7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71672075-14d2-464e-a6d0-676b39bd5775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fbd860-d5a6-467c-ab6a-3eec8cd3e080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e266c290-83a1-45ff-9841-661958c199b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7871ce-0a1f-4195-8fa1-eece10f5f94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fed120-b0b6-479e-885c-7aff17082e6d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358b3e48-393c-489b-bdeb-9c6c93b38cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e927ce-a06c-4870-9f9f-6cafbcb604b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d3477c-0bc9-4639-a023-96de9daf6354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e76293af-3017-4e38-a17d-19937b113bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f136a169-a802-4dcc-8435-e4a190034098",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6044817f-2fa8-4a59-afe0-842c24e46313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b0dbb1-0ecd-4247-b442-de9b42f18071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73ed01c-9aa0-4a69-90f4-7de19f20705a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d93482-2795-4a83-bb3f-69a8f0fef780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dd9af8-a9bc-47d3-aedf-bfbd2336290d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c68d0f-a5e2-4860-87b0-2bf1fa3cf23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f72b8f-b139-4da7-aa0f-0336390794b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b70728-4cb9-48d1-8651-e2858ba3b00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38ddad8b-3302-4abd-bd1f-f78df7393354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4207634-3f88-4733-9c6f-b4abd47780a4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9586957b-8651-457a-aa61-d6abb7395694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9028752f-0a9c-439f-b15f-21b3185087f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f79970-36f3-4e24-af6e-17c754578d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2c685d77-9fa7-4752-80f2-458103f45023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2f404d-3f84-4ea6-9804-f3c95050830d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b0f8d-2a2a-4ee6-a3f8-f95825eb35c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e9981a-a8b0-409f-a3d3-0ab6254b976d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa4a24e-204a-4974-b4e3-d0711b369230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9da96bd0-4446-45b1-a0ac-6d20b4fc5e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7208311d-125b-4b8c-8acf-2e3d668a7a1a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5380628f-ea7d-4b5d-a8d6-cbbda335a7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e97ba9-7ef8-4e31-bd38-660de49a62d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edff1f28-b56f-4e91-9e42-17104e14ccb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f364ef6-eb0c-4a1e-8531-5d0b6dbb70c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff0cad3-5066-4aa3-91ba-f95bdf038c66",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c1087e-f3b1-4002-8b6c-bdbe20342ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d79420-4833-4d97-a9bd-aa92f846d40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c2b653-8238-4fa3-8cd4-8928b3bfc395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfbf169-4b13-444a-9015-1f5c11d25347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e091d646-a1bd-4853-a57a-7f293fa0d16d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7682b7e-be8c-4089-92cb-dedc9c53e9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdf29d1-eb42-471b-a58a-00fb34773ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacb4b44-8460-4699-a6d3-da55f1326410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9999f64c-7047-407e-a394-ca2705ff5d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a59404-f87f-4167-89e8-8498ed1b7dd7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc936a1a-5742-4f08-8b5a-43553f570181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f68ec1-6499-4942-a955-fad7c437f73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124868ce-741b-4fe8-aa33-f40282edf814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49927610-de02-486f-a4da-9d2a750e426a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b370b-5ad4-4999-beb0-22ea738bb03f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e106c050-367a-451d-a8ad-aa5b41b75db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17612de5-833c-4ab7-b693-e3db416d4c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c05cc1-ccb8-4ea4-99ae-7f9ef0613f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2515f8-b154-48c5-b9da-0a35dc29f721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873cacc7-2987-4d3d-9722-fb51ec761e0f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95340ce3-71f0-492c-9d76-ee06028306eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d4df86-ee3b-4961-a6e1-e53e1a287bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7ac448-0951-45cd-816a-7d74d264a044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35f56875-426a-41d2-a838-edbdede71312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7256d675-9af9-40c4-a52e-c687df7f6643",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f95a9ca-c1e7-4cd2-b0ec-4915d639130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823f3ce5-70e5-4966-87f7-a2c2025a9c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b574461d-8f6c-4a4a-a129-87efeccad021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe47426a-4b59-4516-8e6d-640df3d4eabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1078ad0-e90f-495e-a7a3-2c164f9f0fb8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27fddc8-ae79-471e-ab05-40f6b517689e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a01d31f-48c4-4767-86d3-40238b8b96bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e1b1c-25af-4e90-ad8b-78046f17016a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "887a0ad8-968b-48d6-ac00-dd858fc74faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c42c640-245b-4daa-9bf7-1d9ebe60dd62",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd377c6e-7f1d-4e7e-9743-7d38e679beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d738b1-d277-49a6-8244-5325a209f6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4117ae2b-c1df-4c98-b17c-bd3ac86cef7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a31f5538-2881-419e-a550-509511489664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d1c713-b95c-41d7-8d17-e67d26f172f2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33028e2-6de4-4569-bbc9-df944a7dd0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06a8798-8a9f-4bbb-9daa-cdffa1e0c4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18da16c4-4aa7-41ec-9977-460e1837a795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8da6611d-1b1b-4434-9fc8-473901dfeab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe502b43-47d7-4802-9abc-c461d265d805",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc76933f-1b53-41c5-86f4-cb64729c08f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11131d6e-3f0c-4485-872b-5ab17b987b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fce1c7-a40e-4bab-8e01-0c03b98ac11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd4651a-834f-4aac-a33c-7529fc738e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb813e04-96c6-407d-b291-67b9de55fb73",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec6b76d-15fc-40f1-b2cc-3261591cb5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec199973-e99c-4544-853b-dc32fa8a6df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7212c246-5a03-414d-a9f3-8b3f1bb84f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95dbcb30-6104-426f-a528-044db49a5fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71667973-8e73-4412-9a20-c84b490e8b80",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb306bfa-61bb-405b-adbd-9e2574d28bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0031944-f3ef-4985-afcf-b6d58bbd2249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539f04af-a64d-4a6c-88d4-5766bab1dc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "446c3305-353f-481b-b090-ffbc42ad04ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe03a5a-533e-4d24-8504-b015eab01c44",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51537243-15a0-4480-b17a-12c48c38275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1ae4b2-a031-4303-a0e3-188caa00360b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871874a5-52c8-4f3f-bb6e-29ee60a88102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bab2f0d4-c47d-4df1-bbc5-573a0e0be144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1115d379-8d4d-4379-8ad4-e7dbf5bc719d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c4b3d4-352c-4cf7-9241-f335f7e4aab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b6aba3-a800-4973-8ec8-5fd735348416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e1c216-d9bf-4f87-bff5-cd4f7f764326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e52a91-015d-474b-bf8d-51ddfd8a4438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd78e932-4837-4ef6-9b00-0993a10af6db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79061c01-02d5-42be-b886-397945f0e1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae53458-4e87-4847-87f0-ddea88a41f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015a46b2-73b0-45f3-abee-8ed5f3fb0ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "65f1a260-59bf-4a48-8f9e-b50738e596ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566f196e-21b4-4389-b6ac-c99e4c148c60",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2786c4-1d4a-40fc-8b5e-dcd2ea33034c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b62a32-9934-403c-8ef3-2349062a9d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aa7369-664e-412d-904e-b0cc54c8adc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c09bf3d1-9aa0-44f0-b69b-7daca0d6b07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d9780f-e0dc-48fc-9ea0-410f535fd055",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fedaad1-47ac-4a8b-8fb4-3405c12fa873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f25e96-6928-4d92-83a4-5d323793122c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf53190-07e9-435e-b590-f0f0d8e3a319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0909e59b-17b2-408e-a877-84df43dc5a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7a39da-f473-4db9-8cad-1b9c03a98383",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cde1f9-0f20-465a-a890-7baa30812e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ece7d60-87e5-408b-944d-85c4c130bd1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a8966c-d371-48bc-8b9d-ee4adc22b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed9597f-a777-4d69-8d70-cfdf3a6c44ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac45f88-ce51-45e2-bc37-57cb1b66115f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c92f80-b160-4f4d-b607-0b5583fffa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37756a0-3ec9-4925-a2ef-8e92d778205c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc0f149-3daf-458c-9f78-f5182b5d92dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba59221-111b-49b7-bdb1-b7418bec1d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed32917-0a9f-487f-9e1e-7a7e3362bda6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5009223-7ddc-45dd-a3e8-97d2a5d029d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff78e949-f9a9-4426-bab7-1c490edd2e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032cd13e-2c88-4133-8038-521bb858d3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2dcd734-8ea2-4ae4-ba36-bb1e47308a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8bde04-3cbc-445c-a45b-65199b6f4ee2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a5cf51-ada9-4c90-882a-babe1f479ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b108cdc0-4b74-4ea4-a268-38857adf8de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202448d7-75fd-4815-b384-f3bc0b364b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c60da27d-fba4-45d9-b071-b9bf7dfbda92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4b24ed-d12e-4ca7-87ae-9485e3074fe4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf2fe2b-123a-40e9-95d4-df07d1961676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19a40d2-9161-4478-bcfb-c238eec37972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcde5c95-6b9e-499d-9562-3b6eee35b4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56cbd513-0142-4d2f-9a48-10acf1814b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc595d76-ed1a-4706-b9e0-08e97f6ba3d1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56b8eee-d5c0-4067-a348-d7316018c03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dabf01c-2df3-43c9-a759-7d24d20ad130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274ebf90-81fe-4d09-966b-a1170d3ad1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbab901b-34b3-42d3-a9f2-ed8cdc02620f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f53e38-72b1-4af6-bf70-9f641cfca5a0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f57ef0-62d2-4b5a-ac68-ff016d2c4b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5933462-601a-4529-8ad4-d07963b097aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c357177-10ea-434a-bb8c-e59aa1e52b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e966aea-d4ef-4be0-960e-675dd8043412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315b0506-0ea4-4552-8e15-8de369239ac0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e96833-ba6b-443b-8806-0f77a187dca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea39ef-ded3-4f73-bd94-56a4bd2d9575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ae3dc-b72d-42ba-8b34-024895785b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4d471a-5956-4c50-a7bb-b2e6baaf3eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1006e37b-4f2b-4c02-a9a9-bb409fe12873",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37791179-e2b2-4ae9-9ca9-849bcae486c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c11d3c8-8625-4c1e-b383-f2e9cb8cd05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bbb669-4f7b-4035-81e5-1f5067f02fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d96555f-a55d-4569-87f8-0d790e66b2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10d38cf-6109-4b7e-a839-c5c1070ab369",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce1c41d-b5b1-4a60-b00f-08c217f880ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c671e5-1d52-4783-a3fc-7784b7262499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36188197-ec23-4fb8-869f-26734e82e645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11aa6054-e922-4da9-99ce-4483784cf9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6764a21-f7da-4df5-b784-6ea2f4ef29df",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289743c5-3aca-48fe-a3ba-eed46bf8a35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468b0712-e2c6-4b3d-846b-f7f6a5b90764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd48296-81f4-4953-a019-ddea319caa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bb9c05-f1e1-4d88-bbaa-81cfd8a5dd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb2a667-f39f-47c3-a687-6d51ae11d6bf",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2388872-4942-4f6b-b9f0-049a2e543b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b285696-676e-4161-a842-25c270d960f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95469bb1-4635-42a8-b5cc-0dbb181a9bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "043f70fb-ada0-4ea9-a29e-823a1cffbffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309eb455-65cb-42aa-b6c5-0a98a067a54c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8285c1f-ebde-4397-9eb2-15009632c946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7bb5b3-8030-4960-a77e-f0837a473442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d9401b-b109-4868-81ad-fd890a86f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87096f89-3837-4fff-8b4a-57f42ddd89a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7ff9ee-c984-4373-9968-fcc4992dcf81",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ea1c6b-006e-443a-a2f6-c439d19258f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff14c714-0ee5-4f8b-9a39-e2f9bd987bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0b7441-b51e-4d20-a444-fecae816b07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea884316-0c06-4e86-8566-4188adbe13ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d490cd16-a2bd-486a-ae03-b457a17fb181",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06de2d55-c5ef-4182-abd9-9bafa7f8706b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeadcb5a-bc2a-43f3-81f5-9b8c7f73bcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb02f36-f7f7-48d3-bb04-bf7298d492d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "037ad444-7616-495c-8adc-e0d040df511c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282592cf-9840-48db-a477-447af1fa54c7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fd3ac1-d23d-43c5-bbf0-7f837c813832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e422fb-05ef-4faf-ad79-675981cb6493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d28bf0-0f7f-43d0-b886-3fcfc4cf4282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45936594-6ce9-48fc-b2dc-ec0a653adc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e686e5-8c7b-46b3-b579-e6e323b4382a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b38c17-38c0-48f3-9168-39f3c675dd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800d9694-bb8d-4f81-a909-cdc0885bf131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1964503-3266-4947-b75f-0f658fbbca6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf332eae-3f5d-4adf-9da1-500521f5c917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdd1543-26d7-4f88-b3be-32beaf549768",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0f4045-feea-477a-bd68-5c4d19da11cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32219540-0f72-405e-b8ad-47d6040d5614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a761469c-e19b-4f2d-8eca-5e55dcdb30d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b922c14b-139c-45a3-847e-5c2282df07ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a60fc50-87e4-4997-9ab3-d5fb3b7da3fe",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65c5c56-31ab-467f-812b-ea09694fc512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93714bb-e57c-41b0-adf6-789c0290a02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e998d0-ca84-4b35-9b0b-c70fa1c28a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f08f005c-c40b-4803-8b27-c86349200a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d25fad-5449-418c-b9fc-500f2c109453",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5d7c6e-a90f-4f4c-8a53-446ab1f3e8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658eb39c-e27e-4d01-a7c0-9564bab243fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdc687d-7a16-4225-9678-0eaf1a73614a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d2457f-49cd-436b-ab87-7c7972d975cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724a53df-376f-4a23-b7e6-aadf51ff8f5b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41736a1-0078-4ac0-98d8-a584461bfdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e8c823-cb68-48cc-bf8c-1fc2c485b37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89ec047-a1d7-475a-877f-b2946b6f6d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c822f9-1916-455b-a6d4-38a10d4fc3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a751262c-4419-4c2e-b5bc-10bf2db61be9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52152afe-8b19-48e7-994c-72f5943e8e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24eeeec-3b82-4e38-83b1-6ee26a856ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb3fc26-3970-41b7-9b1c-d6417adaab3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba9aa02-2e43-4319-96f0-837c667f0ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d22b1c9-f40d-4778-9976-7154389a87c6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3663c6-1968-40a7-8bca-2953ce5727c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628eda85-90a1-4f5d-b48b-02e51592cc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d04816-bbbe-420c-81d5-ca6f1186240b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3f9de3-2d30-4593-9366-145652593fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1369d27c-77e3-459e-8b90-cdf6c7bd276a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abbb106-5f05-46dd-a464-975b510d00b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6803b7-91a8-499e-9ef0-05ca0241accc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f656ba1a-77b8-4dab-91ac-fc517db75174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf09ec78-79f7-400e-acb0-f2f1b7f202a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3539ae34-20aa-4f67-acf3-d1db454359c7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d92111b-9650-4fd8-9db5-25aaaff41298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c9c02c-a367-492e-8f11-d6171b3e67c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0ed14c-c279-44e8-9780-4bdbf3f7b226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dfc446-71fb-4312-9f68-1b96c8ac8b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f9dc00-4587-4c06-9e2f-2b7033114b22",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5439ca08-c4db-46f5-831e-8f5bf5237517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b17eea9-15a0-4acd-adf4-32b647dd2b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33953538-d050-4920-a9a0-8be3ad589e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd4ea29-bbd4-4182-8e30-338f47b62afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a85676a-7550-4736-bda6-0a0affa72c04",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45517679-4445-457f-ae53-deeb299a683e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d798af-fd17-48ee-bc26-f9a38e639157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c33ac6-f54a-46ca-b08e-5e7a8fe42771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f989a6-87eb-4c16-a915-c592832a0960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadaea8f-1e1f-4572-a9cc-ca3fc55c4d48",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2341e5-a6b5-4b05-9102-67408100e9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69799a8-cca4-4f32-8e87-f75134f1587b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065150e2-0fe4-4510-b521-7ded8a635ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0af74a6b-a673-4a28-b254-358fb52b6d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dad93e2-8060-4fe9-a2a1-c665a6601b79",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898e62e3-28df-4357-aadf-e80d841c6b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477423d0-1631-4368-bc1b-627e4b0ac3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb6953c-ed4d-4b96-a562-c6f2096e7ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a75c44cf-d876-4c45-947b-b27e7bf65d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767d27b2-8031-4beb-9436-2688757f5eaa",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36245e84-ae80-40ac-a592-e9550a5cd228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20304a03-c32a-42da-b541-0a137c428aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9fa852-65c5-47cd-b930-390849049500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7704f603-57b5-4a95-b230-5bd0b56a5297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10667355-933b-44fa-97c3-062e3b530be4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37968515-71e5-4565-9413-5a5f1a082230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4d1156e9-a023-460b-a226-edcea1cb80e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1230f6-1059-415c-98e4-b30e327065c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8080ca0-049f-46e3-b13a-f6023f3dcb99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bbe1366e-77e7-4ac2-a4f0-338e5bd9f0db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8e4cd3-f012-41e6-b886-cea46e8fb00f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84b43cb-cf45-48a2-91cf-552ca8690400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95753d40-65b6-4a7d-9e89-36449e6822bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1532dd-a712-4764-887a-032338687418",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81e60caf-a5da-44df-be2f-382c1712eaa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14efc125-0b71-49e5-b0c0-7f3114a92066",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3382cc8d-edae-4a90-bcbc-66f1ab513d33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b1f5807-92a7-4d28-9fe3-30da6e98a275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b919bf5-3ce7-470e-a7d9-782792a47ed3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7166c21c-95b9-4061-a1c9-b5da7f42eb05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "136bddb3-d3fb-4a43-ae3c-411307ca0267"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f19ad4d2-0448-412a-9a3b-99eec7d84081",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ef7eb85-ef0a-44c7-bf93-86e47446bab1"
                }
              }
            ]
          },
          {
            "id": "3e5035b6-655f-453c-b8c1-410e9dc4dbe7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d4a9098-3931-4754-9cd3-dcef6dbf0cda",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ed6fb998-7cfc-416d-af13-8eb38f469046",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c0e917-f973-4c1f-bec0-1788095101fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a0c4c148-bd87-46f5-bf7e-ac47d081bba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee841b7a-75e8-4ca3-aaff-d7979dbf74b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d843811-513d-442c-aa60-eff58c2f09ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cfc687ce-4f10-4fdc-95b5-08822635ad95",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8754cb1b-ba84-4af8-b7d6-33153274c20b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58c3a0f0-2b15-4ea1-b865-c6d14c6c1274"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32d52cd0-318d-450b-a980-cbc1ac014125",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4936cfdf-d7ed-49b6-951c-9255abc5564f"
                    }
                  }
                ]
              },
              {
                "id": "eebb8446-98bc-4744-8b54-c0d6a21b5849",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60f64bac-9c08-4036-8e35-f3de5bbe9261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13de273e-238d-42fb-9ea8-165bbd6d8c29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edca2530-c98a-47e7-8a89-68c3a7be7761",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "60b63965-9a93-47d4-926b-a57a065f2859"
                    }
                  }
                ]
              },
              {
                "id": "e0ec1996-8172-4404-83aa-b046b26c7403",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b13a430-5005-452b-ac84-8ee2a62192e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d03a581a-a474-4356-b3ea-63593e058fa3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40a68b8a-3bda-47af-b0ae-60a5efa4d7b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f727581-1aec-476c-82fe-0108e394ce3c"
                    }
                  }
                ]
              },
              {
                "id": "4696a916-1580-4227-bca1-53c02e5f62ee",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e9db40a-79d1-49bf-8ba8-19ecf2fb0cfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74981835-8d8c-45d7-98c7-433a7e1fd9c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcc87780-acca-4826-82ca-27c94f1376ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f95dcf60-aa5b-46ac-961f-5946329f6c94"
                    }
                  }
                ]
              },
              {
                "id": "ae0ee5e5-9f20-44c5-8a9d-f10a64bde2d3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ab62e2b-d926-4b21-8b8c-d8d82c7120e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "854dfdea-19c4-4e31-aaff-a6f620ef88e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ec1ae74-56e6-4da7-ab2d-fcaf7dc50273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e5dd171d-fc3b-4ac8-b2c5-0e10c8de6065"
                    }
                  }
                ]
              },
              {
                "id": "8e3b99b3-7046-4df1-85f3-d89c21318ae8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d7b0ea8-a280-44be-b310-e7cbe842809d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64d09135-45ff-420d-a4f8-6e9cf1e60336"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8b29b65-18aa-4e8d-90a9-765f2e2028e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae9004fc-d996-43fd-95be-f1189fcd070b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a6af0ed-f434-4289-a0d0-e508040b900e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c59cce9d-fe85-47cf-b954-706189f37f91"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8de4f95e-12d6-446d-a25d-c804c3efaf74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27a58bce-fb98-4096-9a51-2b7a8a97797e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04ef5048-1dbb-4475-b31f-fc194b62907c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9b8875be-b2c9-4b1e-87b0-f41999f997bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c302176e-66aa-49a1-8984-7597d4f28c48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c10b01a8-5285-4bb8-81d6-432f8b39c9d8"
            }
          }
        ]
      },
      {
        "id": "f041869c-b982-40c1-8b1b-82e1b1abfbe9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "70344413-8152-423f-8d32-5efba4826b82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8ed7ee9-cf38-4e11-8506-92d56624c444",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ec9d14d-c895-470f-bdbb-abeb8b9dcec9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a3aee0-e624-4c89-85fd-23a63bc42e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280bba77-a062-4e9d-9baf-9214db37fb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5b3b75-6db5-48e0-9e6a-604d3d94ae65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c66f038c-8d77-4774-b46d-bf93e997f1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836e2cd8-91bc-488b-b168-15f0f877a605",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9a4969-3c09-425c-ac9b-847f49a78b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd2dae1-8425-4971-b503-9177454ed31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2730b5-ab61-4d3a-aa18-38537d4474be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a8cc1e-f22b-4c7d-8325-0e9cb540ff23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f172f0d0-4f1a-48b1-be9b-54ec9ec5c391",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a769aa31-825b-41a6-b894-83bcf69aec25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd75b20-e953-4e04-b9e8-6c2be7dc4726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152a2036-3aad-4736-8e53-5b04dcdf4275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46411694-46f4-4289-8d9d-b1a2b93d7a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e5ddcf-8d49-418d-991c-566255471de3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17af717-74b8-4611-a3a0-fc3e3a59586d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36604c8a-88a1-4d61-95fe-184de9d8de54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aac5336-af8a-434f-80df-c76ba10be42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33bb33d6-acc1-4639-854e-44ed6c49c889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78386f11-e3d7-43d3-a5a9-8a2a60b7a25c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81af1a8a-7565-4102-bee1-9a354766bc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa8d58f-ee68-4e1e-af7e-5ded92b72a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94afccf-023a-4bb9-ae0f-ad200528ec2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ab54a2-7267-41c7-8c17-bf6a0271b317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15881ac-158e-4169-9891-2dd402481289",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6808323b-fb12-4eac-9148-4866e8001332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c8eb06-1907-41bd-b681-0c0b6df541a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1512a918-3fb0-43bb-ba9e-7be327e7ad51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b604cc-fff0-4753-a979-c0bee3f5e34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922b0d0d-bb2e-478b-85da-efc4396d863b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48265bd-4f68-4e41-a38d-e292573a241b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b438e006-7da4-4c67-8049-aed3c245a08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7568147c-a2bd-4c38-935d-f7dbe6ec0a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9dda03-a819-4bee-9dfc-4e5f29c658d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abb4adf-a421-4eed-aedf-b1df348163de",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baf422b-9389-4eb1-b3b4-ec735fd569eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf4bf8e-225a-48fe-92d9-78ef23c9ad51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65053efb-c594-43c5-9b61-fa1399c9c26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c83068-c7b7-4d0b-86e5-611efe121d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94febe95-ff27-444b-ab05-34152d29f16b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bb9590-555b-4ca0-8935-5c299abb8b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ee2bcd-dee1-4d11-ab61-122feaf4d59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcd3bf4-e1e9-45b0-96ff-d8f9ef6ce71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d54f04-34b3-41a3-8caf-79bafbe20ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a67d3b-e555-44fa-8b98-3b411f9a26f5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fe59b7-db32-48ea-a8de-a9e4c9baedf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2382a65-daf3-4ca6-804c-08204be671fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190b1e10-eb05-4538-9708-da567db260d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1bbee12-1c6b-4b37-be73-7905495116c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc59ce67-788e-4a14-8671-9d770d6e5dbb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0330e127-f57e-49fb-8842-d8ecd125b573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d145f9-687c-4f61-ab58-2edc1e6a7584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cf1f3d-b28d-42f1-83ca-719bbd383f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "14b3c1fe-a29b-4347-a9a4-507e71a90d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed056221-4265-4ade-9ce3-9d254fe79d64",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9331e6cd-895b-45e4-ab7b-814f69d2de73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f57606f-dc01-4dd6-b847-a3a763c154cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa02a366-fabb-4563-a305-ba856832bea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c34d4e7c-b0c9-4bb4-b839-c47391e5d350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591519fd-382a-47e7-a870-c87c268bfd7a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c919904-e027-4c82-bd21-417bf9671b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6299d479-e724-4e92-ac9a-ed0547257dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7d61e4-3094-4d97-ac12-47d38706a83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "724cd5c6-7573-4bd1-94d2-6a9a6e0c8028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b99103-e973-4c5b-8fd9-06f7c08266ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb02f76-5fcd-4ab1-85b2-7dec396af261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f351448e-7770-4c92-8a34-88ac1375e5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e907c9-9b33-4e1e-bb01-cdf4a392f7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "87541c6b-46a4-497c-8da2-72381b882e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5399c0fa-8723-407b-a706-8de5d2c53728",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb5b99e-1934-487c-93b8-548f41fbf449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba0d51a-fac1-4f75-bfa4-00b22a7033f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c87a06-60ea-4fb7-8fc0-47f4305c4a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d55945-084e-4ae5-a768-2ae27ee8f5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f830ef94-7a19-4e78-908b-d9ace44145c1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a58aa8f-35a9-4690-9900-d5d25e5e8f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f23df0-eae7-4120-a73f-a3eccdf2b4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be7e1ff-1d5e-4571-833f-40df32d0e9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b6f19b-31ae-4e92-9e7b-4871bd24e0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c04ac1-7fb8-4ca0-af86-98d2865ce7cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3788d08d-8c04-4ad8-82ca-9796707b2b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67cc9750-3108-4853-9c7e-7446ab21b57e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ffc93a-67fc-4997-9a4d-d6eecd41d818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d92816-f3e9-4913-aac6-e4beddaa2f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a1558c-535c-42bf-9c76-23723eed2b5d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03a7b27-93b3-473d-9140-3c10d517ed11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fe4073-28cd-49a2-b752-6c9664fc1757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa5745d-5a8f-4fd5-8254-392807bb75d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c931e21-85fc-4277-b917-874af80e4efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7326600-8975-42be-8a2f-e2c7185d40b0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eff97c1-2a56-46c2-9f70-65e0691b3298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e222eac-c148-447b-a890-8678f0970a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b1e5e7-8054-45f9-ae65-25533cb24ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d0efda-fb10-4780-901e-4e8d0cd525df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffcfeae-34a3-4c5b-b01c-7b080da95fe7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec817e8-de45-4a07-82ef-4dc37ebeca0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dad952a-66d5-4ccb-86f5-028da52d6451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e916c5ae-7b0f-4387-aa92-579cb7e159a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50256802-d27b-4582-9a13-131e2721bca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974e3df8-bead-4fc7-bd1e-31f5c30951df",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b808110-6b9b-4057-9d81-75a41f192d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe748b0-d5ba-4b15-8356-edf041329fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe3fc40-5075-410d-ac24-5d662a1ff54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "768e6730-f259-46f6-9fae-bfa6f6079e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded2baa2-b307-448a-87a0-486099b497b2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad71343-cc12-4915-9627-c8ead65c5d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0132ec5b-2374-4304-bef3-3e9e5205f3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca3853e-d3a3-4b05-a797-c4b9e7620bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2de8319-b41b-4252-8005-8f8a12c07a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b24bad-b92f-432c-9b58-3bbab7b89ddb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f335220-976b-4b45-a647-6b906a4c0a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbb4c01-07a1-410b-a610-4bad76100288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c670d212-20eb-45ee-a204-1ade5ee8bbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b80179-a7ef-499e-b62f-e8ee0d42deeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786e032e-3e02-4398-b2ad-68b448172d0e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371762ca-6548-496a-9bb0-125e662e6c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af875807-7bd0-4006-98f6-07af9a333664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0251e0-08b7-47bc-9d66-dbd429620134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6977a968-47cb-4d9c-bca2-d709f3fa9f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c49c42d-760f-445d-b693-fa27f6fe0c15",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc57e5f-4edb-4267-bb20-325d2d2895ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403b689a-e617-4ada-b433-fa11ca946aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5e3f7e-d6be-455f-8822-576f224b5732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcc6060-b7ca-4409-b174-d71f017d3fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c74746-5276-4968-af67-01cfc459c7b0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bde25c6-f5ff-4803-9c88-549efeae2858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3926a7dd-8fd3-4ff6-998d-2612bd29ad2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78dc52c-aa5e-44e4-89d4-252559728868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "894f51ca-310e-434b-a7ec-6a8f968b09fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fc1c8d-c9a4-48aa-8448-16efc774d1ee",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b1d408-a479-45e0-8fb9-0e891f8f3e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63e4886-a6c3-4c5c-990c-0ef449393488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19e354b-5239-423c-9b9f-583dcaa9b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c27246b3-338e-4ce9-b125-d544c0c75efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938a092b-5ab4-4c37-8d1d-44af57838387",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e2ff4e-0337-4855-adf9-dcfad20cd3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8c65e6-3bd1-4953-9106-eada6966268b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac50a5a2-3dee-4d31-8c5b-abeb85fa47d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3c8984-5c42-4c3a-8e3a-735b471f6186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedf1b55-6a6e-4a90-a1b9-fd112a26aa5c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9241839-848d-4e3a-9604-952111f68c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8075f5-9c09-4ebf-80df-c99946d57abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81fd598-53c7-4f5e-a0b5-ecd572b11db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c751cea4-ec6a-4c23-8db3-18cbe33c2d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bfa1e2-d68c-46f0-bbcd-ba2fb593d2a6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f808e4-69d3-48e1-b845-d7a0f8451a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1025e7-81b0-434f-800a-4985d188f80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f2020c-a5a6-4568-9aad-b150a8ea17a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda54930-f767-46c6-af90-337f056ba14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973044a6-86c2-4b69-bfa6-bafcb739dd41",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6fb3f8-8cf0-47e9-b73c-6dea0a3ce047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb95b8dd-21b0-47cd-b943-cb3c8a8553b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a87139-de2d-4e3b-852b-86b9853e6da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db7a0e7a-b2dd-4e27-ab88-7ee50f71ccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a938918-0c7d-4248-8848-210e44407111",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacd1c10-9e1d-4706-9b16-684b5a1f1799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ca4cda-e131-4605-b73d-c0b32992d648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91911f3-b3fa-48d4-86c3-8be7587a3c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f46371-b1bb-4213-8fde-2e1781501257"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3202e6aa-7bd8-4ba2-bfd9-8f3661dab0c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da43de6a-774a-45ba-87da-88586bf7b18e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bf74b8-90d2-424e-b0b5-63202fc6c03e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd0ca60-b7b7-4fc2-8002-e790b96e4718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf88e83-e23d-4c40-8fa6-87853d5a2aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62929106-7148-4391-8a63-6bc7b22a2db2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57d97922-43ab-4814-961d-f33a9823dda5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "264c7aad-ef35-4575-a0ce-18c1021ad4de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d8be8f6-3dba-413b-94cd-cbe371f5887a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26f7ae1e-3fcf-48a9-a2c0-965c2a8d0afb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c985201-6688-4dd3-8d95-8fde39d30a41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cab7e8ab-b428-4e4e-8cdd-a81f4d7026e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31610d9f-9cb9-4a85-a732-ef9e2a1d9f7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e70b1612-ca0a-4c14-998f-2cd45a4ece9d"
            }
          }
        ]
      },
      {
        "id": "98ce6f5f-f27e-4c31-9de2-eac5573bc463",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4ec33ba6-79de-480a-8a3d-1aecc2c22908",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a27bebf-62c8-4490-93dc-1fb307dd9e61",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b0108bd-d1fd-4391-8bab-e693983b9b0e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63c6736-fa5e-4936-af7e-c5cfa7a42dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81aa0e3-3fbb-4e99-a98d-e5142b78907a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9a597a-42a1-4b08-a3d8-5b42e540eb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ac1009-c9ff-4011-a3d9-7963df746681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d977726-6762-45e3-919e-4bbe7be3d755",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3aa3ab6-1985-46de-8cb8-d516cbde251b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74001601-74a0-409f-9ef7-0a5a4481dfbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffb833b-077a-46a8-a02d-4c3414151697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2877ce6-8fd5-4719-b323-ba9f7a816778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb374c07-8f01-4668-aefc-1edc4390b9d4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8761fe38-71bb-4823-9592-3b289c61c8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e7ee2f-02d6-4678-8b0f-78e7f95fedb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da662e7-fd7e-4623-bf7a-09e6e7216134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d14ed58-cd83-4562-8685-79d38cdfba7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f7f743-4954-4929-be71-dc9f0ed02813",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a68f49-d303-492a-8180-eedbbb9f4bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f8db5e-f168-4faa-9528-e11a57eea458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11f89fa-d913-4b28-8d8a-aae3de429ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "389f77bd-267c-4b82-a21a-86503f7b4c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf3e860-6d84-45ec-959c-57a0b5e7b638",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d84c440-d2ba-4e71-b073-b923db0ebe42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ab9e95-6da8-4a02-a97f-67d5d2f54670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4befa8-c96c-4f17-91a1-be5745c61ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "785ae6a3-11b5-488c-a2d2-961dfb10e085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b53336-d26f-47e6-bbbb-584cb44d9771",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a998e3c4-9515-4db5-92f2-748326ce28db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c23658c-6077-44d9-8c32-92a151e7d25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb4f221-3c95-4d88-a0fa-af06ef8000d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6f9e65-5861-406a-a8af-68e57c3da337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c9fb3e-f93b-4df9-8901-37248ae503d9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42c6c19-13f4-4532-9817-ee5b0eeada89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc3b371-6356-401e-8d60-14662ab6bc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82e2e15-1e8f-48ef-8567-4184531acbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2aa84d-b335-4600-8b6d-d50ab490bac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be69fe0b-6b87-4c58-b041-ae58bfadcccc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a54591d-d471-403b-948b-d2c4116c0714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316e8e2a-83d8-42db-a16c-45ad614c8c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce93b5f-ac32-455b-a4f7-8849203a431d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7967e5d-2686-479a-9e6f-03773c661487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fd2eab-d39d-46b3-bcd1-12c311da0e57",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197c840e-2401-48be-969f-4a654a324468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab280114-e842-4852-bcd5-0f7c2f64bb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f8d20f-62d6-4c5b-afa0-1b76f27a1c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1307628-9799-4cc5-9bac-c493009bb6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716c3596-e788-4f58-9158-bf2e7320d6b3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036120d8-6a6c-4af5-b23d-a4db044c57e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9557ad7d-3530-4d20-ac3b-bbc5360c8719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f350136d-41fc-4658-a30d-3f85c2bbf5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b72b18-d0ca-4470-8ca6-ae2dae336712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cda312-c0c5-4150-a351-b90aae5c9e50",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3793af29-9a15-4865-8da7-2fe60851ac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b368ca-6719-4db0-9ed5-b21973fc085d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e195987a-88a1-40f4-a935-a592e6f90f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdeb295-6c96-43cd-9f82-c4f5956b6812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62949070-3ba5-487d-9180-a02257d63839",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a276c58-12d3-4dbe-ba59-de6c1d373fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ec344e-8ed0-4220-892f-049d5a7b1983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a45fcd-587a-4be2-a4e9-d047aed6fc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "597b409d-952d-44b7-8ac4-eb574d454389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c287f6b-c6f9-4202-b72b-364011eadca5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e63b11-38de-4c86-a9d7-b652cf3c59c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cee9f6-a3d6-4a91-bd68-25fb6e32afb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e2d5a8-f6e9-4830-9a73-d074f4544a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d016d30d-05ef-48de-abf1-d6996c5ddda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c93b1e9-82a7-4efa-b6aa-a2b50ebdf568",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0a6867-9f53-40f0-804b-ec06fb91d990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0eca866-4cbb-4328-8ec6-fd2bdd37eced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a31b30f-fb90-45e3-8aa4-b7158f1a2e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "899ef3a2-3663-4e36-a46b-4168784ab85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa16cf66-2b46-44fe-b263-3585a7857a9c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70523ae6-85e3-4543-b80b-fecfae639bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87206c6-0f8f-49b4-8597-ac1280bb7bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528e4818-5cb1-4d71-9895-3a756f4fdffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e38e6d6e-4fc0-43e4-af9c-5f7ec3afa79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fe50b1-18b7-4815-86cb-f61c85488ef7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6eeaf9-a684-4a0e-8693-248f785e18ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b72a5c-dc55-4aed-afe3-63eb62ed7676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cdc0fa-b366-4017-a72b-1cb38770f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "152b94b8-d74e-44f4-a78c-73249f398595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367c78ee-3437-41d9-ac37-7cdc3213caf2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a4c011-1207-41b0-9b1f-122b1ce04379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f46cd8-809d-40c9-9a7c-db123be8a4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b927c8-1e2a-4ed3-a94c-39190429c43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6875e459-b4c7-48ac-8003-8877de261f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2ee712-c795-445c-afcd-9cd90b7efdac",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc134d4-c319-4e08-882e-e2cfbdb5170c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920ae8f3-2bb1-4c11-953d-a6516e087c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa046774-a149-4e4f-a3d4-0c55d2a87674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ba46e9-e4b1-48b5-9705-152825fe1e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89829847-1a69-4a2b-8b6c-6fa7e3d35fd9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c60af8-bc21-447f-a204-34a578cd697a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72896d8-9bae-4e46-9882-3ba8f86a6625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89af7e4f-9728-4955-ba97-0765a1c8330f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2e3366-cc71-41ef-81bf-3bae11495c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94f4049-dd3e-450e-863e-2b96039665eb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b288e6-0beb-4d11-8cea-1d9784ac4fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d958617-5a32-43ec-bb93-f69a44ed6b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e73764a-585f-427d-9a3d-78b8af133dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "447cbc9d-e4fe-4401-bf13-9a5c45a8a240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ab4d57-df4f-4644-b70d-c2d8b4fbf6b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a7bee3-4d2c-476e-a911-0f6de2f3e205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42486a11-b65c-4f00-8f9b-74ca44ed927d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562be59e-7cf5-4d69-8d5a-3a956e557a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "298c6f62-69df-4a11-98b0-b94abe31278d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5528ccd-906d-4bc6-97b8-a9bc5fb85e07",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b3ecba-fc10-48fa-8ecd-36fe5af5c0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61549e4-7c41-4874-a6e9-ed2653acfb3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c16e3ca-4518-4f38-8092-a91e8555ee54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49564c32-5a8e-422f-95dd-3c0f8319bfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4611f59f-bb45-4ed9-a21d-4f1bc7cf25ac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d6b85c-174a-49cd-bf16-63d5334f54be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2763373e-75ed-442f-9918-1d79eff90937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df9630d-742e-4dbe-9391-9a219a250cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87715b46-fd30-4361-bc21-a794f1da3a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d795e58-c1ae-452d-8666-4803be0103c5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3b4629-ff9e-4791-8d70-039f8044510f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b04541-05ec-4973-a2a8-2b15064755c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7fbe84-2453-4b8c-badc-232396393c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d30df1-eee9-4f1b-826b-78ef849cba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd2215d-7a30-4e0b-9d45-8eaef509dfed",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804169f1-1acf-487b-9f5c-03a960a62808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeab2815-7804-41fd-a621-1f4cfb93c651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa128e28-b467-40fa-850c-2184939b452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea0b471-768f-457b-b15e-40fed35f2325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c85dde-5c6a-4b26-ad93-44a3b232f66c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad25224b-bb72-4062-8594-80fc5d25a33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb66a7c-0f35-4011-8be4-e88d5bfc3ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751154fb-7ad4-438a-9a02-e4d2fda05dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c47c6146-019b-48c8-818e-46be754b4af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c640c7-eb7d-4b6c-ade6-7fd992e7526c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b640db55-221f-435d-ad71-93e375a69f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8171fd-53f7-43e5-bea1-7729861340b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101f69b8-1c31-4b7c-a978-b361a1a9bf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "487515fd-74e7-45a6-92a3-317e853a83ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e3a315-ad80-4146-a5ba-4369c3b99355",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab128084-ec2b-4484-a81a-8fb04bfa2517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7ca8a2-5689-4087-9458-204b136797ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb7d516-1394-4002-a874-8cc8051ea5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b7423c-9eb1-437c-a90c-7ec9bc3d452a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb531949-7745-439b-a530-5bff415b57a2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657b9dfa-d554-42a7-822e-bd7e2c4aeb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3d95ea-3a99-4f34-93b9-707b95aea3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a54b332-7c01-49ff-8824-771e71617761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d884c18e-562a-4e67-9806-99c6eac6e66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a3157e-d97e-4cb7-9aad-2b22c3621103",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836d1a55-45ed-47cd-924f-351d3249c6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105f7f6c-2891-4453-8d06-839d674fd012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf41c79-5be0-4192-8780-61e6a7171c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8199d61-1997-4513-ab3e-b9ac4a753909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af1d6a9-990e-4553-8926-cc36cbd5bf1e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1d06c4-372a-42b0-bb65-a6fe3e621159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7949496-a896-448b-9506-ecc7a6972800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e6f84f-7012-45f6-b7d0-4290874fe5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c50c3342-3099-44de-842d-26ac6c412567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0258a359-1560-46a3-9c6a-16b4b6bc2ea1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66180911-d78a-4391-b614-83507606564d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd31438-3639-4819-bd3a-d6790e34d1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c988207-59cb-430f-84ee-7f829a22cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "377b0976-5230-487f-88fa-0df4c67a3bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8067a34-fb8b-4cd0-a3c2-72bcf0b034e0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1903e0-609f-4749-8f9b-c8506a6006c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90b94e1-d039-4e3c-8d6e-2fcf218d7c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab87d62-478c-4461-a1d9-9c0bc9b88f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "939aa5ea-3472-494d-80f4-90398454f310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c080dca4-db51-41b5-ae17-bbf5ec0bb425",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36834663-7a97-47af-bd96-903b592b60b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1cdbc1-1084-4452-8682-67b1e025d38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cbd076-0119-4681-ba03-aa6dd942a970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99d1d56-ca44-4914-9314-5add1f93e180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce31521-3f27-4297-8f0a-cea3a4f429ed",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b684778-f15c-42ac-8460-8414542c5b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f51f9c-deff-46f5-a7a3-de43c638d58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3bc0f9-8c60-4e9f-8283-9c23b50cbe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79121413-991c-4ed9-b1f4-00dd931e0784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13876b99-68d0-4a4d-891e-dde5914ea37b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ee3a2f-64dd-4d56-b0a8-ca295d844e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d912cb-3678-4dd6-8f5a-8c3d3c6f6454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037ab708-dce7-4d08-bd1a-99df82cbfcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b657c2f-a5f0-4e89-b9ea-1fecf1ea43c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa66d5b9-8a01-4994-9114-1560d6e9a984",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3829c15-c614-43d1-8812-0d835ae80a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec8684d-748a-46e2-8703-c14f73ca3013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d54f8a-0b44-4e46-b9eb-3da5488546fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d7ab7c-d9a8-4f13-b0c6-d98df6f4804a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2153032d-2a00-46a4-a333-0acadf28201e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53fc4fa1-f8a0-4a62-ae5f-8495488ab40c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c06fdde-ef19-4eed-8cf0-40eadbd545b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a58b8e-4441-4ce2-b064-493232978e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b803539c-3da7-4a3a-a062-b7e5491018c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa81c419-688d-43b8-adcf-96a86469feda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29ba6ded-f081-44c5-ac12-08eb0be49aaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ecc507-07d9-4c0b-97be-fe3c13f5153e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cef0918a-2689-47d1-a5d6-5e770c536a00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f6da227-3aee-43db-8b66-7778fcbfad72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c0f5b0b-fc62-4639-8b79-0d582195e5d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d994d4fe-f0d4-41cd-a750-ddee1b0a14c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdb225c2-d432-42ad-9347-a672696b2e27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "debba8df-4883-4b1c-99dc-da5c974cbb0e"
            }
          }
        ]
      },
      {
        "id": "8b50b473-b47e-4f17-88a3-4e224e58ba94",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e458b6d2-d8c5-4421-be92-d04df3af5fcd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3bfcf66-5611-470d-8180-6c97ca18d0d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "97cf5032-53cd-42bf-81df-70a7bcc76e0d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe32817-dbff-4c06-8306-730ef9a1b015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fdad65-71f5-4749-a1f7-9742cc5455d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc5dc34-55a5-432b-a0bd-8fd1ee728b2a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8b423d-14cf-4dc9-9e2f-19e5363bb8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a200aa-ca4e-4f40-8167-27f4fa42b2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a18782-d51d-4635-8178-56189f57953f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acf9bb4-e8e7-46af-97e0-9680e4e5c1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bb9638-f07c-4931-87a0-606f15ceea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c3dba2-e1cf-4a77-b09b-6b06b3081a42",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e43d9b6-a694-444b-a766-a6ea0fe5ab2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784c8e4e-aba5-4564-8ece-42bdb62c5018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae73f5f3-dedb-425f-9378-081576874aba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647bc567-7fb5-4a38-a854-e055a8540d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef18277-8d73-46b7-a5d2-a54d6b958919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18fefe3-6eca-40d3-8f98-bb9231cd617d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2450ffe4-3b87-4fea-a3f6-b0648f67a2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ea8a47-6b4f-47b3-b970-6794f4e70361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcedaaa-08bf-44b8-8665-3247ad4b11d9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7bd957-9332-4a88-a8d7-0502f2d65c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70300e4-ef5f-4345-b2e9-6ca31e65ce6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8b4404-0973-451d-8857-531edcf4b2a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9f1df0-90b0-43b5-a500-387012e427c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826f9b25-4334-44d4-80e1-f0f35a76f4cd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c57201-2a30-4b27-9205-f50db31615ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027b75fe-bf87-48c0-a302-fe0989d559ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f0a774-8740-4e96-8a9e-2167bb6cd10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9310ce2-3934-4932-8864-7cae25293343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526e3e75-c684-44c3-ac32-2e5cc22a334c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0203bfc0-6bb8-43ea-9f87-228caac0a634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4573971-1f0e-4635-944c-7fb7b6dd012e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d36222-3af7-4c7b-905d-d6d7f2892897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfc7d19-90a6-4957-9bec-f3045a496502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86996edc-9801-4e5f-90e1-0dbc3309cb4b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee376ce-de91-484d-b093-b2cfc282e6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a9c2cb-2991-49d8-bd5c-4513fbbad9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda0ea83-6d8b-4567-92cd-c9dcd3aaa92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9825f2f-2ff7-4f50-9f50-e4c85f4ae2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be84c223-7fbf-4280-ae30-5234b14ded1f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6889a9f4-1572-4b57-84fe-f1e6023efb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bddd189-ab79-40cc-9865-866efc30ba36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5c75cc-36a8-47e9-9ac1-ae96c0cf73c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e84f00d-5e37-4603-8ec5-8299c83f3803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6be1e6-91b2-476c-8b08-934a64aebc71",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57471ed3-f45a-44d5-9ed4-73c2c0e4dac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba6c0c3-7ba8-4859-a719-256501cd13cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05323fb-9863-4bda-bf4e-259707046785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9902184-971a-4a0b-8a33-2f19fd932344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d3fef3-96b9-4fb3-977c-078c88274d96",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b7ebf5-0cf6-4611-bdab-ed3ff1b3f4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98613e1-522f-4bc9-8fd0-a86f68f09c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec26653a-e19e-405c-91ad-8d537e54d177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b937506d-2833-413d-bb3f-629b8a19d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa62b6d-c4ab-400c-a515-2f6b0e5ec5bf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d9c983-b222-4793-88ab-16177c54ddf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2f1b89c-cf98-45ab-84de-2ff944c2f970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fcd965-2a8f-4e03-ac4d-b36326cbb9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c8ebbb-b39f-4105-9d3b-4729ef23ed22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7275be-85fa-4f24-ad8b-5fe67b894489",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4bf2e6-29ec-4a2a-9aea-df602b84c169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c52dac-5e84-4e20-b96c-a30454173e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57871558-6381-46c8-8e09-18ea6d81eaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c6f92d-47d2-4b3d-abd8-a0753641e880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2628d280-e0a0-4778-b6d7-ed547c9b8541",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56464a58-7958-4fa2-960c-2bafe97e5e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c51a4e-fe2c-427d-a11d-14adb77c5fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc002cd-48bf-4684-97c7-0e569601c391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f33a5c-31e1-4c65-9088-4c1f64ee65aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca3b250-eb03-4a37-80eb-07a2d673a1a4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab1a866-d26f-4b50-8fce-98848504c056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba765be9-dcfa-4dec-bed3-e62a01f8aaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b45f7c-98b8-48bb-937b-c92d72f3ac9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063aaaff-0620-496d-a81c-deca53975ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c063a2b-ced2-4407-938d-aa8f4259923f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303a862b-2c74-4448-9a5f-113fd68e62e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d815744-7ead-417e-af7a-a64ebfe2dcb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cd3547-7511-44c9-bcaa-05a33abbdbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffaccbb9-44a3-4b50-8c0f-0020f9c04aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add8e192-ec09-4b8e-ba1e-76a4c9c55f2e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504dc1a6-a3ec-4ec0-800d-6a7399d60fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b78e277-a474-4cfb-a565-9c3ac7a5bd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a82a85-a387-46be-97d7-b57e95112cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7eef30-c050-4d35-b778-b330c281e180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53918274-fb7b-459a-bfc0-6b57ff827a8c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a79fcef-15d7-43f9-8b22-87eb27b4d9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535a7980-dcb3-485e-9375-961d03532e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9e2e53-7b6e-4025-8579-2570bdaed46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61230213-376d-45aa-b8c7-3be4f67b8c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a895eca6-4ec6-43d5-8bbc-7d2d6e7d90db",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ec9eb2-fa1d-4b4a-abda-77508f3df223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175d5920-87ab-4cae-84d1-332045b04a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7710eb6-f62d-4678-8903-32e5a13a3ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5cd5a5-ccb8-4d01-9387-068a64d7bab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008d8837-be0f-4d6a-8e25-3356681e654e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99357093-27de-40b4-9634-a11a6065f441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146b76d4-07ae-49e6-8dc9-94df9edc73b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3deeb1c-49a4-4877-8099-4e16a95cb4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469fb67b-e51a-40f8-b201-997ba4abb64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79566df-6bb8-4b24-adf9-2f4cfd4e622c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0951ab13-1834-439b-af4e-245d18903073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc10310-cac4-4f91-a917-b3d61446fbe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19509506-3cfa-4aab-9f60-33c6646735b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3d5417-4c38-43ee-9072-2573a39b6210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e468321-4797-46db-a50b-99abd7ab7ce3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5077ad9f-8f8c-46fa-86ae-b2a1cf0784cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c57ba41f-edff-4652-841b-48492d006152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cc10db-3052-46c6-8362-3a13020c492b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81516bc-c507-48ae-a12b-fc5a782c920d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09efe889-af2c-4d8b-9fed-df8d6510de96",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bdca32-b1c0-4878-93d0-317d4b0870b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84bd7098-f987-4cfb-a794-3e11e2467161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779c5a92-959f-4343-9f2d-1ed6480be092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063c1f80-c0e2-4294-8b41-f2b04fe5a88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bd700d-6890-454d-8a10-7570bbc14599",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b7df6-8bd5-4974-bfe1-e3551f8bdbfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0280c82-83bc-4279-be48-a045c857df2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a363b8de-b6d0-4077-9e0f-6396babba6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed62f0f7-351c-4932-acaa-71b3e984f36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e380b3-b684-4540-a8d5-74387a0cbc45",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02bb15b-a588-46bd-96de-fb247ac0f256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22767d3-68aa-4af3-923f-8ade285d4b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a48d42-dbfd-4287-ad9f-b9ac06bb14d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e909f5-182a-4eb9-a954-5b80aa8f44b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc4d909-2b5b-45f4-9e68-f63307405d43",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee1c575-6e1c-4ec6-bf03-eb0543131cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2106c-4c1e-47a8-9c00-4580942c846c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb83eb2c-1f10-40be-a373-c5356ea1d07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb8549e-9ccf-437e-97dc-92b6373be5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ae3a10-88fe-47d3-949a-ecffab6a7efc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8122ade2-333a-41ce-8662-39a1afbebd0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cecb082-b4dc-410f-9534-adb177031ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8da1c7-55cd-49bf-8a90-3e102fd60afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59e42e6-d227-40cc-9595-db0baab9965c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0508d0-4672-4fec-b8b9-4988687990eb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f059176-a55b-4154-911f-159b564f3d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9702b8ac-43af-41fb-bd3b-21025eb842ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd37e03-2255-41ff-8d52-fa0a712356e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9514171f-c3e9-4205-a6d3-1c14fed1cbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710590f8-c747-4418-b920-6df8a2964dfe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c757f2d-4eba-4996-b6a4-155a27b1affe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71e95dd2-825c-4ac0-bf31-8a66bead66f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74efb03-b174-4816-8943-3f5d6224f929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64bfbf6f-87a8-4550-a8d0-ede2e57ce784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69695627-26cf-47a1-bd85-2d30124da578",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ad8ffc-4247-4efb-b3a5-0760e831566a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b9996f-24b2-4eab-8dfe-9a4e0931a99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4d6d55-f7b3-4eea-9f25-48745ef45d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6278f1c3-729b-42ad-83bf-604703ab175d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098c59b1-2122-4871-be9b-530a894726b6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55aa000-47d2-405d-97dc-dbd4fe54c63e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55dcd87d-a2a8-445b-9832-4ba8c2b9892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688e9b2a-fe7b-4278-a9f7-20f732044048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3854a0-de6d-43ce-9a12-f543166df1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649022d5-be52-4323-b50f-87fcf78eaa85",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f43e51-d6b5-481a-85ff-b8e718e5edf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6162f8a1-c3d4-4d9c-be1e-c546ff26bd59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2e1a85-c01b-45e5-8ddb-b09f239070cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356dba9e-1eb9-4503-8d64-b280a22e6455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95370541-67de-471a-a8a0-cf2a502ce408",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3201111-44c6-4c1b-9330-4c4f0b110ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4971587-694f-4d21-9010-230224985db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96357234-5fdf-49e8-a731-f4b3faa4986c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a1b35e-1092-4e57-b5f9-6197f9512164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5579ef-918f-4cb9-8acf-848c8bb70830",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35eaa69b-6046-416d-9f67-cded45a45c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222a5f5c-99a6-480f-a741-591c8674637d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f0203c-f89b-4098-b925-a2bd4c7abed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96302076-8102-4c50-8f42-a77dd23922fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a5220d-148c-4c72-aefc-fd1f5455007c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df29792-58ff-4e04-95d7-7fd8c08b31d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfa87c4-3c6e-4e03-a389-7cee013cbd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc41d85-91fc-4098-b8cf-ced50776c48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fa510f-b6ac-43b1-8cf2-9156ed780a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcfd3c7-df30-4746-bd44-bf919f6768d7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120ea644-0a08-45a3-b60f-ba899bd5123c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73c90a1-f531-47b4-a4b5-87da064a689d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5ecb94-4ea8-4f9c-bd40-7b68ed983a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da6663d-e847-49a6-81b5-2f1eca90a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17947530-15cd-4caf-ad8f-a777afb314c0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5acbfa5-e524-4f5c-a3b7-24f47b69973e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b9f22-5214-476e-80a3-5e68ee84207a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81275cd4-8c53-4d25-9456-b70708c1ef35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd8bd6a-bd57-48fe-b7c9-d659025e308a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8376bca9-4c78-46a9-bb12-02256018b4f1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b65cb0-a16f-4626-8dfe-34b40a44996a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003c285e-0baa-4866-a22d-1ab53dca9670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a98be9f-eacf-4038-9232-ecaaf80aa34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaab176b-3049-4748-b238-a7a960060dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eeb7b5-4411-491a-8951-6d08a415ce37",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d007b4d4-70e5-468e-9560-45aa70d9c0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab18025-f2e2-4815-a9bf-cbdc39b03522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d81e6d-2a09-4bf9-86ed-e264c8bc2077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc78348e-43f5-4b66-89f5-3c935035a5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479fda8f-f66c-4379-815e-c2bd2c8cc285",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68c584c-a316-4411-bf92-1155e563313b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb2f8c8-3ad9-4111-8e76-137ae826e7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82684956-0ffa-44e4-baf1-fecc8c36e7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ac1e01-914c-4e98-a8b2-f6c3d83d1d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4b8e6b-a3ac-4ee7-95cd-eaaba6fe1789",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2bc8cd-abc0-4d92-b815-cec0d0e665b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f073b8-d969-4380-a3cf-91a2d75d171f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f84c6f-91ba-4d15-b0b8-1dca800ee379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f08953-a755-4182-96c2-0ff2e4ec1a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30f6373-c0f8-436e-bc2e-70c343541bbd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b427615f-40c0-4d76-b895-56762cef477f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f7507c-f25f-4d35-8e30-71d69de53f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e196fa-df2c-4e1f-b7f8-e8e9d7e3336a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50a32d1-3455-4841-8071-78c85b33aa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3a36a0-c7c5-4483-a97e-89087502fb95",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbcbf15-715d-45c2-8dc5-88524bc189a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692c84c3-f940-4e6b-b568-b7894c0ebcbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c6dd10-3f3d-467a-b87c-d7dc0d571439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2decc4a3-3115-461e-8623-d0c9ab0310f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce768763-93c6-4f54-9138-49858beaf0f9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90e4d07-788f-4382-8b3f-3928e99df89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1920adb-242d-4ea1-9690-aaac6a853cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16be369-c72b-4d67-9266-637f9e91e8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad9c815-dfdf-495d-b192-63e4b532cf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5df020-add7-4081-a167-88a75e1671e6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7331d54-67e9-4684-b205-6322e7083bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd1d3af-fcdc-4680-bed9-25a3f35e6df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56a481d-f8ae-4414-aaae-d1575f17b94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a98b0b-fbfa-4190-919f-deeff936c1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374495af-f480-408f-bb5b-c0c5b428794f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6066c980-c2b6-42fd-b70f-4c0f4022eb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77ad83f-c702-4863-adec-d1fa1e6211af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e685fe94-92f1-49c4-8c8a-bc0deea9d057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395b95c1-b3c5-428d-b199-64e029ac8f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4499b3-42be-4b6c-a970-0da99a1f4b15",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624a651a-5be7-4167-96a3-37561c4d330b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e22eb2e-a2c8-4520-ab28-3e3dc8287eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc82892-c0ee-44a0-89c6-8afd6d433ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9325b2c0-e227-4e47-bdbb-229b71f287a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74af6a80-0d48-4bec-a158-b42d8e382431",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda79ef8-1323-4f42-8255-d448ae28b490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43855807-79e4-4ce5-b324-66b3c37fbc8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c87c8d-4be2-4939-a3dd-29d6f9a8634e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaadadde-31f4-41be-ac4b-57200abf466d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7660c936-91a3-4f83-a961-4f3fcd1bd17f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b169a080-6be9-41e6-8cd5-2ed3f16586cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99db5a8-a0bd-4a20-be1d-04dc73bee26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3df2a4-b9bf-474a-9941-9c3d59e55fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4210bf1d-5ade-413c-ad73-adce99ad16d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bee04ec-5c74-4bc2-a9e1-d87c4ec3125b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ffcabe-6491-4d8a-9fc1-dd11415017e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c2febc-16cb-416c-b252-c5363ab3ee76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2415ad-322f-428f-9cc5-245aba511e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de84a84b-b881-4d3a-8233-14a71377ad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c029a02f-a379-469f-aef5-1bc872ba33ec",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2ae613-bbbe-4e55-937e-e73d4004bac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457638a0-aa38-456d-94cc-65e0eb6ed619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65806a91-d553-4d58-a2b9-5d0315516df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cf0abc-3a22-47d3-b66b-6ef14378cd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db51c921-c069-4636-9462-b9b6bf6ae981",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd90a15-38c4-4186-a6bc-1b9d93933dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff2b5aa-9623-4007-97fe-c66f772fce25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702ffadd-79cb-4f19-8107-afd4508f3f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5e8ffb-c843-4f48-b8aa-94f44db9ae84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6756ea3-aac3-4cb7-a4f2-7a5f00039496",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91929c6c-13cc-4343-b1e1-522378cdb15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba4265d-8008-4301-91e1-ea31846d9956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a6785f-029b-4dd5-8a36-22a0a6e51f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d91a43-aaf0-423d-a8fe-6348f1732beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde79ab2-d47d-4131-b74d-505c741493db",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f98b8c-3001-4dd9-8ef6-4ffa262ada70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add4e980-eb30-4cdd-a1b3-5e2e13b8125e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd31265-f6b0-47b9-96ce-64fb1e871ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311b35ae-d002-40a1-a7f2-3deecffc430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52156588-1831-4e32-8b28-f788b86f10e1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57caf404-9667-4be4-91ef-22734acdb016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f43f4a5-386f-45d4-ad6b-25c943e1ae9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b51b17-9428-40c1-96db-c5a5c895fc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c380b63-c9ea-4f10-b431-db84b0a3f8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc5d7b0-e9bb-4e77-8ebe-972b7d66a461",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4df53c-80c3-458a-af03-001f7f5a62cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c0f497-6df4-4305-9d7b-49bb6882966d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f178dbd-5771-49d9-84e7-6ba862ce5149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4df5487-085c-4122-bf36-a0f36de62320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a36fc8f-08e1-4a72-bdb5-1598e3948bee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c6f671-457e-4ceb-b2e3-263918fb561a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2fd2b32-910b-4094-b80c-9ede6380a4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4880f0b3-8d18-4878-bd41-16a86e84ccee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0aecbc-df3d-4960-87aa-94900b85103a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400e5d73-d9af-49d3-bc39-282f706c625e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcd1f8e-82c7-4fd1-93c9-dbe3ff64c0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2f8097-58fa-4592-ae4d-a4f24c2e9471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ec75fb-b318-4148-bbe3-1cb9f02aa730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb31116c-5140-4211-bd29-8fb66a1c8abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aed9d99-979c-459f-af21-b89bc080aa58",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f14e93e-3506-4b1f-83a3-ee9ff9bf34f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aef8d4-6bd3-45d6-9f4d-f226595338b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a020f6-cac9-477e-8e2e-699e005295b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bafacac-501b-42d9-9cfa-6441a933dbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77eb76f4-42cd-48bc-981b-d88817eb7e41",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927bd84f-2c4b-4009-b24c-639d1c894c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d624a06d-4a4e-4c9c-b6e7-445316028bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c52232-2c3a-4709-8d0c-9446b008aeec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61c8000-9ce2-4f04-8d19-4bc978348a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f33ee39-3e45-4c11-865e-f8b6dc2f021f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec10fbc-4f16-44da-8ea9-32e34e491497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cb83cc-e2e5-41a9-94ee-9441c2e8e1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac0b14f-04dd-4502-9856-b203c53b648d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f84964-99c0-41b3-8cc4-7ae13bc58c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4ad42e-300f-451e-8ec4-d46adcf4f084",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b9dd50-c6c1-4d38-9e88-517fdf91e156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a046ba75-aeaf-4e15-b861-de56544e0b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa80619-1768-4716-bb70-fb11d54a3373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57370f4e-99fe-4d4f-8c7e-0d174c742c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bea8aba-c32a-4011-bedb-9b1d3137ed87",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c1156c-b8d5-4517-99f9-a0cf165330af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcac28bc-75a7-4677-8e99-2998302fa9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7a5305-e558-40db-a89f-2f08edd1652b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fc8a85-ebfe-40a9-a052-9fae62c79698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa85ed5-e7fb-441e-812d-3f41ae66bf0f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa28b14-7b92-4762-aa28-313bf897e5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79354ad-b879-4e09-b98d-7fa721be7589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebf9eeb-8de5-44cc-8b8c-b51ed85f26cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d27d818-d893-452d-969e-1ca02feb551f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20f4de1-ca7a-4f6d-a289-0039970a390b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deca3340-78ae-46dd-9745-11391a2b56ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b1490eb-1379-466b-b0a8-7430cf0f9602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c59f95-ed6a-40a0-9144-b21fd131b5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b2e86c-9e5a-4383-8b06-957b33cdd915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6d2926-3b3c-4441-93d5-2d485f64b608",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8e7bb1-00ae-4d77-92e1-523ac562e242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0830bd7b-83ab-4fb6-b822-a9a0cbde1998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af509b40-9657-4dd0-8a9c-0a06996791ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9273136-2a72-4c38-9a05-5028ec679b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b10b541-693f-4354-b1f1-324807522bcc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935d368d-299f-48c5-a3c5-4ccb2c537e9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6b37ab3-a741-42b6-9bb0-553e47d3ec9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c059891-cec0-42cd-ba1c-d1a426b67a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7d85f7-265a-4be6-b109-96ce68cdd20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e81189-fca2-4a2b-924d-0529a22b9a30",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8718aaba-dece-4b59-a095-0cfceebc0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377bbd7e-fd31-4ff4-ad4b-6d7de10cea20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ba13b9-6e6a-4d39-a84b-516f14682eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3361c861-e244-404d-8742-e2d5bb962565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b903dae-6ee3-421c-8946-a75366570b76",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21a3f03-4aaa-441e-a2d0-efa052d751aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00b115ef-2e19-42bf-8ed5-3d39047b3758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b6259d-5046-489e-b228-04789f8f54b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5087d8b1-0bb5-4de4-8cb8-e6e7ea63d8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3201f1c1-2b95-437b-9dd5-cbe3675921e0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc54c8e-4bda-4e52-a8e3-d0b06c1455bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43228773-04ee-4d51-ac57-ed882a7db397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5dbae3-2071-4d29-a49c-d04393c23a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a1c76f-c75b-420f-8f8a-1865078c9bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea707755-3cf2-44be-90b8-a307aebdd8a7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bc9cf5-0244-445f-b036-2b558dda246f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8209cc-50f0-4434-bcc1-0cc8e9881eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11e8952-c176-4894-8eda-02edc959cfae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad50137b-9740-4f83-8f66-e4c8e581c483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020c6eb9-77da-425f-bf2b-f58d6041f681",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9bc704-25a2-4e45-93bc-50c73b876da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0826a91a-cd94-42ee-927c-28f4855194f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329a7442-24c7-4f32-82d7-d43e7bbddff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2860e325-6f12-4e38-b9fe-f866adeb2900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c139944-3b81-4796-996b-41e9272697d5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191cadff-ba40-4625-99ea-6567dbb03de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1373ef-6f13-4a82-9e44-a8f8cd30afab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eba306-dc5b-4149-87a7-d86df4cb2ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5599169f-cc77-4aa7-9fca-c01832b78e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de27f066-0b49-4bea-b0cd-e3ea4da79d7a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067016bb-4b14-4afb-bda1-50e039e98754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5280f3b3-5548-4cbb-9299-a9033c30b714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f2da29-9024-4049-8bf9-f27a31604ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5260fd8a-3be7-4474-ad40-4224003c2f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33077811-60a8-4346-8d4f-8eab6721642b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10e6893-242e-4e78-a795-82051556b448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c61f0d-33db-46bd-9f21-885ef3ab3620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d43fecf-aac0-4b37-bb01-e3036dff8588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e0c2dc-48ce-4189-8ddc-a201bbf88ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce2514b-2452-407c-bf8e-05e4bec3e954",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12beb565-c9bc-4b17-b180-0b95cfc99e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47ce7fd-5adc-4e35-a3ea-50a6720bf4ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce89bbf-4024-4a08-ac51-08ee26488434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50f6a4a-4ce1-4f1e-82dd-cc9e7c7f16b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b6c56f-27b8-4001-a738-831d7bbda2fa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc21374-3f5a-427b-b45f-416b1c4e5d7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a146d2f0-96c2-44bc-8248-c08df911f8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd66b3e-fef0-4f8a-aa33-ba27d74a20fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad571696-d6db-4b20-8ae6-3dfb0ad118d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec00d60-80f1-47aa-b615-3460fe60ac8b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4099c89f-16b3-4cc5-8737-a86e4d7c2bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45851d63-ad81-41d9-8946-f5672ccd5c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c254669-a973-461d-99f8-f3bcce05b98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9c24b9-b188-43ec-8643-5c72a016512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da659b8-2c17-486f-9df0-490ae5a59458",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cac6fdc-ea0e-4abd-bf41-db4d2e9cc45c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c861fe70-4089-4c18-9106-292f2190d93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c74633-8aa3-4c99-b761-c6bc7d3055f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4391b738-f58c-42a2-bdaf-aeef6853d34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c629044b-c926-4180-9f02-eec759b7ed58",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795b7f64-bf22-4ec1-b2b1-c5736aae7043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55880766-70e4-4a0e-a34d-71e6e1ced501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a6f0ba-9797-4498-b980-418fd7672170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59760184-9246-434c-a7c8-4dd4d6078649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893ea9d0-c6a0-4dc6-9853-869027f3e20a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a782cde-9bd3-442a-83a4-1a74f5e3d197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83476596-d3c6-4d88-a5fc-b4c42dabd2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36836e0f-9312-490e-b915-3fb838d17a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f1e255-d4cf-47bf-abd7-03182b3f06e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91336454-29f6-43e4-9d13-2df571a4a736",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8170c71f-da10-4fc3-ad12-8bf183ef0a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ed215d7-2649-44f4-aec4-ed1060fa8e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de8dc1d-900a-4084-b98c-316c4bf1e291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9799ebad-7409-4d83-b6ee-67edbd7ad55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac0faeb-326e-4e3e-be20-67a1d1a309e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be11a84-284d-44c6-81ad-ac9bd54d9976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c6fc7c-9fe0-4457-aecb-e53a6651d615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c883d5ea-15a3-41ae-a832-2faf569ab475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc922d98-557f-47ad-91aa-842d6a04c5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fbbc8d-6251-414f-9399-60d970bae6de",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ced17e0-c61f-42bc-9596-4ef3cdf96751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ab4669-38e1-4be9-bfa1-202a026e0cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5359d16c-0829-42c9-bcc0-f0c61e5d9c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709175e5-f3ca-4f82-a0ec-73c16141dfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2f5a00-d663-4806-8f87-7084484cb6ac",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f1227d-1ee8-4c92-a81a-0c9c4c2ffe13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb785a7-5ed4-4eab-bb00-5e91820f7893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5200f2d3-87c3-41dc-84fe-5944f822bd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29f953d-9790-4512-85df-17d47432c64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ebf2f6-8b45-4ed8-945e-a7d0e3027dc9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d343c49-95d9-4da8-b5d1-42e4811a6d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66716724-a19e-4c1a-b595-7e1ae807dd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85955ee4-93b3-433c-a4ab-cf274d24b11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4888853e-e31d-4d20-8397-f206d87326bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9aafef-3f4d-494f-9aab-bdafb7c0b278",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9835ab35-c2c8-4f0e-ab6c-b47d84ac3ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b01cd55-c8f6-4eb7-88c4-277303f5a4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65826aea-ccdb-42d8-a0f4-9ec7ced86511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5793cfa0-4fee-4496-89cf-323bc2e26782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cc4e31-a8ec-4d34-8b0b-268ccebfb578",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bca305-b2d3-45b2-bc2f-f60200fd6b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f32de0-f57c-4784-9d1a-d34712d91d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abe818e-378b-44b9-adb5-7deac5407eff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9319ad-f932-4203-b06f-957742e56519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84834c8-5144-4a91-9f2d-53e606043b61",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f79424-88a8-4dbd-8593-d1fd2a972246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679e23f3-58f1-4bcf-8eb4-d12f216176a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be58fbec-0b5a-406e-9ce2-e8ad45f0131b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c610e0-b9f1-4764-814b-ad1cdddf21ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94d010b-a9ee-470c-8e00-992550c63365",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3121c3-dab6-4c5c-aece-a1284252e0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db211b4f-dc2e-4b8d-b800-b73389c26abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6147972c-a112-4e74-895a-119db1564f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9682fbb5-9a50-46d9-b36e-7a1f9c79aa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc782b97-4e5c-4414-a2dc-5ff6ec782470",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4b50cd-8ca3-41d9-8dc8-8938d0b988b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e6f4cb-8cbf-4fbb-a6dc-3a414158c56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a26fffc-fd7b-41a5-a0bc-b61fc8ac63ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b81beac-f288-4889-8d28-4fdcdef21d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cde5643-5148-4d15-aa17-9a6333bf96f6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30df61bf-b32e-453b-a62a-a5ecb595b4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff04138-6ce2-484a-92cb-c25cd3fa1459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb01d42-89ca-49e7-b06d-8d8ca5b8ab80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7ef324-6aa2-4f73-9e01-1c94013cf4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d042adb-706e-4dd8-bcd9-4895fe4f46a5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c718909a-3f1f-4c45-bb9c-e265a0a42b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f118a301-77fc-41f2-9823-ead3e882eb66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548b0676-e87e-494b-9eb9-ffbd6a1ef990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530d94ff-e2e2-4af5-a9a5-a29a1d80c364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b69a67-2f69-4050-b6a6-13c4b332664c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82094a6f-2624-4293-a80d-a42412b99840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3037e950-e60a-435f-a9fd-a5cb4fc67e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85a0cf8-b158-42a0-acf1-5871df07c849",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df12e1bc-1bb6-4042-ab42-1b48d042dd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6affed-4f4d-4b2c-9701-9b120ac96b76",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f1bdd1-1fce-4ac3-a5bb-787bd489a512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6a3ae6d-d436-44c6-877d-0df791ac6fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceae19c3-3a63-48fa-aa68-4013952181a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a208da09-6fbe-48b1-8df0-644c3bb533f4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b872c2d2-ceb5-4f54-aaa5-d801e73d43ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd478abd-fbec-416a-b879-957ef7180677"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c3f9407-9944-423c-a9d4-ed6c071567a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5abb8d5-b73d-46a9-9004-b7f3b1585ca8"
                    }
                  }
                ]
              },
              {
                "id": "08abc9c7-5405-49f0-a0cf-0093fd31c61c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f04f28bc-0d8c-4c6d-8d7f-26643fb12cee",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6d514a-4ad3-4ca3-b191-61a7bbcedf1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ed7c38f1-45ec-4acd-95e2-e15153bc51da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06382914-b9e5-49d7-a58c-75ae824365b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac7c2a7f-b0ba-4ede-98ba-1bd5be2e0a3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38830d3b-20d9-402a-9b3c-4232db310113",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15f2b834-4001-4230-abf5-efdc5c045305"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7acbe5b1-130f-47d3-855d-49235e96c68e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9276deba-f6e2-44dd-a461-3b7d91aa0fa1"
                    }
                  }
                ]
              },
              {
                "id": "fee48739-24c9-4659-8f5d-0d70859e5c23",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "49d26ab6-9066-4aef-a0da-8dd3df33ee9a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca364ba-c6b1-4499-86e0-e9c19876495b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8bc2dd3-936f-4c8c-8d56-66fb8ee00e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30866a6-4ed2-4d7a-b078-43b8ed795492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f2a083-2c26-431f-b4ac-4270659c0a9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "55b10e51-1856-4290-8194-41e02c4bdcdb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a8611aa-6ae4-4107-9a06-b23a9a3fc1e1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "347fc06a-db27-4c5d-a933-9eb08c99f448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "197bcd54-fd8c-48f3-b2c4-9dde5e4ab27f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aa44eae-63fd-4e1a-9f34-36c6aeecefca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0df33e68-bd55-470e-96bb-3bbc9057b938"
                    }
                  }
                ]
              },
              {
                "id": "81f17517-d740-45f5-8ea8-6c4bb0f6cb1a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeb99d5b-6257-46de-8395-d00febde94f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "18d2d55f-fc9a-495f-9f0f-e222278397f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbfd5fdf-88e0-440b-83b9-fb53f2dda653",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d00d5a2-66e6-4b64-baf1-29de831eaad7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7ba6404-cf01-4d8e-ac05-d23b703bcace",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "24449117-7d3a-4013-8c17-208672e137c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d43558e6-8ea5-430e-b7ee-337df70dab09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "faac13c5-535b-414f-95bc-baedce3a5c84"
            }
          }
        ]
      },
      {
        "id": "7063a666-6d0a-48ca-9816-858b5510aac4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b3d49306-242a-41c7-a7d9-59cf1b242cc7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b16500f-1a89-4ed1-a2fc-609b72bf6e00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "186c0026-4dd2-4839-ad31-031edd59b6bf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f96b93-8807-4d1f-941b-6abda33d3fb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94046ef1-8981-4554-98bc-be91857f40d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37079a92-35d1-48c9-9bd9-953d2a385157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f24ae701-5274-429c-a45f-76df84e5e39a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "644448f3-c337-4f01-bdc3-6bd067ee96e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "652bc425-8521-4d52-ab8f-caaea4591f6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b8e3120-f33a-49ae-b928-3ca0e7ce1284",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab1861ac-1c90-4147-8b36-459b0c6ad955"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5eb13e12-100b-42f5-92c4-4e08ae953dca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ed4abe3b-1861-423f-bdb2-ce94a7f0c2c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9f2471a-e1b9-45b7-9a5c-ae54e15a92b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d4743bb-8cff-434b-afa2-9119a7f8f8fc"
            }
          }
        ]
      },
      {
        "id": "a9f0f683-cde3-42e6-9dab-3aa357fee7b3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8f733a87-7000-405a-8fcb-d8b0e4d75357",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9decf926-2e8c-4c0c-aadb-d6b28a5628ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1165e8b1-db46-45aa-b810-7d69c6fa8784",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7965b4-a16b-4ae2-87c8-6fb96ffdc326",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2701168b-6da7-4718-a953-bd9edf2576c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2b7b8a-4fb8-4111-b3dd-719d402f224f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52622b0b-1ee5-46cf-bb78-81ee6e7db9de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b452bc14-d7aa-4856-b51f-cd4b54c73743",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27547d64-a44c-4edc-aaea-7897b1d6df4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4537434c-e5b4-4d41-87f4-71194f91ccd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190be9c6-7b55-41da-bcdb-f47be30e3fa9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "817f439d-e5f6-4326-b4d8-85615b9a3d4f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ee5ec89-4f4e-4d0c-8899-5749aa891702"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6c152c6-58d2-4c91-b171-8ea622b5522f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecaaf8ba-8835-4375-858b-abb26bc3a1c9"
            }
          }
        ]
      },
      {
        "id": "414c5c2c-e577-4b44-bdad-a7511f98274c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bd05833d-aaab-4720-b71f-4d5d447bac12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "912bf6f6-2e3c-4c3b-8b54-80fe89e8ad5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "525eab58-44a6-42d4-9d99-5930e62428ed",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa60d84f-2dcb-4d22-971e-17c6e07f303c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe2eba2a-36d9-43d9-a0f4-6ea1ac08a57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf75485f-7eec-4fa3-bc8a-c9b4cfb57bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdcadb9a-cc0d-4b4d-a2b9-6e16aac2ff4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7f032dc-b546-4078-b761-bc4f1a08ae26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "725fc368-1c94-4e57-829c-97ee1d47f28f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddf93f91-5fd0-4caa-8c93-c3fdc66dca8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f83fae5c-2a66-4ef8-913a-4abecf626c01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a2091c3-bb6b-4e6b-91ba-4dd55ad86734",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d344297c-5a55-4921-8330-727a806be9cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af004657-f93d-46dd-b335-fe7601570b40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2c46566-5afe-42b1-bd6e-24b8e2e6f826"
            }
          }
        ]
      },
      {
        "id": "0c78bfbf-d440-42bf-b370-609cb0f54733",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a673dd3-49c9-4e3b-9bc2-759bef050c53",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c0e33cb-ee9d-48cb-9764-b73b2bc501ab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47a39e79-48ac-48f6-9180-b62fd050a54f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68fab1be-8933-4967-bfbe-b9cd251c490c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1e8113c-64b5-4745-bfbf-2f930a18e508",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.19298245614033,
      "responseMin": 9,
      "responseMax": 580,
      "responseSd": 71.23039923596863,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700094946252,
      "completed": 1700094974326
    },
    "executions": [
      {
        "id": "ec13b62f-dc93-426d-899b-775c2d8d79cf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "de97dc6c-9594-4b4d-b3f3-fe1ca9f136e6",
          "httpRequestId": "0d02356d-f96e-494e-b883-3400e8db3952"
        },
        "item": {
          "id": "ec13b62f-dc93-426d-899b-775c2d8d79cf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "64419f77-52f6-4c8f-9474-0697ba47b1ed",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "b8cc5e5c-d239-4198-875a-4ae548f91b5b",
        "cursor": {
          "ref": "103e788f-7cc9-456b-a4c2-9acdd4ff181a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e68519b4-e450-4d2b-aa86-3c73c614e1e9"
        },
        "item": {
          "id": "b8cc5e5c-d239-4198-875a-4ae548f91b5b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "78d334b1-256f-413a-82d1-a2dbd41d1488",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "73a42f62-5268-45e1-9917-a3927e8641e5",
        "cursor": {
          "ref": "434b53b1-54c0-476c-bd7b-55aadbc3e79f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b36e8f8c-f664-4bef-b916-49c99ffa4a4f"
        },
        "item": {
          "id": "73a42f62-5268-45e1-9917-a3927e8641e5",
          "name": "did_json"
        },
        "response": {
          "id": "434d4d3e-c10a-48fb-97b2-253047ee5d4f",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bf1508-4ade-42ef-976b-9c5d0d19e7e7",
        "cursor": {
          "ref": "19947313-439c-4c2c-b0be-2bca280382f7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aabd5624-c5d6-4207-82c0-7c1ce09dfa1c"
        },
        "item": {
          "id": "e4bf1508-4ade-42ef-976b-9c5d0d19e7e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "4fce1425-2dc4-4fc8-9910-39bc28d4f3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bf1508-4ade-42ef-976b-9c5d0d19e7e7",
        "cursor": {
          "ref": "19947313-439c-4c2c-b0be-2bca280382f7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aabd5624-c5d6-4207-82c0-7c1ce09dfa1c"
        },
        "item": {
          "id": "e4bf1508-4ade-42ef-976b-9c5d0d19e7e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "4fce1425-2dc4-4fc8-9910-39bc28d4f3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436968e8-d3bc-4e16-94ff-fc2056fd43a5",
        "cursor": {
          "ref": "fdf16fa4-e2df-40d3-ad90-dc84b21d855e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "21c81f34-2846-4081-85b9-0080ca8be763"
        },
        "item": {
          "id": "436968e8-d3bc-4e16-94ff-fc2056fd43a5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b099df02-a57b-4920-961f-0a0f2e18211d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8e111d-4422-4c11-a895-caf3d6b106bc",
        "cursor": {
          "ref": "cf9ba48c-6c62-49c0-bbd3-6de029a29f7c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "06b769fb-7818-482c-9d9d-166e03202d77"
        },
        "item": {
          "id": "3c8e111d-4422-4c11-a895-caf3d6b106bc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2312a70b-319f-4827-ae3f-9aea6c4507e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe1d353-e72b-4efa-9a35-b007e6d36757",
        "cursor": {
          "ref": "739771be-3769-427c-9bde-9591bdebaac4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5c0591a7-9de7-4856-9e89-9b51e188d092"
        },
        "item": {
          "id": "2fe1d353-e72b-4efa-9a35-b007e6d36757",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9d33b174-ecc2-4364-a5a1-341fb9f34ee3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1321717c-9b64-4347-b29c-4812bc36a20c",
        "cursor": {
          "ref": "887155fb-4050-422b-af12-290d162129fe",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3c85597a-02a3-46a6-a329-46b57ea6e422"
        },
        "item": {
          "id": "1321717c-9b64-4347-b29c-4812bc36a20c",
          "name": "identifiers"
        },
        "response": {
          "id": "b63bcd8f-7926-44b0-8587-b1cca2cb43b5",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537f240f-4161-46e6-be57-7ef3e56a7eeb",
        "cursor": {
          "ref": "ebcb7e20-a306-4e9d-b81d-fa59a77041c6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "207bed52-3af5-43c4-a866-3d3a3b9aa712"
        },
        "item": {
          "id": "537f240f-4161-46e6-be57-7ef3e56a7eeb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "72606942-302a-431b-a006-8f4fbf1e7bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961c6a35-8b7e-49c6-9470-ac39e4e2793d",
        "cursor": {
          "ref": "f78ff429-48df-442b-8f72-57363747dfe3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cc7474ff-9817-40c6-8ac8-1fc3a6fedbe2"
        },
        "item": {
          "id": "961c6a35-8b7e-49c6-9470-ac39e4e2793d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "64e33ee4-8cf0-4fbb-bf57-a4adab10ba56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d02890f-e1af-4571-bc7f-b34d3ee5f969",
        "cursor": {
          "ref": "aeb29488-a5ba-4706-9ef9-4692803f2e99",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "72d0c6df-af29-43f9-a04e-a0fcb16a0a6d"
        },
        "item": {
          "id": "5d02890f-e1af-4571-bc7f-b34d3ee5f969",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "acd84086-64bc-45c8-be6a-2a9ec487bbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bad7826-2dd7-4216-8575-202dd79e3fa7",
        "cursor": {
          "ref": "747e1c38-c989-4646-92af-c53fb370a4b1",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3a3847a4-9df5-4bca-9962-067f1431a94f"
        },
        "item": {
          "id": "5bad7826-2dd7-4216-8575-202dd79e3fa7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1deca786-370b-438e-a467-88ca12268de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4290b95-f4b5-49f5-99a1-30f775878238",
        "cursor": {
          "ref": "d995b412-a8c1-4d46-a153-4cb0130b6382",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e46fcc9f-2b91-4cab-af6f-9387259b9f1f"
        },
        "item": {
          "id": "a4290b95-f4b5-49f5-99a1-30f775878238",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "70f122b9-5140-4a20-a049-6ff352456758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c55854-3fce-405e-8875-aed1b7e2ac12",
        "cursor": {
          "ref": "89c6daa3-8a7f-43dc-ba85-df261aad10d7",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5d364a96-561f-42f7-a1bb-6e94d40866cf"
        },
        "item": {
          "id": "d1c55854-3fce-405e-8875-aed1b7e2ac12",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f25dfafc-bd9f-4e1a-9987-12578c29888f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f73a18-24b5-4daa-b201-2c3d3942f46d",
        "cursor": {
          "ref": "196a3fbb-edda-44c3-9211-274295612ecf",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4d8e216-249f-4298-8327-771b750b515b"
        },
        "item": {
          "id": "50f73a18-24b5-4daa-b201-2c3d3942f46d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7ebbc495-99cb-40c7-aab9-e5827ea28e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a63adb3-d74f-44df-af68-8fae2d340f7e",
        "cursor": {
          "ref": "ff0a862b-479b-4d8d-b760-26cff690aedd",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b2dca2e9-085f-4a79-97c2-9b13c42bf5d4"
        },
        "item": {
          "id": "4a63adb3-d74f-44df-af68-8fae2d340f7e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9c40c7a2-81ee-4bba-90dd-270af5e28105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2b6c8-6641-441e-8432-8261aad5bb3a",
        "cursor": {
          "ref": "e7bab345-da39-46a2-8b40-d7e29949db3f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7c8e0e84-66a5-43a5-920f-593ee573b8f7"
        },
        "item": {
          "id": "04a2b6c8-6641-441e-8432-8261aad5bb3a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bdb8f3f1-ae8f-4ba9-b3ec-9d54fc3347fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4847cb0e-7037-4535-81f4-92e0a7924a13",
        "cursor": {
          "ref": "3a78292c-a091-40b9-b9ea-6c6da074ac31",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a18a241b-86d6-4eb5-ba54-a8cf75782cec"
        },
        "item": {
          "id": "4847cb0e-7037-4535-81f4-92e0a7924a13",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1a1704e4-7792-4b94-9bc0-1491360d84c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acf036f-e528-449a-bdc2-86156dd89c7e",
        "cursor": {
          "ref": "0c0be384-7a9f-4790-93ee-7ccfabacfedd",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d4a422a6-6753-4d99-ab54-6e60e1c7c298"
        },
        "item": {
          "id": "4acf036f-e528-449a-bdc2-86156dd89c7e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d84c7602-a0db-499d-9613-2d4b8fbe195b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bdc662-582f-481b-bc33-7e7bca791d1a",
        "cursor": {
          "ref": "703b8bcb-95f7-44c2-ac5d-05b7568947d6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "12382fb6-137a-44dd-a5bf-436ac5e293d0"
        },
        "item": {
          "id": "38bdc662-582f-481b-bc33-7e7bca791d1a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2f8ff438-b59a-440e-bb7b-137921752653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a21d23-57d1-4a99-8ddd-9aef228361c9",
        "cursor": {
          "ref": "7a496065-dcbe-4ab0-8342-62c2299ba221",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "91f05dbb-1d65-4ae2-9b70-ade17454bafb"
        },
        "item": {
          "id": "f9a21d23-57d1-4a99-8ddd-9aef228361c9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "21b0901f-7312-4945-98db-2ab13675e557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb506a4-7590-4e49-9907-003d2c7f01d2",
        "cursor": {
          "ref": "24bedeab-1520-46a5-8fc8-4b5c5bf30d04",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "48eb8705-eaf1-49de-882f-b6eb7a7604bb"
        },
        "item": {
          "id": "cfb506a4-7590-4e49-9907-003d2c7f01d2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "04340cf4-541f-4b67-94ae-e99c5a9500d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afefa64-c448-4ba0-9661-e49d2287e49f",
        "cursor": {
          "ref": "a78ad7cf-4c24-416b-b4c6-b01020a80b4e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b74a985a-0db9-476e-91b9-edf66fab3006"
        },
        "item": {
          "id": "1afefa64-c448-4ba0-9661-e49d2287e49f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c3328fb5-383e-4088-9eb3-158cb07e6ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e52b8a-e13a-4307-b818-4f5da49da36d",
        "cursor": {
          "ref": "016fc344-6245-45fc-aa4a-207f117d782e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4d43c757-3284-45c6-b78a-82d3eba40a4f"
        },
        "item": {
          "id": "b6e52b8a-e13a-4307-b818-4f5da49da36d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2a3a7a91-d0ad-4777-93ed-ae084b028ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b31aca-d43d-4abd-a15a-989ffd60f821",
        "cursor": {
          "ref": "ba79f820-6107-4180-b556-855f868f8463",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e45444c3-c5a8-4632-9ac4-b769694b38d1"
        },
        "item": {
          "id": "f3b31aca-d43d-4abd-a15a-989ffd60f821",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7fd7bfc5-6357-4a55-8b3b-b2a6f14a42a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a5438c-cb36-49c4-9c19-d03ef6ef12f6",
        "cursor": {
          "ref": "101223ea-a65e-457f-92d2-1c3cef12d56e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f4e0c0e5-bca2-40d3-8f1b-cc726b83bd6c"
        },
        "item": {
          "id": "a7a5438c-cb36-49c4-9c19-d03ef6ef12f6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "116cab31-7ef8-401c-b14f-0cc6d8173f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bda0dab-621b-42aa-ad66-df1c5a2ef2b7",
        "cursor": {
          "ref": "3d1fe493-6579-40b8-b8a2-37181bd9aaf2",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9b6f6c47-b851-4686-a1d3-a74d0ecda8e5"
        },
        "item": {
          "id": "9bda0dab-621b-42aa-ad66-df1c5a2ef2b7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "523d202d-13fa-499e-919f-870de2b8faa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e11da9-0b9d-480c-99ea-3339d042e03e",
        "cursor": {
          "ref": "40132089-4331-43fd-a816-33b32584e4c6",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "46211f51-9bea-49ec-aedf-ffe7483fa719"
        },
        "item": {
          "id": "80e11da9-0b9d-480c-99ea-3339d042e03e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2faa7b99-c135-49fe-8830-505b23897332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c42aaac-b617-45e8-83e0-31c39e3996eb",
        "cursor": {
          "ref": "252bc873-fe03-474c-b5a4-66466bec0e30",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d2274a06-5ee7-4d2f-9ee4-63df7afdc8ed"
        },
        "item": {
          "id": "5c42aaac-b617-45e8-83e0-31c39e3996eb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d9fc6d4e-4077-4658-a959-36c35d4d2397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c935944b-9d5e-4cd7-ac40-d7c0954d2e25",
        "cursor": {
          "ref": "a8602f65-9ad3-427a-8128-8fdf48ff81df",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dc366f27-e40f-4aca-98f1-bb9f1680cc9a"
        },
        "item": {
          "id": "c935944b-9d5e-4cd7-ac40-d7c0954d2e25",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6f4cd10d-449c-4456-aae9-d121f9ebc8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe0ef4b-a150-48f1-a49f-d7a7d747a089",
        "cursor": {
          "ref": "af0a625c-a8ae-4db4-912d-bf86377eb1da",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f7ff636b-cf44-4dff-98bd-ea0a9f4a12ec"
        },
        "item": {
          "id": "ebe0ef4b-a150-48f1-a49f-d7a7d747a089",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e1d21997-9a0c-475f-8cdb-94c33832d8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9ca5f4-7ee8-41d6-9eda-3907da617fdf",
        "cursor": {
          "ref": "cada9950-5ea3-46f4-81a9-425aa0167cc0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9581f0fc-e1d7-46d4-8924-0c98f99e4d59"
        },
        "item": {
          "id": "3d9ca5f4-7ee8-41d6-9eda-3907da617fdf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "81685ea2-01ef-4476-bf41-cdd905a948a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c116ab2-0e82-4e37-9820-0e07a3c9c31a",
        "cursor": {
          "ref": "3a77cd32-4470-4bd7-a45b-d20e7e31c766",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57d9ffce-b30a-4eb6-ad6f-df4fb877e9d3"
        },
        "item": {
          "id": "7c116ab2-0e82-4e37-9820-0e07a3c9c31a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "49649143-d537-4253-9211-248b90338f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9c7b73-fd1d-4851-89cd-2f3fcfc077b2",
        "cursor": {
          "ref": "d1f695b6-0701-4fe1-b2a0-3dbf84206dac",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7edeb0a5-4732-4ed2-b400-16a30603494f"
        },
        "item": {
          "id": "1a9c7b73-fd1d-4851-89cd-2f3fcfc077b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b4e807e1-8bc4-49f4-8eec-8922b26e5cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75ce760-1036-4cf3-8fa8-983d68f32234",
        "cursor": {
          "ref": "7eb78c51-d951-4789-9c50-26c9b5cee3e1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "97017016-232b-4633-8c99-da841050c70a"
        },
        "item": {
          "id": "b75ce760-1036-4cf3-8fa8-983d68f32234",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d6528c78-32d7-49da-92c4-b6d40477c7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372da495-e9f0-4e84-a205-5c3be5030dd3",
        "cursor": {
          "ref": "e1083946-5c48-48b4-abd6-1a877f4949f3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a8702705-338d-4e81-b19e-38eb4ad488cb"
        },
        "item": {
          "id": "372da495-e9f0-4e84-a205-5c3be5030dd3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0cd58e78-ed0c-4631-ac85-d82a64c0a44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862d94f4-5a29-4c83-a1da-2063cc09ce19",
        "cursor": {
          "ref": "9ed04d04-3909-458a-8497-e8010f17cc61",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "21a48db7-8bf6-496c-9efa-8e11f9f62d87"
        },
        "item": {
          "id": "862d94f4-5a29-4c83-a1da-2063cc09ce19",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cab8649e-3ad0-4591-bb28-6571c7ae4008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a84f0a-99e9-4729-b4da-872eb4689b74",
        "cursor": {
          "ref": "aee47401-68b3-4017-aaa9-0ee587f7b5cf",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d37c1cc-6123-45f6-b1f8-2085ab34f705"
        },
        "item": {
          "id": "d1a84f0a-99e9-4729-b4da-872eb4689b74",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4f441886-1ec0-40d7-8f8e-22799b0fb9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee5519a-1079-42f6-a1d0-ff63e09155c6",
        "cursor": {
          "ref": "b4c7c490-baa9-486e-afdd-6adfb1f2df1a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9a69d08b-0481-4627-b66e-eca4df6e5be8"
        },
        "item": {
          "id": "dee5519a-1079-42f6-a1d0-ff63e09155c6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4e9427c6-e00a-4e77-b659-24780310e1a4",
          "status": "Created",
          "code": 201,
          "responseTime": 580,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "84f1750a-beea-48cb-a4ee-b0dd4b1bfbf5",
        "cursor": {
          "ref": "8b585a85-61be-44a7-93a7-95cffe2d3dbf",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "62c19ac2-495c-44a3-a914-d0cbfa4965f7"
        },
        "item": {
          "id": "84f1750a-beea-48cb-a4ee-b0dd4b1bfbf5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8fc16897-29db-4d2f-be1b-d80c45d5e91d",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b8183876-fed6-464a-ba52-5acceb0484a1",
        "cursor": {
          "ref": "8d100dfa-0d4b-454c-ae72-77a94c78cb49",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a69ff8bf-5c9a-49fa-b2e5-3a7c39e8b0a9"
        },
        "item": {
          "id": "b8183876-fed6-464a-ba52-5acceb0484a1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e23316bb-ce15-4e01-98b4-22102503421e",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7eb0d54f-c178-4152-b288-9fb663a95f4d",
        "cursor": {
          "ref": "dcf7ca51-ec88-4753-926d-c074268372aa",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c519603-6ef1-4e0f-b223-2cf010591ce5"
        },
        "item": {
          "id": "7eb0d54f-c178-4152-b288-9fb663a95f4d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "aee4edae-be1b-4299-a30b-bdb43bf49db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f927fccc-3766-4daf-9a43-f69fce343db7",
        "cursor": {
          "ref": "7ee169c8-f7cf-4200-ae87-541840efea39",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c3804d30-5fc5-4beb-abf3-870644cea373"
        },
        "item": {
          "id": "f927fccc-3766-4daf-9a43-f69fce343db7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f374c87f-b38a-462a-a2ec-09171f3b07be",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "59bcb57d-2b3a-409e-872a-c95a2b2870a6",
        "cursor": {
          "ref": "d1b7323d-09a9-4409-b8b9-1c91c6232a9a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c1eee19d-28cc-4a78-9f87-62e7c8060da2"
        },
        "item": {
          "id": "59bcb57d-2b3a-409e-872a-c95a2b2870a6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "be0cd00d-c282-4461-ba2b-2da993d7ed03",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "383d24cb-b420-4931-8027-ca9b1e773ff6",
        "cursor": {
          "ref": "1c90b849-eae4-4551-a517-ca0cf665657e",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eb14088f-63e5-4d4a-9809-edb490d56fa8"
        },
        "item": {
          "id": "383d24cb-b420-4931-8027-ca9b1e773ff6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d55deb39-4a47-4d21-a40f-ca100f270ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c78bdfd0-691a-4b5b-82dc-98f841a241f7",
        "cursor": {
          "ref": "07177bd9-7855-40c0-b56c-362f8038ca52",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c9c93763-7d9f-4838-8f3c-e62a11910a74"
        },
        "item": {
          "id": "c78bdfd0-691a-4b5b-82dc-98f841a241f7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cd6ff69a-007d-4406-af16-1beb297c1bdf",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "24fed120-b0b6-479e-885c-7aff17082e6d",
        "cursor": {
          "ref": "3748f209-e554-4e5c-a851-5be50b6ceed4",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "34d80341-4152-4497-ba13-8aef859c999d"
        },
        "item": {
          "id": "24fed120-b0b6-479e-885c-7aff17082e6d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3d29efc5-8b02-41cc-8cb8-0dac65e66d1f",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f136a169-a802-4dcc-8435-e4a190034098",
        "cursor": {
          "ref": "1f14d373-eda4-4300-8a1b-4444ff5109bc",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3b31e634-a490-4fbf-9d06-bf29e741f1c1"
        },
        "item": {
          "id": "f136a169-a802-4dcc-8435-e4a190034098",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bb782371-fa11-46fc-a82f-736e0503d2b6",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "33dd9af8-a9bc-47d3-aedf-bfbd2336290d",
        "cursor": {
          "ref": "46c367e5-51b9-43cc-81cb-08040a470bfe",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a947bbdc-7a7a-43f3-a94a-4c150d77cca4"
        },
        "item": {
          "id": "33dd9af8-a9bc-47d3-aedf-bfbd2336290d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "eb99e72d-e029-4d6e-b237-460b8f75dbac",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f4207634-3f88-4733-9c6f-b4abd47780a4",
        "cursor": {
          "ref": "0dfac4cd-c31f-4fb3-be20-5692e1ab2fcb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9f3a09ed-3039-463e-8868-6c14efe8df72"
        },
        "item": {
          "id": "f4207634-3f88-4733-9c6f-b4abd47780a4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c4c952f6-ddbc-4e61-9461-ed54f32964de",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bf2f404d-3f84-4ea6-9804-f3c95050830d",
        "cursor": {
          "ref": "e8da4ae1-51be-4392-9d0a-2af5bde8b6a1",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3031c25d-a168-43a5-87df-28aa4509c6f3"
        },
        "item": {
          "id": "bf2f404d-3f84-4ea6-9804-f3c95050830d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9a79a372-29cf-4f3a-b2e2-20ec33f43159",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7208311d-125b-4b8c-8acf-2e3d668a7a1a",
        "cursor": {
          "ref": "3dc418ec-8086-470b-8e67-3ea3bcb9ce85",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4d9639cd-cef4-42a3-ab37-69a6fbff787d"
        },
        "item": {
          "id": "7208311d-125b-4b8c-8acf-2e3d668a7a1a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "11e93330-bf02-4488-b730-fdc4d6785106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff0cad3-5066-4aa3-91ba-f95bdf038c66",
        "cursor": {
          "ref": "0bec77dd-14d1-4212-81bc-953d226d179f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d8c8c4aa-c266-40af-9508-39fb7ecf4ce3"
        },
        "item": {
          "id": "bff0cad3-5066-4aa3-91ba-f95bdf038c66",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3fe0dffc-f82c-4be7-8ea8-49981cd57b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e091d646-a1bd-4853-a57a-7f293fa0d16d",
        "cursor": {
          "ref": "33434a54-15ce-4b90-a8bb-760cfe634650",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "64332a89-d6ce-4523-ab37-08310490415b"
        },
        "item": {
          "id": "e091d646-a1bd-4853-a57a-7f293fa0d16d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "be01bd5e-91e0-4d50-b804-c9206b0f5eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a59404-f87f-4167-89e8-8498ed1b7dd7",
        "cursor": {
          "ref": "af8b6f2b-9825-4f2e-bb59-21b132d744b4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bb6b6140-6887-4840-b993-029df98568d2"
        },
        "item": {
          "id": "c0a59404-f87f-4167-89e8-8498ed1b7dd7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "89c396c9-1788-4fe1-8771-17088bbb8514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b370b-5ad4-4999-beb0-22ea738bb03f",
        "cursor": {
          "ref": "4a1d809f-a386-4023-97ef-1d948012ad76",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fbc9d84d-1561-4a29-8416-847efb0b727c"
        },
        "item": {
          "id": "621b370b-5ad4-4999-beb0-22ea738bb03f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "102f04b0-26c4-4ce0-bdc9-946802bcbc78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873cacc7-2987-4d3d-9722-fb51ec761e0f",
        "cursor": {
          "ref": "d630a1a8-d706-4ca4-ab76-81bd75fb27e3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c96ba93f-34e5-4106-bdcc-b7d3b767a472"
        },
        "item": {
          "id": "873cacc7-2987-4d3d-9722-fb51ec761e0f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f79d05b9-a26d-464d-b0c0-ee0b21372896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7256d675-9af9-40c4-a52e-c687df7f6643",
        "cursor": {
          "ref": "69629e43-a789-4673-9713-22816433d808",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ff502029-6a38-4f44-aa48-cd855747d7d9"
        },
        "item": {
          "id": "7256d675-9af9-40c4-a52e-c687df7f6643",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6c3a8cd8-b9e6-4b74-afdb-5ee7b8cafa52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1078ad0-e90f-495e-a7a3-2c164f9f0fb8",
        "cursor": {
          "ref": "a8985124-312d-43c3-b07c-b17a15dca99f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bf697b77-b5b8-49f0-83ab-c7cd800228cf"
        },
        "item": {
          "id": "c1078ad0-e90f-495e-a7a3-2c164f9f0fb8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "77e4f0dc-42dd-4b7e-b7cd-f67f14ecbb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c42c640-245b-4daa-9bf7-1d9ebe60dd62",
        "cursor": {
          "ref": "9e722b03-9ced-4209-87b6-c552f819b6ee",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c81c7b5e-388f-4309-bfc1-755ae82427b8"
        },
        "item": {
          "id": "6c42c640-245b-4daa-9bf7-1d9ebe60dd62",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e4fbe2b6-7000-48f9-9127-d14e53093086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d1c713-b95c-41d7-8d17-e67d26f172f2",
        "cursor": {
          "ref": "f365124c-0eed-45a0-8226-fe3e3eb19227",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "265dc1ec-84af-4b21-abab-2a8149458d45"
        },
        "item": {
          "id": "e6d1c713-b95c-41d7-8d17-e67d26f172f2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "089983a6-3904-469b-943d-c94b7c49beed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe502b43-47d7-4802-9abc-c461d265d805",
        "cursor": {
          "ref": "d2922eda-b86c-4f32-a5c3-135f63d9e9c2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "491bc848-c59c-43fb-adc4-cbcfacdafe51"
        },
        "item": {
          "id": "fe502b43-47d7-4802-9abc-c461d265d805",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f59edfb5-701b-4b2b-8b5d-2ee94b2845fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb813e04-96c6-407d-b291-67b9de55fb73",
        "cursor": {
          "ref": "8a259969-6c63-4a98-8ae0-b987f1a85866",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2d4699da-376c-46e5-bdec-b35b164a71ff"
        },
        "item": {
          "id": "bb813e04-96c6-407d-b291-67b9de55fb73",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "92a0880d-40d1-4830-afe4-d41bb8f68080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71667973-8e73-4412-9a20-c84b490e8b80",
        "cursor": {
          "ref": "86c1eacb-192a-4368-896b-075625bf138c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ff4d444f-a0bf-48b3-82b2-a230f5a87a4d"
        },
        "item": {
          "id": "71667973-8e73-4412-9a20-c84b490e8b80",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "206ac85a-d4cb-495b-b6df-c39c19977df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe03a5a-533e-4d24-8504-b015eab01c44",
        "cursor": {
          "ref": "a4bb0c22-a090-4b30-a666-12263ade3769",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "58baaa27-4d18-4878-96fd-986775f1408d"
        },
        "item": {
          "id": "8fe03a5a-533e-4d24-8504-b015eab01c44",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4dbea4ca-14a5-4b4b-8b93-fc0f49431514",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1115d379-8d4d-4379-8ad4-e7dbf5bc719d",
        "cursor": {
          "ref": "27d1461b-811c-4f79-825b-a3d6c542a62f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "44073c7e-a81b-4785-8ee6-3945528d355b"
        },
        "item": {
          "id": "1115d379-8d4d-4379-8ad4-e7dbf5bc719d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "948ddbc1-c9fb-4acb-9b90-ec1c8b5575c9",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fd78e932-4837-4ef6-9b00-0993a10af6db",
        "cursor": {
          "ref": "30840b7a-4c0a-41ef-bde1-5c227c293e6c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5607641c-7b5b-4cd2-a54f-ec7308b9611b"
        },
        "item": {
          "id": "fd78e932-4837-4ef6-9b00-0993a10af6db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f206de32-80f4-4806-9010-fc52b114b34d",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "566f196e-21b4-4389-b6ac-c99e4c148c60",
        "cursor": {
          "ref": "59a2f10b-bf15-4d1b-995f-4c15da1769f8",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "19dfc6b8-bc33-442f-b961-d1af80ea9676"
        },
        "item": {
          "id": "566f196e-21b4-4389-b6ac-c99e4c148c60",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b7ba3de-34a2-46d4-8dce-f4132adbee05",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "79d9780f-e0dc-48fc-9ea0-410f535fd055",
        "cursor": {
          "ref": "a8b8e745-450e-4fcd-8802-15c003c27c10",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7ab858dc-d318-48be-9c5e-6da6cf2f8e95"
        },
        "item": {
          "id": "79d9780f-e0dc-48fc-9ea0-410f535fd055",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0bc97e57-63c6-41a3-89c6-4ed72cedb915",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ad7a39da-f473-4db9-8cad-1b9c03a98383",
        "cursor": {
          "ref": "c9a4969e-a4fd-4873-985b-52a281d31efc",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bafa9baf-97b6-4e24-98b5-ee090e8f658d"
        },
        "item": {
          "id": "ad7a39da-f473-4db9-8cad-1b9c03a98383",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3ad3cd56-55c7-4caf-aa8d-a597137046ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac45f88-ce51-45e2-bc37-57cb1b66115f",
        "cursor": {
          "ref": "fdf5e4ce-7ffd-49cd-be2a-74017693a2f9",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "867b8888-a02b-441f-909f-4c3026d5fd59"
        },
        "item": {
          "id": "4ac45f88-ce51-45e2-bc37-57cb1b66115f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3327106a-6d89-48f5-a30a-7ca28e7ea15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed32917-0a9f-487f-9e1e-7a7e3362bda6",
        "cursor": {
          "ref": "a567c65a-d254-4560-9e0d-b7b9a1d95b04",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8aa77180-6f5d-4631-a80e-d94e76ab69b6"
        },
        "item": {
          "id": "8ed32917-0a9f-487f-9e1e-7a7e3362bda6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ee30b8c2-9213-4784-82c7-b27ace857be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8bde04-3cbc-445c-a45b-65199b6f4ee2",
        "cursor": {
          "ref": "e32ad577-3f59-4b60-afce-a02191f95dde",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b4173226-856d-4d25-a423-f5b167763406"
        },
        "item": {
          "id": "fd8bde04-3cbc-445c-a45b-65199b6f4ee2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b07f6c36-526e-43ba-bd93-7e0d11815727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4b24ed-d12e-4ca7-87ae-9485e3074fe4",
        "cursor": {
          "ref": "9558d888-6446-4ca7-b7ee-7c36300662bd",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b9863e72-c762-4ed3-9d84-621dec628989"
        },
        "item": {
          "id": "be4b24ed-d12e-4ca7-87ae-9485e3074fe4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fde75bf0-e119-4c50-9391-45f25455642c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc595d76-ed1a-4706-b9e0-08e97f6ba3d1",
        "cursor": {
          "ref": "3344968a-dfc4-408d-bb15-7f6b458e9693",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e54eb57c-c5c6-423d-8661-3c92eee5e328"
        },
        "item": {
          "id": "bc595d76-ed1a-4706-b9e0-08e97f6ba3d1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "061a3f9b-c70f-4bc0-b7de-749995aaf05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f53e38-72b1-4af6-bf70-9f641cfca5a0",
        "cursor": {
          "ref": "4351654c-f062-40e6-baf9-b6e3ff1a929b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eca8f5c9-107f-49aa-84dc-2cd4363249ff"
        },
        "item": {
          "id": "a8f53e38-72b1-4af6-bf70-9f641cfca5a0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "970b345d-b438-4bbc-aebd-aa1066a88efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315b0506-0ea4-4552-8e15-8de369239ac0",
        "cursor": {
          "ref": "3a196a74-b727-4935-8a9c-057e3748b7b1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7c7cebee-4188-48ff-aa95-53aab73c25e8"
        },
        "item": {
          "id": "315b0506-0ea4-4552-8e15-8de369239ac0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e1ea7cea-bcc0-4a69-9837-6a9631912369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1006e37b-4f2b-4c02-a9a9-bb409fe12873",
        "cursor": {
          "ref": "a6595bfc-8f40-4f64-9370-02cbffe7c39f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "366202c3-9c58-470f-bd66-d3ee0792699c"
        },
        "item": {
          "id": "1006e37b-4f2b-4c02-a9a9-bb409fe12873",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "59e52acf-aacf-47c1-ae21-f0c513a3a03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10d38cf-6109-4b7e-a839-c5c1070ab369",
        "cursor": {
          "ref": "c31f878f-d26f-4be1-a871-bcb56ee72873",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b8e4a19a-a9c6-4355-8060-8514ab494ba8"
        },
        "item": {
          "id": "c10d38cf-6109-4b7e-a839-c5c1070ab369",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "100438da-1342-4ac0-8232-b70ebffd5e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6764a21-f7da-4df5-b784-6ea2f4ef29df",
        "cursor": {
          "ref": "0d020f11-9240-420c-b3ac-99aa07ef1bb8",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dbaea3ca-94ab-475d-9c4c-3ff91706e7c4"
        },
        "item": {
          "id": "c6764a21-f7da-4df5-b784-6ea2f4ef29df",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "643005cc-f04d-44f4-b626-6f0a7fcb0e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb2a667-f39f-47c3-a687-6d51ae11d6bf",
        "cursor": {
          "ref": "456ffd1d-bbfb-440f-992c-888c005b1a92",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7657e132-3b6a-4923-8a54-d06e3f12cf70"
        },
        "item": {
          "id": "3bb2a667-f39f-47c3-a687-6d51ae11d6bf",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "383bb608-3ff7-460c-874a-7d82493c8233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309eb455-65cb-42aa-b6c5-0a98a067a54c",
        "cursor": {
          "ref": "73da7ef4-9000-46e4-8653-2a299807f168",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ba505f28-3f7c-49bf-b537-e202a54c4034"
        },
        "item": {
          "id": "309eb455-65cb-42aa-b6c5-0a98a067a54c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08714f50-bd6a-4afa-9215-4237b71eb8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7ff9ee-c984-4373-9968-fcc4992dcf81",
        "cursor": {
          "ref": "c12f9548-55e3-4d24-bf15-e5c91b9787d6",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e03b28ec-bce4-45f8-89bd-4b8757a53092"
        },
        "item": {
          "id": "2c7ff9ee-c984-4373-9968-fcc4992dcf81",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d8129455-a0b2-4fca-a9b0-06b21651044d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d490cd16-a2bd-486a-ae03-b457a17fb181",
        "cursor": {
          "ref": "fe537332-1ad5-4e25-bdd8-0a5bd1f146fd",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "858e6eef-f4c5-4f9b-81a7-fc3dd9ebe383"
        },
        "item": {
          "id": "d490cd16-a2bd-486a-ae03-b457a17fb181",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "775bf342-905f-49f2-9e8c-e7998aea736f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282592cf-9840-48db-a477-447af1fa54c7",
        "cursor": {
          "ref": "e84eca5f-4afd-4eef-af9d-31ab20926f75",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "de9b5ff0-aedd-43a8-aa8c-a2a5a89938e0"
        },
        "item": {
          "id": "282592cf-9840-48db-a477-447af1fa54c7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a7b5fbd1-8d66-430b-958b-d161e5cee368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e686e5-8c7b-46b3-b579-e6e323b4382a",
        "cursor": {
          "ref": "f2680cff-8c0c-49a0-9ff1-4faac49ac3a2",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fb3476a0-ef91-4c9d-8869-15473c4ee3fb"
        },
        "item": {
          "id": "84e686e5-8c7b-46b3-b579-e6e323b4382a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3e96e76b-978c-4543-a587-8f33b6dff22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdd1543-26d7-4f88-b3be-32beaf549768",
        "cursor": {
          "ref": "573c8008-5554-42dd-8cc4-0e26b37cc3cb",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d21b020f-3335-4d51-b47a-a584a141a6ae"
        },
        "item": {
          "id": "7fdd1543-26d7-4f88-b3be-32beaf549768",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9caacd11-8910-49e0-8a56-dea2f358a483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a60fc50-87e4-4997-9ab3-d5fb3b7da3fe",
        "cursor": {
          "ref": "7da0f751-9bb3-4ecd-8e91-81611a382349",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bf0386dc-b756-47a1-b232-df7e0803c839"
        },
        "item": {
          "id": "0a60fc50-87e4-4997-9ab3-d5fb3b7da3fe",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e2d69d95-94bf-4c5e-8e89-02db0f95fb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d25fad-5449-418c-b9fc-500f2c109453",
        "cursor": {
          "ref": "f2d9b015-da29-4476-9301-b1355137af44",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "42fca612-248a-4cff-b7c8-446b7bca5c3b"
        },
        "item": {
          "id": "a1d25fad-5449-418c-b9fc-500f2c109453",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5682ea29-24a7-4075-a356-0816e4f6b71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724a53df-376f-4a23-b7e6-aadf51ff8f5b",
        "cursor": {
          "ref": "985a5bdd-8221-4fa9-9616-1d6d9956abc3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "df44444d-23f7-449b-bdca-4b670734ff7a"
        },
        "item": {
          "id": "724a53df-376f-4a23-b7e6-aadf51ff8f5b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "39adaa6f-f345-4c74-8c0f-129c57774519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a751262c-4419-4c2e-b5bc-10bf2db61be9",
        "cursor": {
          "ref": "9881b0a0-9a4a-4aec-9261-19d255707a5f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3b1dd0fd-9dec-4ced-92e4-1f16c3e0a046"
        },
        "item": {
          "id": "a751262c-4419-4c2e-b5bc-10bf2db61be9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d02421bb-cba8-4d16-859f-ef2bc1029796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d22b1c9-f40d-4778-9976-7154389a87c6",
        "cursor": {
          "ref": "fd045930-ec22-41b7-aa29-fc74a3f89390",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e295285-2803-437b-8cca-1b7efbd5581c"
        },
        "item": {
          "id": "2d22b1c9-f40d-4778-9976-7154389a87c6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bcd3eea7-eb05-4ae3-b90b-f9966bbaf903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1369d27c-77e3-459e-8b90-cdf6c7bd276a",
        "cursor": {
          "ref": "5409d4d2-c252-4121-bdeb-cabf15173daa",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f39968a2-d580-4357-9c2d-c51d1f5c634a"
        },
        "item": {
          "id": "1369d27c-77e3-459e-8b90-cdf6c7bd276a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c5d8038d-feca-40cc-b7a8-2ad464a76f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3539ae34-20aa-4f67-acf3-d1db454359c7",
        "cursor": {
          "ref": "1dd96ed7-bf29-4fc4-8e0a-df8d14bf4ee1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ef78d8fc-cd7e-42ff-a19e-765967938b2b"
        },
        "item": {
          "id": "3539ae34-20aa-4f67-acf3-d1db454359c7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6a242382-2fba-4aac-be1b-b96f5a732666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f9dc00-4587-4c06-9e2f-2b7033114b22",
        "cursor": {
          "ref": "efec4c9e-bc38-4412-8d14-812b824f00b6",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2ee1b6e9-986f-43bd-a76c-5069ac6eda21"
        },
        "item": {
          "id": "b6f9dc00-4587-4c06-9e2f-2b7033114b22",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "838ed759-0680-411f-8074-d401995e0e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a85676a-7550-4736-bda6-0a0affa72c04",
        "cursor": {
          "ref": "e5c7a2c4-1846-483e-9a18-8e212cfe6d5c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "82aead7e-77f1-46d1-8675-a387223121b1"
        },
        "item": {
          "id": "1a85676a-7550-4736-bda6-0a0affa72c04",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3148944f-7cee-4399-80dd-db13512eb631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadaea8f-1e1f-4572-a9cc-ca3fc55c4d48",
        "cursor": {
          "ref": "a99a01c0-9eb3-493f-b340-e776871ed7d4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d1109951-21c1-4b2c-81c6-8ffd759349f0"
        },
        "item": {
          "id": "eadaea8f-1e1f-4572-a9cc-ca3fc55c4d48",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "77668906-b36f-4c77-bd7b-2814dd4b7125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dad93e2-8060-4fe9-a2a1-c665a6601b79",
        "cursor": {
          "ref": "29eab859-0450-4005-8d13-50c4adb6b0ef",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "47387e5b-ba35-4760-bf01-2723b683e971"
        },
        "item": {
          "id": "1dad93e2-8060-4fe9-a2a1-c665a6601b79",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fb878440-1bf4-4b7b-987a-f022d936dfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767d27b2-8031-4beb-9436-2688757f5eaa",
        "cursor": {
          "ref": "47817529-f296-4945-a819-8621d2e1799c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7e7f2569-6942-41bc-ad46-bf9f0526117d"
        },
        "item": {
          "id": "767d27b2-8031-4beb-9436-2688757f5eaa",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "49941034-b235-4641-8d4b-7b64353e55f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10667355-933b-44fa-97c3-062e3b530be4",
        "cursor": {
          "ref": "42cfb58f-13fe-4385-a8df-f4f1f90870d6",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f54dacb6-2880-400e-ae84-f70d9d6b7fd6"
        },
        "item": {
          "id": "10667355-933b-44fa-97c3-062e3b530be4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "18b2472b-d08a-49ef-bae4-e36787aab885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8e4cd3-f012-41e6-b886-cea46e8fb00f",
        "cursor": {
          "ref": "df3ed2cc-ff73-4831-8417-64c53410662b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eb5ecc91-e3bf-469c-9a67-78f50607c41c"
        },
        "item": {
          "id": "0c8e4cd3-f012-41e6-b886-cea46e8fb00f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "52a7083d-6072-4f80-9f19-88ce2861cdb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6fb998-7cfc-416d-af13-8eb38f469046",
        "cursor": {
          "ref": "c47d51e5-a9fb-40af-a8a0-303494e1638d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "535d1c9d-58ab-4236-8bde-f4ca622bca4d"
        },
        "item": {
          "id": "ed6fb998-7cfc-416d-af13-8eb38f469046",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "416f1772-b7a6-4838-ac05-89317b3a6fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cfc687ce-4f10-4fdc-95b5-08822635ad95",
        "cursor": {
          "ref": "b655e810-45bd-4edc-8c69-e1d8c6e8a969",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "821f809d-8de4-464c-a903-9cb7072822aa"
        },
        "item": {
          "id": "cfc687ce-4f10-4fdc-95b5-08822635ad95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ba0b7f60-69fc-4d8b-a6a5-c9c04eab2447",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebb8446-98bc-4744-8b54-c0d6a21b5849",
        "cursor": {
          "ref": "05876e82-06c2-43b9-9d5a-032d19208967",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "60e55b4f-3c8c-4dd1-9829-5b865fa5e698"
        },
        "item": {
          "id": "eebb8446-98bc-4744-8b54-c0d6a21b5849",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6f1b66ea-24f4-41aa-b445-555ad0c6bb2d",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ec1996-8172-4404-83aa-b046b26c7403",
        "cursor": {
          "ref": "d86fb60d-2063-47af-9c09-7cf1cef34685",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1f8c5979-27a6-4e12-8b05-6a0ebcb27319"
        },
        "item": {
          "id": "e0ec1996-8172-4404-83aa-b046b26c7403",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0d034d45-5764-4ef6-9118-d254bc152af9",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4696a916-1580-4227-bca1-53c02e5f62ee",
        "cursor": {
          "ref": "4c24ad52-7e58-4ff9-ba3c-71d1425399e2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "83402783-2ef6-4c76-aa1f-f1b1e16743af"
        },
        "item": {
          "id": "4696a916-1580-4227-bca1-53c02e5f62ee",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0f789677-340e-46d4-b4bf-8448b0291bd9",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0ee5e5-9f20-44c5-8a9d-f10a64bde2d3",
        "cursor": {
          "ref": "8485a3b3-51d4-47a3-a18e-70a4712fc403",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bf183760-7a0e-4d4f-a6ed-39c3f7ec002d"
        },
        "item": {
          "id": "ae0ee5e5-9f20-44c5-8a9d-f10a64bde2d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2a300231-38e0-4a99-af13-aa7f1baa57f9",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-16T00:36:00.041Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-16T00:36:00.041Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8e3b99b3-7046-4df1-85f3-d89c21318ae8",
        "cursor": {
          "ref": "7f36fa25-6860-4b18-a0ea-e8eb211d442a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "517d5ee1-5941-46ee-91f0-4808cbc537f4"
        },
        "item": {
          "id": "8e3b99b3-7046-4df1-85f3-d89c21318ae8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "62f08d25-a7ad-473c-a7e2-7b194b8b321a",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec9d14d-c895-470f-bdbb-abeb8b9dcec9",
        "cursor": {
          "ref": "7d2723b2-fc73-4801-ae92-f83e865727a7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "770d6b09-8566-4165-ba5a-65223aca60e7"
        },
        "item": {
          "id": "8ec9d14d-c895-470f-bdbb-abeb8b9dcec9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8dca18bd-056b-45a8-8b49-8d5fcef544dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836e2cd8-91bc-488b-b168-15f0f877a605",
        "cursor": {
          "ref": "692bfb8e-28e2-4f5a-bb60-12a48e16daa8",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4d4dca25-8269-43a4-b222-d6b81abee94d"
        },
        "item": {
          "id": "836e2cd8-91bc-488b-b168-15f0f877a605",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b3c53342-fc29-4d97-a946-9419deb66d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f172f0d0-4f1a-48b1-be9b-54ec9ec5c391",
        "cursor": {
          "ref": "6b4c3b54-0d10-4d1e-8af1-f581b09b1af1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "804785ad-1931-4f50-8f32-5db640161be6"
        },
        "item": {
          "id": "f172f0d0-4f1a-48b1-be9b-54ec9ec5c391",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "08eb27ca-4097-4161-ab7a-fa038b107c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e5ddcf-8d49-418d-991c-566255471de3",
        "cursor": {
          "ref": "6d2f12d3-e340-4eb3-b78f-d48ff181c372",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8f07f532-64a8-4062-863c-90abe7fa0147"
        },
        "item": {
          "id": "70e5ddcf-8d49-418d-991c-566255471de3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "359d463d-8678-4568-8f94-68f7a568efcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78386f11-e3d7-43d3-a5a9-8a2a60b7a25c",
        "cursor": {
          "ref": "77b95843-45b9-4552-9a8a-eec5a9e40376",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9d16e072-89d6-4c84-b59e-58180792e322"
        },
        "item": {
          "id": "78386f11-e3d7-43d3-a5a9-8a2a60b7a25c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "49373ad3-61b3-4a88-b543-a5f9748337c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15881ac-158e-4169-9891-2dd402481289",
        "cursor": {
          "ref": "1b3617a3-05b8-4d0c-9d41-839e7dd577c2",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "83fd9a1b-2887-450b-8a55-6431a108cafa"
        },
        "item": {
          "id": "e15881ac-158e-4169-9891-2dd402481289",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0d82efd9-beba-49e0-a7d0-a4e49e7c15fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922b0d0d-bb2e-478b-85da-efc4396d863b",
        "cursor": {
          "ref": "b4953e7e-1ca7-4b3c-9970-659ae93fbc6c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "04554e43-6320-40c2-b3bb-544a3314e966"
        },
        "item": {
          "id": "922b0d0d-bb2e-478b-85da-efc4396d863b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1edcca8f-6dc2-473f-a61e-0b6f2515ee9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abb4adf-a421-4eed-aedf-b1df348163de",
        "cursor": {
          "ref": "d8c9d5ce-1c9c-4f70-ae26-ad5aa7845d7f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e02233b2-2097-41ad-9a01-8eddae2de2fc"
        },
        "item": {
          "id": "2abb4adf-a421-4eed-aedf-b1df348163de",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "63974118-85c5-40ff-a0e8-344509debb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94febe95-ff27-444b-ab05-34152d29f16b",
        "cursor": {
          "ref": "380617da-bc4e-4669-8c90-a577df331961",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fa60792e-d5eb-40c6-b3e7-69f593e5bf99"
        },
        "item": {
          "id": "94febe95-ff27-444b-ab05-34152d29f16b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "849db8f3-bc3d-47d6-a3c5-44ed97eded22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a67d3b-e555-44fa-8b98-3b411f9a26f5",
        "cursor": {
          "ref": "39ed085d-1cda-497a-adbc-d2111f378601",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "86091b71-79a3-4769-a269-f49ee2cb12c4"
        },
        "item": {
          "id": "89a67d3b-e555-44fa-8b98-3b411f9a26f5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "295965ec-9d1d-42bb-86aa-df0746ae5a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc59ce67-788e-4a14-8671-9d770d6e5dbb",
        "cursor": {
          "ref": "4c0e8d16-2455-40fe-9248-39f7f1c82aa2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3ddd4356-0583-4da5-b2aa-73667077c772"
        },
        "item": {
          "id": "bc59ce67-788e-4a14-8671-9d770d6e5dbb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "36e07551-fd55-4ab9-b12e-995c40030c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed056221-4265-4ade-9ce3-9d254fe79d64",
        "cursor": {
          "ref": "949ac00f-dd1d-4c8f-87b6-8c9158a28aa8",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ee8cd17d-c6a7-436a-923c-ad92cb757ba4"
        },
        "item": {
          "id": "ed056221-4265-4ade-9ce3-9d254fe79d64",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e33efffe-0e72-4141-b646-2d9856b86d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591519fd-382a-47e7-a870-c87c268bfd7a",
        "cursor": {
          "ref": "9529d0d0-37e9-4a58-a66e-4cc9dfec21cb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a2ccad47-f70e-4a89-9b6f-33405d8d8c78"
        },
        "item": {
          "id": "591519fd-382a-47e7-a870-c87c268bfd7a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "39928f62-3971-4db4-ae4e-450d0d1761a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b99103-e973-4c5b-8fd9-06f7c08266ef",
        "cursor": {
          "ref": "64861627-64b5-4def-ba6d-9aaa344b93ea",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4ab2c980-2f37-4617-815e-d26ffc35e4ca"
        },
        "item": {
          "id": "53b99103-e973-4c5b-8fd9-06f7c08266ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c17874b5-1742-42b8-a72a-220727573b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5399c0fa-8723-407b-a706-8de5d2c53728",
        "cursor": {
          "ref": "559cc130-9ddc-42f3-950a-6028c24452ea",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cbb47aaf-1763-4355-b492-c1485a407e8e"
        },
        "item": {
          "id": "5399c0fa-8723-407b-a706-8de5d2c53728",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "af3f56da-5eaa-4d97-9824-bb33a14d31e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f830ef94-7a19-4e78-908b-d9ace44145c1",
        "cursor": {
          "ref": "a9a17071-fc1f-4040-ad1f-31f7e91f50bb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d3bf3c10-d1b7-449d-9407-de3249ce1132"
        },
        "item": {
          "id": "f830ef94-7a19-4e78-908b-d9ace44145c1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "be71e87c-1697-4491-aecf-fd7e590fbbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c04ac1-7fb8-4ca0-af86-98d2865ce7cb",
        "cursor": {
          "ref": "aeebea30-0ec0-404b-8e98-d250b7a7b00f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "25a3f33e-1c6b-47ea-8081-f4bc07473c2f"
        },
        "item": {
          "id": "88c04ac1-7fb8-4ca0-af86-98d2865ce7cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4af2fda3-bf8d-461c-816f-c4796ab40afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a1558c-535c-42bf-9c76-23723eed2b5d",
        "cursor": {
          "ref": "e17a58cc-ed1c-46c6-a4c3-655652f351cc",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9cfe83b4-c4f9-472a-a46e-198b3020ec69"
        },
        "item": {
          "id": "f9a1558c-535c-42bf-9c76-23723eed2b5d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a9e23014-8408-413f-9ae5-59c1d2bf50a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7326600-8975-42be-8a2f-e2c7185d40b0",
        "cursor": {
          "ref": "bc44064b-33c5-4d32-ba8d-35138b9756f5",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7a148434-d656-4b37-afa1-9a2becd6a90f"
        },
        "item": {
          "id": "b7326600-8975-42be-8a2f-e2c7185d40b0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0f1d83ed-312a-413e-b2ab-efbd33c110d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffcfeae-34a3-4c5b-b01c-7b080da95fe7",
        "cursor": {
          "ref": "5abeafa6-24c3-4987-b19b-806fb950a0c8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2f7e5f29-bb53-4c51-b84e-23827ff2cc24"
        },
        "item": {
          "id": "2ffcfeae-34a3-4c5b-b01c-7b080da95fe7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "57f72c64-d39b-41b2-8607-0da9e437e56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974e3df8-bead-4fc7-bd1e-31f5c30951df",
        "cursor": {
          "ref": "3b3e827b-1bfc-4cc8-ac5f-404428fb8963",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3fd95297-f598-4c43-9efa-bf3d3b4d7087"
        },
        "item": {
          "id": "974e3df8-bead-4fc7-bd1e-31f5c30951df",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f7962b64-1e3e-4805-bf75-ba3b0fc4b907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded2baa2-b307-448a-87a0-486099b497b2",
        "cursor": {
          "ref": "c28cb57b-8774-49f9-a585-076ce1299527",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "851fa255-7aad-40f3-9e9a-fa34367d4910"
        },
        "item": {
          "id": "ded2baa2-b307-448a-87a0-486099b497b2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa7edb24-a7e5-4b4b-9a5c-23244c2d30f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b24bad-b92f-432c-9b58-3bbab7b89ddb",
        "cursor": {
          "ref": "87445288-cba4-46a7-8f3d-2e1cfe47277c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "763ec165-01b8-4c06-9ab1-eb07c496edad"
        },
        "item": {
          "id": "b1b24bad-b92f-432c-9b58-3bbab7b89ddb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2a296b47-ce03-4403-acb5-2ea19c781bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786e032e-3e02-4398-b2ad-68b448172d0e",
        "cursor": {
          "ref": "3666fd08-6a41-473e-a2a6-cff49e943e3c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ac34cd6b-36ae-46a9-95cb-5eb49037b2d1"
        },
        "item": {
          "id": "786e032e-3e02-4398-b2ad-68b448172d0e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53c1e06a-7a47-4bb2-9c8c-19bc107f75ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c49c42d-760f-445d-b693-fa27f6fe0c15",
        "cursor": {
          "ref": "2499775d-2bef-4358-b25b-0bf2794d4c1f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "07575070-ac7e-4050-9f2a-a0ddb5902e4f"
        },
        "item": {
          "id": "1c49c42d-760f-445d-b693-fa27f6fe0c15",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db5d0678-1d5b-491e-8a06-6b39998ff570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c74746-5276-4968-af67-01cfc459c7b0",
        "cursor": {
          "ref": "0fb2cc9a-3da6-4a54-b3c4-050e2a2965e8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1f1a1607-a8e0-450a-b88b-764f158a60bb"
        },
        "item": {
          "id": "b1c74746-5276-4968-af67-01cfc459c7b0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "24a573fa-a2a2-4d24-8273-9b6c45a23e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fc1c8d-c9a4-48aa-8448-16efc774d1ee",
        "cursor": {
          "ref": "83bfb040-7927-40c5-840d-eabfcc76f0ce",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "697031b7-3ee0-4578-b39b-89780ce00ddc"
        },
        "item": {
          "id": "43fc1c8d-c9a4-48aa-8448-16efc774d1ee",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c20fc195-6479-435d-aece-d6ee94dbeb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938a092b-5ab4-4c37-8d1d-44af57838387",
        "cursor": {
          "ref": "5263b0fd-8c79-46ea-9cd7-f2b44f1bf702",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "013d1ce9-0b1e-49dc-9f15-38403ca75268"
        },
        "item": {
          "id": "938a092b-5ab4-4c37-8d1d-44af57838387",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "979da88e-48a4-43b5-bd97-23f689ab07a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedf1b55-6a6e-4a90-a1b9-fd112a26aa5c",
        "cursor": {
          "ref": "b97e553a-324b-4ed9-926b-6110ba3bdbcd",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "27082526-09b7-412d-97ec-3b32722596aa"
        },
        "item": {
          "id": "aedf1b55-6a6e-4a90-a1b9-fd112a26aa5c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "738d370a-b2bd-4ba0-9ec3-f81c4854e119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bfa1e2-d68c-46f0-bbcd-ba2fb593d2a6",
        "cursor": {
          "ref": "c6bb0752-c94d-47bf-9077-28b9d9af8db0",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e9f3f30c-52a2-4091-9117-0e9723bbf3aa"
        },
        "item": {
          "id": "e9bfa1e2-d68c-46f0-bbcd-ba2fb593d2a6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a60e094b-c98c-4eed-b60a-e0e53d8ea4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973044a6-86c2-4b69-bfa6-bafcb739dd41",
        "cursor": {
          "ref": "b96103a8-1186-4597-a957-5d37944d5c39",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2de03dd4-5935-45b2-953a-6bd65d1792d5"
        },
        "item": {
          "id": "973044a6-86c2-4b69-bfa6-bafcb739dd41",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "936f25d7-46f8-479b-8295-eb71cc27aa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a938918-0c7d-4248-8848-210e44407111",
        "cursor": {
          "ref": "473e3504-9b21-43aa-8932-30e975920ef8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1657bae4-7154-4da3-b732-e1615483fdff"
        },
        "item": {
          "id": "7a938918-0c7d-4248-8848-210e44407111",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f56d9951-d402-4aef-a220-9584e0dd1fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da43de6a-774a-45ba-87da-88586bf7b18e",
        "cursor": {
          "ref": "b2c3fa56-740f-423b-9e82-cc5e73efcd28",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1ded9520-8e64-42ac-85a8-adec38ad66f0"
        },
        "item": {
          "id": "da43de6a-774a-45ba-87da-88586bf7b18e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cafb9dab-7c10-4ab2-a40a-c53a193eba16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0108bd-d1fd-4391-8bab-e693983b9b0e",
        "cursor": {
          "ref": "aaf84b72-a645-440b-918e-36d6b1f24abd",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9d1fc106-eba5-4805-a8ec-fadb97012caa"
        },
        "item": {
          "id": "3b0108bd-d1fd-4391-8bab-e693983b9b0e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d799a308-5ca1-4a1f-8462-c91bcce100d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d977726-6762-45e3-919e-4bbe7be3d755",
        "cursor": {
          "ref": "247fbe2c-795c-44ef-aec9-aaa98c0a14b8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d8d0d3a1-7f59-4fb3-996d-7182dd419d8a"
        },
        "item": {
          "id": "8d977726-6762-45e3-919e-4bbe7be3d755",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "263213a9-0a86-43b1-adee-ba3c2758d5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb374c07-8f01-4668-aefc-1edc4390b9d4",
        "cursor": {
          "ref": "40985eac-1024-4aa7-876b-b9e48b9b7073",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bbc95a11-c7fa-4345-bc7e-8c496225baf6"
        },
        "item": {
          "id": "bb374c07-8f01-4668-aefc-1edc4390b9d4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "36d6fe64-dd5c-4e3d-9b3c-ff05a0719694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f7f743-4954-4929-be71-dc9f0ed02813",
        "cursor": {
          "ref": "c784c0f1-bb02-47ef-9130-11ab5af64cae",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "99f6cfee-f7fa-493b-9a50-e3e5f1228e5f"
        },
        "item": {
          "id": "e9f7f743-4954-4929-be71-dc9f0ed02813",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "519fc1dd-c0ce-4cd5-9b0b-12ccda353be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf3e860-6d84-45ec-959c-57a0b5e7b638",
        "cursor": {
          "ref": "b1acd31b-8250-4945-818e-93d769304bbd",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a7fab27d-cd96-415d-baf2-8b5ff7a853f6"
        },
        "item": {
          "id": "0cf3e860-6d84-45ec-959c-57a0b5e7b638",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cac99148-2d0e-4fbf-97c6-4e82cfd63eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b53336-d26f-47e6-bbbb-584cb44d9771",
        "cursor": {
          "ref": "756519fc-773a-457f-b5fb-fd1132614330",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b1258b03-a1c1-4899-b6d2-ab5c6f46260c"
        },
        "item": {
          "id": "a1b53336-d26f-47e6-bbbb-584cb44d9771",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c0cecb1a-1677-4526-90c1-8cc88ccbe0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c9fb3e-f93b-4df9-8901-37248ae503d9",
        "cursor": {
          "ref": "2577d96d-7057-470f-a684-ee4a1a7df186",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4a1d1f75-9578-4aa3-a038-c6d9dbbd041c"
        },
        "item": {
          "id": "36c9fb3e-f93b-4df9-8901-37248ae503d9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5db6fa82-1061-4d43-87e7-d02c0ad29cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be69fe0b-6b87-4c58-b041-ae58bfadcccc",
        "cursor": {
          "ref": "c0880c83-5ace-4f77-8460-798276538cc4",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a2baa468-6fde-4c42-8274-ad19d4522b02"
        },
        "item": {
          "id": "be69fe0b-6b87-4c58-b041-ae58bfadcccc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fef4db6d-b25d-4e05-989f-4857c44dbcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fd2eab-d39d-46b3-bcd1-12c311da0e57",
        "cursor": {
          "ref": "fe19edbf-bc0a-4877-958b-e4c705b6cd70",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cc2d7291-f053-4808-8c96-127deda36b12"
        },
        "item": {
          "id": "37fd2eab-d39d-46b3-bcd1-12c311da0e57",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f3c152f9-ec78-4edf-a512-f40ec4accd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716c3596-e788-4f58-9158-bf2e7320d6b3",
        "cursor": {
          "ref": "b40297f2-4f7e-4622-b9a8-a554c77d31d0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "82a9c38d-2839-483b-8783-89369e3f3c1f"
        },
        "item": {
          "id": "716c3596-e788-4f58-9158-bf2e7320d6b3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "590493dd-4235-4f2e-9518-665ae95f59e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cda312-c0c5-4150-a351-b90aae5c9e50",
        "cursor": {
          "ref": "16f1449c-65c9-41c3-89df-7663b2f07b39",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ce651134-b367-43bf-8f9a-98c315cb0197"
        },
        "item": {
          "id": "64cda312-c0c5-4150-a351-b90aae5c9e50",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "11a738cc-95a8-4703-be0d-71dc2c24ef7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62949070-3ba5-487d-9180-a02257d63839",
        "cursor": {
          "ref": "9f3ceb29-65cf-49c4-82bd-f81187d77da2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2a481c24-6cfa-41f3-a2fb-3b788b1e83c9"
        },
        "item": {
          "id": "62949070-3ba5-487d-9180-a02257d63839",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "930d303e-c6e9-4cb9-9ace-94610dad95b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c287f6b-c6f9-4202-b72b-364011eadca5",
        "cursor": {
          "ref": "d5d119ec-4557-49af-948b-3a829df6146d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7c35a0a4-f567-4b7d-a66e-3bb37a23399e"
        },
        "item": {
          "id": "0c287f6b-c6f9-4202-b72b-364011eadca5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8862a65b-e419-44de-9d00-1b368472b67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c93b1e9-82a7-4efa-b6aa-a2b50ebdf568",
        "cursor": {
          "ref": "f8f5e2b0-51d0-4909-b1ea-026d9fe0dce6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4cba3a29-e2ef-4fc7-9fe6-643ebe95f5f0"
        },
        "item": {
          "id": "4c93b1e9-82a7-4efa-b6aa-a2b50ebdf568",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fb78e64b-7e03-453a-9f78-86c10a4623c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa16cf66-2b46-44fe-b263-3585a7857a9c",
        "cursor": {
          "ref": "69e14fce-d0b6-4543-af54-38dd148b6164",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6a300eca-1470-420e-a27e-bbc2ba39a020"
        },
        "item": {
          "id": "fa16cf66-2b46-44fe-b263-3585a7857a9c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "31babfe5-3611-485b-b4fb-8604a344ca96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fe50b1-18b7-4815-86cb-f61c85488ef7",
        "cursor": {
          "ref": "3f434229-a384-4c51-9da8-e8e7e738272f",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "70a04fb1-e2e2-401b-b00a-83b794518fd4"
        },
        "item": {
          "id": "87fe50b1-18b7-4815-86cb-f61c85488ef7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cf6fbcda-4cc3-4757-b33f-94637428b640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367c78ee-3437-41d9-ac37-7cdc3213caf2",
        "cursor": {
          "ref": "da1a1b08-8cdc-472e-bcec-79b6aa5432f8",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1b76a5a5-cb8b-490f-af60-c0a902fdebcb"
        },
        "item": {
          "id": "367c78ee-3437-41d9-ac37-7cdc3213caf2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7dcf340f-364b-4eaa-a9f7-5bdbe9198306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2ee712-c795-445c-afcd-9cd90b7efdac",
        "cursor": {
          "ref": "da636d20-8375-45e5-a19d-085d3a8fa2b6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "477696b3-6347-4647-a37e-47f67d53c82f"
        },
        "item": {
          "id": "6a2ee712-c795-445c-afcd-9cd90b7efdac",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "12ee22a1-dbe5-40a8-91fd-aeb846ab2c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89829847-1a69-4a2b-8b6c-6fa7e3d35fd9",
        "cursor": {
          "ref": "5fd7c11a-4843-4e4f-83b2-b9c1d4f006a6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "08c8a63d-abc8-4fd8-9807-0675a8fd68ff"
        },
        "item": {
          "id": "89829847-1a69-4a2b-8b6c-6fa7e3d35fd9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "66518df6-0780-4fce-befa-c422aefcd459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94f4049-dd3e-450e-863e-2b96039665eb",
        "cursor": {
          "ref": "bbe55c00-b363-4025-aab7-1867cf3dfa8b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c21ace87-51ce-4263-8054-da6f8d6818b1"
        },
        "item": {
          "id": "f94f4049-dd3e-450e-863e-2b96039665eb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "858c762d-a259-4b36-933e-f860e90bf2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ab4d57-df4f-4644-b70d-c2d8b4fbf6b4",
        "cursor": {
          "ref": "53a55630-f4cd-4e62-9629-d29b3c393176",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0d425f7f-15fd-4872-bd84-45a5b379fcc1"
        },
        "item": {
          "id": "58ab4d57-df4f-4644-b70d-c2d8b4fbf6b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e2a9a887-b15b-443f-acb0-db67afdfd60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5528ccd-906d-4bc6-97b8-a9bc5fb85e07",
        "cursor": {
          "ref": "eb1496c1-f478-49ca-8447-a70fbfd18701",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c8e6fa15-5a0c-486f-98e0-946cbede7f2c"
        },
        "item": {
          "id": "d5528ccd-906d-4bc6-97b8-a9bc5fb85e07",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "55bda461-6904-4d8b-9560-a592c65db3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4611f59f-bb45-4ed9-a21d-4f1bc7cf25ac",
        "cursor": {
          "ref": "fe978d14-1b42-4c74-a145-c33ed75f8ca5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5e0f7c09-40a7-4638-ac61-494242da0b2d"
        },
        "item": {
          "id": "4611f59f-bb45-4ed9-a21d-4f1bc7cf25ac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "31f1c60c-4d84-43a5-bd09-7120026fe466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d795e58-c1ae-452d-8666-4803be0103c5",
        "cursor": {
          "ref": "350fafc6-4cdf-4ea1-83b1-35fb5464bf9e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b0a30e9b-677f-4cb7-8439-e4efd39ab348"
        },
        "item": {
          "id": "2d795e58-c1ae-452d-8666-4803be0103c5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "39ce3b22-ca21-4842-99cd-6b13194456f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd2215d-7a30-4e0b-9d45-8eaef509dfed",
        "cursor": {
          "ref": "d2db93b4-00c5-4157-adf3-ef5e40b7a3a2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5ba778fe-b611-4562-8ecb-2da803d99e49"
        },
        "item": {
          "id": "acd2215d-7a30-4e0b-9d45-8eaef509dfed",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aae07a9d-40d7-4ed1-b949-02e30d379283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c85dde-5c6a-4b26-ad93-44a3b232f66c",
        "cursor": {
          "ref": "03711035-c40a-444f-b114-64bb076ea85d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9cea58d2-8eb8-4d4b-9c67-1c0d0d8ba914"
        },
        "item": {
          "id": "22c85dde-5c6a-4b26-ad93-44a3b232f66c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "abe5fc95-1786-4997-afe2-3f6aad6b8737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c640c7-eb7d-4b6c-ade6-7fd992e7526c",
        "cursor": {
          "ref": "68d297bc-0846-45a4-87a6-bb5cd3568fa6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "42c848b8-6ebd-45eb-ad14-44304924e6e9"
        },
        "item": {
          "id": "26c640c7-eb7d-4b6c-ade6-7fd992e7526c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e0c7e3c7-aabc-4725-9ab4-72fa97f938df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e3a315-ad80-4146-a5ba-4369c3b99355",
        "cursor": {
          "ref": "a7f97a62-922a-403b-90d9-3516e0686945",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "43cd8449-59d8-430a-8d97-97e4fb7681db"
        },
        "item": {
          "id": "13e3a315-ad80-4146-a5ba-4369c3b99355",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "85278092-2ec5-485b-974d-da3bb86bfef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb531949-7745-439b-a530-5bff415b57a2",
        "cursor": {
          "ref": "9deb51b4-a4eb-4fb6-be9a-7b0a5bcb05a3",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bdf63f93-7118-4894-b1cd-5db89455beae"
        },
        "item": {
          "id": "cb531949-7745-439b-a530-5bff415b57a2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8e74115c-577a-4021-b9b7-9ec59f541e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a3157e-d97e-4cb7-9aad-2b22c3621103",
        "cursor": {
          "ref": "0c7fa2b1-4e94-4cbb-adb9-24a33ddb283a",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b4ebdb46-4c28-4127-b8a4-763331fc2ad9"
        },
        "item": {
          "id": "e9a3157e-d97e-4cb7-9aad-2b22c3621103",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "26b32828-2bea-4b46-beff-b6105ce4faec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af1d6a9-990e-4553-8926-cc36cbd5bf1e",
        "cursor": {
          "ref": "67e53998-dd7d-4831-879c-92a9e7139548",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a2a3bf13-acb4-43ef-a9c8-0ce5943bdfe9"
        },
        "item": {
          "id": "5af1d6a9-990e-4553-8926-cc36cbd5bf1e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "eb92f2b9-57d3-474f-b7e8-0a80778eeac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0258a359-1560-46a3-9c6a-16b4b6bc2ea1",
        "cursor": {
          "ref": "c70225c5-83b5-423b-92a3-dabb0c720fe7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f82b316f-5a69-4842-a0ff-758e43755a66"
        },
        "item": {
          "id": "0258a359-1560-46a3-9c6a-16b4b6bc2ea1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6ae511da-f876-44f5-91e2-f31cc11ebb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8067a34-fb8b-4cd0-a3c2-72bcf0b034e0",
        "cursor": {
          "ref": "b6c4ca74-62e5-4fe2-a37a-b20cb5826aa0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "16c39c60-f78e-4971-a648-72871a770978"
        },
        "item": {
          "id": "e8067a34-fb8b-4cd0-a3c2-72bcf0b034e0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "70f46b7b-7c04-4e75-ac0b-e9e16b21f569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c080dca4-db51-41b5-ae17-bbf5ec0bb425",
        "cursor": {
          "ref": "e2158284-136a-4178-a8e0-9d87dc5d3fd8",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7f90be50-fab9-407e-a1b1-866df82cee32"
        },
        "item": {
          "id": "c080dca4-db51-41b5-ae17-bbf5ec0bb425",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "61fb7e71-548e-40d3-9e9e-1001ab4097f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce31521-3f27-4297-8f0a-cea3a4f429ed",
        "cursor": {
          "ref": "38840db6-a123-4ac6-bfb7-c54277f464e9",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bcb83aa6-285a-44fa-848e-d28cc5d9c1ec"
        },
        "item": {
          "id": "dce31521-3f27-4297-8f0a-cea3a4f429ed",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "eb2ac116-4447-4067-a011-d6acac150429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13876b99-68d0-4a4d-891e-dde5914ea37b",
        "cursor": {
          "ref": "98b0d714-904a-49f4-bfc1-67b251e07778",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0005b313-da9c-423b-a777-fd26b9ba1a08"
        },
        "item": {
          "id": "13876b99-68d0-4a4d-891e-dde5914ea37b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "863f3851-d8f5-4f90-a31c-166cfb525f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa66d5b9-8a01-4994-9114-1560d6e9a984",
        "cursor": {
          "ref": "7a6d3735-ab4a-4427-acb1-47b8a7dfa755",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5a8181ad-5e7f-4c75-9809-fcc98de41744"
        },
        "item": {
          "id": "fa66d5b9-8a01-4994-9114-1560d6e9a984",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c40ddba0-84ff-4b7a-ace6-002471c611cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fc4fa1-f8a0-4a62-ae5f-8495488ab40c",
        "cursor": {
          "ref": "2f60bdaf-b392-424e-9f4e-f978497a55bd",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a99636cc-cb4a-46ce-b12f-347272426d89"
        },
        "item": {
          "id": "53fc4fa1-f8a0-4a62-ae5f-8495488ab40c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b00d3175-6bc5-476d-9723-577ca2243196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cf5032-53cd-42bf-81df-70a7bcc76e0d",
        "cursor": {
          "ref": "e53a6148-f58f-402e-a7e0-5e3aebd01960",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "779624c3-3517-4cf4-b844-aee5531d1411"
        },
        "item": {
          "id": "97cf5032-53cd-42bf-81df-70a7bcc76e0d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "89e05853-d10b-4816-9ed5-39001029c2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc5dc34-55a5-432b-a0bd-8fd1ee728b2a",
        "cursor": {
          "ref": "087b40f5-fe96-4ee2-bf62-8b47ec543fb9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d979bb57-8df3-4c46-818f-218a539def10"
        },
        "item": {
          "id": "1bc5dc34-55a5-432b-a0bd-8fd1ee728b2a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "51ef75a6-01c7-4973-9f37-6e7b28630f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a18782-d51d-4635-8178-56189f57953f",
        "cursor": {
          "ref": "9ef2f0de-fa87-4f5a-855a-144a1c1df237",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "11131f94-9646-4707-b5ec-6bbeb2beb29b"
        },
        "item": {
          "id": "a2a18782-d51d-4635-8178-56189f57953f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4dedc26c-3492-45a3-a419-02b1050e30fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c3dba2-e1cf-4a77-b09b-6b06b3081a42",
        "cursor": {
          "ref": "35743323-53d3-4f91-a300-defde9b211db",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "406c1de4-19b2-49c4-ac86-0b5f9cd3ccb7"
        },
        "item": {
          "id": "b5c3dba2-e1cf-4a77-b09b-6b06b3081a42",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "28489a7f-7ce0-4323-ac03-c38a0adeba30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae73f5f3-dedb-425f-9378-081576874aba",
        "cursor": {
          "ref": "02d93a82-a133-4a28-9515-e55137464227",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "644dcc30-c3ad-493a-9273-4ed832eb11a3"
        },
        "item": {
          "id": "ae73f5f3-dedb-425f-9378-081576874aba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b2ea8132-7bf5-4f90-84d1-0248b271ae7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18fefe3-6eca-40d3-8f98-bb9231cd617d",
        "cursor": {
          "ref": "5c6ae694-99e1-4b6d-b0f5-219a2d35bd1f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0785c092-16b6-4805-9301-153c25734ad8"
        },
        "item": {
          "id": "d18fefe3-6eca-40d3-8f98-bb9231cd617d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8d13b861-a66b-4e2e-9315-5be5ffa8ea3d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "8dcedaaa-08bf-44b8-8665-3247ad4b11d9",
        "cursor": {
          "ref": "6844df86-cd77-4b9a-98a7-2c8309a93c11",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e9345b6f-3c93-4b5c-9cc5-e383929c53bd"
        },
        "item": {
          "id": "8dcedaaa-08bf-44b8-8665-3247ad4b11d9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9e924804-de1f-48c7-b86a-cef67c8e8bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826f9b25-4334-44d4-80e1-f0f35a76f4cd",
        "cursor": {
          "ref": "4a7dd55b-eed9-48ac-918a-910a4c1e6f97",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cf2da809-8109-47b7-ad5d-3b28719dbf21"
        },
        "item": {
          "id": "826f9b25-4334-44d4-80e1-f0f35a76f4cd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6f6b92ac-5840-4941-8714-33ceb5844e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526e3e75-c684-44c3-ac32-2e5cc22a334c",
        "cursor": {
          "ref": "e6a05bfe-c8fc-4157-9906-1874d9c0cac2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d47a9e61-6d6d-49d4-930f-cfc6af46cc0d"
        },
        "item": {
          "id": "526e3e75-c684-44c3-ac32-2e5cc22a334c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0b59c2f4-091e-480c-8118-a6df63a6bca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86996edc-9801-4e5f-90e1-0dbc3309cb4b",
        "cursor": {
          "ref": "be39aa7d-8358-40d1-ac7e-f15a1f570a85",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9fa91058-c5cc-4a1e-b0c4-ed2f829741a9"
        },
        "item": {
          "id": "86996edc-9801-4e5f-90e1-0dbc3309cb4b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "61ce059a-cc15-4296-ac7a-db553c707950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be84c223-7fbf-4280-ae30-5234b14ded1f",
        "cursor": {
          "ref": "6ff941db-05b0-4c97-9df4-0f2ae79555e1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b689e283-4723-485b-ac71-73135a739059"
        },
        "item": {
          "id": "be84c223-7fbf-4280-ae30-5234b14ded1f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4ea831b7-5e31-4a59-844b-3136130b87d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6be1e6-91b2-476c-8b08-934a64aebc71",
        "cursor": {
          "ref": "81645091-e32c-4252-977e-15c970c43176",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c80593f1-1639-4143-86be-6827be6b835f"
        },
        "item": {
          "id": "ab6be1e6-91b2-476c-8b08-934a64aebc71",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "af19d90f-2fbf-4fed-9411-13fb4aece0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d3fef3-96b9-4fb3-977c-078c88274d96",
        "cursor": {
          "ref": "fc113bb7-03f6-4e16-a861-3437c163aa90",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ed7fa436-8fad-49ea-b591-d28908746ba5"
        },
        "item": {
          "id": "b8d3fef3-96b9-4fb3-977c-078c88274d96",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "51367189-994b-4253-9450-11386bc22079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa62b6d-c4ab-400c-a515-2f6b0e5ec5bf",
        "cursor": {
          "ref": "cbf4e334-d867-4534-93b5-addb47060c85",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4281409e-17fb-482c-9a3e-d72eb4e72d70"
        },
        "item": {
          "id": "eaa62b6d-c4ab-400c-a515-2f6b0e5ec5bf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e0cd94cf-1b81-42d9-9878-5ecdc0271ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7275be-85fa-4f24-ad8b-5fe67b894489",
        "cursor": {
          "ref": "0c4117d2-f18c-4d99-9487-fa8d8bc711ab",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "51f23cbd-3319-48db-840d-eef3115a576a"
        },
        "item": {
          "id": "ce7275be-85fa-4f24-ad8b-5fe67b894489",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "490ea9c3-1909-4141-b6a8-040786bc5aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2628d280-e0a0-4778-b6d7-ed547c9b8541",
        "cursor": {
          "ref": "17e3337a-f469-4279-a9ac-0c26889cd17d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8c04f58c-6607-4006-8da2-4175b79a3cf2"
        },
        "item": {
          "id": "2628d280-e0a0-4778-b6d7-ed547c9b8541",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dea9b4ee-8724-4dd4-877f-1b6c2812d440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca3b250-eb03-4a37-80eb-07a2d673a1a4",
        "cursor": {
          "ref": "9835b01e-755c-4986-9821-14421b537110",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d2aeab4b-e464-4943-b752-0bbf9b871eca"
        },
        "item": {
          "id": "6ca3b250-eb03-4a37-80eb-07a2d673a1a4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "72cf569e-01a9-42b3-bd2e-025ee7cb3cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c063a2b-ced2-4407-938d-aa8f4259923f",
        "cursor": {
          "ref": "45dfc130-9074-4264-823d-74ea8079d3d8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3040aec6-7035-4ae0-8089-2dc06b0b364e"
        },
        "item": {
          "id": "6c063a2b-ced2-4407-938d-aa8f4259923f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7ff0e88d-f6b2-4d1b-80a8-0d06f3bea24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add8e192-ec09-4b8e-ba1e-76a4c9c55f2e",
        "cursor": {
          "ref": "3b4aea15-30af-484b-a617-5b72670b001a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4308668f-5bbb-4cef-b379-c1ebe84287c7"
        },
        "item": {
          "id": "add8e192-ec09-4b8e-ba1e-76a4c9c55f2e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "423c8340-698e-4b29-8028-f0b360dd2d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53918274-fb7b-459a-bfc0-6b57ff827a8c",
        "cursor": {
          "ref": "860d6f8a-6756-4a3b-a0f0-23dd0f39922d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5e36746e-30d8-4a05-96d1-b2cbbf5c773a"
        },
        "item": {
          "id": "53918274-fb7b-459a-bfc0-6b57ff827a8c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "dbea8262-a073-4cbd-975b-42826c19bb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a895eca6-4ec6-43d5-8bbc-7d2d6e7d90db",
        "cursor": {
          "ref": "ed031e82-b90d-4dcd-b9c4-e490c03509c7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d535967c-3aa8-4356-b749-5d071ad090a9"
        },
        "item": {
          "id": "a895eca6-4ec6-43d5-8bbc-7d2d6e7d90db",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c2a81ff9-56b2-4f17-837d-c7e9aa254fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008d8837-be0f-4d6a-8e25-3356681e654e",
        "cursor": {
          "ref": "7828ef24-1f59-453f-b942-3a33e911128c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a06590b5-ad88-40c2-a750-45572b3638c8"
        },
        "item": {
          "id": "008d8837-be0f-4d6a-8e25-3356681e654e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "765c5742-35a3-4a85-81f5-bd91beaa40ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79566df-6bb8-4b24-adf9-2f4cfd4e622c",
        "cursor": {
          "ref": "b6d4d5fd-46ab-4414-aa68-eb90ea5550bb",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9a2e93ca-1392-48b5-aa2d-e0088328d7ad"
        },
        "item": {
          "id": "f79566df-6bb8-4b24-adf9-2f4cfd4e622c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "efb2af29-29d7-4952-85fc-739f2f9ce741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e468321-4797-46db-a50b-99abd7ab7ce3",
        "cursor": {
          "ref": "c8862101-1720-4f1e-9619-61e6c67bdbbf",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7e9582af-56ee-4690-b93b-fe6deaa3e777"
        },
        "item": {
          "id": "5e468321-4797-46db-a50b-99abd7ab7ce3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "63e5c233-3bc2-49be-b5b8-bf1bcf609945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09efe889-af2c-4d8b-9fed-df8d6510de96",
        "cursor": {
          "ref": "7107f169-3c28-485a-9465-092751cb6687",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0b5a0da5-b9c1-46bf-8d09-eef7d7f303ce"
        },
        "item": {
          "id": "09efe889-af2c-4d8b-9fed-df8d6510de96",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "df39b0e2-ae8f-4bec-a004-7be47011a902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bd700d-6890-454d-8a10-7570bbc14599",
        "cursor": {
          "ref": "3b1df19d-7e94-4a22-a589-b1cfe96fae24",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "38cfefad-5286-4480-bb2e-b4e97b0add21"
        },
        "item": {
          "id": "10bd700d-6890-454d-8a10-7570bbc14599",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2947f53d-da34-4758-987f-0fb97383049c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e380b3-b684-4540-a8d5-74387a0cbc45",
        "cursor": {
          "ref": "3e2a4538-26d4-4d09-9b58-ee26516876b7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "34ebdee9-8467-414b-b3f5-f1b501b7d6ca"
        },
        "item": {
          "id": "22e380b3-b684-4540-a8d5-74387a0cbc45",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "58260ced-f512-4f9d-8a0f-32bbdc354cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc4d909-2b5b-45f4-9e68-f63307405d43",
        "cursor": {
          "ref": "2eabec48-b8a3-4883-b1be-2a9e6ac80541",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1e73567f-bfe7-4c5e-968a-c2eba1ed1bb9"
        },
        "item": {
          "id": "edc4d909-2b5b-45f4-9e68-f63307405d43",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7e4f294d-7ee1-442b-8372-ff14b5741338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ae3a10-88fe-47d3-949a-ecffab6a7efc",
        "cursor": {
          "ref": "2209daf3-896a-4cb4-bd60-1e039c89db08",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5935b373-250a-4081-af45-c38a08e06b0b"
        },
        "item": {
          "id": "47ae3a10-88fe-47d3-949a-ecffab6a7efc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "30dec468-9686-4b91-961b-03e666116c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0508d0-4672-4fec-b8b9-4988687990eb",
        "cursor": {
          "ref": "40e24005-4161-490f-90e6-4d1aca17b74f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b2a96bed-da7f-4e40-b57e-020a85c3cd0f"
        },
        "item": {
          "id": "de0508d0-4672-4fec-b8b9-4988687990eb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "71e90791-948b-4f08-be4f-da9e45a071a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710590f8-c747-4418-b920-6df8a2964dfe",
        "cursor": {
          "ref": "ec931f48-8577-4488-bb94-0df2b4d047c8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e7c3e912-737b-4624-ad24-ea53d674977b"
        },
        "item": {
          "id": "710590f8-c747-4418-b920-6df8a2964dfe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6ca0b6e3-43ac-4ec5-882d-81a46eee9b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69695627-26cf-47a1-bd85-2d30124da578",
        "cursor": {
          "ref": "e696a66b-c45a-4c7e-be9d-5865919ec939",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "16802866-36bd-4c86-b2aa-6b64cba20efd"
        },
        "item": {
          "id": "69695627-26cf-47a1-bd85-2d30124da578",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0f7551ec-a9ea-4c99-b07c-3af3a34a91fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098c59b1-2122-4871-be9b-530a894726b6",
        "cursor": {
          "ref": "e9ceb0e5-595d-452a-891e-b84ef6bee96f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e94d06e9-dcf8-4b68-b254-24acd5805f56"
        },
        "item": {
          "id": "098c59b1-2122-4871-be9b-530a894726b6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "77cf3a7e-65d1-45d5-ad4a-9afe80b0c4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649022d5-be52-4323-b50f-87fcf78eaa85",
        "cursor": {
          "ref": "6a5b5b05-76aa-411a-a3bb-349eded6e259",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e1f65c5f-9e3e-4198-89a1-f3f0aa895c9b"
        },
        "item": {
          "id": "649022d5-be52-4323-b50f-87fcf78eaa85",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6ebed15d-b866-49da-9e69-653afd45664e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95370541-67de-471a-a8a0-cf2a502ce408",
        "cursor": {
          "ref": "93e6da7c-3452-49f9-89de-c605e2509675",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "22e86fa6-ac41-4df1-beb1-f8ce07e1d434"
        },
        "item": {
          "id": "95370541-67de-471a-a8a0-cf2a502ce408",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2f7d667a-bd2b-4bc0-946f-d1c819d5af91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5579ef-918f-4cb9-8acf-848c8bb70830",
        "cursor": {
          "ref": "6ed9659e-a4ca-4141-ba02-cb749eddfcca",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "45668909-fe62-4754-b72a-19f45ac4bb86"
        },
        "item": {
          "id": "cb5579ef-918f-4cb9-8acf-848c8bb70830",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ce29d315-840f-4711-9b26-ff06055716e1",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "95a5220d-148c-4c72-aefc-fd1f5455007c",
        "cursor": {
          "ref": "184213ec-7a4d-4579-ae55-4c2a3934ca20",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d5e00546-0889-404d-b875-1bc6516112c1"
        },
        "item": {
          "id": "95a5220d-148c-4c72-aefc-fd1f5455007c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "64b0691c-2043-4e93-8e59-d05f9c7f3c63",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2bcfd3c7-df30-4746-bd44-bf919f6768d7",
        "cursor": {
          "ref": "6bc9a74f-29ac-436e-8777-125228fcd498",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3c4d3607-d7de-488e-bd7b-e281c98d922c"
        },
        "item": {
          "id": "2bcfd3c7-df30-4746-bd44-bf919f6768d7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0c8a3f97-d7da-462e-8236-ddc688f3c01a",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "17947530-15cd-4caf-ad8f-a777afb314c0",
        "cursor": {
          "ref": "3f46f9e1-2930-4848-920f-2d1320324f20",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c67a65e5-8453-498d-938a-93039dfcb9d4"
        },
        "item": {
          "id": "17947530-15cd-4caf-ad8f-a777afb314c0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ff37b170-3e17-46ab-b841-bffcb5a012a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8376bca9-4c78-46a9-bb12-02256018b4f1",
        "cursor": {
          "ref": "124a2493-bd15-4e25-8ebe-c3ec842d7520",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4e11d361-00a9-436d-b962-72d8ab44ea9a"
        },
        "item": {
          "id": "8376bca9-4c78-46a9-bb12-02256018b4f1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ac68a451-f807-4d52-8948-e5d94e793569",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "45eeb7b5-4411-491a-8951-6d08a415ce37",
        "cursor": {
          "ref": "836ea354-aa3a-4d46-bab7-16bc04830bcc",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ddd74e6a-c4d3-467f-8af1-061094ed2c78"
        },
        "item": {
          "id": "45eeb7b5-4411-491a-8951-6d08a415ce37",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eed38e15-7b4d-4812-a2d3-84126994a6cc",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "479fda8f-f66c-4379-815e-c2bd2c8cc285",
        "cursor": {
          "ref": "4253d679-5db4-4e43-80b7-4b948acc5380",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "84e8c00d-2c3e-427f-b90b-f31f04b0ef80"
        },
        "item": {
          "id": "479fda8f-f66c-4379-815e-c2bd2c8cc285",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "46a4ef0c-4298-4898-9ea0-b21600728ba5",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca4b8e6b-a3ac-4ee7-95cd-eaaba6fe1789",
        "cursor": {
          "ref": "69500cc5-d3da-4d17-adfb-88577c2e5d7c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2a1fa229-c688-49bb-9330-1cc023112529"
        },
        "item": {
          "id": "ca4b8e6b-a3ac-4ee7-95cd-eaaba6fe1789",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f7a80af2-1b29-4519-8adb-7aadb5b864a4",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f30f6373-c0f8-436e-bc2e-70c343541bbd",
        "cursor": {
          "ref": "872a388e-cf80-494a-99e5-4573a1e974e0",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f9070735-8c57-4fda-bfb4-d3664f9611e0"
        },
        "item": {
          "id": "f30f6373-c0f8-436e-bc2e-70c343541bbd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ea906e58-66b2-4ba9-b9f7-7cb88745b623",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1b3a36a0-c7c5-4483-a97e-89087502fb95",
        "cursor": {
          "ref": "5bc355a8-ca11-4a37-96ec-af3567b15079",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "66e069fa-f25d-4e8e-8edc-b5ec51f82e4a"
        },
        "item": {
          "id": "1b3a36a0-c7c5-4483-a97e-89087502fb95",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "178ee656-63c9-47b2-8a79-a62b7f188384",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ce768763-93c6-4f54-9138-49858beaf0f9",
        "cursor": {
          "ref": "5765fa20-754f-4d04-ba15-6639f8bb2c90",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b61d4639-1b61-4af3-a812-885732c9c38a"
        },
        "item": {
          "id": "ce768763-93c6-4f54-9138-49858beaf0f9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "740286a5-17d6-4314-a54f-adb766e03113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5df020-add7-4081-a167-88a75e1671e6",
        "cursor": {
          "ref": "891cc00b-9b42-40d6-b35e-5bd744878c5e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "67a36e9c-83c2-41f4-8e2a-f4fb03de78fc"
        },
        "item": {
          "id": "af5df020-add7-4081-a167-88a75e1671e6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fe583ec7-3dc5-4fee-bcd9-5d2a1c86a1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374495af-f480-408f-bb5b-c0c5b428794f",
        "cursor": {
          "ref": "1ff4f16a-2407-41dd-8d7c-9e50607786ad",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f0adab89-3151-4761-ae8e-c66d3899ea67"
        },
        "item": {
          "id": "374495af-f480-408f-bb5b-c0c5b428794f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "948ab404-d76e-46c1-97cc-3b7f3e8c2754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4499b3-42be-4b6c-a970-0da99a1f4b15",
        "cursor": {
          "ref": "f5b1eccd-4aae-4076-b79b-e2c12db0b084",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b99b714-a5d0-4488-bed1-fd430026671c"
        },
        "item": {
          "id": "aa4499b3-42be-4b6c-a970-0da99a1f4b15",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d1abb000-d62b-4744-89e7-78baa2d18b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74af6a80-0d48-4bec-a158-b42d8e382431",
        "cursor": {
          "ref": "bff463af-cb81-4280-bc87-c792bd7239d9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "577e40e7-b35b-4608-8bea-54ef31dafe3a"
        },
        "item": {
          "id": "74af6a80-0d48-4bec-a158-b42d8e382431",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7a85409f-120e-43a5-874b-108573c8a355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7660c936-91a3-4f83-a961-4f3fcd1bd17f",
        "cursor": {
          "ref": "a5a1d144-3b77-4814-af4a-c632027484d3",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9080c478-ca26-48dd-b963-92a385220b02"
        },
        "item": {
          "id": "7660c936-91a3-4f83-a961-4f3fcd1bd17f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "45b45fed-f997-4c16-ae1b-9073b44bc7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bee04ec-5c74-4bc2-a9e1-d87c4ec3125b",
        "cursor": {
          "ref": "52cd7606-3564-4507-beef-e603fd219cdc",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5413d6bf-bef1-47af-8dec-117143ccd9fe"
        },
        "item": {
          "id": "1bee04ec-5c74-4bc2-a9e1-d87c4ec3125b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4fce2024-3478-4841-ac53-058cfbc28c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c029a02f-a379-469f-aef5-1bc872ba33ec",
        "cursor": {
          "ref": "464dcd76-25de-45a9-a085-a8b6f438863c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8bdce720-d6ca-4d9b-8540-8d0a5b0bbfe9"
        },
        "item": {
          "id": "c029a02f-a379-469f-aef5-1bc872ba33ec",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "081897d5-ff17-4501-9ba7-0435e3810352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db51c921-c069-4636-9462-b9b6bf6ae981",
        "cursor": {
          "ref": "99069fea-3daf-478a-938c-8fde298ed0ee",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "520f4965-4827-4554-941b-9fa9ace6f361"
        },
        "item": {
          "id": "db51c921-c069-4636-9462-b9b6bf6ae981",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "87ad5100-0421-4d2d-8689-3a1bea440bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6756ea3-aac3-4cb7-a4f2-7a5f00039496",
        "cursor": {
          "ref": "10cf5ae3-8648-4502-abc1-ec275fa58eb0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c8409206-ec22-4525-b268-8a96ff2342b6"
        },
        "item": {
          "id": "b6756ea3-aac3-4cb7-a4f2-7a5f00039496",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a6ceb8b7-e088-4721-be68-ad8e17f6c4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde79ab2-d47d-4131-b74d-505c741493db",
        "cursor": {
          "ref": "f3780227-39eb-4de8-9b84-aa68e6f0ddf9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1729ff20-8260-40e2-a8ed-c2b5651494c2"
        },
        "item": {
          "id": "fde79ab2-d47d-4131-b74d-505c741493db",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5306d969-74eb-4ac6-8747-70daa7e77e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52156588-1831-4e32-8b28-f788b86f10e1",
        "cursor": {
          "ref": "3d2e3ca3-d2fa-40b4-9758-cb7f0860bc31",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "423db8f7-4ad4-40b2-8aac-9e8905f68ecc"
        },
        "item": {
          "id": "52156588-1831-4e32-8b28-f788b86f10e1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6c9355d8-d8af-427d-acf8-aa9a5d17cadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc5d7b0-e9bb-4e77-8ebe-972b7d66a461",
        "cursor": {
          "ref": "1c44247d-982f-4d2b-89e2-fb89e6e1782e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b61c533e-6369-47b2-8405-50f7a5914694"
        },
        "item": {
          "id": "bbc5d7b0-e9bb-4e77-8ebe-972b7d66a461",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "05560b39-85b1-4cfc-b456-0d03c4dde604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a36fc8f-08e1-4a72-bdb5-1598e3948bee",
        "cursor": {
          "ref": "404b8e2d-8626-45c2-a0cd-09bfeda6616b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9926baf-2b1f-4899-9f5e-da5709c0f2f8"
        },
        "item": {
          "id": "8a36fc8f-08e1-4a72-bdb5-1598e3948bee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8336c255-e074-4b90-851f-4b1bd9406e2c",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "400e5d73-d9af-49d3-bc39-282f706c625e",
        "cursor": {
          "ref": "029ddcb3-4316-4c8d-b9c8-342b376d9955",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bcd887b0-7f61-4313-a877-fa68fa373336"
        },
        "item": {
          "id": "400e5d73-d9af-49d3-bc39-282f706c625e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ef15692d-7974-4d94-b4dc-1081078c7a77",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9aed9d99-979c-459f-af21-b89bc080aa58",
        "cursor": {
          "ref": "0c2e2835-1d8a-43f2-851e-4086de5e4072",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1ffea057-33e0-4a33-a87f-680fd4c96d90"
        },
        "item": {
          "id": "9aed9d99-979c-459f-af21-b89bc080aa58",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "efd4f0a0-f167-4919-a1b3-b12508482556",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "77eb76f4-42cd-48bc-981b-d88817eb7e41",
        "cursor": {
          "ref": "c0477cca-bfc8-44c7-955b-bd622012492c",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3bf7c5b5-2182-4729-b410-0b4ff373a5a5"
        },
        "item": {
          "id": "77eb76f4-42cd-48bc-981b-d88817eb7e41",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3481dbe6-ba54-4708-904e-4a7323f47b1e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4f33ee39-3e45-4c11-865e-f8b6dc2f021f",
        "cursor": {
          "ref": "c2f174e0-972b-4cff-8e29-9ed44fed7cec",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e106f913-f19b-45dc-8a35-35c10dc69203"
        },
        "item": {
          "id": "4f33ee39-3e45-4c11-865e-f8b6dc2f021f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7460b24e-8685-485e-8702-4e928de3799c",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8f4ad42e-300f-451e-8ec4-d46adcf4f084",
        "cursor": {
          "ref": "dc688f03-8d98-4690-960c-c656273ce9d9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b2bf6244-9427-4b2c-93da-e17e9c15db9e"
        },
        "item": {
          "id": "8f4ad42e-300f-451e-8ec4-d46adcf4f084",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a50189c6-f77a-4b87-82fa-9e5f92361711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bea8aba-c32a-4011-bedb-9b1d3137ed87",
        "cursor": {
          "ref": "7c3c3eef-f0d7-43bb-9016-144f3c6bc0dc",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "eab413dd-2f0a-4839-9829-96ff5ed5b048"
        },
        "item": {
          "id": "0bea8aba-c32a-4011-bedb-9b1d3137ed87",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "46c6106a-5f50-4e27-b6f4-f790177784db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa85ed5-e7fb-441e-812d-3f41ae66bf0f",
        "cursor": {
          "ref": "c88f85a0-c699-4c00-bba9-2977d051ada5",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "08d8ddf4-5c96-4e6a-82b6-a3552eb4056d"
        },
        "item": {
          "id": "ffa85ed5-e7fb-441e-812d-3f41ae66bf0f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "582e1f5d-0a1d-43ac-8d3a-4e4ffd0abc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20f4de1-ca7a-4f6d-a289-0039970a390b",
        "cursor": {
          "ref": "fbd4008b-0328-4e23-a9f3-b9e552b70bfa",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7ef25fc5-9482-4f59-ab1c-ff538d2e15db"
        },
        "item": {
          "id": "c20f4de1-ca7a-4f6d-a289-0039970a390b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e06bf3f1-14d6-442f-8e71-47c5a8ce5ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6d2926-3b3c-4441-93d5-2d485f64b608",
        "cursor": {
          "ref": "73b571bd-5c56-49f8-be59-923c96bad521",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "862424c3-354e-4d67-ac42-6431d2d533bf"
        },
        "item": {
          "id": "1e6d2926-3b3c-4441-93d5-2d485f64b608",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "962019bc-6b1c-45de-ba05-101fcf2a0c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b10b541-693f-4354-b1f1-324807522bcc",
        "cursor": {
          "ref": "2f2c3dbc-419b-4f18-a3d9-966f8964f9fb",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1d481278-7c50-4440-9d90-37cf6f8d7627"
        },
        "item": {
          "id": "6b10b541-693f-4354-b1f1-324807522bcc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c7c7c072-dc0d-4234-b8d6-f8a30716e2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e81189-fca2-4a2b-924d-0529a22b9a30",
        "cursor": {
          "ref": "4065291b-7bae-4134-9cbc-0ddb30aab343",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "79411651-8ec3-481e-9951-f964b88d5fae"
        },
        "item": {
          "id": "e9e81189-fca2-4a2b-924d-0529a22b9a30",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "241d8038-c36f-44eb-a4d3-053c02849da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b903dae-6ee3-421c-8946-a75366570b76",
        "cursor": {
          "ref": "e8ac29da-d422-43b7-9262-0d73b93a0f51",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "47bfd397-248f-46b3-aec5-911be8e08983"
        },
        "item": {
          "id": "1b903dae-6ee3-421c-8946-a75366570b76",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "19300ca7-2134-452a-9c83-75b3d0217132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3201f1c1-2b95-437b-9dd5-cbe3675921e0",
        "cursor": {
          "ref": "be3cc7b2-f5bf-403a-8011-fd67a2075408",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "32b6051a-bd45-4b5a-8649-b1c29f0ccdaa"
        },
        "item": {
          "id": "3201f1c1-2b95-437b-9dd5-cbe3675921e0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "25e39849-9949-487d-a67e-d9c33b329d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea707755-3cf2-44be-90b8-a307aebdd8a7",
        "cursor": {
          "ref": "6c95d23e-9491-40cb-821d-1851dc420a51",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d744dc65-9f24-4427-9706-42ac92d06f50"
        },
        "item": {
          "id": "ea707755-3cf2-44be-90b8-a307aebdd8a7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "50fbc0b5-35a1-4fcc-9e83-c1d81778ad98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020c6eb9-77da-425f-bf2b-f58d6041f681",
        "cursor": {
          "ref": "8359badb-42d8-4bc3-8e60-7af03b9160a8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a6b339b2-5448-4fc1-9c7b-ff5c3755381c"
        },
        "item": {
          "id": "020c6eb9-77da-425f-bf2b-f58d6041f681",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "48884e09-7300-41cd-b767-258ee7f9ba24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c139944-3b81-4796-996b-41e9272697d5",
        "cursor": {
          "ref": "d3d05bac-0714-4718-abdc-dec67bb25f0a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "20800c84-e49e-4e84-96d3-5e1749bc1e3d"
        },
        "item": {
          "id": "3c139944-3b81-4796-996b-41e9272697d5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6196f2f8-bc60-4cb4-954a-47eaa7a56068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de27f066-0b49-4bea-b0cd-e3ea4da79d7a",
        "cursor": {
          "ref": "88cc5053-3ced-47f3-84b9-d5ff0c705fd8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "cfa4266f-2570-41df-aa12-c7044c16377d"
        },
        "item": {
          "id": "de27f066-0b49-4bea-b0cd-e3ea4da79d7a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4de6c0d6-d591-47bc-9f40-ebb2e1c56c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33077811-60a8-4346-8d4f-8eab6721642b",
        "cursor": {
          "ref": "7a78b78a-ca23-40a9-8991-db78e587c139",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bad0eed0-25bb-4abd-960c-96af7d3226aa"
        },
        "item": {
          "id": "33077811-60a8-4346-8d4f-8eab6721642b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af877d4f-20fd-43fa-95e4-037cb944c80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce2514b-2452-407c-bf8e-05e4bec3e954",
        "cursor": {
          "ref": "ceec3d21-cc3a-4b0d-b90b-05303aa221bb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "15ae639c-d6b7-4c27-86b2-81bef35940d5"
        },
        "item": {
          "id": "bce2514b-2452-407c-bf8e-05e4bec3e954",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "27fcbc05-9448-4f78-833f-0d4fe9c2e20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b6c56f-27b8-4001-a738-831d7bbda2fa",
        "cursor": {
          "ref": "521576d0-3986-4b60-befc-35c8115bca80",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3741a312-d062-4364-be94-75668fcd6e8f"
        },
        "item": {
          "id": "d4b6c56f-27b8-4001-a738-831d7bbda2fa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "11d19801-4bf3-45d1-a742-13c2229bd8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec00d60-80f1-47aa-b615-3460fe60ac8b",
        "cursor": {
          "ref": "3807f757-e730-41aa-ab51-8770f24bb23b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "97f7bc97-9795-440e-9c1d-b7bf70410544"
        },
        "item": {
          "id": "bec00d60-80f1-47aa-b615-3460fe60ac8b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b057979d-5b65-47ba-9172-23200298e5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da659b8-2c17-486f-9df0-490ae5a59458",
        "cursor": {
          "ref": "79bbfefc-5d5a-483e-a538-8bc562c2cad8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "79112b97-4bd4-4729-97cb-cfc161915806"
        },
        "item": {
          "id": "6da659b8-2c17-486f-9df0-490ae5a59458",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a539b973-0da6-403a-8414-f74c377abf40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c629044b-c926-4180-9f02-eec759b7ed58",
        "cursor": {
          "ref": "965f43c6-a0e1-4422-9ade-db963e3f8746",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "95c21d9d-7a76-4c9a-8c51-e36af8f75b20"
        },
        "item": {
          "id": "c629044b-c926-4180-9f02-eec759b7ed58",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "865514be-0ab7-4c63-9676-c17d1668387d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893ea9d0-c6a0-4dc6-9853-869027f3e20a",
        "cursor": {
          "ref": "7a883562-8c71-43fc-9de6-3ece8cfc9c23",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "784e7952-3a20-4b2f-8874-2b4bc6469a8c"
        },
        "item": {
          "id": "893ea9d0-c6a0-4dc6-9853-869027f3e20a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ace48a84-daad-41a3-9ad6-b1d51708b006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91336454-29f6-43e4-9d13-2df571a4a736",
        "cursor": {
          "ref": "236d2f42-448d-4e52-9ced-081b5589830f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "db6bf67a-a18d-4a2b-8447-375f4f037ed6"
        },
        "item": {
          "id": "91336454-29f6-43e4-9d13-2df571a4a736",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9729e2a1-7fd7-4d18-b918-7d9fa1812325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac0faeb-326e-4e3e-be20-67a1d1a309e5",
        "cursor": {
          "ref": "73e2a60e-f83f-4ceb-bc51-f9983bcece63",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "652e2fed-0b7a-48cf-bd70-686df14ff4d9"
        },
        "item": {
          "id": "3ac0faeb-326e-4e3e-be20-67a1d1a309e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0158fb11-64eb-4c80-9cbd-1d36f56a7bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fbbc8d-6251-414f-9399-60d970bae6de",
        "cursor": {
          "ref": "bc4344b5-8b61-448e-b5ca-f2d16b3b0b8e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "857f820e-2274-4908-a1bf-f5cb09cc5df7"
        },
        "item": {
          "id": "25fbbc8d-6251-414f-9399-60d970bae6de",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7ef126e5-8d92-4f57-a186-bc0cb11b54a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2f5a00-d663-4806-8f87-7084484cb6ac",
        "cursor": {
          "ref": "200a8683-af95-4bf8-b6d0-e48d045fcde1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f5f087ed-2cee-4c50-8c90-11a966342285"
        },
        "item": {
          "id": "ca2f5a00-d663-4806-8f87-7084484cb6ac",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cf2cfeae-c790-442c-9223-4e28636b4212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ebf2f6-8b45-4ed8-945e-a7d0e3027dc9",
        "cursor": {
          "ref": "f107e409-5e3b-41d4-8b3c-62790d64221e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f90e8d7c-316d-48e5-9b7c-4ab28d591f24"
        },
        "item": {
          "id": "33ebf2f6-8b45-4ed8-945e-a7d0e3027dc9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ad3ff65b-cab0-44df-ad84-91a4cc9f87ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9aafef-3f4d-494f-9aab-bdafb7c0b278",
        "cursor": {
          "ref": "2367b48e-049e-402e-b744-374196c2cc76",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e36567a2-178b-4bb1-896d-51f7f9a44f07"
        },
        "item": {
          "id": "2a9aafef-3f4d-494f-9aab-bdafb7c0b278",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "038c6f1b-5791-4fa0-a094-aa1330532f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cc4e31-a8ec-4d34-8b0b-268ccebfb578",
        "cursor": {
          "ref": "ab5b4c5a-4686-4a9e-9ab0-299d1a5bc337",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "feefd5ab-9ced-4439-8ce6-3d9077304b4b"
        },
        "item": {
          "id": "12cc4e31-a8ec-4d34-8b0b-268ccebfb578",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0d0b6a82-a7ce-4db2-85e9-763d72dac316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84834c8-5144-4a91-9f2d-53e606043b61",
        "cursor": {
          "ref": "a27d4252-9759-4983-994e-0d3607b3ac0c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fbf372a0-d602-444c-9ce0-54010a76e06b"
        },
        "item": {
          "id": "b84834c8-5144-4a91-9f2d-53e606043b61",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a9e0d0a-4c35-43f8-977b-1828c67a4633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94d010b-a9ee-470c-8e00-992550c63365",
        "cursor": {
          "ref": "b298c417-7067-4fea-908a-1fcf458b50d2",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0e734c27-62bd-4bf0-8089-fa96a2494d70"
        },
        "item": {
          "id": "a94d010b-a9ee-470c-8e00-992550c63365",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3d3131aa-833c-4a0b-86e9-58d060004e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc782b97-4e5c-4414-a2dc-5ff6ec782470",
        "cursor": {
          "ref": "80959364-3fb3-447d-b027-d708bdcb9e5b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "57246d95-e271-4939-a158-e7d88826f0ca"
        },
        "item": {
          "id": "bc782b97-4e5c-4414-a2dc-5ff6ec782470",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ddfd5c06-adb1-4c89-b509-5fb6942af9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cde5643-5148-4d15-aa17-9a6333bf96f6",
        "cursor": {
          "ref": "509394ab-3068-4004-883a-b2bfbe48b6e3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b7f9a7a5-6496-42b2-b88f-7b2b8dc6442f"
        },
        "item": {
          "id": "1cde5643-5148-4d15-aa17-9a6333bf96f6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3bae52c5-52dc-454c-8b9e-efff91a05114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d042adb-706e-4dd8-bcd9-4895fe4f46a5",
        "cursor": {
          "ref": "dea359cc-d4ed-405e-a5de-3364b53a5371",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "82ccd86f-54e8-4fad-aee8-56b4622bf099"
        },
        "item": {
          "id": "3d042adb-706e-4dd8-bcd9-4895fe4f46a5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0f5bc835-4861-442a-b990-93b1ad24c148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b69a67-2f69-4050-b6a6-13c4b332664c",
        "cursor": {
          "ref": "decc6090-d296-4387-b3b4-5fb25aec0bf7",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a82a9f88-3047-45ca-a38a-c8e244afbb8c"
        },
        "item": {
          "id": "01b69a67-2f69-4050-b6a6-13c4b332664c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "add68cb8-36b8-4e2c-b931-925c2fc5c806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6affed-4f4d-4b2c-9701-9b120ac96b76",
        "cursor": {
          "ref": "01b9f506-bdf3-42ef-8852-ba874ec70d77",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7cc2bd09-0f02-4ff9-8967-8c7b925ac16e"
        },
        "item": {
          "id": "2b6affed-4f4d-4b2c-9701-9b120ac96b76",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2ab6a4c8-bf31-426c-a6de-d48595f01319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04f28bc-0d8c-4c6d-8d7f-26643fb12cee",
        "cursor": {
          "ref": "d08ddafe-34b1-42ec-9f1f-6041a7894de1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a0981aca-ba99-485b-ae6d-b7aca19a4046"
        },
        "item": {
          "id": "f04f28bc-0d8c-4c6d-8d7f-26643fb12cee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "70f49bb9-8abf-4c08-8d88-daaca840f3d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d26ab6-9066-4aef-a0da-8dd3df33ee9a",
        "cursor": {
          "ref": "23d0de7c-b78f-4bf1-b29a-31ce85973673",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8ed9c612-5d30-4d94-8629-52f1594de094"
        },
        "item": {
          "id": "49d26ab6-9066-4aef-a0da-8dd3df33ee9a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "162cef60-d190-47e1-a53a-fe662a1905d9",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9a8611aa-6ae4-4107-9a06-b23a9a3fc1e1",
        "cursor": {
          "ref": "30baab41-2ef8-43b5-aaf1-1324dc79e8f9",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "faf7433e-5155-4ca5-9718-29027ad3dc6f"
        },
        "item": {
          "id": "9a8611aa-6ae4-4107-9a06-b23a9a3fc1e1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5507e07f-e710-4870-b421-3896562c1cbc",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f17517-d740-45f5-8ea8-6c4bb0f6cb1a",
        "cursor": {
          "ref": "548b0466-9a3d-4b96-83fe-0f6e66deae14",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0af4546e-161b-4066-b15d-b38fdb850dfc"
        },
        "item": {
          "id": "81f17517-d740-45f5-8ea8-6c4bb0f6cb1a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "36f21b72-47bd-4e91-b50a-2956684a84aa",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "186c0026-4dd2-4839-ad31-031edd59b6bf",
        "cursor": {
          "ref": "11b6a4e9-18f8-473d-ba1f-bd3a51339a3c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ee20c7ac-bec3-4c3f-9f30-1a6a0428ce23"
        },
        "item": {
          "id": "186c0026-4dd2-4839-ad31-031edd59b6bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c72a02f4-765e-47e2-8e72-79ff62566495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186c0026-4dd2-4839-ad31-031edd59b6bf",
        "cursor": {
          "ref": "11b6a4e9-18f8-473d-ba1f-bd3a51339a3c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ee20c7ac-bec3-4c3f-9f30-1a6a0428ce23"
        },
        "item": {
          "id": "186c0026-4dd2-4839-ad31-031edd59b6bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c72a02f4-765e-47e2-8e72-79ff62566495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1165e8b1-db46-45aa-b810-7d69c6fa8784",
        "cursor": {
          "ref": "d13442a4-621f-4e7f-85b9-e8a0710f42b2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6c4820d7-c339-4c6a-a2b9-0c6f232f2c88"
        },
        "item": {
          "id": "1165e8b1-db46-45aa-b810-7d69c6fa8784",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1407a278-ced2-4d40-9872-0eed48f0b343",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525eab58-44a6-42d4-9d99-5930e62428ed",
        "cursor": {
          "ref": "4ec23ca6-f848-4d11-a647-1b5d57c53fd7",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ea399760-34d7-43c8-b210-0239a4e43f6f"
        },
        "item": {
          "id": "525eab58-44a6-42d4-9d99-5930e62428ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c9113af6-2005-4506-8b4f-76fdd300ae34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}